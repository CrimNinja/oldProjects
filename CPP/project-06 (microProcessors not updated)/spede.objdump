
spede:     file format elf32-littlearm


Disassembly of section .text:

00100000 <__cs3_interrupt_vector>:
  100000:	e59ff018 	ldr	pc, [pc, #24]	; 100020 <__cs3_region_init_ram+0x20>
  100004:	e59ff018 	ldr	pc, [pc, #24]	; 100024 <__cs3_region_init_ram+0x24>
  100008:	e59ff018 	ldr	pc, [pc, #24]	; 100028 <__cs3_region_init_ram+0x28>
  10000c:	e59ff018 	ldr	pc, [pc, #24]	; 10002c <__cs3_region_init_ram+0x2c>
  100010:	e59ff018 	ldr	pc, [pc, #24]	; 100030 <__cs3_region_init_ram+0x30>
  100014:	e59ff018 	ldr	pc, [pc, #24]	; 100034 <__cs3_region_init_ram+0x34>
  100018:	e59ff018 	ldr	pc, [pc, #24]	; 100038 <__cs3_region_init_ram+0x38>
  10001c:	e59ff018 	ldr	pc, [pc, #24]	; 10003c <__cs3_region_init_ram+0x3c>
  100020:	00100040 	andseq	r0, r0, r0, asr #32
  100024:	00116c30 	andseq	r6, r1, r0, lsr ip
  100028:	00116c34 	andseq	r6, r1, r4, lsr ip
  10002c:	00116c38 	andseq	r6, r1, r8, lsr ip
  100030:	00116c3c 	andseq	r6, r1, ip, lsr ip
  100034:	00116c2c 	andseq	r6, r1, ip, lsr #24
  100038:	0010c7d4 			; <UNDEFINED> instruction: 0x0010c7d4
  10003c:	00116c40 	andseq	r6, r1, r0, asr #24

00100040 <__cs3_reset>:
  100040:	ea000022 	b	1000d0 <_start>

00100044 <__cs3_start_c>:
  100044:	e3008002 	movw	r8, #2
  100048:	e92d4080 	push	{r7, lr}
  10004c:	e3408000 	movt	r8, #0
  100050:	e3580000 	cmp	r8, #0
  100054:	0a00001c 	beq	1000cc <__cs3_start_c+0x88>
  100058:	e307e258 	movw	lr, #29272	; 0x7258
  10005c:	e2488001 	sub	r8, r8, #1
  100060:	e3a04000 	mov	r4, #0
  100064:	e3a05000 	mov	r5, #0
  100068:	e340e011 	movt	lr, #17
  10006c:	e99e1005 	ldmib	lr, {r0, r2, ip}
  100070:	e1500002 	cmp	r0, r2
  100074:	0082200c 	addeq	r2, r2, ip
  100078:	0a000007 	beq	10009c <__cs3_start_c+0x58>
  10007c:	e35c0000 	cmp	ip, #0
  100080:	0a000005 	beq	10009c <__cs3_start_c+0x58>
  100084:	e1a03000 	mov	r3, r0
  100088:	e0c360d8 	ldrd	r6, [r3], #8
  10008c:	e0601003 	rsb	r1, r0, r3
  100090:	e0c260f8 	strd	r6, [r2], #8
  100094:	e15c0001 	cmp	ip, r1
  100098:	1afffffa 	bne	100088 <__cs3_start_c+0x44>
  10009c:	e59e0010 	ldr	r0, [lr, #16]
  1000a0:	e3500000 	cmp	r0, #0
  1000a4:	11a03002 	movne	r3, r2
  1000a8:	0a000003 	beq	1000bc <__cs3_start_c+0x78>
  1000ac:	e0c340f8 	strd	r4, [r3], #8
  1000b0:	e0621003 	rsb	r1, r2, r3
  1000b4:	e1500001 	cmp	r0, r1
  1000b8:	1afffffb 	bne	1000ac <__cs3_start_c+0x68>
  1000bc:	e2488001 	sub	r8, r8, #1
  1000c0:	e28ee014 	add	lr, lr, #20
  1000c4:	e3780001 	cmn	r8, #1
  1000c8:	1affffe7 	bne	10006c <__cs3_start_c+0x28>
  1000cc:	eb0058c6 	bl	1163ec <__cs3_premain>

001000d0 <_start>:
  1000d0:	e51fd000 	ldr	sp, [pc, #-0]	; 1000d8 <_start+0x8>
  1000d4:	eaffffda 	b	100044 <__cs3_start_c>
  1000d8:	40000000 	andmi	r0, r0, r0

001000dc <deregister_tm_clones>:
  1000dc:	e59f3024 	ldr	r3, [pc, #36]	; 100108 <deregister_tm_clones+0x2c>
  1000e0:	e3070c58 	movw	r0, #31832	; 0x7c58
  1000e4:	e3400011 	movt	r0, #17
  1000e8:	e0603003 	rsb	r3, r0, r3
  1000ec:	e3530006 	cmp	r3, #6
  1000f0:	912fff1e 	bxls	lr
  1000f4:	e3003000 	movw	r3, #0
  1000f8:	e3403000 	movt	r3, #0
  1000fc:	e3530000 	cmp	r3, #0
  100100:	012fff1e 	bxeq	lr
  100104:	e12fff13 	bx	r3
  100108:	00117c5b 	andseq	r7, r1, fp, asr ip

0010010c <register_tm_clones>:
  10010c:	e3073c58 	movw	r3, #31832	; 0x7c58
  100110:	e3070c58 	movw	r0, #31832	; 0x7c58
  100114:	e3403011 	movt	r3, #17
  100118:	e3400011 	movt	r0, #17
  10011c:	e0601003 	rsb	r1, r0, r3
  100120:	e1a01141 	asr	r1, r1, #2
  100124:	e0811fa1 	add	r1, r1, r1, lsr #31
  100128:	e1b010c1 	asrs	r1, r1, #1
  10012c:	012fff1e 	bxeq	lr
  100130:	e3003000 	movw	r3, #0
  100134:	e3403000 	movt	r3, #0
  100138:	e3530000 	cmp	r3, #0
  10013c:	012fff1e 	bxeq	lr
  100140:	e12fff13 	bx	r3

00100144 <__do_global_dtors_aux>:
  100144:	e92d4010 	push	{r4, lr}
  100148:	e3074c60 	movw	r4, #31840	; 0x7c60
  10014c:	e3404011 	movt	r4, #17
  100150:	e5d43000 	ldrb	r3, [r4]
  100154:	e3530000 	cmp	r3, #0
  100158:	18bd8010 	popne	{r4, pc}
  10015c:	ebffffde 	bl	1000dc <deregister_tm_clones>
  100160:	e3003000 	movw	r3, #0
  100164:	e3403000 	movt	r3, #0
  100168:	e3530000 	cmp	r3, #0
  10016c:	0a000002 	beq	10017c <__do_global_dtors_aux+0x38>
  100170:	e3060cc8 	movw	r0, #27848	; 0x6cc8
  100174:	e3400011 	movt	r0, #17
  100178:	e320f000 	nop	{0}
  10017c:	e3a03001 	mov	r3, #1
  100180:	e5c43000 	strb	r3, [r4]
  100184:	e8bd8010 	pop	{r4, pc}

00100188 <frame_dummy>:
  100188:	e3003000 	movw	r3, #0
  10018c:	e92d4010 	push	{r4, lr}
  100190:	e3403000 	movt	r3, #0
  100194:	e3530000 	cmp	r3, #0
  100198:	0a000004 	beq	1001b0 <frame_dummy+0x28>
  10019c:	e3071c64 	movw	r1, #31844	; 0x7c64
  1001a0:	e3060cc8 	movw	r0, #27848	; 0x6cc8
  1001a4:	e3401011 	movt	r1, #17
  1001a8:	e3400011 	movt	r0, #17
  1001ac:	e320f000 	nop	{0}
  1001b0:	e3070280 	movw	r0, #29312	; 0x7280
  1001b4:	e3400011 	movt	r0, #17
  1001b8:	e5903000 	ldr	r3, [r0]
  1001bc:	e3530000 	cmp	r3, #0
  1001c0:	1a000001 	bne	1001cc <frame_dummy+0x44>
  1001c4:	e8bd4010 	pop	{r4, lr}
  1001c8:	eaffffcf 	b	10010c <register_tm_clones>
  1001cc:	e3003000 	movw	r3, #0
  1001d0:	e3403000 	movt	r3, #0
  1001d4:	e3530000 	cmp	r3, #0
  1001d8:	0afffff9 	beq	1001c4 <frame_dummy+0x3c>
  1001dc:	e12fff33 	blx	r3
  1001e0:	eafffff7 	b	1001c4 <frame_dummy+0x3c>

001001e4 <tie_periphbase_init>:
//  PERIPHBASE variable will contain the private memory region address
//  after function init_peripheral_base() is called.
//  For more info see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0407i/CACCJFCJ.html
unsigned int PERIPHBASE = 0;

void tie_periphbase_init(void){
  1001e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1001e8:	e28db000 	add	fp, sp, #0
  1001ec:	e24dd00c 	sub	sp, sp, #12
    unsigned int base = 0;
  1001f0:	e3a03000 	mov	r3, #0
  1001f4:	e50b3008 	str	r3, [fp, #-8]
    __asm("MRC p15, 4, %0, c15, c0, 0" : "=r" (base));
  1001f8:	ee9f3f10 	mrc	15, 4, r3, cr15, cr0, {0}
  1001fc:	e50b3008 	str	r3, [fp, #-8]
    PERIPHBASE = base;
  100200:	e3073c88 	movw	r3, #31880	; 0x7c88
  100204:	e3403011 	movt	r3, #17
  100208:	e51b2008 	ldr	r2, [fp, #-8]
  10020c:	e5832000 	str	r2, [r3]
    // For more info, you may see
    //  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/CIHEEIDJ.html
    // and
    //  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0388i/CIHDHFBH.html
}
  100210:	e1a00000 	nop			; (mov r0, r0)
  100214:	e24bd000 	sub	sp, fp, #0
  100218:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10021c:	e12fff1e 	bx	lr

00100220 <isr_callback>:
// This defines how the IRQ is triggered, either level or edge
// Set this value either ALT_INT_TRIGGER_LEVEL or ALT_INT_TRIGGER_EDGE
#define ISR_TRIGGER_TO ALT_INT_TRIGGER_LEVEL

// ISR callback
void isr_callback(uint32_t icciar, void* context){
  100220:	e92d4800 	push	{fp, lr}
  100224:	e28db004 	add	fp, sp, #4
  100228:	e24dd008 	sub	sp, sp, #8
  10022c:	e50b0008 	str	r0, [fp, #-8]
  100230:	e50b100c 	str	r1, [fp, #-12]

	++intCheck;
  100234:	e3073c84 	movw	r3, #31876	; 0x7c84
  100238:	e3403011 	movt	r3, #17
  10023c:	e5933000 	ldr	r3, [r3]
  100240:	e2832001 	add	r2, r3, #1
  100244:	e3073c84 	movw	r3, #31876	; 0x7c84
  100248:	e3403011 	movt	r3, #17
  10024c:	e5832000 	str	r2, [r3]
	randomLight();
  100250:	eb000009 	bl	10027c <randomLight>
	printf("interrupted %d time(s)\n", intCheck);
  100254:	e3073c84 	movw	r3, #31876	; 0x7c84
  100258:	e3403011 	movt	r3, #17
  10025c:	e5933000 	ldr	r3, [r3]
  100260:	e1a01003 	mov	r1, r3
  100264:	e3060cd8 	movw	r0, #27864	; 0x6cd8
  100268:	e3400011 	movt	r0, #17
  10026c:	eb003282 	bl	10cc7c <printf>
	// *timerInterrupt = 1;

}
  100270:	e1a00000 	nop			; (mov r0, r0)
  100274:	e24bd004 	sub	sp, fp, #4
  100278:	e8bd8800 	pop	{fp, pc}

0010027c <randomLight>:
// <<<<

void randomLight() {
  10027c:	e92d4800 	push	{fp, lr}
  100280:	e28db004 	add	fp, sp, #4
  100284:	e24dd008 	sub	sp, sp, #8
    unsigned int randNum = rand() % 4;
  100288:	eb0032d8 	bl	10cdf0 <rand>
  10028c:	e1a02000 	mov	r2, r0
  100290:	e1a03fc2 	asr	r3, r2, #31
  100294:	e1a03f23 	lsr	r3, r3, #30
  100298:	e0822003 	add	r2, r2, r3
  10029c:	e2022003 	and	r2, r2, #3
  1002a0:	e0633002 	rsb	r3, r3, r2
  1002a4:	e50b3008 	str	r3, [fp, #-8]
    // unsigned int current = *buttonW;
    switch (randNum) {
  1002a8:	e51b3008 	ldr	r3, [fp, #-8]
  1002ac:	e3530003 	cmp	r3, #3
  1002b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1002b4:	ea00000f 	b	1002f8 <randomLight+0x7c>
  1002b8:	001002c8 	andseq	r0, r0, r8, asr #5
  1002bc:	001002d4 			; <UNDEFINED> instruction: 0x001002d4
  1002c0:	001002e0 	andseq	r0, r0, r0, ror #5
  1002c4:	001002ec 	andseq	r0, r0, ip, ror #5
    case 0:
        randNum = 1;
  1002c8:	e3a03001 	mov	r3, #1
  1002cc:	e50b3008 	str	r3, [fp, #-8]
        break;
  1002d0:	ea00000d 	b	10030c <randomLight+0x90>
    case 1:
    	randNum = 2;
  1002d4:	e3a03002 	mov	r3, #2
  1002d8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1002dc:	ea00000a 	b	10030c <randomLight+0x90>
    case 2:
    	randNum = 4;
  1002e0:	e3a03004 	mov	r3, #4
  1002e4:	e50b3008 	str	r3, [fp, #-8]
        break;
  1002e8:	ea000007 	b	10030c <randomLight+0x90>
    case 3:
    	randNum = 8;
  1002ec:	e3a03008 	mov	r3, #8
  1002f0:	e50b3008 	str	r3, [fp, #-8]
        break;
  1002f4:	ea000004 	b	10030c <randomLight+0x90>
    default:
        randomLight();
  1002f8:	ebffffdf 	bl	10027c <randomLight>
        printf("defaulted\n");
  1002fc:	e3060cf0 	movw	r0, #27888	; 0x6cf0
  100300:	e3400011 	movt	r0, #17
  100304:	eb0032ac 	bl	10cdbc <puts>
        break;
  100308:	e1a00000 	nop			; (mov r0, r0)
    }

    if (randNum == *buttonW) {
  10030c:	e307328c 	movw	r3, #29324	; 0x728c
  100310:	e3403011 	movt	r3, #17
  100314:	e5933000 	ldr	r3, [r3]
  100318:	e5932000 	ldr	r2, [r3]
  10031c:	e51b3008 	ldr	r3, [fp, #-8]
  100320:	e1520003 	cmp	r2, r3
  100324:	1a000001 	bne	100330 <randomLight+0xb4>
    	randomLight();
  100328:	ebffffd3 	bl	10027c <randomLight>
    } else {
    	*buttonW = randNum;
    }
}
  10032c:	ea000004 	b	100344 <randomLight+0xc8>
    }

    if (randNum == *buttonW) {
    	randomLight();
    } else {
    	*buttonW = randNum;
  100330:	e307328c 	movw	r3, #29324	; 0x728c
  100334:	e3403011 	movt	r3, #17
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e51b2008 	ldr	r2, [fp, #-8]
  100340:	e5832000 	str	r2, [r3]
    }
}
  100344:	e1a00000 	nop			; (mov r0, r0)
  100348:	e24bd004 	sub	sp, fp, #4
  10034c:	e8bd8800 	pop	{fp, pc}

00100350 <checkButton>:

bool checkButton() {
  100350:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100354:	e28db000 	add	fp, sp, #0
    return *button == *buttonW;
  100358:	e3073288 	movw	r3, #29320	; 0x7288
  10035c:	e3403011 	movt	r3, #17
  100360:	e5933000 	ldr	r3, [r3]
  100364:	e5932000 	ldr	r2, [r3]
  100368:	e307328c 	movw	r3, #29324	; 0x728c
  10036c:	e3403011 	movt	r3, #17
  100370:	e5933000 	ldr	r3, [r3]
  100374:	e5933000 	ldr	r3, [r3]
  100378:	e1520003 	cmp	r2, r3
  10037c:	03a03001 	moveq	r3, #1
  100380:	13a03000 	movne	r3, #0
  100384:	e6ef3073 	uxtb	r3, r3
}
  100388:	e1a00003 	mov	r0, r3
  10038c:	e24bd000 	sub	sp, fp, #0
  100390:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100394:	e12fff1e 	bx	lr

00100398 <buttonRelease>:

void buttonRelease() {
  100398:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10039c:	e28db000 	add	fp, sp, #0
    while (*button != 0) {
  1003a0:	e1a00000 	nop			; (mov r0, r0)
  1003a4:	e3073288 	movw	r3, #29320	; 0x7288
  1003a8:	e3403011 	movt	r3, #17
  1003ac:	e5933000 	ldr	r3, [r3]
  1003b0:	e5933000 	ldr	r3, [r3]
  1003b4:	e3530000 	cmp	r3, #0
  1003b8:	1afffff9 	bne	1003a4 <buttonRelease+0xc>

    }
}
  1003bc:	e1a00000 	nop			; (mov r0, r0)
  1003c0:	e24bd000 	sub	sp, fp, #0
  1003c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1003c8:	e12fff1e 	bx	lr

001003cc <dispNumSupp>:

unsigned int dispNumSupp (unsigned int n, unsigned int order) {
  1003cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1003d0:	e28db000 	add	fp, sp, #0
  1003d4:	e24dd014 	sub	sp, sp, #20
  1003d8:	e50b0010 	str	r0, [fp, #-16]
  1003dc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    unsigned int output = 0;
  1003e0:	e3a03000 	mov	r3, #0
  1003e4:	e50b3008 	str	r3, [fp, #-8]
    switch (order) {
  1003e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003ec:	e3530003 	cmp	r3, #3
  1003f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1003f4:	ea00005e 	b	100574 <dispNumSupp+0x1a8>
  1003f8:	00100408 	andseq	r0, r0, r8, lsl #8
  1003fc:	00100434 	andseq	r0, r0, r4, lsr r4
  100400:	001004a4 	andseq	r0, r0, r4, lsr #9
  100404:	00100520 	andseq	r0, r0, r0, lsr #10
    case 0:
        output = n % 10;
  100408:	e51b1010 	ldr	r1, [fp, #-16]
  10040c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  100410:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  100414:	e0832391 	umull	r2, r3, r1, r3
  100418:	e1a031a3 	lsr	r3, r3, #3
  10041c:	e1a03083 	lsl	r3, r3, #1
  100420:	e1a02103 	lsl	r2, r3, #2
  100424:	e0833002 	add	r3, r3, r2
  100428:	e0633001 	rsb	r3, r3, r1
  10042c:	e50b3008 	str	r3, [fp, #-8]
        break;
  100430:	ea00004f 	b	100574 <dispNumSupp+0x1a8>
    case 1:
        output = ((n % 100) - (n % 10)) / 10;
  100434:	e51b1010 	ldr	r1, [fp, #-16]
  100438:	e308351f 	movw	r3, #34079	; 0x851f
  10043c:	e34531eb 	movt	r3, #20971	; 0x51eb
  100440:	e0832391 	umull	r2, r3, r1, r3
  100444:	e1a022a3 	lsr	r2, r3, #5
  100448:	e1a03002 	mov	r3, r2
  10044c:	e1a03103 	lsl	r3, r3, #2
  100450:	e1a02103 	lsl	r2, r3, #2
  100454:	e0833002 	add	r3, r3, r2
  100458:	e1a02103 	lsl	r2, r3, #2
  10045c:	e0833002 	add	r3, r3, r2
  100460:	e0632001 	rsb	r2, r3, r1
  100464:	e51bc010 	ldr	ip, [fp, #-16]
  100468:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  10046c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  100470:	e081039c 	umull	r0, r1, ip, r3
  100474:	e1a031a1 	lsr	r3, r1, #3
  100478:	e1a03083 	lsl	r3, r3, #1
  10047c:	e1a01103 	lsl	r1, r3, #2
  100480:	e0833001 	add	r3, r3, r1
  100484:	e063300c 	rsb	r3, r3, ip
  100488:	e0632002 	rsb	r2, r3, r2
  10048c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  100490:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  100494:	e0832392 	umull	r2, r3, r2, r3
  100498:	e1a031a3 	lsr	r3, r3, #3
  10049c:	e50b3008 	str	r3, [fp, #-8]
        break;
  1004a0:	ea000033 	b	100574 <dispNumSupp+0x1a8>
    case 2:
        output = ((n % 1000) - (n % 100)) / 100;
  1004a4:	e51b0010 	ldr	r0, [fp, #-16]
  1004a8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1004ac:	e3413062 	movt	r3, #4194	; 0x1062
  1004b0:	e0832390 	umull	r2, r3, r0, r3
  1004b4:	e1a02323 	lsr	r2, r3, #6
  1004b8:	e1a01002 	mov	r1, r2
  1004bc:	e1a03101 	lsl	r3, r1, #2
  1004c0:	e1a01003 	mov	r1, r3
  1004c4:	e1a03281 	lsl	r3, r1, #5
  1004c8:	e0613003 	rsb	r3, r1, r3
  1004cc:	e0833002 	add	r3, r3, r2
  1004d0:	e1a03183 	lsl	r3, r3, #3
  1004d4:	e0632000 	rsb	r2, r3, r0
  1004d8:	e51bc010 	ldr	ip, [fp, #-16]
  1004dc:	e308351f 	movw	r3, #34079	; 0x851f
  1004e0:	e34531eb 	movt	r3, #20971	; 0x51eb
  1004e4:	e081039c 	umull	r0, r1, ip, r3
  1004e8:	e1a032a1 	lsr	r3, r1, #5
  1004ec:	e1a03103 	lsl	r3, r3, #2
  1004f0:	e1a01103 	lsl	r1, r3, #2
  1004f4:	e0833001 	add	r3, r3, r1
  1004f8:	e1a01103 	lsl	r1, r3, #2
  1004fc:	e0833001 	add	r3, r3, r1
  100500:	e063300c 	rsb	r3, r3, ip
  100504:	e0632002 	rsb	r2, r3, r2
  100508:	e308351f 	movw	r3, #34079	; 0x851f
  10050c:	e34531eb 	movt	r3, #20971	; 0x51eb
  100510:	e0832392 	umull	r2, r3, r2, r3
  100514:	e1a032a3 	lsr	r3, r3, #5
  100518:	e50b3008 	str	r3, [fp, #-8]
        break;
  10051c:	ea000014 	b	100574 <dispNumSupp+0x1a8>
    case 3:
        output = (n - (n % 1000)) / 1000;
  100520:	e51b0010 	ldr	r0, [fp, #-16]
  100524:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  100528:	e3413062 	movt	r3, #4194	; 0x1062
  10052c:	e0832390 	umull	r2, r3, r0, r3
  100530:	e1a02323 	lsr	r2, r3, #6
  100534:	e1a01002 	mov	r1, r2
  100538:	e1a03101 	lsl	r3, r1, #2
  10053c:	e1a01003 	mov	r1, r3
  100540:	e1a03281 	lsl	r3, r1, #5
  100544:	e0613003 	rsb	r3, r1, r3
  100548:	e0833002 	add	r3, r3, r2
  10054c:	e1a03183 	lsl	r3, r3, #3
  100550:	e0632000 	rsb	r2, r3, r0
  100554:	e51b3010 	ldr	r3, [fp, #-16]
  100558:	e0622003 	rsb	r2, r2, r3
  10055c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  100560:	e3413062 	movt	r3, #4194	; 0x1062
  100564:	e0832392 	umull	r2, r3, r2, r3
  100568:	e1a03323 	lsr	r3, r3, #6
  10056c:	e50b3008 	str	r3, [fp, #-8]
        break;
  100570:	e1a00000 	nop			; (mov r0, r0)
    }
    return output;
  100574:	e51b3008 	ldr	r3, [fp, #-8]
}
  100578:	e1a00003 	mov	r0, r3
  10057c:	e24bd000 	sub	sp, fp, #0
  100580:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100584:	e12fff1e 	bx	lr

00100588 <dispNum>:

uint32_t dispNum(unsigned int n) {
  100588:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10058c:	e28db000 	add	fp, sp, #0
  100590:	e24dd014 	sub	sp, sp, #20
  100594:	e50b0010 	str	r0, [fp, #-16]
    uint32_t output = 63;
  100598:	e3a0303f 	mov	r3, #63	; 0x3f
  10059c:	e50b3008 	str	r3, [fp, #-8]
    switch (n) {
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e3530009 	cmp	r3, #9
  1005a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1005ac:	ea000027 	b	100650 <dispNum+0xc8>
  1005b0:	001005d8 			; <UNDEFINED> instruction: 0x001005d8
  1005b4:	001005e4 	andseq	r0, r0, r4, ror #11
  1005b8:	001005f0 			; <UNDEFINED> instruction: 0x001005f0
  1005bc:	001005fc 			; <UNDEFINED> instruction: 0x001005fc
  1005c0:	00100608 	andseq	r0, r0, r8, lsl #12
  1005c4:	00100614 	andseq	r0, r0, r4, lsl r6
  1005c8:	00100620 	andseq	r0, r0, r0, lsr #12
  1005cc:	0010062c 	andseq	r0, r0, ip, lsr #12
  1005d0:	00100638 	andseq	r0, r0, r8, lsr r6
  1005d4:	00100644 	andseq	r0, r0, r4, asr #12
    case 0:
        output = 63;
  1005d8:	e3a0303f 	mov	r3, #63	; 0x3f
  1005dc:	e50b3008 	str	r3, [fp, #-8]
        break;
  1005e0:	ea00001a 	b	100650 <dispNum+0xc8>
    case 1:
        output = 6;
  1005e4:	e3a03006 	mov	r3, #6
  1005e8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1005ec:	ea000017 	b	100650 <dispNum+0xc8>
    case 2:
        output = 91;
  1005f0:	e3a0305b 	mov	r3, #91	; 0x5b
  1005f4:	e50b3008 	str	r3, [fp, #-8]
        break;
  1005f8:	ea000014 	b	100650 <dispNum+0xc8>
    case 3:
        output = 79;
  1005fc:	e3a0304f 	mov	r3, #79	; 0x4f
  100600:	e50b3008 	str	r3, [fp, #-8]
        break;
  100604:	ea000011 	b	100650 <dispNum+0xc8>
    case 4:
        output = 102;
  100608:	e3a03066 	mov	r3, #102	; 0x66
  10060c:	e50b3008 	str	r3, [fp, #-8]
        break;
  100610:	ea00000e 	b	100650 <dispNum+0xc8>
    case 5:
        output = 109;
  100614:	e3a0306d 	mov	r3, #109	; 0x6d
  100618:	e50b3008 	str	r3, [fp, #-8]
        break;
  10061c:	ea00000b 	b	100650 <dispNum+0xc8>
    case 6:
        output = 125;
  100620:	e3a0307d 	mov	r3, #125	; 0x7d
  100624:	e50b3008 	str	r3, [fp, #-8]
        break;
  100628:	ea000008 	b	100650 <dispNum+0xc8>
    case 7:
        output = 7;
  10062c:	e3a03007 	mov	r3, #7
  100630:	e50b3008 	str	r3, [fp, #-8]
        break;
  100634:	ea000005 	b	100650 <dispNum+0xc8>
    case 8:
        output = 127;
  100638:	e3a0307f 	mov	r3, #127	; 0x7f
  10063c:	e50b3008 	str	r3, [fp, #-8]
        break;
  100640:	ea000002 	b	100650 <dispNum+0xc8>
    case 9:
        output = 111;
  100644:	e3a0306f 	mov	r3, #111	; 0x6f
  100648:	e50b3008 	str	r3, [fp, #-8]
        break;
  10064c:	e1a00000 	nop			; (mov r0, r0)
    }
    return output;
  100650:	e51b3008 	ldr	r3, [fp, #-8]
}
  100654:	e1a00003 	mov	r0, r3
  100658:	e24bd000 	sub	sp, fp, #0
  10065c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100660:	e12fff1e 	bx	lr

00100664 <updateDisplay>:

void updateDisplay (unsigned int n) {
  100664:	e92d4810 	push	{r4, fp, lr}
  100668:	e28db008 	add	fp, sp, #8
  10066c:	e24dd00c 	sub	sp, sp, #12
  100670:	e50b0010 	str	r0, [fp, #-16]

    *segDispVal1 = dispNum (dispNumSupp (n, 0));
  100674:	e307329c 	movw	r3, #29340	; 0x729c
  100678:	e3403011 	movt	r3, #17
  10067c:	e5934000 	ldr	r4, [r3]
  100680:	e3a01000 	mov	r1, #0
  100684:	e51b0010 	ldr	r0, [fp, #-16]
  100688:	ebffff4f 	bl	1003cc <dispNumSupp>
  10068c:	e1a03000 	mov	r3, r0
  100690:	e1a00003 	mov	r0, r3
  100694:	ebffffbb 	bl	100588 <dispNum>
  100698:	e1a03000 	mov	r3, r0
  10069c:	e5843000 	str	r3, [r4]
    *segDispVal2 = dispNum (dispNumSupp (n, 1));
  1006a0:	e3073298 	movw	r3, #29336	; 0x7298
  1006a4:	e3403011 	movt	r3, #17
  1006a8:	e5934000 	ldr	r4, [r3]
  1006ac:	e3a01001 	mov	r1, #1
  1006b0:	e51b0010 	ldr	r0, [fp, #-16]
  1006b4:	ebffff44 	bl	1003cc <dispNumSupp>
  1006b8:	e1a03000 	mov	r3, r0
  1006bc:	e1a00003 	mov	r0, r3
  1006c0:	ebffffb0 	bl	100588 <dispNum>
  1006c4:	e1a03000 	mov	r3, r0
  1006c8:	e5843000 	str	r3, [r4]
    *segDispVal3 = dispNum (dispNumSupp (n, 2));
  1006cc:	e3073294 	movw	r3, #29332	; 0x7294
  1006d0:	e3403011 	movt	r3, #17
  1006d4:	e5934000 	ldr	r4, [r3]
  1006d8:	e3a01002 	mov	r1, #2
  1006dc:	e51b0010 	ldr	r0, [fp, #-16]
  1006e0:	ebffff39 	bl	1003cc <dispNumSupp>
  1006e4:	e1a03000 	mov	r3, r0
  1006e8:	e1a00003 	mov	r0, r3
  1006ec:	ebffffa5 	bl	100588 <dispNum>
  1006f0:	e1a03000 	mov	r3, r0
  1006f4:	e5843000 	str	r3, [r4]
    *segDispVal4 = dispNum (dispNumSupp (n, 3));
  1006f8:	e3073290 	movw	r3, #29328	; 0x7290
  1006fc:	e3403011 	movt	r3, #17
  100700:	e5934000 	ldr	r4, [r3]
  100704:	e3a01003 	mov	r1, #3
  100708:	e51b0010 	ldr	r0, [fp, #-16]
  10070c:	ebffff2e 	bl	1003cc <dispNumSupp>
  100710:	e1a03000 	mov	r3, r0
  100714:	e1a00003 	mov	r0, r3
  100718:	ebffff9a 	bl	100588 <dispNum>
  10071c:	e1a03000 	mov	r3, r0
  100720:	e5843000 	str	r3, [r4]

}
  100724:	e1a00000 	nop			; (mov r0, r0)
  100728:	e24bd008 	sub	sp, fp, #8
  10072c:	e8bd8810 	pop	{r4, fp, pc}

00100730 <gameUpdate>:

void gameUpdate() {
  100730:	e92d4800 	push	{fp, lr}
  100734:	e28db004 	add	fp, sp, #4
    if (checkButton()) {
  100738:	ebffff04 	bl	100350 <checkButton>
  10073c:	e1a03000 	mov	r3, r0
  100740:	e3530000 	cmp	r3, #0
  100744:	0a00000c 	beq	10077c <gameUpdate+0x4c>
        ++score;
  100748:	e3073c80 	movw	r3, #31872	; 0x7c80
  10074c:	e3403011 	movt	r3, #17
  100750:	e5933000 	ldr	r3, [r3]
  100754:	e2832001 	add	r2, r3, #1
  100758:	e3073c80 	movw	r3, #31872	; 0x7c80
  10075c:	e3403011 	movt	r3, #17
  100760:	e5832000 	str	r2, [r3]
        updateDisplay(score);
  100764:	e3073c80 	movw	r3, #31872	; 0x7c80
  100768:	e3403011 	movt	r3, #17
  10076c:	e5933000 	ldr	r3, [r3]
  100770:	e1a00003 	mov	r0, r3
  100774:	ebffffba 	bl	100664 <updateDisplay>
        --lives;
        if (lives == 0) {
            // end game here.
        }
    }
}
  100778:	ea000006 	b	100798 <gameUpdate+0x68>
void gameUpdate() {
    if (checkButton()) {
        ++score;
        updateDisplay(score);
    } else {
        --lives;
  10077c:	e30732ac 	movw	r3, #29356	; 0x72ac
  100780:	e3403011 	movt	r3, #17
  100784:	e5933000 	ldr	r3, [r3]
  100788:	e2432001 	sub	r2, r3, #1
  10078c:	e30732ac 	movw	r3, #29356	; 0x72ac
  100790:	e3403011 	movt	r3, #17
  100794:	e5832000 	str	r2, [r3]
        if (lives == 0) {
            // end game here.
        }
    }
}
  100798:	e1a00000 	nop			; (mov r0, r0)
  10079c:	e8bd8800 	pop	{fp, pc}

001007a0 <main>:

int main(int argc, char** argv)
{
  1007a0:	e92d4800 	push	{fp, lr}
  1007a4:	e28db004 	add	fp, sp, #4
  1007a8:	e24dd008 	sub	sp, sp, #8
  1007ac:	e50b0008 	str	r0, [fp, #-8]
  1007b0:	e50b100c 	str	r1, [fp, #-12]

    // ------------------------------------------------------
    // STUDENTS NOTE: Do not touch on the following lines >>>
    alt_int_global_init();
  1007b4:	eb0029d9 	bl	10af20 <alt_int_global_init>
    alt_int_cpu_init();
  1007b8:	eb002e4f 	bl	10c0fc <alt_int_cpu_init>
    alt_int_cpu_enable();
  1007bc:	eb002e83 	bl	10c1d0 <alt_int_cpu_enable>
    alt_int_global_enable();
  1007c0:	eb002a67 	bl	10b164 <alt_int_global_enable>
    tie_periphbase_init();
  1007c4:	ebfffe86 	bl	1001e4 <tie_periphbase_init>
    tie_ui_connection_init();
  1007c8:	eb000097 	bl	100a2c <tie_ui_connection_init>
    // <<<<
    // ------------------------------------------------------

    unsigned int temp;

    srand(time(NULL));
  1007cc:	e3a00000 	mov	r0, #0
  1007d0:	eb0031d1 	bl	10cf1c <time>
  1007d4:	e1a03000 	mov	r3, r0
  1007d8:	e1a00003 	mov	r0, r3
  1007dc:	eb00317c 	bl	10cdd4 <srand>
    //	unsigned int randnum = rand() % 10000;


    // STUDENT NOTE: uncomment these, when you are ready to take interrupt in to use
    // >>>>
    alt_int_isr_register(ISR_ID, &isr_callback, 0);
  1007e0:	e3a02000 	mov	r2, #0
  1007e4:	e3001220 	movw	r1, #544	; 0x220
  1007e8:	e3401010 	movt	r1, #16
  1007ec:	e3a0001d 	mov	r0, #29
  1007f0:	eb002faf 	bl	10c6b4 <alt_int_isr_register>
    alt_int_dist_trigger_set(ISR_ID, ISR_TRIGGER_TO);
  1007f4:	e3a01001 	mov	r1, #1
  1007f8:	e3a0001d 	mov	r0, #29
  1007fc:	eb002d57 	bl	10bd60 <alt_int_dist_trigger_set>
    alt_int_dist_target_set(ISR_ID, alt_int_util_cpu_current());
  100800:	eb002feb 	bl	10c7b4 <alt_int_util_cpu_current>
  100804:	e1a03000 	mov	r3, r0
  100808:	e1a01003 	mov	r1, r3
  10080c:	e3a0001d 	mov	r0, #29
  100810:	eb002cda 	bl	10bb80 <alt_int_dist_target_set>
    alt_int_dist_enable(ISR_ID);
  100814:	e3a0001d 	mov	r0, #29
  100818:	eb002b43 	bl	10b52c <alt_int_dist_enable>
    // *segDispVal1 = 127;
    // *segDispVal2 = 127;
    // *segDispVal3 = 127;
    // *segDispVal4 = 127;

    updateDisplay(8888);
  10081c:	e30202b8 	movw	r0, #8888	; 0x22b8
  100820:	ebffff8f 	bl	100664 <updateDisplay>
    *buttonW = 15;
  100824:	e307328c 	movw	r3, #29324	; 0x728c
  100828:	e3403011 	movt	r3, #17
  10082c:	e5933000 	ldr	r3, [r3]
  100830:	e3a0200f 	mov	r2, #15
  100834:	e5832000 	str	r2, [r3]

    printf("hello\n");
  100838:	e3060cfc 	movw	r0, #27900	; 0x6cfc
  10083c:	e3400011 	movt	r0, #17
  100840:	eb00315d 	bl	10cdbc <puts>
        *left_sDisp[6] = 0;
        *left_sDisp[7] = 0;*/

    // printf("green\n");

    while (*button == 0) {
  100844:	e1a00000 	nop			; (mov r0, r0)
  100848:	e3073288 	movw	r3, #29320	; 0x7288
  10084c:	e3403011 	movt	r3, #17
  100850:	e5933000 	ldr	r3, [r3]
  100854:	e5933000 	ldr	r3, [r3]
  100858:	e3530000 	cmp	r3, #0
  10085c:	0afffff9 	beq	100848 <main+0xa8>

    }

    buttonRelease();
  100860:	ebfffecc 	bl	100398 <buttonRelease>

    *timerLoad = 125000000;	// approximately 5 to 6s
  100864:	e30732a0 	movw	r3, #29344	; 0x72a0
  100868:	e3403011 	movt	r3, #17
  10086c:	e5932000 	ldr	r2, [r3]
  100870:	e3053940 	movw	r3, #22848	; 0x5940
  100874:	e3403773 	movt	r3, #1907	; 0x773
  100878:	e5823000 	str	r3, [r2]
    *timerControl = 7;
  10087c:	e30732a4 	movw	r3, #29348	; 0x72a4
  100880:	e3403011 	movt	r3, #17
  100884:	e5933000 	ldr	r3, [r3]
  100888:	e3a02007 	mov	r2, #7
  10088c:	e5832000 	str	r2, [r3]
    // *timerInterrupt = 1;

    printf("hello\n");
  100890:	e3060cfc 	movw	r0, #27900	; 0x6cfc
  100894:	e3400011 	movt	r0, #17
  100898:	eb003147 	bl	10cdbc <puts>

    /* *segDispVal1 = 63;
    *segDispVal2 = 63;
    *segDispVal3 = 63;
    *segDispVal4 = 63; */
    updateDisplay(0000);
  10089c:	e3a00000 	mov	r0, #0
  1008a0:	ebffff6f 	bl	100664 <updateDisplay>
    *buttonW = 0;
  1008a4:	e307328c 	movw	r3, #29324	; 0x728c
  1008a8:	e3403011 	movt	r3, #17
  1008ac:	e5933000 	ldr	r3, [r3]
  1008b0:	e3a02000 	mov	r2, #0
  1008b4:	e5832000 	str	r2, [r3]

    score = 0;
  1008b8:	e3073c80 	movw	r3, #31872	; 0x7c80
  1008bc:	e3403011 	movt	r3, #17
  1008c0:	e3a02000 	mov	r2, #0
  1008c4:	e5832000 	str	r2, [r3]
    lives = 5;
  1008c8:	e30732ac 	movw	r3, #29356	; 0x72ac
  1008cc:	e3403011 	movt	r3, #17
  1008d0:	e3a02005 	mov	r2, #5
  1008d4:	e5832000 	str	r2, [r3]
        /* *segDispVal1 = dispNum(dispNumSupp(randnum, 0));
                *segDispVal2 = dispNum(dispNumSupp(randnum, 1));
                *segDispVal3 = dispNum(dispNumSupp(randnum, 2));
                *segDispVal4 = dispNum(dispNumSupp(randnum, 3)); */

        switch (*button) {
  1008d8:	e3073288 	movw	r3, #29320	; 0x7288
  1008dc:	e3403011 	movt	r3, #17
  1008e0:	e5933000 	ldr	r3, [r3]
  1008e4:	e5933000 	ldr	r3, [r3]
  1008e8:	e2433001 	sub	r3, r3, #1
  1008ec:	e3530007 	cmp	r3, #7
  1008f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1008f4:	eafffff7 	b	1008d8 <main+0x138>
  1008f8:	00100918 	andseq	r0, r0, r8, lsl r9
  1008fc:	0010095c 	andseq	r0, r0, ip, asr r9
  100900:	001008d8 			; <UNDEFINED> instruction: 0x001008d8
  100904:	001009a0 	andseq	r0, r0, r0, lsr #19
  100908:	001008d8 			; <UNDEFINED> instruction: 0x001008d8
  10090c:	001008d8 			; <UNDEFINED> instruction: 0x001008d8
  100910:	001008d8 			; <UNDEFINED> instruction: 0x001008d8
  100914:	001009e4 	andseq	r0, r0, r4, ror #19
        case 1:
            printf("red\n");
  100918:	e3060d04 	movw	r0, #27908	; 0x6d04
  10091c:	e3400011 	movt	r0, #17
  100920:	eb003125 	bl	10cdbc <puts>
            ++n;
  100924:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  100928:	e3403011 	movt	r3, #17
  10092c:	e5933000 	ldr	r3, [r3]
  100930:	e2832001 	add	r2, r3, #1
  100934:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  100938:	e3403011 	movt	r3, #17
  10093c:	e5832000 	str	r2, [r3]
            buttonRelease();
  100940:	ebfffe94 	bl	100398 <buttonRelease>
            updateDisplay(n);
  100944:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  100948:	e3403011 	movt	r3, #17
  10094c:	e5933000 	ldr	r3, [r3]
  100950:	e1a00003 	mov	r0, r3
  100954:	ebffff42 	bl	100664 <updateDisplay>
            //			*segDispVal3 = dispNum (dispNumSupp (n, 2));
            //			*segDispVal4 = dispNum (dispNumSupp (n, 3));
//            while (*button != 0) {

//            }
            break;
  100958:	ea000032 	b	100a28 <main+0x288>
        case 2:
            printf("blue\n");
  10095c:	e3060d08 	movw	r0, #27912	; 0x6d08
  100960:	e3400011 	movt	r0, #17
  100964:	eb003114 	bl	10cdbc <puts>
            ++n;
  100968:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  10096c:	e3403011 	movt	r3, #17
  100970:	e5933000 	ldr	r3, [r3]
  100974:	e2832001 	add	r2, r3, #1
  100978:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  10097c:	e3403011 	movt	r3, #17
  100980:	e5832000 	str	r2, [r3]
            buttonRelease();
  100984:	ebfffe83 	bl	100398 <buttonRelease>
            updateDisplay(n);
  100988:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  10098c:	e3403011 	movt	r3, #17
  100990:	e5933000 	ldr	r3, [r3]
  100994:	e1a00003 	mov	r0, r3
  100998:	ebffff31 	bl	100664 <updateDisplay>
            //			*segDispVal3 = dispNum (dispNumSupp (n, 2));
            //			*segDispVal4 = dispNum (dispNumSupp (n, 3));
//            while (*button != 0) {

//            }
            break;
  10099c:	ea000021 	b	100a28 <main+0x288>
        case 4:
            printf("green\n");
  1009a0:	e3060d10 	movw	r0, #27920	; 0x6d10
  1009a4:	e3400011 	movt	r0, #17
  1009a8:	eb003103 	bl	10cdbc <puts>
            ++n;
  1009ac:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  1009b0:	e3403011 	movt	r3, #17
  1009b4:	e5933000 	ldr	r3, [r3]
  1009b8:	e2832001 	add	r2, r3, #1
  1009bc:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  1009c0:	e3403011 	movt	r3, #17
  1009c4:	e5832000 	str	r2, [r3]
            buttonRelease();
  1009c8:	ebfffe72 	bl	100398 <buttonRelease>
            updateDisplay(n);
  1009cc:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  1009d0:	e3403011 	movt	r3, #17
  1009d4:	e5933000 	ldr	r3, [r3]
  1009d8:	e1a00003 	mov	r0, r3
  1009dc:	ebffff20 	bl	100664 <updateDisplay>
            //			*segDispVal3 = dispNum (dispNumSupp (n, 2));
            //			*segDispVal4 = dispNum (dispNumSupp (n, 3));
//            while (*button != 0) {

//            }
            break;
  1009e0:	ea000010 	b	100a28 <main+0x288>
        case 8:
            printf("yellow\n");
  1009e4:	e3060d18 	movw	r0, #27928	; 0x6d18
  1009e8:	e3400011 	movt	r0, #17
  1009ec:	eb0030f2 	bl	10cdbc <puts>
            ++n;
  1009f0:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  1009f4:	e3403011 	movt	r3, #17
  1009f8:	e5933000 	ldr	r3, [r3]
  1009fc:	e2832001 	add	r2, r3, #1
  100a00:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  100a04:	e3403011 	movt	r3, #17
  100a08:	e5832000 	str	r2, [r3]
            buttonRelease();
  100a0c:	ebfffe61 	bl	100398 <buttonRelease>
            updateDisplay(n);
  100a10:	e3073c7c 	movw	r3, #31868	; 0x7c7c
  100a14:	e3403011 	movt	r3, #17
  100a18:	e5933000 	ldr	r3, [r3]
  100a1c:	e1a00003 	mov	r0, r3
  100a20:	ebffff0f 	bl	100664 <updateDisplay>
            //			*segDispVal3 = dispNum (dispNumSupp (n, 2));
            //			*segDispVal4 = dispNum (dispNumSupp (n, 3));
//            while (*button != 0) {

//            }
            break;
  100a24:	e1a00000 	nop			; (mov r0, r0)
        }


        // printf("%u\n\r", *button);

    }
  100a28:	eaffffaa 	b	1008d8 <main+0x138>

00100a2c <tie_ui_connection_init>:
#include "tie_ui_connection.h"

void tie_ui_connection_init(){
  100a2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100a30:	e28db000 	add	fp, sp, #0
	#define ALT_L3REGS_REMAP_ADDR (ALT_L3REGS_BASE_ADDR+ALT_L3REGS_REMAP_OFFSET)

	// initialize HPS2FPGA lightweight bridge

	// set LW to reset
	*((volatile unsigned int*)ALT_RSTMGR_BRGMODRST_ADDR) = *((volatile unsigned int*)ALT_RSTMGR_BRGMODRST_ADDR) | ALT_RSTMGR_BRGMODRST_LWH2F_SET_MSK;
  100a34:	e305301c 	movw	r3, #20508	; 0x501c
  100a38:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100a3c:	e305201c 	movw	r2, #20508	; 0x501c
  100a40:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  100a44:	e5922000 	ldr	r2, [r2]
  100a48:	e3822002 	orr	r2, r2, #2
  100a4c:	e5832000 	str	r2, [r3]

	// L4 MP clock should be checked here, but we cannot really do anything about it, so we will anycase fail

	// release LW from reset
	*((volatile unsigned int*)ALT_RSTMGR_BRGMODRST_ADDR) = *((volatile unsigned int*)ALT_RSTMGR_BRGMODRST_ADDR) & ~(ALT_RSTMGR_BRGMODRST_LWH2F_SET_MSK);
  100a50:	e305301c 	movw	r3, #20508	; 0x501c
  100a54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100a58:	e305201c 	movw	r2, #20508	; 0x501c
  100a5c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  100a60:	e5922000 	ldr	r2, [r2]
  100a64:	e3c22002 	bic	r2, r2, #2
  100a68:	e5832000 	str	r2, [r3]
	// bit[1] = 1 set On-chip RAM to address 0x0 for the non-MPU L3 masters
	// bit[2] = 0 N/A
	// bit[3] = 1 set HPS2FPGA AXI bridge visible
	// bit[4] = 1 set LW HPS2FPGA AXI bridge visible
	// -> 0x1A (0b00011010)
	*((volatile unsigned int*)ALT_L3REGS_REMAP_ADDR) = 0x0000001A;
  100a6c:	e3a03000 	mov	r3, #0
  100a70:	e34f3f80 	movt	r3, #65408	; 0xff80
  100a74:	e3a0201a 	mov	r2, #26
  100a78:	e5832000 	str	r2, [r3]
}
  100a7c:	e1a00000 	nop			; (mov r0, r0)
  100a80:	e24bd000 	sub	sp, fp, #0
  100a84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100a88:	e12fff1e 	bx	lr

00100a8c <null_printf>:

extern FILE *term1;



static __inline int null_printf(const char *format, ...){return 0;}
  100a8c:	e92d000f 	push	{r0, r1, r2, r3}
  100a90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100a94:	e28db000 	add	fp, sp, #0
  100a98:	e3a03000 	mov	r3, #0
  100a9c:	e1a00003 	mov	r0, r3
  100aa0:	e24bd000 	sub	sp, fp, #0
  100aa4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100aa8:	e28dd010 	add	sp, sp, #16
  100aac:	e12fff1e 	bx	lr

00100ab0 <alt_clk_mgr_wait>:
/* mpu_clk cycles. If mpu_clk = osc1 clock (as in bypass mode), then this gives a       */
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
  100ab0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100ab4:	e28db000 	add	fp, sp, #0
  100ab8:	e24dd00c 	sub	sp, sp, #12
  100abc:	e50b0008 	str	r0, [fp, #-8]
  100ac0:	e50b100c 	str	r1, [fp, #-12]
    for (; cnt ; cnt--)
  100ac4:	ea000004 	b	100adc <alt_clk_mgr_wait+0x2c>
    {
        (void) alt_read_word(reg);
  100ac8:	e51b3008 	ldr	r3, [fp, #-8]
  100acc:	e5933000 	ldr	r3, [r3]
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
  100ad0:	e51b300c 	ldr	r3, [fp, #-12]
  100ad4:	e2433001 	sub	r3, r3, #1
  100ad8:	e50b300c 	str	r3, [fp, #-12]
  100adc:	e51b300c 	ldr	r3, [fp, #-12]
  100ae0:	e3530000 	cmp	r3, #0
  100ae4:	1afffff7 	bne	100ac8 <alt_clk_mgr_wait+0x18>
    {
        (void) alt_read_word(reg);
    }
}
  100ae8:	e1a00000 	nop			; (mov r0, r0)
  100aec:	e24bd000 	sub	sp, fp, #0
  100af0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100af4:	e12fff1e 	bx	lr

00100af8 <alt_clk_plls_settle_wait>:
#define ALT_TIMEOUT_PHASE_SYNC      300
        /* how many loops to wait for the SDRAM clock to come around */
        /* to zero and allow for writing a new divisor ratio to it */

ALT_STATUS_CODE alt_clk_plls_settle_wait(void)
{
  100af8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100afc:	e28db000 	add	fp, sp, #0
  100b00:	e24dd00c 	sub	sp, sp, #12
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
  100b04:	e3a03032 	mov	r3, #50	; 0x32
  100b08:	e50b3008 	str	r3, [fp, #-8]
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
  100b0c:	e3043014 	movw	r3, #16404	; 0x4014
  100b10:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100b14:	e5933000 	ldr	r3, [r3]
  100b18:	e2033001 	and	r3, r3, #1
  100b1c:	e3530000 	cmp	r3, #0
  100b20:	13a03001 	movne	r3, #1
  100b24:	03a03000 	moveq	r3, #0
  100b28:	e54b3009 	strb	r3, [fp, #-9]
    } while (nofini && i--);
  100b2c:	e55b3009 	ldrb	r3, [fp, #-9]
  100b30:	e3530000 	cmp	r3, #0
  100b34:	0a000004 	beq	100b4c <alt_clk_plls_settle_wait+0x54>
  100b38:	e51b3008 	ldr	r3, [fp, #-8]
  100b3c:	e2432001 	sub	r2, r3, #1
  100b40:	e50b2008 	str	r2, [fp, #-8]
  100b44:	e3530000 	cmp	r3, #0
  100b48:	1affffef 	bne	100b0c <alt_clk_plls_settle_wait+0x14>
            /* wait until clocks finish transitioning and become stable again */
    return (i > 0) ? ALT_E_SUCCESS : ALT_E_ERROR;
  100b4c:	e51b3008 	ldr	r3, [fp, #-8]
  100b50:	e3530000 	cmp	r3, #0
  100b54:	da000001 	ble	100b60 <alt_clk_plls_settle_wait+0x68>
  100b58:	e3a03000 	mov	r3, #0
  100b5c:	ea000000 	b	100b64 <alt_clk_plls_settle_wait+0x6c>
  100b60:	e3e03000 	mvn	r3, #0
}
  100b64:	e1a00003 	mov	r0, r3
  100b68:	e24bd000 	sub	sp, fp, #0
  100b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100b70:	e12fff1e 	bx	lr

00100b74 <alt_clk_pll_lock_wait>:

static ALT_STATUS_CODE alt_clk_pll_lock_wait(ALT_CLK_t pll, uint32_t timeout)
{
  100b74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100b78:	e28db000 	add	fp, sp, #0
  100b7c:	e24dd014 	sub	sp, sp, #20
  100b80:	e1a03000 	mov	r3, r0
  100b84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100b88:	e54b300d 	strb	r3, [fp, #-13]
    uint32_t locked_mask = 0;
  100b8c:	e3a03000 	mov	r3, #0
  100b90:	e50b3008 	str	r3, [fp, #-8]

    if      (pll == ALT_CLK_MAIN_PLL)       { locked_mask = ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK; }
  100b94:	e55b300d 	ldrb	r3, [fp, #-13]
  100b98:	e3530009 	cmp	r3, #9
  100b9c:	1a000002 	bne	100bac <alt_clk_pll_lock_wait+0x38>
  100ba0:	e3a03040 	mov	r3, #64	; 0x40
  100ba4:	e50b3008 	str	r3, [fp, #-8]
  100ba8:	ea00000d 	b	100be4 <alt_clk_pll_lock_wait+0x70>
    else if (pll == ALT_CLK_PERIPHERAL_PLL) { locked_mask = ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK; }
  100bac:	e55b300d 	ldrb	r3, [fp, #-13]
  100bb0:	e353000a 	cmp	r3, #10
  100bb4:	1a000002 	bne	100bc4 <alt_clk_pll_lock_wait+0x50>
  100bb8:	e3a03080 	mov	r3, #128	; 0x80
  100bbc:	e50b3008 	str	r3, [fp, #-8]
  100bc0:	ea000007 	b	100be4 <alt_clk_pll_lock_wait+0x70>
    else if (pll == ALT_CLK_SDRAM_PLL)      { locked_mask = ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK; }
  100bc4:	e55b300d 	ldrb	r3, [fp, #-13]
  100bc8:	e353000b 	cmp	r3, #11
  100bcc:	1a000002 	bne	100bdc <alt_clk_pll_lock_wait+0x68>
  100bd0:	e3a03c01 	mov	r3, #256	; 0x100
  100bd4:	e50b3008 	str	r3, [fp, #-8]
  100bd8:	ea000001 	b	100be4 <alt_clk_pll_lock_wait+0x70>
    else
    {
        return ALT_E_BAD_ARG;
  100bdc:	e3e03008 	mvn	r3, #8
  100be0:	ea000010 	b	100c28 <alt_clk_pll_lock_wait+0xb4>
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
  100be4:	e3043008 	movw	r3, #16392	; 0x4008
  100be8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100bec:	e5933000 	ldr	r3, [r3]
  100bf0:	e50b300c 	str	r3, [fp, #-12]
        if (int_status & locked_mask)
  100bf4:	e51b200c 	ldr	r2, [fp, #-12]
  100bf8:	e51b3008 	ldr	r3, [fp, #-8]
  100bfc:	e0033002 	and	r3, r3, r2
  100c00:	e3530000 	cmp	r3, #0
  100c04:	0a000001 	beq	100c10 <alt_clk_pll_lock_wait+0x9c>
        {
            return ALT_E_SUCCESS;
  100c08:	e3a03000 	mov	r3, #0
  100c0c:	ea000005 	b	100c28 <alt_clk_pll_lock_wait+0xb4>
        }

    } while (timeout--);
  100c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100c14:	e2432001 	sub	r2, r3, #1
  100c18:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  100c1c:	e3530000 	cmp	r3, #0
  100c20:	1affffef 	bne	100be4 <alt_clk_pll_lock_wait+0x70>

    return ALT_E_TMO;
  100c24:	e3e0300b 	mvn	r3, #11
}
  100c28:	e1a00003 	mov	r0, r3
  100c2c:	e24bd000 	sub	sp, fp, #0
  100c30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100c34:	e12fff1e 	bx	lr

00100c38 <alt_clk_pllcounter_write>:
/* error-checking, this is a static to this file and invisible to Doxygen.              */
/****************************************************************************************/

static void alt_clk_pllcounter_write(void* vcoaddr, void* stataddr, void* cntraddr,
        uint32_t val, uint32_t msk, uint32_t shift)
{
  100c38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100c3c:	e28db000 	add	fp, sp, #0
  100c40:	e24dd01c 	sub	sp, sp, #28
  100c44:	e50b0010 	str	r0, [fp, #-16]
  100c48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100c4c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100c50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
  100c54:	e51b3010 	ldr	r3, [fp, #-16]
  100c58:	e5932000 	ldr	r2, [r3]
  100c5c:	e59b1004 	ldr	r1, [fp, #4]
  100c60:	e59b3008 	ldr	r3, [fp, #8]
  100c64:	e1a03311 	lsl	r3, r1, r3
  100c68:	e1822003 	orr	r2, r2, r3
  100c6c:	e51b3010 	ldr	r3, [fp, #-16]
  100c70:	e5832000 	str	r2, [r3]
    do
    {
        temp = alt_read_word(stataddr);
  100c74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100c78:	e5933000 	ldr	r3, [r3]
  100c7c:	e50b3008 	str	r3, [fp, #-8]
    } while (!(temp & msk));
  100c80:	e51b2008 	ldr	r2, [fp, #-8]
  100c84:	e59b3004 	ldr	r3, [fp, #4]
  100c88:	e0033002 	and	r3, r3, r2
  100c8c:	e3530000 	cmp	r3, #0
  100c90:	0afffff7 	beq	100c74 <alt_clk_pllcounter_write+0x3c>

    alt_write_word(cntraddr, val);
  100c94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100c98:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100c9c:	e5832000 	str	r2, [r3]
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
  100ca0:	e51b3010 	ldr	r3, [fp, #-16]
  100ca4:	e5932000 	ldr	r2, [r3]
  100ca8:	e59b1004 	ldr	r1, [fp, #4]
  100cac:	e59b3008 	ldr	r3, [fp, #8]
  100cb0:	e1a03311 	lsl	r3, r1, r3
  100cb4:	e1e03003 	mvn	r3, r3
  100cb8:	e0022003 	and	r2, r2, r3
  100cbc:	e51b3010 	ldr	r3, [fp, #-16]
  100cc0:	e5832000 	str	r2, [r3]

#else       /* should we find out that resetting the counters as above is unnecessary */
    alt_write_word(cntraddr, val);
#endif
}
  100cc4:	e1a00000 	nop			; (mov r0, r0)
  100cc8:	e24bd000 	sub	sp, fp, #0
  100ccc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100cd0:	e12fff1e 	bx	lr

00100cd4 <alt_clk_lock_status_clear>:
/* alt_clk_lock_status_clear() clears assertions of one or more of the PLL lock status  */
/* conditions.                                                                          */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_lock_status_clear(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
  100cd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100cd8:	e28db000 	add	fp, sp, #0
  100cdc:	e24dd00c 	sub	sp, sp, #12
  100ce0:	e1a03000 	mov	r3, r0
  100ce4:	e54b3005 	strb	r3, [fp, #-5]
    if (lock_stat_mask & (  ALT_CLKMGR_INTER_MAINPLLACHIEVED_CLR_MSK
  100ce8:	e55b3005 	ldrb	r3, [fp, #-5]
  100cec:	e3c3303f 	bic	r3, r3, #63	; 0x3f
  100cf0:	e3530000 	cmp	r3, #0
  100cf4:	0a000001 	beq	100d00 <alt_clk_lock_status_clear+0x2c>
                          & ALT_CLKMGR_INTER_MAINPLLLOST_CLR_MSK
                          & ALT_CLKMGR_INTER_PERPLLLOST_CLR_MSK
                          & ALT_CLKMGR_INTER_SDRPLLLOST_CLR_MSK)
        )
    {
        return ALT_E_BAD_ARG;
  100cf8:	e3e03008 	mvn	r3, #8
  100cfc:	ea000008 	b	100d24 <alt_clk_lock_status_clear+0x50>
    }
    else
    {
        alt_setbits_word(ALT_CLKMGR_INTER_ADDR, lock_stat_mask);
  100d00:	e3043008 	movw	r3, #16392	; 0x4008
  100d04:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100d08:	e3042008 	movw	r2, #16392	; 0x4008
  100d0c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  100d10:	e5921000 	ldr	r1, [r2]
  100d14:	e55b2005 	ldrb	r2, [fp, #-5]
  100d18:	e1812002 	orr	r2, r1, r2
  100d1c:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  100d20:	e3a03000 	mov	r3, #0
    }
}
  100d24:	e1a00003 	mov	r0, r3
  100d28:	e24bd000 	sub	sp, fp, #0
  100d2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100d30:	e12fff1e 	bx	lr

00100d34 <alt_clk_lock_status_get>:
/****************************************************************************************/
/* alt_clk_lock_status_get() returns the value of the PLL lock status conditions.       */
/****************************************************************************************/

uint32_t alt_clk_lock_status_get(void)
{
  100d34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100d38:	e28db000 	add	fp, sp, #0
    return alt_read_word(ALT_CLKMGR_INTER_ADDR) & (  ALT_CLKMGR_INTER_MAINPLLACHIEVED_SET_MSK
  100d3c:	e3043008 	movw	r3, #16392	; 0x4008
  100d40:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100d44:	e5933000 	ldr	r3, [r3]
  100d48:	e7e83053 	ubfx	r3, r3, #0, #9
                                                   | ALT_CLKMGR_INTER_PERPLLLOST_SET_MSK
                                                   | ALT_CLKMGR_INTER_SDRPLLLOST_SET_MSK
                                                   | ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK
                                                   | ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK
                                                   | ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK );
}
  100d4c:	e1a00003 	mov	r0, r3
  100d50:	e24bd000 	sub	sp, fp, #0
  100d54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100d58:	e12fff1e 	bx	lr

00100d5c <alt_clk_pll_is_locked>:
/* alt_clk_pll_is_locked() returns ALT_E_TRUE if the designated PLL is currently        */
/* locked and ALT_E_FALSE if not.                                                       */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_is_locked(ALT_CLK_t pll)
{
  100d5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100d60:	e28db000 	add	fp, sp, #0
  100d64:	e24dd014 	sub	sp, sp, #20
  100d68:	e1a03000 	mov	r3, r0
  100d6c:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
  100d70:	e3e03008 	mvn	r3, #8
  100d74:	e50b3008 	str	r3, [fp, #-8]

    if (pll == ALT_CLK_MAIN_PLL)
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e3530009 	cmp	r3, #9
  100d80:	1a000009 	bne	100dac <alt_clk_pll_is_locked+0x50>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
  100d84:	e3043008 	movw	r3, #16392	; 0x4008
  100d88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100d8c:	e5933000 	ldr	r3, [r3]
  100d90:	e2033040 	and	r3, r3, #64	; 0x40
                ? ALT_E_TRUE : ALT_E_FALSE;
  100d94:	e3530000 	cmp	r3, #0
  100d98:	13a03001 	movne	r3, #1
  100d9c:	03a03000 	moveq	r3, #0
  100da0:	e6ef3073 	uxtb	r3, r3
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
  100da4:	e50b3008 	str	r3, [fp, #-8]
  100da8:	ea000018 	b	100e10 <alt_clk_pll_is_locked+0xb4>
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  100dac:	e55b300d 	ldrb	r3, [fp, #-13]
  100db0:	e353000a 	cmp	r3, #10
  100db4:	1a000009 	bne	100de0 <alt_clk_pll_is_locked+0x84>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
  100db8:	e3043008 	movw	r3, #16392	; 0x4008
  100dbc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100dc0:	e5933000 	ldr	r3, [r3]
  100dc4:	e2033080 	and	r3, r3, #128	; 0x80
                ? ALT_E_TRUE : ALT_E_FALSE;
  100dc8:	e3530000 	cmp	r3, #0
  100dcc:	13a03001 	movne	r3, #1
  100dd0:	03a03000 	moveq	r3, #0
  100dd4:	e6ef3073 	uxtb	r3, r3
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
  100dd8:	e50b3008 	str	r3, [fp, #-8]
  100ddc:	ea00000b 	b	100e10 <alt_clk_pll_is_locked+0xb4>
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  100de0:	e55b300d 	ldrb	r3, [fp, #-13]
  100de4:	e353000b 	cmp	r3, #11
  100de8:	1a000008 	bne	100e10 <alt_clk_pll_is_locked+0xb4>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK)
  100dec:	e3043008 	movw	r3, #16392	; 0x4008
  100df0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100df4:	e5933000 	ldr	r3, [r3]
  100df8:	e2033c01 	and	r3, r3, #256	; 0x100
                ? ALT_E_TRUE : ALT_E_FALSE;
  100dfc:	e3530000 	cmp	r3, #0
  100e00:	13a03001 	movne	r3, #1
  100e04:	03a03000 	moveq	r3, #0
  100e08:	e6ef3073 	uxtb	r3, r3
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK)
  100e0c:	e50b3008 	str	r3, [fp, #-8]
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    return status;
  100e10:	e51b3008 	ldr	r3, [fp, #-8]
}
  100e14:	e1a00003 	mov	r0, r3
  100e18:	e24bd000 	sub	sp, fp, #0
  100e1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100e20:	e12fff1e 	bx	lr

00100e24 <alt_clk_safe_mode_clear>:
/* alt_clk_safe_mode_clear() clears the safe mode status of the Clock Manager following */
/* a reset.                                                                             */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_safe_mode_clear(void)
{
  100e24:	e92d4800 	push	{fp, lr}
  100e28:	e28db004 	add	fp, sp, #4
  100e2c:	e24dd008 	sub	sp, sp, #8
    ALT_STATUS_CODE status = ALT_E_ERROR;
  100e30:	e3e03000 	mvn	r3, #0
  100e34:	e50b3008 	str	r3, [fp, #-8]
#if ALT_PREVENT_GLITCH_EXSAFE
    uint32_t        temp;

    temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  100e38:	e3043060 	movw	r3, #16480	; 0x4060
  100e3c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100e40:	e5933000 	ldr	r3, [r3]
  100e44:	e50b300c 	str	r3, [fp, #-12]
    alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp &
  100e48:	e3043060 	movw	r3, #16480	; 0x4060
  100e4c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100e50:	e51b200c 	ldr	r2, [fp, #-12]
  100e54:	e3c2200c 	bic	r2, r2, #12
  100e58:	e5832000 	str	r2, [r3]
            (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK));
                    /* gate off l4MP and L4SP clocks (no matter their source) */

    alt_setbits_word(ALT_CLKMGR_CTL_ADDR, ALT_CLKMGR_CTL_SAFEMOD_SET_MSK);
  100e5c:	e3a03901 	mov	r3, #16384	; 0x4000
  100e60:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100e64:	e3a02901 	mov	r2, #16384	; 0x4000
  100e68:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  100e6c:	e5922000 	ldr	r2, [r2]
  100e70:	e3822001 	orr	r2, r2, #1
  100e74:	e5832000 	str	r2, [r3]
                    /* clear safe mode bit */
    status = alt_clk_plls_settle_wait();
  100e78:	ebffff1e 	bl	100af8 <alt_clk_plls_settle_wait>
  100e7c:	e50b0008 	str	r0, [fp, #-8]
    alt_replbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR,
  100e80:	e3043060 	movw	r3, #16480	; 0x4060
  100e84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100e88:	e3042060 	movw	r2, #16480	; 0x4060
  100e8c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  100e90:	e5922000 	ldr	r2, [r2]
  100e94:	e3c2100c 	bic	r1, r2, #12
  100e98:	e51b200c 	ldr	r2, [fp, #-12]
  100e9c:	e202200c 	and	r2, r2, #12
  100ea0:	e1812002 	orr	r2, r1, r2
  100ea4:	e5832000 	str	r2, [r3]
    alt_setbits_word(ALT_CLKMGR_CTL_ADDR, ALT_CLKMGR_CTL_SAFEMOD_SET_MSK);
                    /* clear safe mode bit */
    status = alt_clk_plls_settle_wait();

#endif
    return status;
  100ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  100eac:	e1a00003 	mov	r0, r3
  100eb0:	e24bd004 	sub	sp, fp, #4
  100eb4:	e8bd8800 	pop	{fp, pc}

00100eb8 <alt_clk_is_in_safe_mode>:
/* alt_clk_is_in_safe_mode() returns whether the specified safe mode clock domain is in */
/* safe mode or not.                                                                    */
/****************************************************************************************/

bool alt_clk_is_in_safe_mode(ALT_CLK_SAFE_DOMAIN_t clk_domain)
{
  100eb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  100ebc:	e28db000 	add	fp, sp, #0
  100ec0:	e24dd014 	sub	sp, sp, #20
  100ec4:	e1a03000 	mov	r3, r0
  100ec8:	e54b300d 	strb	r3, [fp, #-13]
    bool        ret = false;
  100ecc:	e3a03000 	mov	r3, #0
  100ed0:	e54b3005 	strb	r3, [fp, #-5]
    uint32_t    temp;

    if (clk_domain == ALT_CLK_DOMAIN_NORMAL)
  100ed4:	e55b300d 	ldrb	r3, [fp, #-13]
  100ed8:	e3530000 	cmp	r3, #0
  100edc:	1a000008 	bne	100f04 <alt_clk_is_in_safe_mode+0x4c>
    {
        ret = alt_read_word(ALT_CLKMGR_CTL_ADDR) & ALT_CLKMGR_CTL_SAFEMOD_SET_MSK;
  100ee0:	e3a03901 	mov	r3, #16384	; 0x4000
  100ee4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100ee8:	e5933000 	ldr	r3, [r3]
  100eec:	e2033001 	and	r3, r3, #1
  100ef0:	e3530000 	cmp	r3, #0
  100ef4:	13a03001 	movne	r3, #1
  100ef8:	03a03000 	moveq	r3, #0
  100efc:	e54b3005 	strb	r3, [fp, #-5]
  100f00:	ea000019 	b	100f6c <alt_clk_is_in_safe_mode+0xb4>
                /* is the main clock domain in safe mode? */
    }
    else if (clk_domain == ALT_CLK_DOMAIN_DEBUG)
  100f04:	e55b300d 	ldrb	r3, [fp, #-13]
  100f08:	e3530001 	cmp	r3, #1
  100f0c:	1a000016 	bne	100f6c <alt_clk_is_in_safe_mode+0xb4>
    {
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
  100f10:	e3043010 	movw	r3, #16400	; 0x4010
  100f14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100f18:	e5933000 	ldr	r3, [r3]
  100f1c:	e50b300c 	str	r3, [fp, #-12]
        if (temp & ALT_CLKMGR_DBCTL_STAYOSC1_SET_MSK)
  100f20:	e51b300c 	ldr	r3, [fp, #-12]
  100f24:	e2033001 	and	r3, r3, #1
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	0a000002 	beq	100f3c <alt_clk_is_in_safe_mode+0x84>
        {
            ret = true;                /* is the debug clock domain in safe mode? */
  100f30:	e3a03001 	mov	r3, #1
  100f34:	e54b3005 	strb	r3, [fp, #-5]
  100f38:	ea00000b 	b	100f6c <alt_clk_is_in_safe_mode+0xb4>
        }
        else if (temp & ALT_CLKMGR_DBCTL_ENSFMDWR_SET_MSK)
  100f3c:	e51b300c 	ldr	r3, [fp, #-12]
  100f40:	e2033002 	and	r3, r3, #2
  100f44:	e3530000 	cmp	r3, #0
  100f48:	0a000007 	beq	100f6c <alt_clk_is_in_safe_mode+0xb4>
        {
            ret = alt_read_word(ALT_CLKMGR_CTL_ADDR) & ALT_CLKMGR_CTL_SAFEMOD_SET_MSK;
  100f4c:	e3a03901 	mov	r3, #16384	; 0x4000
  100f50:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100f54:	e5933000 	ldr	r3, [r3]
  100f58:	e2033001 	and	r3, r3, #1
  100f5c:	e3530000 	cmp	r3, #0
  100f60:	13a03001 	movne	r3, #1
  100f64:	03a03000 	moveq	r3, #0
  100f68:	e54b3005 	strb	r3, [fp, #-5]
                    /* is the debug clock domain following the main clock domain */
                    /* AND is the main clock domain in safe mode? */
        }
    }
    return ret;
  100f6c:	e55b3005 	ldrb	r3, [fp, #-5]
}
  100f70:	e1a00003 	mov	r0, r3
  100f74:	e24bd000 	sub	sp, fp, #0
  100f78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  100f7c:	e12fff1e 	bx	lr

00100f80 <alt_clk_pll_bypass_disable>:
/* it from bypass mode and allowing it to provide the output of the PLL to drive the    */
/* six main clocks.                                                                     */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_bypass_disable(ALT_CLK_t pll)
{
  100f80:	e92d4800 	push	{fp, lr}
  100f84:	e28db004 	add	fp, sp, #4
  100f88:	e24dd018 	sub	sp, sp, #24
  100f8c:	e1a03000 	mov	r3, r0
  100f90:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
  100f94:	e3e03008 	mvn	r3, #8
  100f98:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp;
#if  ALT_PREVENT_GLITCH_BYP
    uint32_t        temp1;
    bool            restore_0 = false;
  100f9c:	e3a03000 	mov	r3, #0
  100fa0:	e54b300d 	strb	r3, [fp, #-13]
    bool            restore_1 = false;
  100fa4:	e3a03000 	mov	r3, #0
  100fa8:	e54b300e 	strb	r3, [fp, #-14]
#endif

    /* this function should only be called after the selected PLL is locked */
    if (alt_clk_pll_is_locked(pll) == ALT_E_TRUE)
  100fac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  100fb0:	e1a00003 	mov	r0, r3
  100fb4:	ebffff68 	bl	100d5c <alt_clk_pll_is_locked>
  100fb8:	e1a03000 	mov	r3, r0
  100fbc:	e3530001 	cmp	r3, #1
  100fc0:	1a0000d7 	bne	101324 <alt_clk_pll_bypass_disable+0x3a4>
    {
        if (pll == ALT_CLK_MAIN_PLL)
  100fc4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  100fc8:	e3530009 	cmp	r3, #9
  100fcc:	1a00005a 	bne	10113c <alt_clk_pll_bypass_disable+0x1bc>
        {
#if  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  100fd0:	e3043070 	movw	r3, #16496	; 0x4070
  100fd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100fd8:	e5933000 	ldr	r3, [r3]
  100fdc:	e50b300c 	str	r3, [fp, #-12]
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  100fe0:	e3043060 	movw	r3, #16480	; 0x4060
  100fe4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  100fe8:	e5933000 	ldr	r3, [r3]
  100fec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
  100ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ff4:	e2033004 	and	r3, r3, #4
  100ff8:	e3530000 	cmp	r3, #0
  100ffc:	0a000005 	beq	101018 <alt_clk_pll_bypass_disable+0x98>
  101000:	e51b300c 	ldr	r3, [fp, #-12]
  101004:	e2033001 	and	r3, r3, #1
  101008:	e3530000 	cmp	r3, #0
  10100c:	1a000001 	bne	101018 <alt_clk_pll_bypass_disable+0x98>
            {
                restore_0 = true;
  101010:	e3a03001 	mov	r3, #1
  101014:	e54b300d 	strb	r3, [fp, #-13]
            }
            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
  101018:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10101c:	e2033008 	and	r3, r3, #8
  101020:	e3530000 	cmp	r3, #0
  101024:	0a000005 	beq	101040 <alt_clk_pll_bypass_disable+0xc0>
  101028:	e51b300c 	ldr	r3, [fp, #-12]
  10102c:	e2033002 	and	r3, r3, #2
  101030:	e3530000 	cmp	r3, #0
  101034:	1a000001 	bne	101040 <alt_clk_pll_bypass_disable+0xc0>
            {
                restore_1 = true;
  101038:	e3a03001 	mov	r3, #1
  10103c:	e54b300e 	strb	r3, [fp, #-14]
            }
            temp = temp1;
  101040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101044:	e50b300c 	str	r3, [fp, #-12]
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
  101048:	e55b300d 	ldrb	r3, [fp, #-13]
  10104c:	e3530000 	cmp	r3, #0
  101050:	0a000002 	beq	101060 <alt_clk_pll_bypass_disable+0xe0>
  101054:	e51b300c 	ldr	r3, [fp, #-12]
  101058:	e3c33004 	bic	r3, r3, #4
  10105c:	e50b300c 	str	r3, [fp, #-12]
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
  101060:	e55b300e 	ldrb	r3, [fp, #-14]
  101064:	e3530000 	cmp	r3, #0
  101068:	0a000002 	beq	101078 <alt_clk_pll_bypass_disable+0xf8>
  10106c:	e51b300c 	ldr	r3, [fp, #-12]
  101070:	e3c33008 	bic	r3, r3, #8
  101074:	e50b300c 	str	r3, [fp, #-12]
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
  101078:	e55b300d 	ldrb	r3, [fp, #-13]
  10107c:	e3530000 	cmp	r3, #0
  101080:	1a000002 	bne	101090 <alt_clk_pll_bypass_disable+0x110>
  101084:	e55b300e 	ldrb	r3, [fp, #-14]
  101088:	e3530000 	cmp	r3, #0
  10108c:	0a000003 	beq	1010a0 <alt_clk_pll_bypass_disable+0x120>
  101090:	e3043060 	movw	r3, #16480	; 0x4060
  101094:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101098:	e51b200c 	ldr	r2, [fp, #-12]
  10109c:	e5832000 	str	r2, [r3]
#endif

            /* assert outresetall of main PLL */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  1010a0:	e3043040 	movw	r3, #16448	; 0x4040
  1010a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1010a8:	e5933000 	ldr	r3, [r3]
  1010ac:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp | ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_SET_MSK);
  1010b0:	e3043040 	movw	r3, #16448	; 0x4040
  1010b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1010b8:	e51b200c 	ldr	r2, [fp, #-12]
  1010bc:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
  1010c0:	e5832000 	str	r2, [r3]

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);
  1010c4:	e3043040 	movw	r3, #16448	; 0x4040
  1010c8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1010cc:	e51b200c 	ldr	r2, [fp, #-12]
  1010d0:	e3c22401 	bic	r2, r2, #16777216	; 0x1000000
  1010d4:	e5832000 	str	r2, [r3]

            alt_clk_plls_settle_wait();
  1010d8:	ebfffe86 	bl	100af8 <alt_clk_plls_settle_wait>

            /* remove bypass */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
  1010dc:	e3043004 	movw	r3, #16388	; 0x4004
  1010e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1010e4:	e3042004 	movw	r2, #16388	; 0x4004
  1010e8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1010ec:	e5922000 	ldr	r2, [r2]
  1010f0:	e3c22001 	bic	r2, r2, #1
  1010f4:	e5832000 	str	r2, [r3]
            status = alt_clk_plls_settle_wait();
  1010f8:	ebfffe7e 	bl	100af8 <alt_clk_plls_settle_wait>
  1010fc:	e50b0008 	str	r0, [fp, #-8]

#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
  101100:	e55b300d 	ldrb	r3, [fp, #-13]
  101104:	e3530000 	cmp	r3, #0
  101108:	1a000002 	bne	101118 <alt_clk_pll_bypass_disable+0x198>
  10110c:	e55b300e 	ldrb	r3, [fp, #-14]
  101110:	e3530000 	cmp	r3, #0
  101114:	0a000084 	beq	10132c <alt_clk_pll_bypass_disable+0x3ac>
            {
                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  101118:	e3a0101e 	mov	r1, #30
  10111c:	e3040060 	movw	r0, #16480	; 0x4060
  101120:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  101124:	ebfffe61 	bl	100ab0 <alt_clk_mgr_wait>
                            /* wait a bit more before reenabling the L4MP and L4SP clocks */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1);
  101128:	e3043060 	movw	r3, #16480	; 0x4060
  10112c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101130:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101134:	e5832000 	str	r2, [r3]
  101138:	ea00007b 	b	10132c <alt_clk_pll_bypass_disable+0x3ac>
            }
#endif
        }

        else if (pll == ALT_CLK_PERIPHERAL_PLL)
  10113c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101140:	e353000a 	cmp	r3, #10
  101144:	1a00005a 	bne	1012b4 <alt_clk_pll_bypass_disable+0x334>
        {
#if  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  101148:	e3043070 	movw	r3, #16496	; 0x4070
  10114c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101150:	e5933000 	ldr	r3, [r3]
  101154:	e50b300c 	str	r3, [fp, #-12]
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  101158:	e3043060 	movw	r3, #16480	; 0x4060
  10115c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101160:	e5933000 	ldr	r3, [r3]
  101164:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK))
  101168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10116c:	e2033004 	and	r3, r3, #4
  101170:	e3530000 	cmp	r3, #0
  101174:	0a000005 	beq	101190 <alt_clk_pll_bypass_disable+0x210>
  101178:	e51b300c 	ldr	r3, [fp, #-12]
  10117c:	e2033001 	and	r3, r3, #1
  101180:	e3530000 	cmp	r3, #0
  101184:	0a000001 	beq	101190 <alt_clk_pll_bypass_disable+0x210>
            {
                    restore_0 = true;
  101188:	e3a03001 	mov	r3, #1
  10118c:	e54b300d 	strb	r3, [fp, #-13]
            }
            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK))
  101190:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101194:	e2033008 	and	r3, r3, #8
  101198:	e3530000 	cmp	r3, #0
  10119c:	0a000005 	beq	1011b8 <alt_clk_pll_bypass_disable+0x238>
  1011a0:	e51b300c 	ldr	r3, [fp, #-12]
  1011a4:	e2033002 	and	r3, r3, #2
  1011a8:	e3530000 	cmp	r3, #0
  1011ac:	0a000001 	beq	1011b8 <alt_clk_pll_bypass_disable+0x238>
            {
                    restore_1 = true;
  1011b0:	e3a03001 	mov	r3, #1
  1011b4:	e54b300e 	strb	r3, [fp, #-14]
            }
            temp = temp1;
  1011b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1011bc:	e50b300c 	str	r3, [fp, #-12]
            if (restore_0)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
  1011c0:	e55b300d 	ldrb	r3, [fp, #-13]
  1011c4:	e3530000 	cmp	r3, #0
  1011c8:	0a000002 	beq	1011d8 <alt_clk_pll_bypass_disable+0x258>
  1011cc:	e51b300c 	ldr	r3, [fp, #-12]
  1011d0:	e3c33004 	bic	r3, r3, #4
  1011d4:	e50b300c 	str	r3, [fp, #-12]
            if (restore_1)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
  1011d8:	e55b300e 	ldrb	r3, [fp, #-14]
  1011dc:	e3530000 	cmp	r3, #0
  1011e0:	0a000002 	beq	1011f0 <alt_clk_pll_bypass_disable+0x270>
  1011e4:	e51b300c 	ldr	r3, [fp, #-12]
  1011e8:	e3c33008 	bic	r3, r3, #8
  1011ec:	e50b300c 	str	r3, [fp, #-12]
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
  1011f0:	e55b300d 	ldrb	r3, [fp, #-13]
  1011f4:	e3530000 	cmp	r3, #0
  1011f8:	1a000002 	bne	101208 <alt_clk_pll_bypass_disable+0x288>
  1011fc:	e55b300e 	ldrb	r3, [fp, #-14]
  101200:	e3530000 	cmp	r3, #0
  101204:	0a000003 	beq	101218 <alt_clk_pll_bypass_disable+0x298>
  101208:	e3043060 	movw	r3, #16480	; 0x4060
  10120c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101210:	e51b200c 	ldr	r2, [fp, #-12]
  101214:	e5832000 	str	r2, [r3]
#endif

            /* assert outresetall of Peripheral PLL */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  101218:	e3043080 	movw	r3, #16512	; 0x4080
  10121c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101220:	e5933000 	ldr	r3, [r3]
  101224:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp | ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_SET_MSK);
  101228:	e3043080 	movw	r3, #16512	; 0x4080
  10122c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101230:	e51b200c 	ldr	r2, [fp, #-12]
  101234:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
  101238:	e5832000 	str	r2, [r3]
            alt_clk_plls_settle_wait();
  10123c:	ebfffe2d 	bl	100af8 <alt_clk_plls_settle_wait>

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp & ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_CLR_MSK);
  101240:	e3043080 	movw	r3, #16512	; 0x4080
  101244:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101248:	e51b200c 	ldr	r2, [fp, #-12]
  10124c:	e3c22401 	bic	r2, r2, #16777216	; 0x1000000
  101250:	e5832000 	str	r2, [r3]

            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_PERPLL_SET_MSK);
  101254:	e3043004 	movw	r3, #16388	; 0x4004
  101258:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10125c:	e3042004 	movw	r2, #16388	; 0x4004
  101260:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101264:	e5922000 	ldr	r2, [r2]
  101268:	e3c22008 	bic	r2, r2, #8
  10126c:	e5832000 	str	r2, [r3]
            status = alt_clk_plls_settle_wait();
  101270:	ebfffe20 	bl	100af8 <alt_clk_plls_settle_wait>
  101274:	e50b0008 	str	r0, [fp, #-8]

#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
  101278:	e55b300d 	ldrb	r3, [fp, #-13]
  10127c:	e3530000 	cmp	r3, #0
  101280:	1a000002 	bne	101290 <alt_clk_pll_bypass_disable+0x310>
  101284:	e55b300e 	ldrb	r3, [fp, #-14]
  101288:	e3530000 	cmp	r3, #0
  10128c:	0a000026 	beq	10132c <alt_clk_pll_bypass_disable+0x3ac>
            {
                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  101290:	e3a0101e 	mov	r1, #30
  101294:	e3040060 	movw	r0, #16480	; 0x4060
  101298:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10129c:	ebfffe03 	bl	100ab0 <alt_clk_mgr_wait>
                            /* wait a bit more before reenabling the L4MP and L4SP clocks */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1);
  1012a0:	e3043060 	movw	r3, #16480	; 0x4060
  1012a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1012a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1012ac:	e5832000 	str	r2, [r3]
  1012b0:	ea00001d 	b	10132c <alt_clk_pll_bypass_disable+0x3ac>
            }
#endif
        }

        else if (pll == ALT_CLK_SDRAM_PLL)
  1012b4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1012b8:	e353000b 	cmp	r3, #11
  1012bc:	1a00001a 	bne	10132c <alt_clk_pll_bypass_disable+0x3ac>
        {
            /* assert outresetall of SDRAM PLL */
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  1012c0:	e30430c0 	movw	r3, #16576	; 0x40c0
  1012c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1012c8:	e5933000 	ldr	r3, [r3]
  1012cc:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK);
  1012d0:	e30430c0 	movw	r3, #16576	; 0x40c0
  1012d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1012d8:	e51b200c 	ldr	r2, [fp, #-12]
  1012dc:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
  1012e0:	e5832000 	str	r2, [r3]

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
  1012e4:	e30430c0 	movw	r3, #16576	; 0x40c0
  1012e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1012ec:	e51b200c 	ldr	r2, [fp, #-12]
  1012f0:	e3c22401 	bic	r2, r2, #16777216	; 0x1000000
  1012f4:	e5832000 	str	r2, [r3]
            alt_clk_plls_settle_wait();
  1012f8:	ebfffdfe 	bl	100af8 <alt_clk_plls_settle_wait>

            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK);
  1012fc:	e3043004 	movw	r3, #16388	; 0x4004
  101300:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101304:	e3042004 	movw	r2, #16388	; 0x4004
  101308:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10130c:	e5922000 	ldr	r2, [r2]
  101310:	e3c22004 	bic	r2, r2, #4
  101314:	e5832000 	str	r2, [r3]
            status = alt_clk_plls_settle_wait();
  101318:	ebfffdf6 	bl	100af8 <alt_clk_plls_settle_wait>
  10131c:	e50b0008 	str	r0, [fp, #-8]
  101320:	ea000001 	b	10132c <alt_clk_pll_bypass_disable+0x3ac>
        }
    }
    else
    {
        status = ALT_E_ERROR;
  101324:	e3e03000 	mvn	r3, #0
  101328:	e50b3008 	str	r3, [fp, #-8]
    }

    return status;
  10132c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101330:	e1a00003 	mov	r0, r3
  101334:	e24bd004 	sub	sp, fp, #4
  101338:	e8bd8800 	pop	{fp, pc}

0010133c <alt_clk_pll_bypass_enable>:
/****************************************************************************************/
/* alt_clk_pll_bypass_enable() enable bypass mode for the specified PLL.                */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_bypass_enable(ALT_CLK_t pll, bool use_input_mux)
{
  10133c:	e92d4800 	push	{fp, lr}
  101340:	e28db004 	add	fp, sp, #4
  101344:	e24dd018 	sub	sp, sp, #24
  101348:	e1a03000 	mov	r3, r0
  10134c:	e1a02001 	mov	r2, r1
  101350:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  101354:	e1a03002 	mov	r3, r2
  101358:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
  10135c:	e3e03008 	mvn	r3, #8
  101360:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp;
#ifdef  ALT_PREVENT_GLITCH_BYP
    uint32_t        temp1;
    bool            restore_0 = false;
  101364:	e3a03000 	mov	r3, #0
  101368:	e54b300d 	strb	r3, [fp, #-13]
    bool            restore_1 = false;
  10136c:	e3a03000 	mov	r3, #0
  101370:	e54b300e 	strb	r3, [fp, #-14]
#endif

    if (pll == ALT_CLK_MAIN_PLL)
  101374:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101378:	e3530009 	cmp	r3, #9
  10137c:	1a000051 	bne	1014c8 <alt_clk_pll_bypass_enable+0x18c>
    {
        if (!use_input_mux)
  101380:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  101384:	e2233001 	eor	r3, r3, #1
  101388:	e6ef3073 	uxtb	r3, r3
  10138c:	e3530000 	cmp	r3, #0
  101390:	0a000049 	beq	1014bc <alt_clk_pll_bypass_enable+0x180>
        {
#ifdef  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  101394:	e3043070 	movw	r3, #16496	; 0x4070
  101398:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10139c:	e5933000 	ldr	r3, [r3]
  1013a0:	e50b300c 	str	r3, [fp, #-12]
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  1013a4:	e3043060 	movw	r3, #16480	; 0x4060
  1013a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1013ac:	e5933000 	ldr	r3, [r3]
  1013b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
  1013b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1013b8:	e2033004 	and	r3, r3, #4
  1013bc:	e3530000 	cmp	r3, #0
  1013c0:	0a000005 	beq	1013dc <alt_clk_pll_bypass_enable+0xa0>
  1013c4:	e51b300c 	ldr	r3, [fp, #-12]
  1013c8:	e2033001 	and	r3, r3, #1
  1013cc:	e3530000 	cmp	r3, #0
  1013d0:	1a000001 	bne	1013dc <alt_clk_pll_bypass_enable+0xa0>
            {
                restore_0 = true;
  1013d4:	e3a03001 	mov	r3, #1
  1013d8:	e54b300d 	strb	r3, [fp, #-13]
            }
            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
  1013dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1013e0:	e2033008 	and	r3, r3, #8
  1013e4:	e3530000 	cmp	r3, #0
  1013e8:	0a000005 	beq	101404 <alt_clk_pll_bypass_enable+0xc8>
  1013ec:	e51b300c 	ldr	r3, [fp, #-12]
  1013f0:	e2033002 	and	r3, r3, #2
  1013f4:	e3530000 	cmp	r3, #0
  1013f8:	1a000001 	bne	101404 <alt_clk_pll_bypass_enable+0xc8>
            {
                restore_1 = true;
  1013fc:	e3a03001 	mov	r3, #1
  101400:	e54b300e 	strb	r3, [fp, #-14]
            }
            temp = temp1;
  101404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101408:	e50b300c 	str	r3, [fp, #-12]
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
  10140c:	e55b300d 	ldrb	r3, [fp, #-13]
  101410:	e3530000 	cmp	r3, #0
  101414:	0a000002 	beq	101424 <alt_clk_pll_bypass_enable+0xe8>
  101418:	e51b300c 	ldr	r3, [fp, #-12]
  10141c:	e3c33004 	bic	r3, r3, #4
  101420:	e50b300c 	str	r3, [fp, #-12]
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
  101424:	e55b300e 	ldrb	r3, [fp, #-14]
  101428:	e3530000 	cmp	r3, #0
  10142c:	0a000002 	beq	10143c <alt_clk_pll_bypass_enable+0x100>
  101430:	e51b300c 	ldr	r3, [fp, #-12]
  101434:	e3c33008 	bic	r3, r3, #8
  101438:	e50b300c 	str	r3, [fp, #-12]
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
  10143c:	e55b300d 	ldrb	r3, [fp, #-13]
  101440:	e3530000 	cmp	r3, #0
  101444:	1a000002 	bne	101454 <alt_clk_pll_bypass_enable+0x118>
  101448:	e55b300e 	ldrb	r3, [fp, #-14]
  10144c:	e3530000 	cmp	r3, #0
  101450:	0a000003 	beq	101464 <alt_clk_pll_bypass_enable+0x128>
  101454:	e3043060 	movw	r3, #16480	; 0x4060
  101458:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10145c:	e51b200c 	ldr	r2, [fp, #-12]
  101460:	e5832000 	str	r2, [r3]

            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
  101464:	e3043004 	movw	r3, #16388	; 0x4004
  101468:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10146c:	e3042004 	movw	r2, #16388	; 0x4004
  101470:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101474:	e5922000 	ldr	r2, [r2]
  101478:	e3822001 	orr	r2, r2, #1
  10147c:	e5832000 	str	r2, [r3]
                        /* no input mux select on main PLL */

            status = alt_clk_plls_settle_wait();
  101480:	ebfffd9c 	bl	100af8 <alt_clk_plls_settle_wait>
  101484:	e50b0008 	str	r0, [fp, #-8]
                        /* wait before reenabling the L4MP and L4SP clocks */
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
  101488:	e55b300d 	ldrb	r3, [fp, #-13]
  10148c:	e3530000 	cmp	r3, #0
  101490:	1a000002 	bne	1014a0 <alt_clk_pll_bypass_enable+0x164>
  101494:	e55b300e 	ldrb	r3, [fp, #-14]
  101498:	e3530000 	cmp	r3, #0
  10149c:	0a000003 	beq	1014b0 <alt_clk_pll_bypass_enable+0x174>
  1014a0:	e3043060 	movw	r3, #16480	; 0x4060
  1014a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1014a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1014ac:	e5832000 	str	r2, [r3]
            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
                        /* no input mux select on main PLL */
            status = alt_clk_plls_settle_wait();

#endif
            status = ALT_E_SUCCESS;
  1014b0:	e3a03000 	mov	r3, #0
  1014b4:	e50b3008 	str	r3, [fp, #-8]
  1014b8:	ea000073 	b	10168c <alt_clk_pll_bypass_enable+0x350>
        }
        else
        {
            status =  ALT_E_BAD_ARG;
  1014bc:	e3e03008 	mvn	r3, #8
  1014c0:	e50b3008 	str	r3, [fp, #-8]
  1014c4:	ea000070 	b	10168c <alt_clk_pll_bypass_enable+0x350>
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  1014c8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1014cc:	e353000a 	cmp	r3, #10
  1014d0:	1a000056 	bne	101630 <alt_clk_pll_bypass_enable+0x2f4>
    {
#ifdef  ALT_PREVENT_GLITCH_BYP
        /* if L4MP or L4SP source is set to Peripheral PLL C1, gate it off before changing */
        /* bypass state, then gate clock back on. FogBugz #63778 */
        temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  1014d4:	e3043070 	movw	r3, #16496	; 0x4070
  1014d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1014dc:	e5933000 	ldr	r3, [r3]
  1014e0:	e50b300c 	str	r3, [fp, #-12]
        temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  1014e4:	e3043060 	movw	r3, #16480	; 0x4060
  1014e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1014ec:	e5933000 	ldr	r3, [r3]
  1014f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK))
  1014f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1014f8:	e2033004 	and	r3, r3, #4
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000005 	beq	10151c <alt_clk_pll_bypass_enable+0x1e0>
  101504:	e51b300c 	ldr	r3, [fp, #-12]
  101508:	e2033001 	and	r3, r3, #1
  10150c:	e3530000 	cmp	r3, #0
  101510:	0a000001 	beq	10151c <alt_clk_pll_bypass_enable+0x1e0>
        {
            restore_0 = true;
  101514:	e3a03001 	mov	r3, #1
  101518:	e54b300d 	strb	r3, [fp, #-13]
        }
        if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK))
  10151c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101520:	e2033008 	and	r3, r3, #8
  101524:	e3530000 	cmp	r3, #0
  101528:	0a000005 	beq	101544 <alt_clk_pll_bypass_enable+0x208>
  10152c:	e51b300c 	ldr	r3, [fp, #-12]
  101530:	e2033002 	and	r3, r3, #2
  101534:	e3530000 	cmp	r3, #0
  101538:	0a000001 	beq	101544 <alt_clk_pll_bypass_enable+0x208>
        {
            restore_1 = true;
  10153c:	e3a03001 	mov	r3, #1
  101540:	e54b300e 	strb	r3, [fp, #-14]
        }
        temp = temp1;
  101544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101548:	e50b300c 	str	r3, [fp, #-12]
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
  10154c:	e55b300d 	ldrb	r3, [fp, #-13]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000002 	beq	101564 <alt_clk_pll_bypass_enable+0x228>
  101558:	e51b300c 	ldr	r3, [fp, #-12]
  10155c:	e3c33004 	bic	r3, r3, #4
  101560:	e50b300c 	str	r3, [fp, #-12]
        if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
  101564:	e55b300e 	ldrb	r3, [fp, #-14]
  101568:	e3530000 	cmp	r3, #0
  10156c:	0a000002 	beq	10157c <alt_clk_pll_bypass_enable+0x240>
  101570:	e51b300c 	ldr	r3, [fp, #-12]
  101574:	e3c33008 	bic	r3, r3, #8
  101578:	e50b300c 	str	r3, [fp, #-12]
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
  10157c:	e55b300d 	ldrb	r3, [fp, #-13]
  101580:	e3530000 	cmp	r3, #0
  101584:	1a000002 	bne	101594 <alt_clk_pll_bypass_enable+0x258>
  101588:	e55b300e 	ldrb	r3, [fp, #-14]
  10158c:	e3530000 	cmp	r3, #0
  101590:	0a000003 	beq	1015a4 <alt_clk_pll_bypass_enable+0x268>
  101594:	e3043060 	movw	r3, #16480	; 0x4060
  101598:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10159c:	e51b200c 	ldr	r2, [fp, #-12]
  1015a0:	e5832000 	str	r2, [r3]

        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
  1015a4:	e3043004 	movw	r3, #16388	; 0x4004
  1015a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1015ac:	e5933000 	ldr	r3, [r3]
  1015b0:	e3c33018 	bic	r3, r3, #24
  1015b4:	e50b300c 	str	r3, [fp, #-12]
                (ALT_CLKMGR_BYPASS_PERPLL_CLR_MSK & ALT_CLKMGR_BYPASS_PERPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_PERPLL_SET_MSK |
  1015b8:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  1015bc:	e3530000 	cmp	r3, #0
  1015c0:	0a000001 	beq	1015cc <alt_clk_pll_bypass_enable+0x290>
  1015c4:	e3a03018 	mov	r3, #24
  1015c8:	ea000000 	b	1015d0 <alt_clk_pll_bypass_enable+0x294>
  1015cc:	e3a03008 	mov	r3, #8
  1015d0:	e51b200c 	ldr	r2, [fp, #-12]
  1015d4:	e1823003 	orr	r3, r2, r3
  1015d8:	e50b300c 	str	r3, [fp, #-12]
                ALT_CLKMGR_BYPASS_PERPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_PERPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */

        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
  1015dc:	e3043004 	movw	r3, #16388	; 0x4004
  1015e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1015e4:	e51b200c 	ldr	r2, [fp, #-12]
  1015e8:	e5832000 	str	r2, [r3]
        alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  1015ec:	e3a0101e 	mov	r1, #30
  1015f0:	e3040060 	movw	r0, #16480	; 0x4060
  1015f4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1015f8:	ebfffd2c 	bl	100ab0 <alt_clk_mgr_wait>
                    /* wait a bit before reenabling the L4MP and L4SP clocks */
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
  1015fc:	e55b300d 	ldrb	r3, [fp, #-13]
  101600:	e3530000 	cmp	r3, #0
  101604:	1a000002 	bne	101614 <alt_clk_pll_bypass_enable+0x2d8>
  101608:	e55b300e 	ldrb	r3, [fp, #-14]
  10160c:	e3530000 	cmp	r3, #0
  101610:	0a000003 	beq	101624 <alt_clk_pll_bypass_enable+0x2e8>
  101614:	e3043060 	movw	r3, #16480	; 0x4060
  101618:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10161c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101620:	e5832000 	str	r2, [r3]
                (ALT_CLKMGR_BYPASS_PERPLL_CLR_MSK & ALT_CLKMGR_BYPASS_PERPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_PERPLL_SET_MSK |
                ALT_CLKMGR_BYPASS_PERPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_PERPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */
#endif
        status = ALT_E_SUCCESS;
  101624:	e3a03000 	mov	r3, #0
  101628:	e50b3008 	str	r3, [fp, #-8]
  10162c:	ea000016 	b	10168c <alt_clk_pll_bypass_enable+0x350>
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
  101630:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101634:	e353000b 	cmp	r3, #11
  101638:	1a000013 	bne	10168c <alt_clk_pll_bypass_enable+0x350>
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
  10163c:	e3043004 	movw	r3, #16388	; 0x4004
  101640:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101644:	e5933000 	ldr	r3, [r3]
  101648:	e3c33006 	bic	r3, r3, #6
  10164c:	e50b300c 	str	r3, [fp, #-12]
                (ALT_CLKMGR_BYPASS_SDRPLL_CLR_MSK & ALT_CLKMGR_BYPASS_SDRPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK |
  101650:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  101654:	e3530000 	cmp	r3, #0
  101658:	0a000001 	beq	101664 <alt_clk_pll_bypass_enable+0x328>
  10165c:	e3a03006 	mov	r3, #6
  101660:	ea000000 	b	101668 <alt_clk_pll_bypass_enable+0x32c>
  101664:	e3a03002 	mov	r3, #2
  101668:	e51b200c 	ldr	r2, [fp, #-12]
  10166c:	e1823003 	orr	r3, r2, r3
  101670:	e50b300c 	str	r3, [fp, #-12]
                ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */
        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
  101674:	e3043004 	movw	r3, #16388	; 0x4004
  101678:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10167c:	e51b200c 	ldr	r2, [fp, #-12]
  101680:	e5832000 	str	r2, [r3]
        status = ALT_E_SUCCESS;
  101684:	e3a03000 	mov	r3, #0
  101688:	e50b3008 	str	r3, [fp, #-8]
    }
    return status;
  10168c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101690:	e1a00003 	mov	r0, r3
  101694:	e24bd004 	sub	sp, fp, #4
  101698:	e8bd8800 	pop	{fp, pc}

0010169c <alt_clk_pll_is_bypassed>:
/* the PLL VCO must be made in bypass mode to avoid the potential of producing clock    */
/* glitches which may affect downstream clock dividers and peripherals.                 */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_is_bypassed(ALT_CLK_t pll)
{
  10169c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1016a0:	e28db000 	add	fp, sp, #0
  1016a4:	e24dd014 	sub	sp, sp, #20
  1016a8:	e1a03000 	mov	r3, r0
  1016ac:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
  1016b0:	e3e03008 	mvn	r3, #8
  1016b4:	e50b3008 	str	r3, [fp, #-8]

    if (pll == ALT_CLK_MAIN_PLL)
  1016b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1016bc:	e3530009 	cmp	r3, #9
  1016c0:	1a000010 	bne	101708 <alt_clk_pll_is_bypassed+0x6c>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
  1016c4:	e3a03901 	mov	r3, #16384	; 0x4000
  1016c8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1016cc:	e5933000 	ldr	r3, [r3]
  1016d0:	e2033001 	and	r3, r3, #1
  1016d4:	e3530000 	cmp	r3, #0
  1016d8:	1a000005 	bne	1016f4 <alt_clk_pll_is_bypassed+0x58>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
  1016dc:	e3043004 	movw	r3, #16388	; 0x4004
  1016e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1016e4:	e5933000 	ldr	r3, [r3]
  1016e8:	e2033001 	and	r3, r3, #1
                ? ALT_E_TRUE : ALT_E_FALSE;
  1016ec:	e3530000 	cmp	r3, #0
  1016f0:	0a000001 	beq	1016fc <alt_clk_pll_is_bypassed+0x60>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
  1016f4:	e3a03001 	mov	r3, #1
  1016f8:	ea000000 	b	101700 <alt_clk_pll_is_bypassed+0x64>
  1016fc:	e3a03000 	mov	r3, #0
  101700:	e50b3008 	str	r3, [fp, #-8]
  101704:	ea000028 	b	1017ac <alt_clk_pll_is_bypassed+0x110>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  101708:	e55b300d 	ldrb	r3, [fp, #-13]
  10170c:	e353000a 	cmp	r3, #10
  101710:	1a000011 	bne	10175c <alt_clk_pll_is_bypassed+0xc0>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
  101714:	e3a03901 	mov	r3, #16384	; 0x4000
  101718:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10171c:	e5933000 	ldr	r3, [r3]
  101720:	e2033001 	and	r3, r3, #1
  101724:	e3530000 	cmp	r3, #0
  101728:	1a000006 	bne	101748 <alt_clk_pll_is_bypassed+0xac>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
  10172c:	e3043004 	movw	r3, #16388	; 0x4004
  101730:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101734:	e5933000 	ldr	r3, [r3]
  101738:	e2033008 	and	r3, r3, #8
  10173c:	e1a031a3 	lsr	r3, r3, #3
                ? ALT_E_TRUE : ALT_E_FALSE;
  101740:	e3530000 	cmp	r3, #0
  101744:	0a000001 	beq	101750 <alt_clk_pll_is_bypassed+0xb4>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
  101748:	e3a03001 	mov	r3, #1
  10174c:	ea000000 	b	101754 <alt_clk_pll_is_bypassed+0xb8>
  101750:	e3a03000 	mov	r3, #0
  101754:	e50b3008 	str	r3, [fp, #-8]
  101758:	ea000013 	b	1017ac <alt_clk_pll_is_bypassed+0x110>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  10175c:	e55b300d 	ldrb	r3, [fp, #-13]
  101760:	e353000b 	cmp	r3, #11
  101764:	1a000010 	bne	1017ac <alt_clk_pll_is_bypassed+0x110>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
  101768:	e3a03901 	mov	r3, #16384	; 0x4000
  10176c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101770:	e5933000 	ldr	r3, [r3]
  101774:	e2033001 	and	r3, r3, #1
  101778:	e3530000 	cmp	r3, #0
  10177c:	1a000006 	bne	10179c <alt_clk_pll_is_bypassed+0x100>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
  101780:	e3043004 	movw	r3, #16388	; 0x4004
  101784:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101788:	e5933000 	ldr	r3, [r3]
  10178c:	e2033002 	and	r3, r3, #2
  101790:	e1a030a3 	lsr	r3, r3, #1
                ? ALT_E_TRUE : ALT_E_FALSE;
  101794:	e3530000 	cmp	r3, #0
  101798:	0a000001 	beq	1017a4 <alt_clk_pll_is_bypassed+0x108>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
  10179c:	e3a03001 	mov	r3, #1
  1017a0:	ea000000 	b	1017a8 <alt_clk_pll_is_bypassed+0x10c>
  1017a4:	e3a03000 	mov	r3, #0
  1017a8:	e50b3008 	str	r3, [fp, #-8]
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    return status;
  1017ac:	e51b3008 	ldr	r3, [fp, #-8]
}
  1017b0:	e1a00003 	mov	r0, r3
  1017b4:	e24bd000 	sub	sp, fp, #0
  1017b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1017bc:	e12fff1e 	bx	lr

001017c0 <alt_clk_pll_source_get>:
/****************************************************************************************/
/* alt_clk_pll_source_get() returns the current input of the specified PLL.             */
/****************************************************************************************/

ALT_CLK_t alt_clk_pll_source_get(ALT_CLK_t pll)
{
  1017c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1017c4:	e28db000 	add	fp, sp, #0
  1017c8:	e24dd014 	sub	sp, sp, #20
  1017cc:	e1a03000 	mov	r3, r0
  1017d0:	e54b300d 	strb	r3, [fp, #-13]
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
  1017d4:	e3a0304b 	mov	r3, #75	; 0x4b
  1017d8:	e54b3005 	strb	r3, [fp, #-5]
    uint32_t       temp;


    if (pll == ALT_CLK_MAIN_PLL)
  1017dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1017e0:	e3530009 	cmp	r3, #9
  1017e4:	1a000002 	bne	1017f4 <alt_clk_pll_source_get+0x34>
    {
        ret = ALT_CLK_IN_PIN_OSC1;
  1017e8:	e3a03000 	mov	r3, #0
  1017ec:	e54b3005 	strb	r3, [fp, #-5]
  1017f0:	ea000034 	b	1018c8 <alt_clk_pll_source_get+0x108>
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  1017f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1017f8:	e353000a 	cmp	r3, #10
  1017fc:	1a000017 	bne	101860 <alt_clk_pll_source_get+0xa0>
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
  101800:	e3043080 	movw	r3, #16512	; 0x4080
  101804:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101808:	e5933000 	ldr	r3, [r3]
  10180c:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  101810:	e1a03b23 	lsr	r3, r3, #22
  101814:	e50b300c 	str	r3, [fp, #-12]
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
  101818:	e51b300c 	ldr	r3, [fp, #-12]
  10181c:	e3530000 	cmp	r3, #0
  101820:	1a000002 	bne	101830 <alt_clk_pll_source_get+0x70>
        {
            ret = ALT_CLK_IN_PIN_OSC1;
  101824:	e3a03000 	mov	r3, #0
  101828:	e54b3005 	strb	r3, [fp, #-5]
  10182c:	ea000025 	b	1018c8 <alt_clk_pll_source_get+0x108>
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
  101830:	e51b300c 	ldr	r3, [fp, #-12]
  101834:	e3530001 	cmp	r3, #1
  101838:	1a000002 	bne	101848 <alt_clk_pll_source_get+0x88>
        {
            ret = ALT_CLK_IN_PIN_OSC2;
  10183c:	e3a03001 	mov	r3, #1
  101840:	e54b3005 	strb	r3, [fp, #-5]
  101844:	ea00001f 	b	1018c8 <alt_clk_pll_source_get+0x108>
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
  101848:	e51b300c 	ldr	r3, [fp, #-12]
  10184c:	e3530002 	cmp	r3, #2
  101850:	1a00001c 	bne	1018c8 <alt_clk_pll_source_get+0x108>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
  101854:	e3a03002 	mov	r3, #2
  101858:	e54b3005 	strb	r3, [fp, #-5]
  10185c:	ea000019 	b	1018c8 <alt_clk_pll_source_get+0x108>
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  101860:	e55b300d 	ldrb	r3, [fp, #-13]
  101864:	e353000b 	cmp	r3, #11
  101868:	1a000016 	bne	1018c8 <alt_clk_pll_source_get+0x108>
    {
        /* three possible clock sources for the SDRAM PLL */
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
  10186c:	e30430c0 	movw	r3, #16576	; 0x40c0
  101870:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101874:	e5933000 	ldr	r3, [r3]
  101878:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  10187c:	e1a03b23 	lsr	r3, r3, #22
  101880:	e50b300c 	str	r3, [fp, #-12]
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
  101884:	e51b300c 	ldr	r3, [fp, #-12]
  101888:	e3530000 	cmp	r3, #0
  10188c:	1a000002 	bne	10189c <alt_clk_pll_source_get+0xdc>
        {
            ret = ALT_CLK_IN_PIN_OSC1;
  101890:	e3a03000 	mov	r3, #0
  101894:	e54b3005 	strb	r3, [fp, #-5]
  101898:	ea00000a 	b	1018c8 <alt_clk_pll_source_get+0x108>
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
  10189c:	e51b300c 	ldr	r3, [fp, #-12]
  1018a0:	e3530001 	cmp	r3, #1
  1018a4:	1a000002 	bne	1018b4 <alt_clk_pll_source_get+0xf4>
        {
            ret = ALT_CLK_IN_PIN_OSC2;
  1018a8:	e3a03001 	mov	r3, #1
  1018ac:	e54b3005 	strb	r3, [fp, #-5]
  1018b0:	ea000004 	b	1018c8 <alt_clk_pll_source_get+0x108>
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
  1018b4:	e51b300c 	ldr	r3, [fp, #-12]
  1018b8:	e3530002 	cmp	r3, #2
  1018bc:	1a000001 	bne	1018c8 <alt_clk_pll_source_get+0x108>
        {
            ret = ALT_CLK_F2H_SDRAM_REF;
  1018c0:	e3a03003 	mov	r3, #3
  1018c4:	e54b3005 	strb	r3, [fp, #-5]
        }
    }
    return ret;
  1018c8:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd000 	sub	sp, fp, #0
  1018d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1018d8:	e12fff1e 	bx	lr

001018dc <alt_clk_clock_disable>:
/*
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
  1018dc:	e92d4800 	push	{fp, lr}
  1018e0:	e28db004 	add	fp, sp, #4
  1018e4:	e24dd010 	sub	sp, sp, #16
  1018e8:	e1a03000 	mov	r3, r0
  1018ec:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  1018f0:	e3a03000 	mov	r3, #0
  1018f4:	e50b3008 	str	r3, [fp, #-8]

    switch (clk)
  1018f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1018fc:	e2433009 	sub	r3, r3, #9
  101900:	e3530037 	cmp	r3, #55	; 0x37
  101904:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  101908:	ea000118 	b	101d70 <alt_clk_clock_disable+0x494>
  10190c:	001019ec 	andseq	r1, r0, ip, ror #19
  101910:	001019ec 	andseq	r1, r0, ip, ror #19
  101914:	001019ec 	andseq	r1, r0, ip, ror #19
  101918:	00101d70 	andseq	r1, r0, r0, ror sp
  10191c:	00101d70 	andseq	r1, r0, r0, ror sp
  101920:	00101d70 	andseq	r1, r0, r0, ror sp
  101924:	00101d70 	andseq	r1, r0, r0, ror sp
  101928:	00101d70 	andseq	r1, r0, r0, ror sp
  10192c:	00101d70 	andseq	r1, r0, r0, ror sp
  101930:	00101d70 	andseq	r1, r0, r0, ror sp
  101934:	00101d70 	andseq	r1, r0, r0, ror sp
  101938:	00101d70 	andseq	r1, r0, r0, ror sp
  10193c:	00101d70 	andseq	r1, r0, r0, ror sp
  101940:	00101d70 	andseq	r1, r0, r0, ror sp
  101944:	00101a24 	andseq	r1, r0, r4, lsr #20
  101948:	00101d70 	andseq	r1, r0, r0, ror sp
  10194c:	00101a04 	andseq	r1, r0, r4, lsl #20
  101950:	00101a44 	andseq	r1, r0, r4, asr #20
  101954:	00101a64 	andseq	r1, r0, r4, ror #20
  101958:	00101d70 	andseq	r1, r0, r0, ror sp
  10195c:	00101a84 	andseq	r1, r0, r4, lsl #21
  101960:	00101ac4 	andseq	r1, r0, r4, asr #21
  101964:	00101ae4 	andseq	r1, r0, r4, ror #21
  101968:	00101aa4 	andseq	r1, r0, r4, lsr #21
  10196c:	00101d70 	andseq	r1, r0, r0, ror sp
  101970:	00101d70 	andseq	r1, r0, r0, ror sp
  101974:	00101b04 	andseq	r1, r0, r4, lsl #22
  101978:	00101b24 	andseq	r1, r0, r4, lsr #22
  10197c:	00101d70 	andseq	r1, r0, r0, ror sp
  101980:	00101d70 	andseq	r1, r0, r0, ror sp
  101984:	00101d70 	andseq	r1, r0, r0, ror sp
  101988:	00101d70 	andseq	r1, r0, r0, ror sp
  10198c:	00101d70 	andseq	r1, r0, r0, ror sp
  101990:	00101d70 	andseq	r1, r0, r0, ror sp
  101994:	00101b84 	andseq	r1, r0, r4, lsl #23
  101998:	00101ba4 	andseq	r1, r0, r4, lsr #23
  10199c:	00101cd0 			; <UNDEFINED> instruction: 0x00101cd0
  1019a0:	00101c64 	andseq	r1, r0, r4, ror #24
  1019a4:	00101cb0 			; <UNDEFINED> instruction: 0x00101cb0
  1019a8:	00101c44 	andseq	r1, r0, r4, asr #24
  1019ac:	00101b44 	andseq	r1, r0, r4, asr #22
  1019b0:	00101b64 	andseq	r1, r0, r4, ror #22
  1019b4:	00101bc4 	andseq	r1, r0, r4, asr #23
  1019b8:	00101be4 	andseq	r1, r0, r4, ror #23
  1019bc:	00101c04 	andseq	r1, r0, r4, lsl #24
  1019c0:	00101c24 	andseq	r1, r0, r4, lsr #24
  1019c4:	00101d70 	andseq	r1, r0, r0, ror sp
  1019c8:	00101d70 	andseq	r1, r0, r0, ror sp
  1019cc:	00101d70 	andseq	r1, r0, r0, ror sp
  1019d0:	00101d70 	andseq	r1, r0, r0, ror sp
  1019d4:	00101d70 	andseq	r1, r0, r0, ror sp
  1019d8:	00101d70 	andseq	r1, r0, r0, ror sp
  1019dc:	00101cf0 			; <UNDEFINED> instruction: 0x00101cf0
  1019e0:	00101d10 	andseq	r1, r0, r0, lsl sp
  1019e4:	00101d30 	andseq	r1, r0, r0, lsr sp
  1019e8:	00101d50 	andseq	r1, r0, r0, asr sp
    {
        /* For PLLs, put them in bypass mode. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_PERIPHERAL_PLL:
    case ALT_CLK_SDRAM_PLL:
        status = alt_clk_pll_bypass_enable(clk, false);
  1019ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1019f0:	e3a01000 	mov	r1, #0
  1019f4:	e1a00003 	mov	r0, r3
  1019f8:	ebfffe4f 	bl	10133c <alt_clk_pll_bypass_enable>
  1019fc:	e50b0008 	str	r0, [fp, #-8]
        break;
  101a00:	ea0000dd 	b	101d7c <alt_clk_clock_disable+0x4a0>

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
  101a04:	e3043060 	movw	r3, #16480	; 0x4060
  101a08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101a0c:	e3042060 	movw	r2, #16480	; 0x4060
  101a10:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101a14:	e5922000 	ldr	r2, [r2]
  101a18:	e3c22001 	bic	r2, r2, #1
  101a1c:	e5832000 	str	r2, [r3]
        break;
  101a20:	ea0000d5 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_L3_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
  101a24:	e3043060 	movw	r3, #16480	; 0x4060
  101a28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101a2c:	e3042060 	movw	r2, #16480	; 0x4060
  101a30:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101a34:	e5922000 	ldr	r2, [r2]
  101a38:	e3c22002 	bic	r2, r2, #2
  101a3c:	e5832000 	str	r2, [r3]
        break;
  101a40:	ea0000cd 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_L4_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
  101a44:	e3043060 	movw	r3, #16480	; 0x4060
  101a48:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101a4c:	e3042060 	movw	r2, #16480	; 0x4060
  101a50:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101a54:	e5922000 	ldr	r2, [r2]
  101a58:	e3c22004 	bic	r2, r2, #4
  101a5c:	e5832000 	str	r2, [r3]
        break;
  101a60:	ea0000c5 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_L4_SP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
  101a64:	e3043060 	movw	r3, #16480	; 0x4060
  101a68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101a6c:	e3042060 	movw	r2, #16480	; 0x4060
  101a70:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101a74:	e5922000 	ldr	r2, [r2]
  101a78:	e3c22008 	bic	r2, r2, #8
  101a7c:	e5832000 	str	r2, [r3]
        break;
  101a80:	ea0000bd 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_DBG_AT:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
  101a84:	e3043060 	movw	r3, #16480	; 0x4060
  101a88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101a8c:	e3042060 	movw	r2, #16480	; 0x4060
  101a90:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101a94:	e5922000 	ldr	r2, [r2]
  101a98:	e3c22010 	bic	r2, r2, #16
  101a9c:	e5832000 	str	r2, [r3]
        break;
  101aa0:	ea0000b5 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_DBG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
  101aa4:	e3043060 	movw	r3, #16480	; 0x4060
  101aa8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101aac:	e3042060 	movw	r2, #16480	; 0x4060
  101ab0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101ab4:	e5922000 	ldr	r2, [r2]
  101ab8:	e3c22020 	bic	r2, r2, #32
  101abc:	e5832000 	str	r2, [r3]
        break;
  101ac0:	ea0000ad 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_DBG_TRACE:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
  101ac4:	e3043060 	movw	r3, #16480	; 0x4060
  101ac8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101acc:	e3042060 	movw	r2, #16480	; 0x4060
  101ad0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101ad4:	e5922000 	ldr	r2, [r2]
  101ad8:	e3c22040 	bic	r2, r2, #64	; 0x40
  101adc:	e5832000 	str	r2, [r3]
        break;
  101ae0:	ea0000a5 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_DBG_TIMER:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
  101ae4:	e3043060 	movw	r3, #16480	; 0x4060
  101ae8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101aec:	e3042060 	movw	r2, #16480	; 0x4060
  101af0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101af4:	e5922000 	ldr	r2, [r2]
  101af8:	e3c22080 	bic	r2, r2, #128	; 0x80
  101afc:	e5832000 	str	r2, [r3]
        break;
  101b00:	ea00009d 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_CFG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
  101b04:	e3043060 	movw	r3, #16480	; 0x4060
  101b08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101b0c:	e3042060 	movw	r2, #16480	; 0x4060
  101b10:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101b14:	e5922000 	ldr	r2, [r2]
  101b18:	e3c22c01 	bic	r2, r2, #256	; 0x100
  101b1c:	e5832000 	str	r2, [r3]
        break;
  101b20:	ea000095 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_H2F_USER0:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
  101b24:	e3043060 	movw	r3, #16480	; 0x4060
  101b28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101b2c:	e3042060 	movw	r2, #16480	; 0x4060
  101b30:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101b34:	e5922000 	ldr	r2, [r2]
  101b38:	e3c22c02 	bic	r2, r2, #512	; 0x200
  101b3c:	e5832000 	str	r2, [r3]
        break;
  101b40:	ea00008d 	b	101d7c <alt_clk_clock_disable+0x4a0>

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
  101b44:	e30430a0 	movw	r3, #16544	; 0x40a0
  101b48:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101b4c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101b50:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101b54:	e5922000 	ldr	r2, [r2]
  101b58:	e3c22001 	bic	r2, r2, #1
  101b5c:	e5832000 	str	r2, [r3]
        break;
  101b60:	ea000085 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_EMAC1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
  101b64:	e30430a0 	movw	r3, #16544	; 0x40a0
  101b68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101b6c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101b70:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101b74:	e5922000 	ldr	r2, [r2]
  101b78:	e3c22002 	bic	r2, r2, #2
  101b7c:	e5832000 	str	r2, [r3]
        break;
  101b80:	ea00007d 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_USB_MP:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK);
  101b84:	e30430a0 	movw	r3, #16544	; 0x40a0
  101b88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101b8c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101b90:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101b94:	e5922000 	ldr	r2, [r2]
  101b98:	e3c22004 	bic	r2, r2, #4
  101b9c:	e5832000 	str	r2, [r3]
        break;
  101ba0:	ea000075 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_SPI_M:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
  101ba4:	e30430a0 	movw	r3, #16544	; 0x40a0
  101ba8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101bac:	e30420a0 	movw	r2, #16544	; 0x40a0
  101bb0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101bb4:	e5922000 	ldr	r2, [r2]
  101bb8:	e3c22008 	bic	r2, r2, #8
  101bbc:	e5832000 	str	r2, [r3]
        break;
  101bc0:	ea00006d 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_CAN0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
  101bc4:	e30430a0 	movw	r3, #16544	; 0x40a0
  101bc8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101bcc:	e30420a0 	movw	r2, #16544	; 0x40a0
  101bd0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101bd4:	e5922000 	ldr	r2, [r2]
  101bd8:	e3c22010 	bic	r2, r2, #16
  101bdc:	e5832000 	str	r2, [r3]
        break;
  101be0:	ea000065 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_CAN1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
  101be4:	e30430a0 	movw	r3, #16544	; 0x40a0
  101be8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101bec:	e30420a0 	movw	r2, #16544	; 0x40a0
  101bf0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101bf4:	e5922000 	ldr	r2, [r2]
  101bf8:	e3c22020 	bic	r2, r2, #32
  101bfc:	e5832000 	str	r2, [r3]
        break;
  101c00:	ea00005d 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_GPIO_DB:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
  101c04:	e30430a0 	movw	r3, #16544	; 0x40a0
  101c08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101c0c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101c10:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101c14:	e5922000 	ldr	r2, [r2]
  101c18:	e3c22040 	bic	r2, r2, #64	; 0x40
  101c1c:	e5832000 	str	r2, [r3]
        break;
  101c20:	ea000055 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_H2F_USER1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
  101c24:	e30430a0 	movw	r3, #16544	; 0x40a0
  101c28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101c2c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101c30:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101c34:	e5922000 	ldr	r2, [r2]
  101c38:	e3c22080 	bic	r2, r2, #128	; 0x80
  101c3c:	e5832000 	str	r2, [r3]
        break;
  101c40:	ea00004d 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_SDMMC:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
  101c44:	e30430a0 	movw	r3, #16544	; 0x40a0
  101c48:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101c4c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101c50:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101c54:	e5922000 	ldr	r2, [r2]
  101c58:	e3c22c01 	bic	r2, r2, #256	; 0x100
  101c5c:	e5832000 	str	r2, [r3]
        break;
  101c60:	ea000045 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_NAND_X:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
  101c64:	e30430a0 	movw	r3, #16544	; 0x40a0
  101c68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101c6c:	e30420a0 	movw	r2, #16544	; 0x40a0
  101c70:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101c74:	e5922000 	ldr	r2, [r2]
  101c78:	e3c22b01 	bic	r2, r2, #1024	; 0x400
  101c7c:	e5832000 	str	r2, [r3]
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
  101c80:	e3a01008 	mov	r1, #8
  101c84:	e30400a0 	movw	r0, #16544	; 0x40a0
  101c88:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  101c8c:	ebfffb87 	bl	100ab0 <alt_clk_mgr_wait>
        /* gate nand_clk off before nand_x_clk. */
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
  101c90:	e30430a0 	movw	r3, #16544	; 0x40a0
  101c94:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101c98:	e30420a0 	movw	r2, #16544	; 0x40a0
  101c9c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101ca0:	e5922000 	ldr	r2, [r2]
  101ca4:	e3c22c02 	bic	r2, r2, #512	; 0x200
  101ca8:	e5832000 	str	r2, [r3]
        break;
  101cac:	ea000032 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_NAND:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
  101cb0:	e30430a0 	movw	r3, #16544	; 0x40a0
  101cb4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101cb8:	e30420a0 	movw	r2, #16544	; 0x40a0
  101cbc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101cc0:	e5922000 	ldr	r2, [r2]
  101cc4:	e3c22b01 	bic	r2, r2, #1024	; 0x400
  101cc8:	e5832000 	str	r2, [r3]
        break;
  101ccc:	ea00002a 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_QSPI:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
  101cd0:	e30430a0 	movw	r3, #16544	; 0x40a0
  101cd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101cd8:	e30420a0 	movw	r2, #16544	; 0x40a0
  101cdc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101ce0:	e5922000 	ldr	r2, [r2]
  101ce4:	e3c22b02 	bic	r2, r2, #2048	; 0x800
  101ce8:	e5832000 	str	r2, [r3]
        break;
  101cec:	ea000022 	b	101d7c <alt_clk_clock_disable+0x4a0>

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
  101cf0:	e30430d8 	movw	r3, #16600	; 0x40d8
  101cf4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101cf8:	e30420d8 	movw	r2, #16600	; 0x40d8
  101cfc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101d00:	e5922000 	ldr	r2, [r2]
  101d04:	e3c22001 	bic	r2, r2, #1
  101d08:	e5832000 	str	r2, [r3]
        break;
  101d0c:	ea00001a 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_DDR_2X_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
  101d10:	e30430d8 	movw	r3, #16600	; 0x40d8
  101d14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101d18:	e30420d8 	movw	r2, #16600	; 0x40d8
  101d1c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101d20:	e5922000 	ldr	r2, [r2]
  101d24:	e3c22002 	bic	r2, r2, #2
  101d28:	e5832000 	str	r2, [r3]
        break;
  101d2c:	ea000012 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_DDR_DQ:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
  101d30:	e30430d8 	movw	r3, #16600	; 0x40d8
  101d34:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101d38:	e30420d8 	movw	r2, #16600	; 0x40d8
  101d3c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101d40:	e5922000 	ldr	r2, [r2]
  101d44:	e3c22004 	bic	r2, r2, #4
  101d48:	e5832000 	str	r2, [r3]
        break;
  101d4c:	ea00000a 	b	101d7c <alt_clk_clock_disable+0x4a0>
    case ALT_CLK_H2F_USER2:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
  101d50:	e30430d8 	movw	r3, #16600	; 0x40d8
  101d54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101d58:	e30420d8 	movw	r2, #16600	; 0x40d8
  101d5c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101d60:	e5922000 	ldr	r2, [r2]
  101d64:	e3c22008 	bic	r2, r2, #8
  101d68:	e5832000 	str	r2, [r3]
        break;
  101d6c:	ea000002 	b	101d7c <alt_clk_clock_disable+0x4a0>

    default:
        status = ALT_E_BAD_ARG;
  101d70:	e3e03008 	mvn	r3, #8
  101d74:	e50b3008 	str	r3, [fp, #-8]
        break;
  101d78:	e1a00000 	nop			; (mov r0, r0)
    }

    return status;
  101d7c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101d80:	e1a00003 	mov	r0, r3
  101d84:	e24bd004 	sub	sp, fp, #4
  101d88:	e8bd8800 	pop	{fp, pc}

00101d8c <alt_clk_clock_enable>:
/*
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
  101d8c:	e92d4800 	push	{fp, lr}
  101d90:	e28db004 	add	fp, sp, #4
  101d94:	e24dd010 	sub	sp, sp, #16
  101d98:	e1a03000 	mov	r3, r0
  101d9c:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  101da0:	e3a03000 	mov	r3, #0
  101da4:	e50b3008 	str	r3, [fp, #-8]

    switch (clk)
  101da8:	e55b300d 	ldrb	r3, [fp, #-13]
  101dac:	e2433009 	sub	r3, r3, #9
  101db0:	e3530037 	cmp	r3, #55	; 0x37
  101db4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  101db8:	ea00011b 	b	10222c <alt_clk_clock_enable+0x4a0>
  101dbc:	00101e9c 	mulseq	r0, ip, lr
  101dc0:	00101e9c 	mulseq	r0, ip, lr
  101dc4:	00101e9c 	mulseq	r0, ip, lr
  101dc8:	0010222c 	andseq	r2, r0, ip, lsr #4
  101dcc:	0010222c 	andseq	r2, r0, ip, lsr #4
  101dd0:	0010222c 	andseq	r2, r0, ip, lsr #4
  101dd4:	0010222c 	andseq	r2, r0, ip, lsr #4
  101dd8:	0010222c 	andseq	r2, r0, ip, lsr #4
  101ddc:	0010222c 	andseq	r2, r0, ip, lsr #4
  101de0:	0010222c 	andseq	r2, r0, ip, lsr #4
  101de4:	0010222c 	andseq	r2, r0, ip, lsr #4
  101de8:	0010222c 	andseq	r2, r0, ip, lsr #4
  101dec:	0010222c 	andseq	r2, r0, ip, lsr #4
  101df0:	0010222c 	andseq	r2, r0, ip, lsr #4
  101df4:	00101ed0 			; <UNDEFINED> instruction: 0x00101ed0
  101df8:	0010222c 	andseq	r2, r0, ip, lsr #4
  101dfc:	00101eb0 			; <UNDEFINED> instruction: 0x00101eb0
  101e00:	00101ef0 			; <UNDEFINED> instruction: 0x00101ef0
  101e04:	00101f10 	andseq	r1, r0, r0, lsl pc
  101e08:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e0c:	00101f30 	andseq	r1, r0, r0, lsr pc
  101e10:	00101f70 	andseq	r1, r0, r0, ror pc
  101e14:	00101f90 	mulseq	r0, r0, pc	; <UNPREDICTABLE>
  101e18:	00101f50 	andseq	r1, r0, r0, asr pc
  101e1c:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e20:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e24:	00101fb0 			; <UNDEFINED> instruction: 0x00101fb0
  101e28:	00101fd0 			; <UNDEFINED> instruction: 0x00101fd0
  101e2c:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e30:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e34:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e38:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e3c:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e40:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e44:	00102030 	andseq	r2, r0, r0, lsr r0
  101e48:	00102050 	andseq	r2, r0, r0, asr r0
  101e4c:	0010218c 	andseq	r2, r0, ip, lsl #3
  101e50:	00102110 	andseq	r2, r0, r0, lsl r1
  101e54:	00102140 	andseq	r2, r0, r0, asr #2
  101e58:	001020f0 	ldrsheq	r2, [r0], -r0
  101e5c:	00101ff0 			; <UNDEFINED> instruction: 0x00101ff0
  101e60:	00102010 	andseq	r2, r0, r0, lsl r0
  101e64:	00102070 	andseq	r2, r0, r0, ror r0
  101e68:	00102090 	mulseq	r0, r0, r0
  101e6c:	001020b0 	ldrheq	r2, [r0], -r0
  101e70:	001020d0 	ldrsbeq	r2, [r0], -r0
  101e74:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e78:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e7c:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e80:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e84:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e88:	0010222c 	andseq	r2, r0, ip, lsr #4
  101e8c:	001021ac 	andseq	r2, r0, ip, lsr #3
  101e90:	001021cc 	andseq	r2, r0, ip, asr #3
  101e94:	001021ec 	andseq	r2, r0, ip, ror #3
  101e98:	0010220c 	andseq	r2, r0, ip, lsl #4
    {
        /* For PLLs, take them out of bypass mode. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_PERIPHERAL_PLL:
    case ALT_CLK_SDRAM_PLL:
        status = alt_clk_pll_bypass_disable(clk);
  101e9c:	e55b300d 	ldrb	r3, [fp, #-13]
  101ea0:	e1a00003 	mov	r0, r3
  101ea4:	ebfffc35 	bl	100f80 <alt_clk_pll_bypass_disable>
  101ea8:	e50b0008 	str	r0, [fp, #-8]
        break;
  101eac:	ea0000e1 	b	102238 <alt_clk_clock_enable+0x4ac>

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
  101eb0:	e3043060 	movw	r3, #16480	; 0x4060
  101eb4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101eb8:	e3042060 	movw	r2, #16480	; 0x4060
  101ebc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101ec0:	e5922000 	ldr	r2, [r2]
  101ec4:	e3822001 	orr	r2, r2, #1
  101ec8:	e5832000 	str	r2, [r3]
        break;
  101ecc:	ea0000d9 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_L3_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
  101ed0:	e3043060 	movw	r3, #16480	; 0x4060
  101ed4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101ed8:	e3042060 	movw	r2, #16480	; 0x4060
  101edc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101ee0:	e5922000 	ldr	r2, [r2]
  101ee4:	e3822002 	orr	r2, r2, #2
  101ee8:	e5832000 	str	r2, [r3]
        break;
  101eec:	ea0000d1 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_L4_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
  101ef0:	e3043060 	movw	r3, #16480	; 0x4060
  101ef4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101ef8:	e3042060 	movw	r2, #16480	; 0x4060
  101efc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101f00:	e5922000 	ldr	r2, [r2]
  101f04:	e3822004 	orr	r2, r2, #4
  101f08:	e5832000 	str	r2, [r3]
        break;
  101f0c:	ea0000c9 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_L4_SP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
  101f10:	e3043060 	movw	r3, #16480	; 0x4060
  101f14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101f18:	e3042060 	movw	r2, #16480	; 0x4060
  101f1c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101f20:	e5922000 	ldr	r2, [r2]
  101f24:	e3822008 	orr	r2, r2, #8
  101f28:	e5832000 	str	r2, [r3]
        break;
  101f2c:	ea0000c1 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_DBG_AT:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
  101f30:	e3043060 	movw	r3, #16480	; 0x4060
  101f34:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101f38:	e3042060 	movw	r2, #16480	; 0x4060
  101f3c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101f40:	e5922000 	ldr	r2, [r2]
  101f44:	e3822010 	orr	r2, r2, #16
  101f48:	e5832000 	str	r2, [r3]
        break;
  101f4c:	ea0000b9 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_DBG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
  101f50:	e3043060 	movw	r3, #16480	; 0x4060
  101f54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101f58:	e3042060 	movw	r2, #16480	; 0x4060
  101f5c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101f60:	e5922000 	ldr	r2, [r2]
  101f64:	e3822020 	orr	r2, r2, #32
  101f68:	e5832000 	str	r2, [r3]
        break;
  101f6c:	ea0000b1 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_DBG_TRACE:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
  101f70:	e3043060 	movw	r3, #16480	; 0x4060
  101f74:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101f78:	e3042060 	movw	r2, #16480	; 0x4060
  101f7c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101f80:	e5922000 	ldr	r2, [r2]
  101f84:	e3822040 	orr	r2, r2, #64	; 0x40
  101f88:	e5832000 	str	r2, [r3]
        break;
  101f8c:	ea0000a9 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_DBG_TIMER:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
  101f90:	e3043060 	movw	r3, #16480	; 0x4060
  101f94:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101f98:	e3042060 	movw	r2, #16480	; 0x4060
  101f9c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101fa0:	e5922000 	ldr	r2, [r2]
  101fa4:	e3822080 	orr	r2, r2, #128	; 0x80
  101fa8:	e5832000 	str	r2, [r3]
        break;
  101fac:	ea0000a1 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_CFG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
  101fb0:	e3043060 	movw	r3, #16480	; 0x4060
  101fb4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101fb8:	e3042060 	movw	r2, #16480	; 0x4060
  101fbc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101fc0:	e5922000 	ldr	r2, [r2]
  101fc4:	e3822c01 	orr	r2, r2, #256	; 0x100
  101fc8:	e5832000 	str	r2, [r3]
        break;
  101fcc:	ea000099 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_H2F_USER0:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
  101fd0:	e3043060 	movw	r3, #16480	; 0x4060
  101fd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101fd8:	e3042060 	movw	r2, #16480	; 0x4060
  101fdc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  101fe0:	e5922000 	ldr	r2, [r2]
  101fe4:	e3822c02 	orr	r2, r2, #512	; 0x200
  101fe8:	e5832000 	str	r2, [r3]
        break;
  101fec:	ea000091 	b	102238 <alt_clk_clock_enable+0x4ac>

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
  101ff0:	e30430a0 	movw	r3, #16544	; 0x40a0
  101ff4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  101ff8:	e30420a0 	movw	r2, #16544	; 0x40a0
  101ffc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102000:	e5922000 	ldr	r2, [r2]
  102004:	e3822001 	orr	r2, r2, #1
  102008:	e5832000 	str	r2, [r3]
        break;
  10200c:	ea000089 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_EMAC1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
  102010:	e30430a0 	movw	r3, #16544	; 0x40a0
  102014:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102018:	e30420a0 	movw	r2, #16544	; 0x40a0
  10201c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102020:	e5922000 	ldr	r2, [r2]
  102024:	e3822002 	orr	r2, r2, #2
  102028:	e5832000 	str	r2, [r3]
        break;
  10202c:	ea000081 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_USB_MP:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK);
  102030:	e30430a0 	movw	r3, #16544	; 0x40a0
  102034:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102038:	e30420a0 	movw	r2, #16544	; 0x40a0
  10203c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102040:	e5922000 	ldr	r2, [r2]
  102044:	e3822004 	orr	r2, r2, #4
  102048:	e5832000 	str	r2, [r3]
        break;
  10204c:	ea000079 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_SPI_M:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
  102050:	e30430a0 	movw	r3, #16544	; 0x40a0
  102054:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102058:	e30420a0 	movw	r2, #16544	; 0x40a0
  10205c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102060:	e5922000 	ldr	r2, [r2]
  102064:	e3822008 	orr	r2, r2, #8
  102068:	e5832000 	str	r2, [r3]
        break;
  10206c:	ea000071 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_CAN0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
  102070:	e30430a0 	movw	r3, #16544	; 0x40a0
  102074:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102078:	e30420a0 	movw	r2, #16544	; 0x40a0
  10207c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102080:	e5922000 	ldr	r2, [r2]
  102084:	e3822010 	orr	r2, r2, #16
  102088:	e5832000 	str	r2, [r3]
        break;
  10208c:	ea000069 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_CAN1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
  102090:	e30430a0 	movw	r3, #16544	; 0x40a0
  102094:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102098:	e30420a0 	movw	r2, #16544	; 0x40a0
  10209c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1020a0:	e5922000 	ldr	r2, [r2]
  1020a4:	e3822020 	orr	r2, r2, #32
  1020a8:	e5832000 	str	r2, [r3]
        break;
  1020ac:	ea000061 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_GPIO_DB:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
  1020b0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1020b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1020b8:	e30420a0 	movw	r2, #16544	; 0x40a0
  1020bc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1020c0:	e5922000 	ldr	r2, [r2]
  1020c4:	e3822040 	orr	r2, r2, #64	; 0x40
  1020c8:	e5832000 	str	r2, [r3]
        break;
  1020cc:	ea000059 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_H2F_USER1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
  1020d0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1020d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1020d8:	e30420a0 	movw	r2, #16544	; 0x40a0
  1020dc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1020e0:	e5922000 	ldr	r2, [r2]
  1020e4:	e3822080 	orr	r2, r2, #128	; 0x80
  1020e8:	e5832000 	str	r2, [r3]
        break;
  1020ec:	ea000051 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_SDMMC:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
  1020f0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1020f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1020f8:	e30420a0 	movw	r2, #16544	; 0x40a0
  1020fc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102100:	e5922000 	ldr	r2, [r2]
  102104:	e3822c01 	orr	r2, r2, #256	; 0x100
  102108:	e5832000 	str	r2, [r3]
        break;
  10210c:	ea000049 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_NAND_X:
        /* implementation detail - should ALK_CLK_NAND be gated off here before enabling ALT_CLK_NAND_X? */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
  102110:	e30430a0 	movw	r3, #16544	; 0x40a0
  102114:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102118:	e30420a0 	movw	r2, #16544	; 0x40a0
  10211c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102120:	e5922000 	ldr	r2, [r2]
  102124:	e3822c02 	orr	r2, r2, #512	; 0x200
  102128:	e5832000 	str	r2, [r3]
        /* implementation detail - should this wait be enforced here? */
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
  10212c:	e3a01008 	mov	r1, #8
  102130:	e30400a0 	movw	r0, #16544	; 0x40a0
  102134:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  102138:	ebfffa5c 	bl	100ab0 <alt_clk_mgr_wait>
        break;
  10213c:	ea00003d 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_NAND:
        /* enabling ALT_CLK_NAND always implies enabling ALT_CLK_NAND_X first */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
  102140:	e30430a0 	movw	r3, #16544	; 0x40a0
  102144:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102148:	e30420a0 	movw	r2, #16544	; 0x40a0
  10214c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  102150:	e5922000 	ldr	r2, [r2]
  102154:	e3822c02 	orr	r2, r2, #512	; 0x200
  102158:	e5832000 	str	r2, [r3]
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
  10215c:	e3a01008 	mov	r1, #8
  102160:	e30400a0 	movw	r0, #16544	; 0x40a0
  102164:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  102168:	ebfffa50 	bl	100ab0 <alt_clk_mgr_wait>
        /* gate nand_x_clk on at least 8 MCU clocks before nand_clk */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
  10216c:	e30430a0 	movw	r3, #16544	; 0x40a0
  102170:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102174:	e30420a0 	movw	r2, #16544	; 0x40a0
  102178:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10217c:	e5922000 	ldr	r2, [r2]
  102180:	e3822b01 	orr	r2, r2, #1024	; 0x400
  102184:	e5832000 	str	r2, [r3]
        break;
  102188:	ea00002a 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_QSPI:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
  10218c:	e30430a0 	movw	r3, #16544	; 0x40a0
  102190:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102194:	e30420a0 	movw	r2, #16544	; 0x40a0
  102198:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10219c:	e5922000 	ldr	r2, [r2]
  1021a0:	e3822b02 	orr	r2, r2, #2048	; 0x800
  1021a4:	e5832000 	str	r2, [r3]
        break;
  1021a8:	ea000022 	b	102238 <alt_clk_clock_enable+0x4ac>

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
  1021ac:	e30430d8 	movw	r3, #16600	; 0x40d8
  1021b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1021b4:	e30420d8 	movw	r2, #16600	; 0x40d8
  1021b8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1021bc:	e5922000 	ldr	r2, [r2]
  1021c0:	e3822001 	orr	r2, r2, #1
  1021c4:	e5832000 	str	r2, [r3]
        break;
  1021c8:	ea00001a 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_DDR_2X_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
  1021cc:	e30430d8 	movw	r3, #16600	; 0x40d8
  1021d0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1021d4:	e30420d8 	movw	r2, #16600	; 0x40d8
  1021d8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1021dc:	e5922000 	ldr	r2, [r2]
  1021e0:	e3822002 	orr	r2, r2, #2
  1021e4:	e5832000 	str	r2, [r3]
        break;
  1021e8:	ea000012 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_DDR_DQ:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
  1021ec:	e30430d8 	movw	r3, #16600	; 0x40d8
  1021f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1021f4:	e30420d8 	movw	r2, #16600	; 0x40d8
  1021f8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1021fc:	e5922000 	ldr	r2, [r2]
  102200:	e3822004 	orr	r2, r2, #4
  102204:	e5832000 	str	r2, [r3]
        break;
  102208:	ea00000a 	b	102238 <alt_clk_clock_enable+0x4ac>
    case ALT_CLK_H2F_USER2:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
  10220c:	e30430d8 	movw	r3, #16600	; 0x40d8
  102210:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102214:	e30420d8 	movw	r2, #16600	; 0x40d8
  102218:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10221c:	e5922000 	ldr	r2, [r2]
  102220:	e3822008 	orr	r2, r2, #8
  102224:	e5832000 	str	r2, [r3]
        break;
  102228:	ea000002 	b	102238 <alt_clk_clock_enable+0x4ac>

    default:
        status = ALT_E_BAD_ARG;
  10222c:	e3e03008 	mvn	r3, #8
  102230:	e50b3008 	str	r3, [fp, #-8]
        break;
  102234:	e1a00000 	nop			; (mov r0, r0)
    }

    return status;
  102238:	e51b3008 	ldr	r3, [fp, #-8]
}
  10223c:	e1a00003 	mov	r0, r3
  102240:	e24bd004 	sub	sp, fp, #4
  102244:	e8bd8800 	pop	{fp, pc}

00102248 <alt_clk_is_enabled>:

/*
// alt_clk_is_enabled() returns whether the specified clock is enabled or not.
*/
ALT_STATUS_CODE alt_clk_is_enabled(ALT_CLK_t clk)
{
  102248:	e92d4800 	push	{fp, lr}
  10224c:	e28db004 	add	fp, sp, #4
  102250:	e24dd010 	sub	sp, sp, #16
  102254:	e1a03000 	mov	r3, r0
  102258:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
  10225c:	e3e03008 	mvn	r3, #8
  102260:	e50b3008 	str	r3, [fp, #-8]

    switch (clk)
  102264:	e55b300d 	ldrb	r3, [fp, #-13]
  102268:	e2433009 	sub	r3, r3, #9
  10226c:	e3530037 	cmp	r3, #55	; 0x37
  102270:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102274:	ea00015f 	b	1027f8 <alt_clk_is_enabled+0x5b0>
  102278:	00102358 	andseq	r2, r0, r8, asr r3
  10227c:	00102358 	andseq	r2, r0, r8, asr r3
  102280:	00102358 	andseq	r2, r0, r8, asr r3
  102284:	001027f8 			; <UNDEFINED> instruction: 0x001027f8
  102288:	00102380 	andseq	r2, r0, r0, lsl #7
  10228c:	00102380 	andseq	r2, r0, r0, lsl #7
  102290:	00102380 	andseq	r2, r0, r0, lsl #7
  102294:	00102380 	andseq	r2, r0, r0, lsl #7
  102298:	00102380 	andseq	r2, r0, r0, lsl #7
  10229c:	00102380 	andseq	r2, r0, r0, lsl #7
  1022a0:	00102380 	andseq	r2, r0, r0, lsl #7
  1022a4:	00102380 	andseq	r2, r0, r0, lsl #7
  1022a8:	00102380 	andseq	r2, r0, r0, lsl #7
  1022ac:	00102380 	andseq	r2, r0, r0, lsl #7
  1022b0:	001023b4 			; <UNDEFINED> instruction: 0x001023b4
  1022b4:	00102380 	andseq	r2, r0, r0, lsl #7
  1022b8:	0010238c 	andseq	r2, r0, ip, lsl #7
  1022bc:	001023e0 	andseq	r2, r0, r0, ror #7
  1022c0:	0010240c 	andseq	r2, r0, ip, lsl #8
  1022c4:	00102380 	andseq	r2, r0, r0, lsl #7
  1022c8:	00102438 	andseq	r2, r0, r8, lsr r4
  1022cc:	00102490 	mulseq	r0, r0, r4
  1022d0:	001024bc 			; <UNDEFINED> instruction: 0x001024bc
  1022d4:	00102464 	andseq	r2, r0, r4, ror #8
  1022d8:	00102380 	andseq	r2, r0, r0, lsl #7
  1022dc:	00102380 	andseq	r2, r0, r0, lsl #7
  1022e0:	001024e8 	andseq	r2, r0, r8, ror #9
  1022e4:	00102514 	andseq	r2, r0, r4, lsl r5
  1022e8:	00102380 	andseq	r2, r0, r0, lsl #7
  1022ec:	00102380 	andseq	r2, r0, r0, lsl #7
  1022f0:	00102380 	andseq	r2, r0, r0, lsl #7
  1022f4:	00102380 	andseq	r2, r0, r0, lsl #7
  1022f8:	00102380 	andseq	r2, r0, r0, lsl #7
  1022fc:	00102380 	andseq	r2, r0, r0, lsl #7
  102300:	00102594 	mulseq	r0, r4, r5
  102304:	001025c0 	andseq	r2, r0, r0, asr #11
  102308:	00102720 	andseq	r2, r0, r0, lsr #14
  10230c:	001026c8 	andseq	r2, r0, r8, asr #13
  102310:	001026f4 			; <UNDEFINED> instruction: 0x001026f4
  102314:	0010269c 	mulseq	r0, ip, r6
  102318:	00102540 	andseq	r2, r0, r0, asr #10
  10231c:	00102568 	andseq	r2, r0, r8, ror #10
  102320:	001025ec 	andseq	r2, r0, ip, ror #11
  102324:	00102618 	andseq	r2, r0, r8, lsl r6
  102328:	00102644 	andseq	r2, r0, r4, asr #12
  10232c:	00102670 	andseq	r2, r0, r0, ror r6
  102330:	00102380 	andseq	r2, r0, r0, lsl #7
  102334:	00102380 	andseq	r2, r0, r0, lsl #7
  102338:	00102380 	andseq	r2, r0, r0, lsl #7
  10233c:	001027f8 			; <UNDEFINED> instruction: 0x001027f8
  102340:	001027f8 			; <UNDEFINED> instruction: 0x001027f8
  102344:	00102380 	andseq	r2, r0, r0, lsl #7
  102348:	0010274c 	andseq	r2, r0, ip, asr #14
  10234c:	00102774 	andseq	r2, r0, r4, ror r7
  102350:	001027a0 	andseq	r2, r0, r0, lsr #15
  102354:	001027cc 	andseq	r2, r0, ip, asr #15
    {
        /* For PLLs, this function checks if the PLL is bypassed or not. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_PERIPHERAL_PLL:
    case ALT_CLK_SDRAM_PLL:
        status = (alt_clk_pll_is_bypassed(clk) != ALT_E_TRUE);
  102358:	e55b300d 	ldrb	r3, [fp, #-13]
  10235c:	e1a00003 	mov	r0, r3
  102360:	ebfffccd 	bl	10169c <alt_clk_pll_is_bypassed>
  102364:	e1a03000 	mov	r3, r0
  102368:	e3530001 	cmp	r3, #1
  10236c:	13a03001 	movne	r3, #1
  102370:	03a03000 	moveq	r3, #0
  102374:	e6ef3073 	uxtb	r3, r3
  102378:	e50b3008 	str	r3, [fp, #-8]
        break;
  10237c:	ea000120 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_SDRAM_PLL_C5:
        status = ALT_E_BAD_ARG;
  102380:	e3e03008 	mvn	r3, #8
  102384:	e50b3008 	str	r3, [fp, #-8]
        break;
  102388:	ea00011d 	b	102804 <alt_clk_is_enabled+0x5bc>

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  10238c:	e3043060 	movw	r3, #16480	; 0x4060
  102390:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102394:	e5933000 	ldr	r3, [r3]
  102398:	e2033001 	and	r3, r3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
  10239c:	e3530000 	cmp	r3, #0
  1023a0:	13a03001 	movne	r3, #1
  1023a4:	03a03000 	moveq	r3, #0
  1023a8:	e6ef3073 	uxtb	r3, r3
        status = ALT_E_BAD_ARG;
        break;

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1023ac:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1023b0:	ea000113 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_L3_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1023b4:	e3043060 	movw	r3, #16480	; 0x4060
  1023b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1023bc:	e5933000 	ldr	r3, [r3]
  1023c0:	e2033002 	and	r3, r3, #2
  1023c4:	e1a030a3 	lsr	r3, r3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
  1023c8:	e3530000 	cmp	r3, #0
  1023cc:	13a03001 	movne	r3, #1
  1023d0:	03a03000 	moveq	r3, #0
  1023d4:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_L4_MAIN:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_L3_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1023d8:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1023dc:	ea000108 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_L4_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1023e0:	e3043060 	movw	r3, #16480	; 0x4060
  1023e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1023e8:	e5933000 	ldr	r3, [r3]
  1023ec:	e2033004 	and	r3, r3, #4
  1023f0:	e1a03123 	lsr	r3, r3, #2
            ? ALT_E_TRUE : ALT_E_FALSE;
  1023f4:	e3530000 	cmp	r3, #0
  1023f8:	13a03001 	movne	r3, #1
  1023fc:	03a03000 	moveq	r3, #0
  102400:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_L3_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_L4_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102404:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102408:	ea0000fd 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_L4_SP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  10240c:	e3043060 	movw	r3, #16480	; 0x4060
  102410:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102414:	e5933000 	ldr	r3, [r3]
  102418:	e2033008 	and	r3, r3, #8
  10241c:	e1a031a3 	lsr	r3, r3, #3
            ? ALT_E_TRUE : ALT_E_FALSE;
  102420:	e3530000 	cmp	r3, #0
  102424:	13a03001 	movne	r3, #1
  102428:	03a03000 	moveq	r3, #0
  10242c:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_L4_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_L4_SP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102430:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102434:	ea0000f2 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_DBG_AT:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102438:	e3043060 	movw	r3, #16480	; 0x4060
  10243c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102440:	e5933000 	ldr	r3, [r3]
  102444:	e2033010 	and	r3, r3, #16
  102448:	e1a03223 	lsr	r3, r3, #4
            ? ALT_E_TRUE : ALT_E_FALSE;
  10244c:	e3530000 	cmp	r3, #0
  102450:	13a03001 	movne	r3, #1
  102454:	03a03000 	moveq	r3, #0
  102458:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_L4_SP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG_AT:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  10245c:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102460:	ea0000e7 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_DBG:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102464:	e3043060 	movw	r3, #16480	; 0x4060
  102468:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10246c:	e5933000 	ldr	r3, [r3]
  102470:	e2033020 	and	r3, r3, #32
  102474:	e1a032a3 	lsr	r3, r3, #5
            ? ALT_E_TRUE : ALT_E_FALSE;
  102478:	e3530000 	cmp	r3, #0
  10247c:	13a03001 	movne	r3, #1
  102480:	03a03000 	moveq	r3, #0
  102484:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DBG_AT:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102488:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  10248c:	ea0000dc 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_DBG_TRACE:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102490:	e3043060 	movw	r3, #16480	; 0x4060
  102494:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102498:	e5933000 	ldr	r3, [r3]
  10249c:	e2033040 	and	r3, r3, #64	; 0x40
  1024a0:	e1a03323 	lsr	r3, r3, #6
            ? ALT_E_TRUE : ALT_E_FALSE;
  1024a4:	e3530000 	cmp	r3, #0
  1024a8:	13a03001 	movne	r3, #1
  1024ac:	03a03000 	moveq	r3, #0
  1024b0:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DBG:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG_TRACE:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1024b4:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1024b8:	ea0000d1 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_DBG_TIMER:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1024bc:	e3043060 	movw	r3, #16480	; 0x4060
  1024c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1024c4:	e5933000 	ldr	r3, [r3]
  1024c8:	e2033080 	and	r3, r3, #128	; 0x80
  1024cc:	e1a033a3 	lsr	r3, r3, #7
            ? ALT_E_TRUE : ALT_E_FALSE;
  1024d0:	e3530000 	cmp	r3, #0
  1024d4:	13a03001 	movne	r3, #1
  1024d8:	03a03000 	moveq	r3, #0
  1024dc:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DBG_TRACE:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG_TIMER:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1024e0:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1024e4:	ea0000c6 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_CFG:
        status = (ALT_CLKMGR_MAINPLL_EN_CFGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  1024e8:	e3043060 	movw	r3, #16480	; 0x4060
  1024ec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1024f0:	e5933000 	ldr	r3, [r3]
  1024f4:	e2033c01 	and	r3, r3, #256	; 0x100
  1024f8:	e1a03423 	lsr	r3, r3, #8
            ? ALT_E_TRUE : ALT_E_FALSE;
  1024fc:	e3530000 	cmp	r3, #0
  102500:	13a03001 	movne	r3, #1
  102504:	03a03000 	moveq	r3, #0
  102508:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DBG_TIMER:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_CFG:
        status = (ALT_CLKMGR_MAINPLL_EN_CFGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  10250c:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102510:	ea0000bb 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_H2F_USER0:
        status = (ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102514:	e3043060 	movw	r3, #16480	; 0x4060
  102518:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10251c:	e5933000 	ldr	r3, [r3]
  102520:	e2033c02 	and	r3, r3, #512	; 0x200
  102524:	e1a034a3 	lsr	r3, r3, #9
            ? ALT_E_TRUE : ALT_E_FALSE;
  102528:	e3530000 	cmp	r3, #0
  10252c:	13a03001 	movne	r3, #1
  102530:	03a03000 	moveq	r3, #0
  102534:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_CFG:
        status = (ALT_CLKMGR_MAINPLL_EN_CFGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_H2F_USER0:
        status = (ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
  102538:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  10253c:	ea0000b0 	b	102804 <alt_clk_is_enabled+0x5bc>

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102540:	e30430a0 	movw	r3, #16544	; 0x40a0
  102544:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102548:	e5933000 	ldr	r3, [r3]
  10254c:	e2033001 	and	r3, r3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
  102550:	e3530000 	cmp	r3, #0
  102554:	13a03001 	movne	r3, #1
  102558:	03a03000 	moveq	r3, #0
  10255c:	e6ef3073 	uxtb	r3, r3
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102560:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102564:	ea0000a6 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_EMAC1:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102568:	e30430a0 	movw	r3, #16544	; 0x40a0
  10256c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102570:	e5933000 	ldr	r3, [r3]
  102574:	e2033002 	and	r3, r3, #2
  102578:	e1a030a3 	lsr	r3, r3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
  10257c:	e3530000 	cmp	r3, #0
  102580:	13a03001 	movne	r3, #1
  102584:	03a03000 	moveq	r3, #0
  102588:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_EMAC0:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_EMAC1:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  10258c:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102590:	ea00009b 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_USB_MP:
        status = (ALT_CLKMGR_PERPLL_EN_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102594:	e30430a0 	movw	r3, #16544	; 0x40a0
  102598:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10259c:	e5933000 	ldr	r3, [r3]
  1025a0:	e2033004 	and	r3, r3, #4
  1025a4:	e1a03123 	lsr	r3, r3, #2
            ? ALT_E_TRUE : ALT_E_FALSE;
  1025a8:	e3530000 	cmp	r3, #0
  1025ac:	13a03001 	movne	r3, #1
  1025b0:	03a03000 	moveq	r3, #0
  1025b4:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_EMAC1:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_USB_MP:
        status = (ALT_CLKMGR_PERPLL_EN_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1025b8:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1025bc:	ea000090 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_SPI_M:
        status = (ALT_CLKMGR_PERPLL_EN_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1025c0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1025c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1025c8:	e5933000 	ldr	r3, [r3]
  1025cc:	e2033008 	and	r3, r3, #8
  1025d0:	e1a031a3 	lsr	r3, r3, #3
            ? ALT_E_TRUE : ALT_E_FALSE;
  1025d4:	e3530000 	cmp	r3, #0
  1025d8:	13a03001 	movne	r3, #1
  1025dc:	03a03000 	moveq	r3, #0
  1025e0:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_USB_MP:
        status = (ALT_CLKMGR_PERPLL_EN_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_SPI_M:
        status = (ALT_CLKMGR_PERPLL_EN_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1025e4:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1025e8:	ea000085 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_CAN0:
        status = (ALT_CLKMGR_PERPLL_EN_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1025ec:	e30430a0 	movw	r3, #16544	; 0x40a0
  1025f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1025f4:	e5933000 	ldr	r3, [r3]
  1025f8:	e2033010 	and	r3, r3, #16
  1025fc:	e1a03223 	lsr	r3, r3, #4
            ? ALT_E_TRUE : ALT_E_FALSE;
  102600:	e3530000 	cmp	r3, #0
  102604:	13a03001 	movne	r3, #1
  102608:	03a03000 	moveq	r3, #0
  10260c:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_SPI_M:
        status = (ALT_CLKMGR_PERPLL_EN_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_CAN0:
        status = (ALT_CLKMGR_PERPLL_EN_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102610:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102614:	ea00007a 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_CAN1:
        status = (ALT_CLKMGR_PERPLL_EN_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102618:	e30430a0 	movw	r3, #16544	; 0x40a0
  10261c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102620:	e5933000 	ldr	r3, [r3]
  102624:	e2033020 	and	r3, r3, #32
  102628:	e1a032a3 	lsr	r3, r3, #5
            ? ALT_E_TRUE : ALT_E_FALSE;
  10262c:	e3530000 	cmp	r3, #0
  102630:	13a03001 	movne	r3, #1
  102634:	03a03000 	moveq	r3, #0
  102638:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_CAN0:
        status = (ALT_CLKMGR_PERPLL_EN_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_CAN1:
        status = (ALT_CLKMGR_PERPLL_EN_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  10263c:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102640:	ea00006f 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_GPIO_DB:
        status = (ALT_CLKMGR_PERPLL_EN_GPIOCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102644:	e30430a0 	movw	r3, #16544	; 0x40a0
  102648:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10264c:	e5933000 	ldr	r3, [r3]
  102650:	e2033040 	and	r3, r3, #64	; 0x40
  102654:	e1a03323 	lsr	r3, r3, #6
            ? ALT_E_TRUE : ALT_E_FALSE;
  102658:	e3530000 	cmp	r3, #0
  10265c:	13a03001 	movne	r3, #1
  102660:	03a03000 	moveq	r3, #0
  102664:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_CAN1:
        status = (ALT_CLKMGR_PERPLL_EN_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_GPIO_DB:
        status = (ALT_CLKMGR_PERPLL_EN_GPIOCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102668:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  10266c:	ea000064 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_H2F_USER1:
        status = (ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102670:	e30430a0 	movw	r3, #16544	; 0x40a0
  102674:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102678:	e5933000 	ldr	r3, [r3]
  10267c:	e2033080 	and	r3, r3, #128	; 0x80
  102680:	e1a033a3 	lsr	r3, r3, #7
            ? ALT_E_TRUE : ALT_E_FALSE;
  102684:	e3530000 	cmp	r3, #0
  102688:	13a03001 	movne	r3, #1
  10268c:	03a03000 	moveq	r3, #0
  102690:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_GPIO_DB:
        status = (ALT_CLKMGR_PERPLL_EN_GPIOCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_H2F_USER1:
        status = (ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102694:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102698:	ea000059 	b	102804 <alt_clk_is_enabled+0x5bc>

        /* Clocks that may originate at the Main PLL, the Peripheral PLL, or the FPGA. */
    case ALT_CLK_SDMMC:
        status = (ALT_CLKMGR_PERPLL_EN_SDMMCCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  10269c:	e30430a0 	movw	r3, #16544	; 0x40a0
  1026a0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1026a4:	e5933000 	ldr	r3, [r3]
  1026a8:	e2033c01 	and	r3, r3, #256	; 0x100
  1026ac:	e1a03423 	lsr	r3, r3, #8
            ? ALT_E_TRUE : ALT_E_FALSE;
  1026b0:	e3530000 	cmp	r3, #0
  1026b4:	13a03001 	movne	r3, #1
  1026b8:	03a03000 	moveq	r3, #0
  1026bc:	e6ef3073 	uxtb	r3, r3
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;

        /* Clocks that may originate at the Main PLL, the Peripheral PLL, or the FPGA. */
    case ALT_CLK_SDMMC:
        status = (ALT_CLKMGR_PERPLL_EN_SDMMCCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1026c0:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1026c4:	ea00004e 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_NAND_X:
        status = (ALT_CLKMGR_PERPLL_EN_NANDXCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1026c8:	e30430a0 	movw	r3, #16544	; 0x40a0
  1026cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1026d0:	e5933000 	ldr	r3, [r3]
  1026d4:	e2033c02 	and	r3, r3, #512	; 0x200
  1026d8:	e1a034a3 	lsr	r3, r3, #9
            ? ALT_E_TRUE : ALT_E_FALSE;
  1026dc:	e3530000 	cmp	r3, #0
  1026e0:	13a03001 	movne	r3, #1
  1026e4:	03a03000 	moveq	r3, #0
  1026e8:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_SDMMC:
        status = (ALT_CLKMGR_PERPLL_EN_SDMMCCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_NAND_X:
        status = (ALT_CLKMGR_PERPLL_EN_NANDXCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1026ec:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1026f0:	ea000043 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_NAND:
        status = (ALT_CLKMGR_PERPLL_EN_NANDCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  1026f4:	e30430a0 	movw	r3, #16544	; 0x40a0
  1026f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1026fc:	e5933000 	ldr	r3, [r3]
  102700:	e2033b01 	and	r3, r3, #1024	; 0x400
  102704:	e1a03523 	lsr	r3, r3, #10
            ? ALT_E_TRUE : ALT_E_FALSE;
  102708:	e3530000 	cmp	r3, #0
  10270c:	13a03001 	movne	r3, #1
  102710:	03a03000 	moveq	r3, #0
  102714:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_NAND_X:
        status = (ALT_CLKMGR_PERPLL_EN_NANDXCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_NAND:
        status = (ALT_CLKMGR_PERPLL_EN_NANDCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102718:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  10271c:	ea000038 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_QSPI:
        status = (ALT_CLKMGR_PERPLL_EN_QSPICLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102720:	e30430a0 	movw	r3, #16544	; 0x40a0
  102724:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102728:	e5933000 	ldr	r3, [r3]
  10272c:	e2033b02 	and	r3, r3, #2048	; 0x800
  102730:	e1a035a3 	lsr	r3, r3, #11
            ? ALT_E_TRUE : ALT_E_FALSE;
  102734:	e3530000 	cmp	r3, #0
  102738:	13a03001 	movne	r3, #1
  10273c:	03a03000 	moveq	r3, #0
  102740:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_NAND:
        status = (ALT_CLKMGR_PERPLL_EN_NANDCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_QSPI:
        status = (ALT_CLKMGR_PERPLL_EN_QSPICLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
  102744:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102748:	ea00002d 	b	102804 <alt_clk_is_enabled+0x5bc>

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  10274c:	e30430d8 	movw	r3, #16600	; 0x40d8
  102750:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102754:	e5933000 	ldr	r3, [r3]
  102758:	e2033001 	and	r3, r3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
  10275c:	e3530000 	cmp	r3, #0
  102760:	13a03001 	movne	r3, #1
  102764:	03a03000 	moveq	r3, #0
  102768:	e6ef3073 	uxtb	r3, r3
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  10276c:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  102770:	ea000023 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_DDR_2X_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  102774:	e30430d8 	movw	r3, #16600	; 0x40d8
  102778:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10277c:	e5933000 	ldr	r3, [r3]
  102780:	e2033002 	and	r3, r3, #2
  102784:	e1a030a3 	lsr	r3, r3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
  102788:	e3530000 	cmp	r3, #0
  10278c:	13a03001 	movne	r3, #1
  102790:	03a03000 	moveq	r3, #0
  102794:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DDR_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DDR_2X_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  102798:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  10279c:	ea000018 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_DDR_DQ:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  1027a0:	e30430d8 	movw	r3, #16600	; 0x40d8
  1027a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1027a8:	e5933000 	ldr	r3, [r3]
  1027ac:	e2033004 	and	r3, r3, #4
  1027b0:	e1a03123 	lsr	r3, r3, #2
            ? ALT_E_TRUE : ALT_E_FALSE;
  1027b4:	e3530000 	cmp	r3, #0
  1027b8:	13a03001 	movne	r3, #1
  1027bc:	03a03000 	moveq	r3, #0
  1027c0:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DDR_2X_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DDR_DQ:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  1027c4:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1027c8:	ea00000d 	b	102804 <alt_clk_is_enabled+0x5bc>
    case ALT_CLK_H2F_USER2:
        status = (ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  1027cc:	e30430d8 	movw	r3, #16600	; 0x40d8
  1027d0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1027d4:	e5933000 	ldr	r3, [r3]
  1027d8:	e2033008 	and	r3, r3, #8
  1027dc:	e1a031a3 	lsr	r3, r3, #3
            ? ALT_E_TRUE : ALT_E_FALSE;
  1027e0:	e3530000 	cmp	r3, #0
  1027e4:	13a03001 	movne	r3, #1
  1027e8:	03a03000 	moveq	r3, #0
  1027ec:	e6ef3073 	uxtb	r3, r3
    case ALT_CLK_DDR_DQ:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_H2F_USER2:
        status = (ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
  1027f0:	e50b3008 	str	r3, [fp, #-8]
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
  1027f4:	ea000002 	b	102804 <alt_clk_is_enabled+0x5bc>

    default:
        status = ALT_E_BAD_ARG;
  1027f8:	e3e03008 	mvn	r3, #8
  1027fc:	e50b3008 	str	r3, [fp, #-8]
        break;
  102800:	e1a00000 	nop			; (mov r0, r0)

    }

    return status;
  102804:	e51b3008 	ldr	r3, [fp, #-8]
}
  102808:	e1a00003 	mov	r0, r3
  10280c:	e24bd004 	sub	sp, fp, #4
  102810:	e8bd8800 	pop	{fp, pc}

00102814 <alt_clk_source_get>:
/*
// alt_clk_source_get() gets the input reference clock source selection value for the
// specified clock or PLL.
*/
ALT_CLK_t alt_clk_source_get(ALT_CLK_t clk)
{
  102814:	e92d4800 	push	{fp, lr}
  102818:	e28db004 	add	fp, sp, #4
  10281c:	e24dd010 	sub	sp, sp, #16
  102820:	e1a03000 	mov	r3, r0
  102824:	e54b300d 	strb	r3, [fp, #-13]
    ALT_CLK_t ret = ALT_CLK_UNKNOWN;
  102828:	e3a0304b 	mov	r3, #75	; 0x4b
  10282c:	e54b3005 	strb	r3, [fp, #-5]
    uint32_t  temp;

    switch (clk)
  102830:	e55b300d 	ldrb	r3, [fp, #-13]
  102834:	e353004a 	cmp	r3, #74	; 0x4a
  102838:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  10283c:	ea0001cb 	b	102f70 <alt_clk_source_get+0x75c>
  102840:	0010296c 	andseq	r2, r0, ip, ror #18
  102844:	0010296c 	andseq	r2, r0, ip, ror #18
  102848:	0010296c 	andseq	r2, r0, ip, ror #18
  10284c:	0010296c 	andseq	r2, r0, ip, ror #18
  102850:	0010296c 	andseq	r2, r0, ip, ror #18
  102854:	0010296c 	andseq	r2, r0, ip, ror #18
  102858:	0010296c 	andseq	r2, r0, ip, ror #18
  10285c:	0010296c 	andseq	r2, r0, ip, ror #18
  102860:	0010296c 	andseq	r2, r0, ip, ror #18
  102864:	00102978 	andseq	r2, r0, r8, ror r9
  102868:	00102984 	andseq	r2, r0, r4, lsl #19
  10286c:	00102998 	mulseq	r0, r8, r9
  102870:	00102978 	andseq	r2, r0, r8, ror r9
  102874:	001029ac 	andseq	r2, r0, ip, lsr #19
  102878:	001029ac 	andseq	r2, r0, ip, lsr #19
  10287c:	001029ac 	andseq	r2, r0, ip, lsr #19
  102880:	001029ac 	andseq	r2, r0, ip, lsr #19
  102884:	001029ac 	andseq	r2, r0, ip, lsr #19
  102888:	001029ac 	andseq	r2, r0, ip, lsr #19
  10288c:	001029d4 			; <UNDEFINED> instruction: 0x001029d4
  102890:	001029d4 			; <UNDEFINED> instruction: 0x001029d4
  102894:	001029d4 			; <UNDEFINED> instruction: 0x001029d4
  102898:	001029fc 			; <UNDEFINED> instruction: 0x001029fc
  10289c:	001029fc 			; <UNDEFINED> instruction: 0x001029fc
  1028a0:	001029fc 			; <UNDEFINED> instruction: 0x001029fc
  1028a4:	001029fc 			; <UNDEFINED> instruction: 0x001029fc
  1028a8:	00102a24 	andseq	r2, r0, r4, lsr #20
  1028ac:	00102a94 	mulseq	r0, r4, sl
  1028b0:	00102b08 	andseq	r2, r0, r8, lsl #22
  1028b4:	00102b08 	andseq	r2, r0, r8, lsl #22
  1028b8:	00102b08 	andseq	r2, r0, r8, lsl #22
  1028bc:	00102b08 	andseq	r2, r0, r8, lsl #22
  1028c0:	00102b08 	andseq	r2, r0, r8, lsl #22
  1028c4:	00102b30 	andseq	r2, r0, r0, lsr fp
  1028c8:	00102b58 	andseq	r2, r0, r8, asr fp
  1028cc:	00102b80 	andseq	r2, r0, r0, lsl #23
  1028d0:	00102b80 	andseq	r2, r0, r0, lsl #23
  1028d4:	00102ba8 	andseq	r2, r0, r8, lsr #23
  1028d8:	00102ba8 	andseq	r2, r0, r8, lsr #23
  1028dc:	00102ba8 	andseq	r2, r0, r8, lsr #23
  1028e0:	00102ba8 	andseq	r2, r0, r8, lsr #23
  1028e4:	00102ba8 	andseq	r2, r0, r8, lsr #23
  1028e8:	00102ba8 	andseq	r2, r0, r8, lsr #23
  1028ec:	00102c38 	andseq	r2, r0, r8, lsr ip
  1028f0:	00102c38 	andseq	r2, r0, r8, lsr ip
  1028f4:	00102dd4 			; <UNDEFINED> instruction: 0x00102dd4
  1028f8:	00102d34 	andseq	r2, r0, r4, lsr sp
  1028fc:	00102d34 	andseq	r2, r0, r4, lsr sp
  102900:	00102c98 	mulseq	r0, r8, ip
  102904:	00102bd8 			; <UNDEFINED> instruction: 0x00102bd8
  102908:	00102c08 	andseq	r2, r0, r8, lsl #24
  10290c:	00102c38 	andseq	r2, r0, r8, lsr ip
  102910:	00102c38 	andseq	r2, r0, r8, lsr ip
  102914:	00102c38 	andseq	r2, r0, r8, lsr ip
  102918:	00102c68 	andseq	r2, r0, r8, ror #24
  10291c:	00102e74 	andseq	r2, r0, r4, ror lr
  102920:	00102e74 	andseq	r2, r0, r4, ror lr
  102924:	00102e74 	andseq	r2, r0, r4, ror lr
  102928:	00102e74 	andseq	r2, r0, r4, ror lr
  10292c:	00102e74 	andseq	r2, r0, r4, ror lr
  102930:	00102e74 	andseq	r2, r0, r4, ror lr
  102934:	00102ea4 	andseq	r2, r0, r4, lsr #29
  102938:	00102ed4 			; <UNDEFINED> instruction: 0x00102ed4
  10293c:	00102f04 	andseq	r2, r0, r4, lsl #30
  102940:	00102f34 	andseq	r2, r0, r4, lsr pc
  102944:	00102f64 	andseq	r2, r0, r4, ror #30
  102948:	00102f64 	andseq	r2, r0, r4, ror #30
  10294c:	00102f64 	andseq	r2, r0, r4, ror #30
  102950:	00102f64 	andseq	r2, r0, r4, ror #30
  102954:	00102f64 	andseq	r2, r0, r4, ror #30
  102958:	00102f64 	andseq	r2, r0, r4, ror #30
  10295c:	00102f64 	andseq	r2, r0, r4, ror #30
  102960:	00102f64 	andseq	r2, r0, r4, ror #30
  102964:	00102f64 	andseq	r2, r0, r4, ror #30
  102968:	00102f64 	andseq	r2, r0, r4, ror #30
    case ALT_CLK_IN_PIN_JTAG:
    case ALT_CLK_IN_PIN_ULPI0:
    case ALT_CLK_IN_PIN_ULPI1:
    case ALT_CLK_IN_PIN_EMAC0_RX:
    case ALT_CLK_IN_PIN_EMAC1_RX:
        ret = clk;
  10296c:	e55b300d 	ldrb	r3, [fp, #-13]
  102970:	e54b3005 	strb	r3, [fp, #-5]
        break;
  102974:	ea000185 	b	102f90 <alt_clk_source_get+0x77c>

        /* Phase-Locked Loops. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_OSC1:
        ret = ALT_CLK_IN_PIN_OSC1;
  102978:	e3a03000 	mov	r3, #0
  10297c:	e54b3005 	strb	r3, [fp, #-5]
        break;
  102980:	ea000182 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_PERIPHERAL_PLL:
        ret = alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL);
  102984:	e3a0000a 	mov	r0, #10
  102988:	ebfffb8c 	bl	1017c0 <alt_clk_pll_source_get>
  10298c:	e1a03000 	mov	r3, r0
  102990:	e54b3005 	strb	r3, [fp, #-5]
        break;
  102994:	ea00017d 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_SDRAM_PLL:
        ret = alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL);
  102998:	e3a0000b 	mov	r0, #11
  10299c:	ebfffb87 	bl	1017c0 <alt_clk_pll_source_get>
  1029a0:	e1a03000 	mov	r3, r0
  1029a4:	e54b3005 	strb	r3, [fp, #-5]
        break;
  1029a8:	ea000178 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_MAIN_PLL_C3:
    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_PLL_C5:
        /* check bypass, return either osc1 or PLL ID */
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  1029ac:	e3a00009 	mov	r0, #9
  1029b0:	ebfffb39 	bl	10169c <alt_clk_pll_is_bypassed>
  1029b4:	e1a03000 	mov	r3, r0
  1029b8:	e3530001 	cmp	r3, #1
  1029bc:	1a000001 	bne	1029c8 <alt_clk_source_get+0x1b4>
  1029c0:	e3a03000 	mov	r3, #0
  1029c4:	ea000000 	b	1029cc <alt_clk_source_get+0x1b8>
  1029c8:	e3a03009 	mov	r3, #9
  1029cc:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL;
        break;
  1029d0:	ea00016e 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_MPU_PERIPH:
    case ALT_CLK_MPU_L2_RAM:
    case ALT_CLK_MPU:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  1029d4:	e3a00009 	mov	r0, #9
  1029d8:	ebfffb2f 	bl	10169c <alt_clk_pll_is_bypassed>
  1029dc:	e1a03000 	mov	r3, r0
  1029e0:	e3530001 	cmp	r3, #1
  1029e4:	1a000001 	bne	1029f0 <alt_clk_source_get+0x1dc>
  1029e8:	e3a03000 	mov	r3, #0
  1029ec:	ea000000 	b	1029f4 <alt_clk_source_get+0x1e0>
  1029f0:	e3a0300d 	mov	r3, #13
  1029f4:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C0;
        break;
  1029f8:	ea000164 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
    case ALT_CLK_L3_MP:
    case ALT_CLK_L3_SP:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  1029fc:	e3a00009 	mov	r0, #9
  102a00:	ebfffb25 	bl	10169c <alt_clk_pll_is_bypassed>
  102a04:	e1a03000 	mov	r3, r0
  102a08:	e3530001 	cmp	r3, #1
  102a0c:	1a000001 	bne	102a18 <alt_clk_source_get+0x204>
  102a10:	e3a03000 	mov	r3, #0
  102a14:	ea000000 	b	102a1c <alt_clk_source_get+0x208>
  102a18:	e3a0300e 	mov	r3, #14
  102a1c:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C1;
        break;
  102a20:	ea00015a 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_L4_MP:
        /* read the state of the L4_mp source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
  102a24:	e3043070 	movw	r3, #16496	; 0x4070
  102a28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102a2c:	e5933000 	ldr	r3, [r3]
  102a30:	e2033001 	and	r3, r3, #1
  102a34:	e3530000 	cmp	r3, #0
  102a38:	1a000009 	bne	102a64 <alt_clk_source_get+0x250>
            == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_MAINPLL)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102a3c:	e3a00009 	mov	r0, #9
  102a40:	ebfffb15 	bl	10169c <alt_clk_pll_is_bypassed>
  102a44:	e1a03000 	mov	r3, r0
  102a48:	e3530001 	cmp	r3, #1
  102a4c:	1a000001 	bne	102a58 <alt_clk_source_get+0x244>
  102a50:	e3a03000 	mov	r3, #0
  102a54:	ea000000 	b	102a5c <alt_clk_source_get+0x248>
  102a58:	e3a0300e 	mov	r3, #14
  102a5c:	e54b3005 	strb	r3, [fp, #-5]
        {
            /* if the clock comes from periph_base_clk */
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) : ALT_CLK_PERIPHERAL_PLL_C4;
        }
        break;
  102a60:	ea00014a 	b	102f90 <alt_clk_source_get+0x77c>
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C1;
        }
        else
        {
            /* if the clock comes from periph_base_clk */
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102a64:	e3a0000a 	mov	r0, #10
  102a68:	ebfffb0b 	bl	10169c <alt_clk_pll_is_bypassed>
  102a6c:	e1a03000 	mov	r3, r0
  102a70:	e3530001 	cmp	r3, #1
  102a74:	1a000003 	bne	102a88 <alt_clk_source_get+0x274>
  102a78:	e3a0000a 	mov	r0, #10
  102a7c:	ebfffb4f 	bl	1017c0 <alt_clk_pll_source_get>
  102a80:	e1a03000 	mov	r3, r0
  102a84:	ea000000 	b	102a8c <alt_clk_source_get+0x278>
  102a88:	e3a03029 	mov	r3, #41	; 0x29
  102a8c:	e54b3005 	strb	r3, [fp, #-5]
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) : ALT_CLK_PERIPHERAL_PLL_C4;
        }
        break;
  102a90:	ea00013e 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_L4_SP:
        /* read the state of the source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
  102a94:	e3043070 	movw	r3, #16496	; 0x4070
  102a98:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102a9c:	e5933000 	ldr	r3, [r3]
  102aa0:	e2033002 	and	r3, r3, #2
  102aa4:	e1a030a3 	lsr	r3, r3, #1
  102aa8:	e3530000 	cmp	r3, #0
  102aac:	1a000009 	bne	102ad8 <alt_clk_source_get+0x2c4>
            == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102ab0:	e3a00009 	mov	r0, #9
  102ab4:	ebfffaf8 	bl	10169c <alt_clk_pll_is_bypassed>
  102ab8:	e1a03000 	mov	r3, r0
  102abc:	e3530001 	cmp	r3, #1
  102ac0:	1a000001 	bne	102acc <alt_clk_source_get+0x2b8>
  102ac4:	e3a03000 	mov	r3, #0
  102ac8:	ea000000 	b	102ad0 <alt_clk_source_get+0x2bc>
  102acc:	e3a0300e 	mov	r3, #14
  102ad0:	e54b3005 	strb	r3, [fp, #-5]
        {
            /* if the clock comes from periph_base_clk */
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) : ALT_CLK_PERIPHERAL_PLL_C4;
        }
        break;
  102ad4:	ea00012d 	b	102f90 <alt_clk_source_get+0x77c>
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C1;
        }
        else
        {
            /* if the clock comes from periph_base_clk */
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102ad8:	e3a0000a 	mov	r0, #10
  102adc:	ebfffaee 	bl	10169c <alt_clk_pll_is_bypassed>
  102ae0:	e1a03000 	mov	r3, r0
  102ae4:	e3530001 	cmp	r3, #1
  102ae8:	1a000003 	bne	102afc <alt_clk_source_get+0x2e8>
  102aec:	e3a0000a 	mov	r0, #10
  102af0:	ebfffb32 	bl	1017c0 <alt_clk_pll_source_get>
  102af4:	e1a03000 	mov	r3, r0
  102af8:	ea000000 	b	102b00 <alt_clk_source_get+0x2ec>
  102afc:	e3a03029 	mov	r3, #41	; 0x29
  102b00:	e54b3005 	strb	r3, [fp, #-5]
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) : ALT_CLK_PERIPHERAL_PLL_C4;
        }
        break;
  102b04:	ea000121 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_AT:
    case ALT_CLK_DBG_TRACE:
    case ALT_CLK_DBG_TIMER:
    case ALT_CLK_DBG:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102b08:	e3a00009 	mov	r0, #9
  102b0c:	ebfffae2 	bl	10169c <alt_clk_pll_is_bypassed>
  102b10:	e1a03000 	mov	r3, r0
  102b14:	e3530001 	cmp	r3, #1
  102b18:	1a000001 	bne	102b24 <alt_clk_source_get+0x310>
  102b1c:	e3a0300c 	mov	r3, #12
  102b20:	ea000000 	b	102b28 <alt_clk_source_get+0x314>
  102b24:	e3a0300f 	mov	r3, #15
  102b28:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_OSC1 : ALT_CLK_MAIN_PLL_C2;
        break;
  102b2c:	ea000117 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_MAIN_QSPI:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102b30:	e3a00009 	mov	r0, #9
  102b34:	ebfffad8 	bl	10169c <alt_clk_pll_is_bypassed>
  102b38:	e1a03000 	mov	r3, r0
  102b3c:	e3530001 	cmp	r3, #1
  102b40:	1a000001 	bne	102b4c <alt_clk_source_get+0x338>
  102b44:	e3a0300c 	mov	r3, #12
  102b48:	ea000000 	b	102b50 <alt_clk_source_get+0x33c>
  102b4c:	e3a03010 	mov	r3, #16
  102b50:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_OSC1 : ALT_CLK_MAIN_PLL_C3;
        break;
  102b54:	ea00010d 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_MAIN_NAND_SDMMC:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102b58:	e3a00009 	mov	r0, #9
  102b5c:	ebffface 	bl	10169c <alt_clk_pll_is_bypassed>
  102b60:	e1a03000 	mov	r3, r0
  102b64:	e3530001 	cmp	r3, #1
  102b68:	1a000001 	bne	102b74 <alt_clk_source_get+0x360>
  102b6c:	e3a0300c 	mov	r3, #12
  102b70:	ea000000 	b	102b78 <alt_clk_source_get+0x364>
  102b74:	e3a03011 	mov	r3, #17
  102b78:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_OSC1 : ALT_CLK_MAIN_PLL_C4;
        break;
  102b7c:	ea000103 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102b80:	e3a00009 	mov	r0, #9
  102b84:	ebfffac4 	bl	10169c <alt_clk_pll_is_bypassed>
  102b88:	e1a03000 	mov	r3, r0
  102b8c:	e3530001 	cmp	r3, #1
  102b90:	1a000001 	bne	102b9c <alt_clk_source_get+0x388>
  102b94:	e3a0300c 	mov	r3, #12
  102b98:	ea000000 	b	102ba0 <alt_clk_source_get+0x38c>
  102b9c:	e3a03012 	mov	r3, #18
  102ba0:	e54b3005 	strb	r3, [fp, #-5]
            ALT_CLK_OSC1 : ALT_CLK_MAIN_PLL_C5;
        break;
  102ba4:	ea0000f9 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_PERIPHERAL_PLL_C2:
    case ALT_CLK_PERIPHERAL_PLL_C3:
    case ALT_CLK_PERIPHERAL_PLL_C4:
    case ALT_CLK_PERIPHERAL_PLL_C5:
        /* if the clock comes from periph_base_clk */
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102ba8:	e3a0000a 	mov	r0, #10
  102bac:	ebfffaba 	bl	10169c <alt_clk_pll_is_bypassed>
  102bb0:	e1a03000 	mov	r3, r0
  102bb4:	e3530001 	cmp	r3, #1
  102bb8:	1a000003 	bne	102bcc <alt_clk_source_get+0x3b8>
  102bbc:	e3a0000a 	mov	r0, #10
  102bc0:	ebfffafe 	bl	1017c0 <alt_clk_pll_source_get>
  102bc4:	e1a03000 	mov	r3, r0
  102bc8:	ea000000 	b	102bd0 <alt_clk_source_get+0x3bc>
  102bcc:	e3a0300a 	mov	r3, #10
  102bd0:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) : ALT_CLK_PERIPHERAL_PLL;
        break;
  102bd4:	ea0000ed 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_EMAC0:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102bd8:	e3a0000a 	mov	r0, #10
  102bdc:	ebfffaae 	bl	10169c <alt_clk_pll_is_bypassed>
  102be0:	e1a03000 	mov	r3, r0
  102be4:	e3530001 	cmp	r3, #1
  102be8:	1a000003 	bne	102bfc <alt_clk_source_get+0x3e8>
  102bec:	e3a0000a 	mov	r0, #10
  102bf0:	ebfffaf2 	bl	1017c0 <alt_clk_pll_source_get>
  102bf4:	e1a03000 	mov	r3, r0
  102bf8:	ea000000 	b	102c00 <alt_clk_source_get+0x3ec>
  102bfc:	e3a03025 	mov	r3, #37	; 0x25
  102c00:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C0;
        break;
  102c04:	ea0000e1 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_EMAC1:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102c08:	e3a0000a 	mov	r0, #10
  102c0c:	ebfffaa2 	bl	10169c <alt_clk_pll_is_bypassed>
  102c10:	e1a03000 	mov	r3, r0
  102c14:	e3530001 	cmp	r3, #1
  102c18:	1a000003 	bne	102c2c <alt_clk_source_get+0x418>
  102c1c:	e3a0000a 	mov	r0, #10
  102c20:	ebfffae6 	bl	1017c0 <alt_clk_pll_source_get>
  102c24:	e1a03000 	mov	r3, r0
  102c28:	ea000000 	b	102c30 <alt_clk_source_get+0x41c>
  102c2c:	e3a03026 	mov	r3, #38	; 0x26
  102c30:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C1;
        break;
  102c34:	ea0000d5 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_USB_MP:
    case ALT_CLK_SPI_M:
    case ALT_CLK_CAN0:
    case ALT_CLK_CAN1:
    case ALT_CLK_GPIO_DB:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102c38:	e3a0000a 	mov	r0, #10
  102c3c:	ebfffa96 	bl	10169c <alt_clk_pll_is_bypassed>
  102c40:	e1a03000 	mov	r3, r0
  102c44:	e3530001 	cmp	r3, #1
  102c48:	1a000003 	bne	102c5c <alt_clk_source_get+0x448>
  102c4c:	e3a0000a 	mov	r0, #10
  102c50:	ebfffada 	bl	1017c0 <alt_clk_pll_source_get>
  102c54:	e1a03000 	mov	r3, r0
  102c58:	ea000000 	b	102c60 <alt_clk_source_get+0x44c>
  102c5c:	e3a03029 	mov	r3, #41	; 0x29
  102c60:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C4;
        break;
  102c64:	ea0000c9 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_H2F_USER1:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102c68:	e3a0000a 	mov	r0, #10
  102c6c:	ebfffa8a 	bl	10169c <alt_clk_pll_is_bypassed>
  102c70:	e1a03000 	mov	r3, r0
  102c74:	e3530001 	cmp	r3, #1
  102c78:	1a000003 	bne	102c8c <alt_clk_source_get+0x478>
  102c7c:	e3a0000a 	mov	r0, #10
  102c80:	ebffface 	bl	1017c0 <alt_clk_pll_source_get>
  102c84:	e1a03000 	mov	r3, r0
  102c88:	ea000000 	b	102c90 <alt_clk_source_get+0x47c>
  102c8c:	e3a0302a 	mov	r3, #42	; 0x2a
  102c90:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C5;
        break;
  102c94:	ea0000bd 	b	102f90 <alt_clk_source_get+0x77c>

    case ALT_CLK_SDMMC:
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  102c98:	e30430ac 	movw	r3, #16556	; 0x40ac
  102c9c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102ca0:	e5933000 	ldr	r3, [r3]
  102ca4:	e2033003 	and	r3, r3, #3
  102ca8:	e50b300c 	str	r3, [fp, #-12]
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
  102cac:	e51b300c 	ldr	r3, [fp, #-12]
  102cb0:	e3530000 	cmp	r3, #0
  102cb4:	1a000002 	bne	102cc4 <alt_clk_source_get+0x4b0>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
  102cb8:	e3a03002 	mov	r3, #2
  102cbc:	e54b3005 	strb	r3, [fp, #-5]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102cc0:	ea0000ad 	b	102f7c <alt_clk_source_get+0x768>
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
  102cc4:	e51b300c 	ldr	r3, [fp, #-12]
  102cc8:	e3530001 	cmp	r3, #1
  102ccc:	1a000009 	bne	102cf8 <alt_clk_source_get+0x4e4>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102cd0:	e3a00009 	mov	r0, #9
  102cd4:	ebfffa70 	bl	10169c <alt_clk_pll_is_bypassed>
  102cd8:	e1a03000 	mov	r3, r0
  102cdc:	e3530001 	cmp	r3, #1
  102ce0:	1a000001 	bne	102cec <alt_clk_source_get+0x4d8>
  102ce4:	e3a03000 	mov	r3, #0
  102ce8:	ea000000 	b	102cf0 <alt_clk_source_get+0x4dc>
  102cec:	e3a03011 	mov	r3, #17
  102cf0:	e54b3005 	strb	r3, [fp, #-5]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102cf4:	ea0000a0 	b	102f7c <alt_clk_source_get+0x768>
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C4;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
  102cf8:	e51b300c 	ldr	r3, [fp, #-12]
  102cfc:	e3530002 	cmp	r3, #2
  102d00:	1a00009d 	bne	102f7c <alt_clk_source_get+0x768>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102d04:	e3a0000a 	mov	r0, #10
  102d08:	ebfffa63 	bl	10169c <alt_clk_pll_is_bypassed>
  102d0c:	e1a03000 	mov	r3, r0
  102d10:	e3530001 	cmp	r3, #1
  102d14:	1a000003 	bne	102d28 <alt_clk_source_get+0x514>
  102d18:	e3a0000a 	mov	r0, #10
  102d1c:	ebfffaa7 	bl	1017c0 <alt_clk_pll_source_get>
  102d20:	e1a03000 	mov	r3, r0
  102d24:	ea000000 	b	102d2c <alt_clk_source_get+0x518>
  102d28:	e3a03028 	mov	r3, #40	; 0x28
  102d2c:	e54b3005 	strb	r3, [fp, #-5]
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102d30:	ea000091 	b	102f7c <alt_clk_source_get+0x768>

    case ALT_CLK_NAND_X:
    case ALT_CLK_NAND:
        temp = ALT_CLKMGR_PERPLL_SRC_NAND_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  102d34:	e30430ac 	movw	r3, #16556	; 0x40ac
  102d38:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102d3c:	e5933000 	ldr	r3, [r3]
  102d40:	e203300c 	and	r3, r3, #12
  102d44:	e1a03123 	lsr	r3, r3, #2
  102d48:	e50b300c 	str	r3, [fp, #-12]
        if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK)
  102d4c:	e51b300c 	ldr	r3, [fp, #-12]
  102d50:	e3530000 	cmp	r3, #0
  102d54:	1a000002 	bne	102d64 <alt_clk_source_get+0x550>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
  102d58:	e3a03002 	mov	r3, #2
  102d5c:	e54b3005 	strb	r3, [fp, #-5]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102d60:	ea000087 	b	102f84 <alt_clk_source_get+0x770>
        temp = ALT_CLKMGR_PERPLL_SRC_NAND_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK)
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
  102d64:	e51b300c 	ldr	r3, [fp, #-12]
  102d68:	e3530001 	cmp	r3, #1
  102d6c:	1a000009 	bne	102d98 <alt_clk_source_get+0x584>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102d70:	e3a00009 	mov	r0, #9
  102d74:	ebfffa48 	bl	10169c <alt_clk_pll_is_bypassed>
  102d78:	e1a03000 	mov	r3, r0
  102d7c:	e3530001 	cmp	r3, #1
  102d80:	1a000001 	bne	102d8c <alt_clk_source_get+0x578>
  102d84:	e3a03000 	mov	r3, #0
  102d88:	ea000000 	b	102d90 <alt_clk_source_get+0x57c>
  102d8c:	e3a03011 	mov	r3, #17
  102d90:	e54b3005 	strb	r3, [fp, #-5]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102d94:	ea00007a 	b	102f84 <alt_clk_source_get+0x770>
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C4;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
  102d98:	e51b300c 	ldr	r3, [fp, #-12]
  102d9c:	e3530002 	cmp	r3, #2
  102da0:	1a000077 	bne	102f84 <alt_clk_source_get+0x770>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102da4:	e3a0000a 	mov	r0, #10
  102da8:	ebfffa3b 	bl	10169c <alt_clk_pll_is_bypassed>
  102dac:	e1a03000 	mov	r3, r0
  102db0:	e3530001 	cmp	r3, #1
  102db4:	1a000003 	bne	102dc8 <alt_clk_source_get+0x5b4>
  102db8:	e3a0000a 	mov	r0, #10
  102dbc:	ebfffa7f 	bl	1017c0 <alt_clk_pll_source_get>
  102dc0:	e1a03000 	mov	r3, r0
  102dc4:	ea000000 	b	102dcc <alt_clk_source_get+0x5b8>
  102dc8:	e3a03028 	mov	r3, #40	; 0x28
  102dcc:	e54b3005 	strb	r3, [fp, #-5]
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102dd0:	ea00006b 	b	102f84 <alt_clk_source_get+0x770>

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  102dd4:	e30430ac 	movw	r3, #16556	; 0x40ac
  102dd8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  102ddc:	e5933000 	ldr	r3, [r3]
  102de0:	e2033030 	and	r3, r3, #48	; 0x30
  102de4:	e1a03223 	lsr	r3, r3, #4
  102de8:	e50b300c 	str	r3, [fp, #-12]
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
  102dec:	e51b300c 	ldr	r3, [fp, #-12]
  102df0:	e3530000 	cmp	r3, #0
  102df4:	1a000002 	bne	102e04 <alt_clk_source_get+0x5f0>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
  102df8:	e3a03002 	mov	r3, #2
  102dfc:	e54b3005 	strb	r3, [fp, #-5]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C2;
        }
        break;
  102e00:	ea000061 	b	102f8c <alt_clk_source_get+0x778>
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
  102e04:	e51b300c 	ldr	r3, [fp, #-12]
  102e08:	e3530001 	cmp	r3, #1
  102e0c:	1a000009 	bne	102e38 <alt_clk_source_get+0x624>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
  102e10:	e3a00009 	mov	r0, #9
  102e14:	ebfffa20 	bl	10169c <alt_clk_pll_is_bypassed>
  102e18:	e1a03000 	mov	r3, r0
  102e1c:	e3530001 	cmp	r3, #1
  102e20:	1a000001 	bne	102e2c <alt_clk_source_get+0x618>
  102e24:	e3a03000 	mov	r3, #0
  102e28:	ea000000 	b	102e30 <alt_clk_source_get+0x61c>
  102e2c:	e3a03010 	mov	r3, #16
  102e30:	e54b3005 	strb	r3, [fp, #-5]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C2;
        }
        break;
  102e34:	ea000054 	b	102f8c <alt_clk_source_get+0x778>
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C3;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
  102e38:	e51b300c 	ldr	r3, [fp, #-12]
  102e3c:	e3530002 	cmp	r3, #2
  102e40:	1a000051 	bne	102f8c <alt_clk_source_get+0x778>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
  102e44:	e3a0000a 	mov	r0, #10
  102e48:	ebfffa13 	bl	10169c <alt_clk_pll_is_bypassed>
  102e4c:	e1a03000 	mov	r3, r0
  102e50:	e3530001 	cmp	r3, #1
  102e54:	1a000003 	bne	102e68 <alt_clk_source_get+0x654>
  102e58:	e3a0000a 	mov	r0, #10
  102e5c:	ebfffa57 	bl	1017c0 <alt_clk_pll_source_get>
  102e60:	e1a03000 	mov	r3, r0
  102e64:	ea000000 	b	102e6c <alt_clk_source_get+0x658>
  102e68:	e3a03027 	mov	r3, #39	; 0x27
  102e6c:	e54b3005 	strb	r3, [fp, #-5]
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C2;
        }
        break;
  102e70:	ea000045 	b	102f8c <alt_clk_source_get+0x778>
    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_SDRAM_PLL_C3:
    case ALT_CLK_SDRAM_PLL_C4:
    case ALT_CLK_SDRAM_PLL_C5:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
  102e74:	e3a0000b 	mov	r0, #11
  102e78:	ebfffa07 	bl	10169c <alt_clk_pll_is_bypassed>
  102e7c:	e1a03000 	mov	r3, r0
  102e80:	e3530001 	cmp	r3, #1
  102e84:	1a000003 	bne	102e98 <alt_clk_source_get+0x684>
  102e88:	e3a0000b 	mov	r0, #11
  102e8c:	ebfffa4b 	bl	1017c0 <alt_clk_pll_source_get>
  102e90:	e1a03000 	mov	r3, r0
  102e94:	ea000000 	b	102e9c <alt_clk_source_get+0x688>
  102e98:	e3a0300b 	mov	r3, #11
  102e9c:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL;
        break;
  102ea0:	ea00003a 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_DDR_DQS:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
  102ea4:	e3a0000b 	mov	r0, #11
  102ea8:	ebfff9fb 	bl	10169c <alt_clk_pll_is_bypassed>
  102eac:	e1a03000 	mov	r3, r0
  102eb0:	e3530001 	cmp	r3, #1
  102eb4:	1a000003 	bne	102ec8 <alt_clk_source_get+0x6b4>
  102eb8:	e3a0000b 	mov	r0, #11
  102ebc:	ebfffa3f 	bl	1017c0 <alt_clk_pll_source_get>
  102ec0:	e1a03000 	mov	r3, r0
  102ec4:	ea000000 	b	102ecc <alt_clk_source_get+0x6b8>
  102ec8:	e3a03037 	mov	r3, #55	; 0x37
  102ecc:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C0;
        break;
  102ed0:	ea00002e 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_DDR_2X_DQS:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
  102ed4:	e3a0000b 	mov	r0, #11
  102ed8:	ebfff9ef 	bl	10169c <alt_clk_pll_is_bypassed>
  102edc:	e1a03000 	mov	r3, r0
  102ee0:	e3530001 	cmp	r3, #1
  102ee4:	1a000003 	bne	102ef8 <alt_clk_source_get+0x6e4>
  102ee8:	e3a0000b 	mov	r0, #11
  102eec:	ebfffa33 	bl	1017c0 <alt_clk_pll_source_get>
  102ef0:	e1a03000 	mov	r3, r0
  102ef4:	ea000000 	b	102efc <alt_clk_source_get+0x6e8>
  102ef8:	e3a03038 	mov	r3, #56	; 0x38
  102efc:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C1;
        break;
  102f00:	ea000022 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_DDR_DQ:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
  102f04:	e3a0000b 	mov	r0, #11
  102f08:	ebfff9e3 	bl	10169c <alt_clk_pll_is_bypassed>
  102f0c:	e1a03000 	mov	r3, r0
  102f10:	e3530001 	cmp	r3, #1
  102f14:	1a000003 	bne	102f28 <alt_clk_source_get+0x714>
  102f18:	e3a0000b 	mov	r0, #11
  102f1c:	ebfffa27 	bl	1017c0 <alt_clk_pll_source_get>
  102f20:	e1a03000 	mov	r3, r0
  102f24:	ea000000 	b	102f2c <alt_clk_source_get+0x718>
  102f28:	e3a03039 	mov	r3, #57	; 0x39
  102f2c:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C2;
        break;
  102f30:	ea000016 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_H2F_USER2:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
  102f34:	e3a0000b 	mov	r0, #11
  102f38:	ebfff9d7 	bl	10169c <alt_clk_pll_is_bypassed>
  102f3c:	e1a03000 	mov	r3, r0
  102f40:	e3530001 	cmp	r3, #1
  102f44:	1a000003 	bne	102f58 <alt_clk_source_get+0x744>
  102f48:	e3a0000b 	mov	r0, #11
  102f4c:	ebfffa1b 	bl	1017c0 <alt_clk_pll_source_get>
  102f50:	e1a03000 	mov	r3, r0
  102f54:	ea000000 	b	102f5c <alt_clk_source_get+0x748>
  102f58:	e3a0303c 	mov	r3, #60	; 0x3c
  102f5c:	e54b3005 	strb	r3, [fp, #-5]
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C5;
        break;
  102f60:	ea00000a 	b	102f90 <alt_clk_source_get+0x77c>
    case ALT_CLK_OUT_PIN_I2C2_SCL:
    case ALT_CLK_OUT_PIN_I2C3_SCL:
    case ALT_CLK_OUT_PIN_SPIM0:
    case ALT_CLK_OUT_PIN_SPIM1:
    case ALT_CLK_OUT_PIN_QSPI:
        ret = ALT_CLK_UNKNOWN;
  102f64:	e3a0304b 	mov	r3, #75	; 0x4b
  102f68:	e54b3005 	strb	r3, [fp, #-5]
        break;
  102f6c:	ea000007 	b	102f90 <alt_clk_source_get+0x77c>

    default:
        ret = ALT_CLK_UNKNOWN;
  102f70:	e3a0304b 	mov	r3, #75	; 0x4b
  102f74:	e54b3005 	strb	r3, [fp, #-5]
        break;
  102f78:	ea000004 	b	102f90 <alt_clk_source_get+0x77c>
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102f7c:	e1a00000 	nop			; (mov r0, r0)
  102f80:	ea000002 	b	102f90 <alt_clk_source_get+0x77c>
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;
  102f84:	e1a00000 	nop			; (mov r0, r0)
  102f88:	ea000000 	b	102f90 <alt_clk_source_get+0x77c>
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C2;
        }
        break;
  102f8c:	e1a00000 	nop			; (mov r0, r0)
    default:
        ret = ALT_CLK_UNKNOWN;
        break;
    }

    return ret;
  102f90:	e55b3005 	ldrb	r3, [fp, #-5]
}
  102f94:	e1a00003 	mov	r0, r3
  102f98:	e24bd004 	sub	sp, fp, #4
  102f9c:	e8bd8800 	pop	{fp, pc}

00102fa0 <alt_clk_source_set>:
// off and back on, those are covered in other functions in this API, but it does
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
  102fa0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102fa4:	e28db000 	add	fp, sp, #0
  102fa8:	e24dd014 	sub	sp, sp, #20
  102fac:	e1a03000 	mov	r3, r0
  102fb0:	e1a02001 	mov	r2, r1
  102fb4:	e54b300d 	strb	r3, [fp, #-13]
  102fb8:	e1a03002 	mov	r3, r2
  102fbc:	e54b300e 	strb	r3, [fp, #-14]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  102fc0:	e3a03000 	mov	r3, #0
  102fc4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp;

    if (ALT_CLK_MAIN_PLL == clk)
  102fc8:	e55b300d 	ldrb	r3, [fp, #-13]
  102fcc:	e3530009 	cmp	r3, #9
  102fd0:	1a000008 	bne	102ff8 <alt_clk_source_set+0x58>
    {
        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
  102fd4:	e55b300e 	ldrb	r3, [fp, #-14]
  102fd8:	e3530000 	cmp	r3, #0
  102fdc:	0a000125 	beq	103478 <alt_clk_source_set+0x4d8>
  102fe0:	e55b300e 	ldrb	r3, [fp, #-14]
  102fe4:	e353000c 	cmp	r3, #12
  102fe8:	0a000122 	beq	103478 <alt_clk_source_set+0x4d8>
        {
            /* ret = ALT_E_SUCCESS; */
        }
        else
        {
            status = ALT_E_BAD_ARG;
  102fec:	e3e03008 	mvn	r3, #8
  102ff0:	e50b3008 	str	r3, [fp, #-8]
  102ff4:	ea00011f 	b	103478 <alt_clk_source_set+0x4d8>
        }
    }
    else if (ALT_CLK_PERIPHERAL_PLL == clk)
  102ff8:	e55b300d 	ldrb	r3, [fp, #-13]
  102ffc:	e353000a 	cmp	r3, #10
  103000:	1a00002a 	bne	1030b0 <alt_clk_source_set+0x110>
    {
        /* the PLL must be bypassed before getting here */
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  103004:	e3043080 	movw	r3, #16512	; 0x4080
  103008:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10300c:	e5933000 	ldr	r3, [r3]
  103010:	e50b300c 	str	r3, [fp, #-12]
        temp &= ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
  103014:	e51b300c 	ldr	r3, [fp, #-12]
  103018:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
  10301c:	e50b300c 	str	r3, [fp, #-12]

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
  103020:	e55b300e 	ldrb	r3, [fp, #-14]
  103024:	e3530000 	cmp	r3, #0
  103028:	0a000002 	beq	103038 <alt_clk_source_set+0x98>
  10302c:	e55b300e 	ldrb	r3, [fp, #-14]
  103030:	e353000c 	cmp	r3, #12
  103034:	1a000004 	bne	10304c <alt_clk_source_set+0xac>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
  103038:	e3043080 	movw	r3, #16512	; 0x4080
  10303c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103040:	e51b200c 	ldr	r2, [fp, #-12]
  103044:	e5832000 	str	r2, [r3]
  103048:	ea00010a 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_IN_PIN_OSC2)
  10304c:	e55b300e 	ldrb	r3, [fp, #-14]
  103050:	e3530001 	cmp	r3, #1
  103054:	1a000007 	bne	103078 <alt_clk_source_set+0xd8>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2);
  103058:	e51b300c 	ldr	r3, [fp, #-12]
  10305c:	e3833501 	orr	r3, r3, #4194304	; 0x400000
  103060:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
  103064:	e3043080 	movw	r3, #16512	; 0x4080
  103068:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10306c:	e51b200c 	ldr	r2, [fp, #-12]
  103070:	e5832000 	str	r2, [r3]
  103074:	ea0000ff 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103078:	e55b300e 	ldrb	r3, [fp, #-14]
  10307c:	e3530002 	cmp	r3, #2
  103080:	1a000007 	bne	1030a4 <alt_clk_source_set+0x104>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF);
  103084:	e51b300c 	ldr	r3, [fp, #-12]
  103088:	e3833502 	orr	r3, r3, #8388608	; 0x800000
  10308c:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
  103090:	e3043080 	movw	r3, #16512	; 0x4080
  103094:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103098:	e51b200c 	ldr	r2, [fp, #-12]
  10309c:	e5832000 	str	r2, [r3]
  1030a0:	ea0000f4 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else
        {
            status = ALT_E_INV_OPTION;
  1030a4:	e3e0300a 	mvn	r3, #10
  1030a8:	e50b3008 	str	r3, [fp, #-8]
  1030ac:	ea0000f1 	b	103478 <alt_clk_source_set+0x4d8>
        }
    }
    else if (ALT_CLK_SDRAM_PLL == clk)
  1030b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1030b4:	e353000b 	cmp	r3, #11
  1030b8:	1a00002a 	bne	103168 <alt_clk_source_set+0x1c8>
    {
        temp  = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  1030bc:	e30430c0 	movw	r3, #16576	; 0x40c0
  1030c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1030c4:	e5933000 	ldr	r3, [r3]
  1030c8:	e50b300c 	str	r3, [fp, #-12]
        temp &= ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;
  1030cc:	e51b300c 	ldr	r3, [fp, #-12]
  1030d0:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
  1030d4:	e50b300c 	str	r3, [fp, #-12]

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
  1030d8:	e55b300e 	ldrb	r3, [fp, #-14]
  1030dc:	e3530000 	cmp	r3, #0
  1030e0:	0a000002 	beq	1030f0 <alt_clk_source_set+0x150>
  1030e4:	e55b300e 	ldrb	r3, [fp, #-14]
  1030e8:	e353000c 	cmp	r3, #12
  1030ec:	1a000004 	bne	103104 <alt_clk_source_set+0x164>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
  1030f0:	e30430c0 	movw	r3, #16576	; 0x40c0
  1030f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1030f8:	e51b200c 	ldr	r2, [fp, #-12]
  1030fc:	e5832000 	str	r2, [r3]
  103100:	ea0000dc 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_IN_PIN_OSC2)
  103104:	e55b300e 	ldrb	r3, [fp, #-14]
  103108:	e3530001 	cmp	r3, #1
  10310c:	1a000007 	bne	103130 <alt_clk_source_set+0x190>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2);
  103110:	e51b300c 	ldr	r3, [fp, #-12]
  103114:	e3833501 	orr	r3, r3, #4194304	; 0x400000
  103118:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
  10311c:	e30430c0 	movw	r3, #16576	; 0x40c0
  103120:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103124:	e51b200c 	ldr	r2, [fp, #-12]
  103128:	e5832000 	str	r2, [r3]
  10312c:	ea0000d1 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_F2H_SDRAM_REF)
  103130:	e55b300e 	ldrb	r3, [fp, #-14]
  103134:	e3530003 	cmp	r3, #3
  103138:	1a000007 	bne	10315c <alt_clk_source_set+0x1bc>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF);
  10313c:	e51b300c 	ldr	r3, [fp, #-12]
  103140:	e3833502 	orr	r3, r3, #8388608	; 0x800000
  103144:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
  103148:	e30430c0 	movw	r3, #16576	; 0x40c0
  10314c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103150:	e51b200c 	ldr	r2, [fp, #-12]
  103154:	e5832000 	str	r2, [r3]
  103158:	ea0000c6 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else
        {
            status = ALT_E_INV_OPTION;
  10315c:	e3e0300a 	mvn	r3, #10
  103160:	e50b3008 	str	r3, [fp, #-8]
  103164:	ea0000c3 	b	103478 <alt_clk_source_set+0x4d8>
        }
    }
    else if ( ALT_CLK_L4_MP == clk)
  103168:	e55b300d 	ldrb	r3, [fp, #-13]
  10316c:	e353001a 	cmp	r3, #26
  103170:	1a000018 	bne	1031d8 <alt_clk_source_set+0x238>
    {
        /* clock is gated off */
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
  103174:	e55b300e 	ldrb	r3, [fp, #-14]
  103178:	e353000e 	cmp	r3, #14
  10317c:	1a000007 	bne	1031a0 <alt_clk_source_set+0x200>
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
  103180:	e3043070 	movw	r3, #16496	; 0x4070
  103184:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103188:	e3042070 	movw	r2, #16496	; 0x4070
  10318c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  103190:	e5922000 	ldr	r2, [r2]
  103194:	e3c22001 	bic	r2, r2, #1
  103198:	e5832000 	str	r2, [r3]
  10319c:	ea0000b5 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C4)
  1031a0:	e55b300e 	ldrb	r3, [fp, #-14]
  1031a4:	e3530029 	cmp	r3, #41	; 0x29
  1031a8:	1a000007 	bne	1031cc <alt_clk_source_set+0x22c>
        {
            alt_setbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
  1031ac:	e3043070 	movw	r3, #16496	; 0x4070
  1031b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1031b4:	e3042070 	movw	r2, #16496	; 0x4070
  1031b8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1031bc:	e5922000 	ldr	r2, [r2]
  1031c0:	e3822001 	orr	r2, r2, #1
  1031c4:	e5832000 	str	r2, [r3]
  1031c8:	ea0000aa 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else
        {
            status = ALT_E_INV_OPTION;
  1031cc:	e3e0300a 	mvn	r3, #10
  1031d0:	e50b3008 	str	r3, [fp, #-8]
  1031d4:	ea0000a7 	b	103478 <alt_clk_source_set+0x4d8>
        }
    }
    else if ( ALT_CLK_L4_SP == clk)
  1031d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1031dc:	e353001b 	cmp	r3, #27
  1031e0:	1a000018 	bne	103248 <alt_clk_source_set+0x2a8>
    {
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
  1031e4:	e55b300e 	ldrb	r3, [fp, #-14]
  1031e8:	e353000e 	cmp	r3, #14
  1031ec:	1a000007 	bne	103210 <alt_clk_source_set+0x270>
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
  1031f0:	e3043070 	movw	r3, #16496	; 0x4070
  1031f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1031f8:	e3042070 	movw	r2, #16496	; 0x4070
  1031fc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  103200:	e5922000 	ldr	r2, [r2]
  103204:	e3c22002 	bic	r2, r2, #2
  103208:	e5832000 	str	r2, [r3]
  10320c:	ea000099 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C4)
  103210:	e55b300e 	ldrb	r3, [fp, #-14]
  103214:	e3530029 	cmp	r3, #41	; 0x29
  103218:	1a000007 	bne	10323c <alt_clk_source_set+0x29c>
        {
            alt_setbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
  10321c:	e3043070 	movw	r3, #16496	; 0x4070
  103220:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103224:	e3042070 	movw	r2, #16496	; 0x4070
  103228:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10322c:	e5922000 	ldr	r2, [r2]
  103230:	e3822002 	orr	r2, r2, #2
  103234:	e5832000 	str	r2, [r3]
  103238:	ea00008e 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else
        {
            status = ALT_E_INV_OPTION;
  10323c:	e3e0300a 	mvn	r3, #10
  103240:	e50b3008 	str	r3, [fp, #-8]
  103244:	ea00008b 	b	103478 <alt_clk_source_set+0x4d8>
        }
    }
    else if (ALT_CLK_SDMMC == clk)
  103248:	e55b300d 	ldrb	r3, [fp, #-13]
  10324c:	e3530030 	cmp	r3, #48	; 0x30
  103250:	1a00002a 	bne	103300 <alt_clk_source_set+0x360>
    {
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
  103254:	e30430ac 	movw	r3, #16556	; 0x40ac
  103258:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10325c:	e5933000 	ldr	r3, [r3]
  103260:	e50b300c 	str	r3, [fp, #-12]
        temp &= ALT_CLKMGR_PERPLL_SRC_SDMMC_CLR_MSK;
  103264:	e51b300c 	ldr	r3, [fp, #-12]
  103268:	e3c33003 	bic	r3, r3, #3
  10326c:	e50b300c 	str	r3, [fp, #-12]

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103270:	e55b300e 	ldrb	r3, [fp, #-14]
  103274:	e3530002 	cmp	r3, #2
  103278:	1a000004 	bne	103290 <alt_clk_source_set+0x2f0>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  10327c:	e30430ac 	movw	r3, #16556	; 0x40ac
  103280:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103284:	e51b200c 	ldr	r2, [fp, #-12]
  103288:	e5832000 	str	r2, [r3]
  10328c:	ea000079 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
  103290:	e55b300e 	ldrb	r3, [fp, #-14]
  103294:	e3530011 	cmp	r3, #17
  103298:	0a000002 	beq	1032a8 <alt_clk_source_set+0x308>
  10329c:	e55b300e 	ldrb	r3, [fp, #-14]
  1032a0:	e3530022 	cmp	r3, #34	; 0x22
  1032a4:	1a000007 	bne	1032c8 <alt_clk_source_set+0x328>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK);
  1032a8:	e51b300c 	ldr	r3, [fp, #-12]
  1032ac:	e3833001 	orr	r3, r3, #1
  1032b0:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  1032b4:	e30430ac 	movw	r3, #16556	; 0x40ac
  1032b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1032bc:	e51b200c 	ldr	r2, [fp, #-12]
  1032c0:	e5832000 	str	r2, [r3]
  1032c4:	ea00006b 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C3)
  1032c8:	e55b300e 	ldrb	r3, [fp, #-14]
  1032cc:	e3530028 	cmp	r3, #40	; 0x28
  1032d0:	1a000007 	bne	1032f4 <alt_clk_source_set+0x354>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK);
  1032d4:	e51b300c 	ldr	r3, [fp, #-12]
  1032d8:	e3833002 	orr	r3, r3, #2
  1032dc:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  1032e0:	e30430ac 	movw	r3, #16556	; 0x40ac
  1032e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1032e8:	e51b200c 	ldr	r2, [fp, #-12]
  1032ec:	e5832000 	str	r2, [r3]
  1032f0:	ea000060 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else
        {
            status = ALT_E_INV_OPTION;
  1032f4:	e3e0300a 	mvn	r3, #10
  1032f8:	e50b3008 	str	r3, [fp, #-8]
  1032fc:	ea00005d 	b	103478 <alt_clk_source_set+0x4d8>
        }
    }
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
  103300:	e55b300d 	ldrb	r3, [fp, #-13]
  103304:	e353002e 	cmp	r3, #46	; 0x2e
  103308:	0a000002 	beq	103318 <alt_clk_source_set+0x378>
  10330c:	e55b300d 	ldrb	r3, [fp, #-13]
  103310:	e353002f 	cmp	r3, #47	; 0x2f
  103314:	1a00002a 	bne	1033c4 <alt_clk_source_set+0x424>
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
  103318:	e30430ac 	movw	r3, #16556	; 0x40ac
  10331c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103320:	e5933000 	ldr	r3, [r3]
  103324:	e50b300c 	str	r3, [fp, #-12]
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;
  103328:	e51b300c 	ldr	r3, [fp, #-12]
  10332c:	e3c3300c 	bic	r3, r3, #12
  103330:	e50b300c 	str	r3, [fp, #-12]

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103334:	e55b300e 	ldrb	r3, [fp, #-14]
  103338:	e3530002 	cmp	r3, #2
  10333c:	1a000004 	bne	103354 <alt_clk_source_set+0x3b4>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  103340:	e30430ac 	movw	r3, #16556	; 0x40ac
  103344:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103348:	e51b200c 	ldr	r2, [fp, #-12]
  10334c:	e5832000 	str	r2, [r3]
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103350:	ea000048 	b	103478 <alt_clk_source_set+0x4d8>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
  103354:	e55b300e 	ldrb	r3, [fp, #-14]
  103358:	e3530011 	cmp	r3, #17
  10335c:	0a000002 	beq	10336c <alt_clk_source_set+0x3cc>
  103360:	e55b300e 	ldrb	r3, [fp, #-14]
  103364:	e3530022 	cmp	r3, #34	; 0x22
  103368:	1a000007 	bne	10338c <alt_clk_source_set+0x3ec>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK);
  10336c:	e51b300c 	ldr	r3, [fp, #-12]
  103370:	e3833004 	orr	r3, r3, #4
  103374:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  103378:	e30430ac 	movw	r3, #16556	; 0x40ac
  10337c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103380:	e51b200c 	ldr	r2, [fp, #-12]
  103384:	e5832000 	str	r2, [r3]
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103388:	ea00003a 	b	103478 <alt_clk_source_set+0x4d8>
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C3)
  10338c:	e55b300e 	ldrb	r3, [fp, #-14]
  103390:	e3530028 	cmp	r3, #40	; 0x28
  103394:	1a000007 	bne	1033b8 <alt_clk_source_set+0x418>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
  103398:	e51b300c 	ldr	r3, [fp, #-12]
  10339c:	e3833008 	orr	r3, r3, #8
  1033a0:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  1033a4:	e30430ac 	movw	r3, #16556	; 0x40ac
  1033a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1033ac:	e51b200c 	ldr	r2, [fp, #-12]
  1033b0:	e5832000 	str	r2, [r3]
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  1033b4:	ea00002f 	b	103478 <alt_clk_source_set+0x4d8>
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else
        {
            status = ALT_E_INV_OPTION;
  1033b8:	e3e0300a 	mvn	r3, #10
  1033bc:	e50b3008 	str	r3, [fp, #-8]
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  1033c0:	ea00002c 	b	103478 <alt_clk_source_set+0x4d8>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_QSPI == clk)
  1033c4:	e55b300d 	ldrb	r3, [fp, #-13]
  1033c8:	e353002d 	cmp	r3, #45	; 0x2d
  1033cc:	1a000029 	bne	103478 <alt_clk_source_set+0x4d8>
    {
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
  1033d0:	e30430ac 	movw	r3, #16556	; 0x40ac
  1033d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1033d8:	e5933000 	ldr	r3, [r3]
  1033dc:	e50b300c 	str	r3, [fp, #-12]
        temp &= ALT_CLKMGR_PERPLL_SRC_QSPI_CLR_MSK;
  1033e0:	e51b300c 	ldr	r3, [fp, #-12]
  1033e4:	e3c33030 	bic	r3, r3, #48	; 0x30
  1033e8:	e50b300c 	str	r3, [fp, #-12]

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
  1033ec:	e55b300e 	ldrb	r3, [fp, #-14]
  1033f0:	e3530002 	cmp	r3, #2
  1033f4:	1a000004 	bne	10340c <alt_clk_source_set+0x46c>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  1033f8:	e30430ac 	movw	r3, #16556	; 0x40ac
  1033fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103400:	e51b200c 	ldr	r2, [fp, #-12]
  103404:	e5832000 	str	r2, [r3]
  103408:	ea00001a 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C3) || (ref_clk == ALT_CLK_MAIN_QSPI))
  10340c:	e55b300e 	ldrb	r3, [fp, #-14]
  103410:	e3530010 	cmp	r3, #16
  103414:	0a000002 	beq	103424 <alt_clk_source_set+0x484>
  103418:	e55b300e 	ldrb	r3, [fp, #-14]
  10341c:	e3530021 	cmp	r3, #33	; 0x21
  103420:	1a000007 	bne	103444 <alt_clk_source_set+0x4a4>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK);
  103424:	e51b300c 	ldr	r3, [fp, #-12]
  103428:	e3833010 	orr	r3, r3, #16
  10342c:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  103430:	e30430ac 	movw	r3, #16556	; 0x40ac
  103434:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103438:	e51b200c 	ldr	r2, [fp, #-12]
  10343c:	e5832000 	str	r2, [r3]
  103440:	ea00000c 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C2)
  103444:	e55b300e 	ldrb	r3, [fp, #-14]
  103448:	e3530027 	cmp	r3, #39	; 0x27
  10344c:	1a000007 	bne	103470 <alt_clk_source_set+0x4d0>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK);
  103450:	e51b300c 	ldr	r3, [fp, #-12]
  103454:	e3833020 	orr	r3, r3, #32
  103458:	e50b300c 	str	r3, [fp, #-12]
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
  10345c:	e30430ac 	movw	r3, #16556	; 0x40ac
  103460:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103464:	e51b200c 	ldr	r2, [fp, #-12]
  103468:	e5832000 	str	r2, [r3]
  10346c:	ea000001 	b	103478 <alt_clk_source_set+0x4d8>
        }
        else
        {
            status = ALT_E_INV_OPTION;
  103470:	e3e0300a 	mvn	r3, #10
  103474:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    return status;
  103478:	e51b3008 	ldr	r3, [fp, #-8]
}
  10347c:	e1a00003 	mov	r0, r3
  103480:	e24bd000 	sub	sp, fp, #0
  103484:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103488:	e12fff1e 	bx	lr

0010348c <alt_clk_ext_clk_freq_set>:
// a measure of Hz. This value is stored in a static array and used for calculations.
// The supplied frequency should be within the Fmin and Fmax values allowed for the
// external clock source.
*/
ALT_STATUS_CODE alt_clk_ext_clk_freq_set(ALT_CLK_t clk, alt_freq_t freq)
{
  10348c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103490:	e28db000 	add	fp, sp, #0
  103494:	e24dd014 	sub	sp, sp, #20
  103498:	e1a03000 	mov	r3, r0
  10349c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1034a0:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
  1034a4:	e3e03008 	mvn	r3, #8
  1034a8:	e50b3008 	str	r3, [fp, #-8]

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
  1034ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1034b0:	e3530000 	cmp	r3, #0
  1034b4:	0a000002 	beq	1034c4 <alt_clk_ext_clk_freq_set+0x38>
  1034b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1034bc:	e353000c 	cmp	r3, #12
  1034c0:	1a000015 	bne	10351c <alt_clk_ext_clk_freq_set+0x90>
    {
        if ((freq >= alt_ext_clk_paramblok.clkosc1.freqmin) && (freq <= alt_ext_clk_paramblok.clkosc1.freqmax))
  1034c4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1034c8:	e3403011 	movt	r3, #17
  1034cc:	e5932004 	ldr	r2, [r3, #4]
  1034d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1034d4:	e1520003 	cmp	r2, r3
  1034d8:	8a00000c 	bhi	103510 <alt_clk_ext_clk_freq_set+0x84>
  1034dc:	e30732b0 	movw	r3, #29360	; 0x72b0
  1034e0:	e3403011 	movt	r3, #17
  1034e4:	e5932008 	ldr	r2, [r3, #8]
  1034e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1034ec:	e1520003 	cmp	r2, r3
  1034f0:	3a000006 	bcc	103510 <alt_clk_ext_clk_freq_set+0x84>
        {
            alt_ext_clk_paramblok.clkosc1.freqcur = freq;
  1034f4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1034f8:	e3403011 	movt	r3, #17
  1034fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103500:	e5832000 	str	r2, [r3]
            status = ALT_E_SUCCESS;
  103504:	e3a03000 	mov	r3, #0
  103508:	e50b3008 	str	r3, [fp, #-8]
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
    {
        if ((freq >= alt_ext_clk_paramblok.clkosc1.freqmin) && (freq <= alt_ext_clk_paramblok.clkosc1.freqmax))
  10350c:	ea00004f 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
            alt_ext_clk_paramblok.clkosc1.freqcur = freq;
            status = ALT_E_SUCCESS;
        }
        else
        {
            status = ALT_E_ARG_RANGE;
  103510:	e3e03007 	mvn	r3, #7
  103514:	e50b3008 	str	r3, [fp, #-8]
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
    {
        if ((freq >= alt_ext_clk_paramblok.clkosc1.freqmin) && (freq <= alt_ext_clk_paramblok.clkosc1.freqmax))
  103518:	ea00004c 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        else
        {
            status = ALT_E_ARG_RANGE;
        }
    }
    else if (clk == ALT_CLK_IN_PIN_OSC2)                            /* the other clock input pin */
  10351c:	e55b300d 	ldrb	r3, [fp, #-13]
  103520:	e3530001 	cmp	r3, #1
  103524:	1a000015 	bne	103580 <alt_clk_ext_clk_freq_set+0xf4>
    {
        if ((freq >= alt_ext_clk_paramblok.clkosc2.freqmin) && (freq <= alt_ext_clk_paramblok.clkosc2.freqmax))
  103528:	e30732b0 	movw	r3, #29360	; 0x72b0
  10352c:	e3403011 	movt	r3, #17
  103530:	e5932014 	ldr	r2, [r3, #20]
  103534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103538:	e1520003 	cmp	r2, r3
  10353c:	8a00000c 	bhi	103574 <alt_clk_ext_clk_freq_set+0xe8>
  103540:	e30732b0 	movw	r3, #29360	; 0x72b0
  103544:	e3403011 	movt	r3, #17
  103548:	e5932018 	ldr	r2, [r3, #24]
  10354c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103550:	e1520003 	cmp	r2, r3
  103554:	3a000006 	bcc	103574 <alt_clk_ext_clk_freq_set+0xe8>
        {
            alt_ext_clk_paramblok.clkosc2.freqcur = freq;
  103558:	e30732b0 	movw	r3, #29360	; 0x72b0
  10355c:	e3403011 	movt	r3, #17
  103560:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103564:	e5832010 	str	r2, [r3, #16]
            status = ALT_E_SUCCESS;
  103568:	e3a03000 	mov	r3, #0
  10356c:	e50b3008 	str	r3, [fp, #-8]
  103570:	ea000036 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        }
        else
        {
            status = ALT_E_ARG_RANGE;
  103574:	e3e03007 	mvn	r3, #7
  103578:	e50b3008 	str	r3, [fp, #-8]
  10357c:	ea000033 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        }
    }
    else if (clk == ALT_CLK_F2H_PERIPH_REF)                         /* clock from the FPGA */
  103580:	e55b300d 	ldrb	r3, [fp, #-13]
  103584:	e3530002 	cmp	r3, #2
  103588:	1a000015 	bne	1035e4 <alt_clk_ext_clk_freq_set+0x158>
    {
        if ((freq >= alt_ext_clk_paramblok.periph.freqmin) && (freq <= alt_ext_clk_paramblok.periph.freqmax))
  10358c:	e30732b0 	movw	r3, #29360	; 0x72b0
  103590:	e3403011 	movt	r3, #17
  103594:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  103598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10359c:	e1520003 	cmp	r2, r3
  1035a0:	8a00000c 	bhi	1035d8 <alt_clk_ext_clk_freq_set+0x14c>
  1035a4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1035a8:	e3403011 	movt	r3, #17
  1035ac:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1035b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1035b4:	e1520003 	cmp	r2, r3
  1035b8:	3a000006 	bcc	1035d8 <alt_clk_ext_clk_freq_set+0x14c>
        {
            alt_ext_clk_paramblok.periph.freqcur = freq;
  1035bc:	e30732b0 	movw	r3, #29360	; 0x72b0
  1035c0:	e3403011 	movt	r3, #17
  1035c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1035c8:	e5832020 	str	r2, [r3, #32]
            status = ALT_E_SUCCESS;
  1035cc:	e3a03000 	mov	r3, #0
  1035d0:	e50b3008 	str	r3, [fp, #-8]
  1035d4:	ea00001d 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        }
        else
        {
            status = ALT_E_ARG_RANGE;
  1035d8:	e3e03007 	mvn	r3, #7
  1035dc:	e50b3008 	str	r3, [fp, #-8]
  1035e0:	ea00001a 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        }
    }
    else if (clk == ALT_CLK_F2H_SDRAM_REF)                          /* clock from the FPGA SDRAM */
  1035e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1035e8:	e3530003 	cmp	r3, #3
  1035ec:	1a000015 	bne	103648 <alt_clk_ext_clk_freq_set+0x1bc>
    {
        if ((freq >= alt_ext_clk_paramblok.sdram.freqmin) && (freq <= alt_ext_clk_paramblok.sdram.freqmax))
  1035f0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1035f4:	e3403011 	movt	r3, #17
  1035f8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  1035fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103600:	e1520003 	cmp	r2, r3
  103604:	8a00000c 	bhi	10363c <alt_clk_ext_clk_freq_set+0x1b0>
  103608:	e30732b0 	movw	r3, #29360	; 0x72b0
  10360c:	e3403011 	movt	r3, #17
  103610:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  103614:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103618:	e1520003 	cmp	r2, r3
  10361c:	3a000006 	bcc	10363c <alt_clk_ext_clk_freq_set+0x1b0>
        {
            alt_ext_clk_paramblok.sdram.freqcur = freq;
  103620:	e30732b0 	movw	r3, #29360	; 0x72b0
  103624:	e3403011 	movt	r3, #17
  103628:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10362c:	e5832030 	str	r2, [r3, #48]	; 0x30
            status = ALT_E_SUCCESS;
  103630:	e3a03000 	mov	r3, #0
  103634:	e50b3008 	str	r3, [fp, #-8]
  103638:	ea000004 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        }
        else
        {
            status = ALT_E_ARG_RANGE;
  10363c:	e3e03007 	mvn	r3, #7
  103640:	e50b3008 	str	r3, [fp, #-8]
  103644:	ea000001 	b	103650 <alt_clk_ext_clk_freq_set+0x1c4>
        }
    }
    else
    {
        status = ALT_E_BAD_ARG;
  103648:	e3e03008 	mvn	r3, #8
  10364c:	e50b3008 	str	r3, [fp, #-8]
    }

    return status;
  103650:	e51b3008 	ldr	r3, [fp, #-8]
}
  103654:	e1a00003 	mov	r0, r3
  103658:	e24bd000 	sub	sp, fp, #0
  10365c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103660:	e12fff1e 	bx	lr

00103664 <alt_clk_ext_clk_freq_get>:
/*
// alt_clk_ext_clk_freq_get returns the frequency of the external clock source as
// a measure of Hz. This value is stored in a static array.
*/
alt_freq_t alt_clk_ext_clk_freq_get(ALT_CLK_t clk)
{
  103664:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103668:	e28db000 	add	fp, sp, #0
  10366c:	e24dd014 	sub	sp, sp, #20
  103670:	e1a03000 	mov	r3, r0
  103674:	e54b300d 	strb	r3, [fp, #-13]
    uint32_t ret = 0;
  103678:	e3a03000 	mov	r3, #0
  10367c:	e50b3008 	str	r3, [fp, #-8]

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
  103680:	e55b300d 	ldrb	r3, [fp, #-13]
  103684:	e3530000 	cmp	r3, #0
  103688:	0a000002 	beq	103698 <alt_clk_ext_clk_freq_get+0x34>
  10368c:	e55b300d 	ldrb	r3, [fp, #-13]
  103690:	e353000c 	cmp	r3, #12
  103694:	1a000004 	bne	1036ac <alt_clk_ext_clk_freq_get+0x48>
    {
        ret = alt_ext_clk_paramblok.clkosc1.freqcur;
  103698:	e30732b0 	movw	r3, #29360	; 0x72b0
  10369c:	e3403011 	movt	r3, #17
  1036a0:	e5933000 	ldr	r3, [r3]
  1036a4:	e50b3008 	str	r3, [fp, #-8]
  1036a8:	ea000016 	b	103708 <alt_clk_ext_clk_freq_get+0xa4>
    }
    else if (clk == ALT_CLK_IN_PIN_OSC2)
  1036ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1036b0:	e3530001 	cmp	r3, #1
  1036b4:	1a000004 	bne	1036cc <alt_clk_ext_clk_freq_get+0x68>
    {
        ret = alt_ext_clk_paramblok.clkosc2.freqcur;
  1036b8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1036bc:	e3403011 	movt	r3, #17
  1036c0:	e5933010 	ldr	r3, [r3, #16]
  1036c4:	e50b3008 	str	r3, [fp, #-8]
  1036c8:	ea00000e 	b	103708 <alt_clk_ext_clk_freq_get+0xa4>
    }
    else if (clk == ALT_CLK_F2H_PERIPH_REF)                         /* clock from the FPGA */
  1036cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1036d0:	e3530002 	cmp	r3, #2
  1036d4:	1a000004 	bne	1036ec <alt_clk_ext_clk_freq_get+0x88>
    {
        ret = alt_ext_clk_paramblok.periph.freqcur;
  1036d8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1036dc:	e3403011 	movt	r3, #17
  1036e0:	e5933020 	ldr	r3, [r3, #32]
  1036e4:	e50b3008 	str	r3, [fp, #-8]
  1036e8:	ea000006 	b	103708 <alt_clk_ext_clk_freq_get+0xa4>
    }
    else if (clk == ALT_CLK_F2H_SDRAM_REF)                         /* clock from the FPGA */
  1036ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1036f0:	e3530003 	cmp	r3, #3
  1036f4:	1a000003 	bne	103708 <alt_clk_ext_clk_freq_get+0xa4>
    {
        ret = alt_ext_clk_paramblok.sdram.freqcur;
  1036f8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1036fc:	e3403011 	movt	r3, #17
  103700:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  103704:	e50b3008 	str	r3, [fp, #-8]
    }
    return ret;
  103708:	e51b3008 	ldr	r3, [fp, #-8]
}
  10370c:	e1a00003 	mov	r0, r3
  103710:	e24bd000 	sub	sp, fp, #0
  103714:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103718:	e12fff1e 	bx	lr

0010371c <alt_clk_pll_cfg_get>:

/*
// alt_clk_pll_cfg_get() returns the current PLL configuration.
*/
ALT_STATUS_CODE alt_clk_pll_cfg_get(ALT_CLK_t pll, ALT_CLK_PLL_CFG_t * pll_cfg)
{
  10371c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103720:	e28db000 	add	fp, sp, #0
  103724:	e24dd014 	sub	sp, sp, #20
  103728:	e1a03000 	mov	r3, r0
  10372c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  103730:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE        ret = ALT_E_ERROR;                  /* return value */
  103734:	e3e03000 	mvn	r3, #0
  103738:	e50b3008 	str	r3, [fp, #-8]
    uint32_t               temp;                               /* temp variable */
 
    if (pll_cfg == NULL)
  10373c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103740:	e3530000 	cmp	r3, #0
  103744:	1a000003 	bne	103758 <alt_clk_pll_cfg_get+0x3c>
    {
        ret = ALT_E_BAD_ARG;
  103748:	e3e03008 	mvn	r3, #8
  10374c:	e50b3008 	str	r3, [fp, #-8]
        return ret;
  103750:	e51b3008 	ldr	r3, [fp, #-8]
  103754:	ea00013c 	b	103c4c <alt_clk_pll_cfg_get+0x530>
    }

    if (pll == ALT_CLK_MAIN_PLL)
  103758:	e55b300d 	ldrb	r3, [fp, #-13]
  10375c:	e3530009 	cmp	r3, #9
  103760:	1a00004f 	bne	1038a4 <alt_clk_pll_cfg_get+0x188>
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  103764:	e3043040 	movw	r3, #16448	; 0x4040
  103768:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10376c:	e5933000 	ldr	r3, [r3]
  103770:	e50b300c 	str	r3, [fp, #-12]
        pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
  103774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103778:	e3a02000 	mov	r2, #0
  10377c:	e5c32000 	strb	r2, [r3]
        pll_cfg->mult = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
  103780:	e51b200c 	ldr	r2, [fp, #-12]
  103784:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  103788:	e0033002 	and	r3, r3, r2
  10378c:	e1a021a3 	lsr	r2, r3, #3
  103790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103794:	e5832004 	str	r2, [r3, #4]
        pll_cfg->div = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
  103798:	e51b300c 	ldr	r3, [fp, #-12]
  10379c:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  1037a0:	e1a02823 	lsr	r2, r3, #16
  1037a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1037a8:	e5832008 	str	r2, [r3, #8]

        /* Get the C0-C5 divider values: */
        pll_cfg->cntrs[0] = ALT_CLKMGR_MAINPLL_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR));
  1037ac:	e30430e0 	movw	r3, #16608	; 0x40e0
  1037b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1037b4:	e5933000 	ldr	r3, [r3]
  1037b8:	e7e82053 	ubfx	r2, r3, #0, #9
  1037bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1037c0:	e583200c 	str	r2, [r3, #12]
        /* C0 - mpu_clk */

        pll_cfg->cntrs[1] = ALT_CLKMGR_MAINPLL_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR));
  1037c4:	e30430e4 	movw	r3, #16612	; 0x40e4
  1037c8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1037cc:	e5933000 	ldr	r3, [r3]
  1037d0:	e7e82053 	ubfx	r2, r3, #0, #9
  1037d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1037d8:	e5832010 	str	r2, [r3, #16]
        /* C1 - main_clk */

        pll_cfg->cntrs[2] = ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR));
  1037dc:	e3043050 	movw	r3, #16464	; 0x4050
  1037e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1037e4:	e5933000 	ldr	r3, [r3]
  1037e8:	e7e82053 	ubfx	r2, r3, #0, #9
  1037ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1037f0:	e5832014 	str	r2, [r3, #20]
        /* C2 - dbg_base_clk */

        pll_cfg->cntrs[3] = ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR));
  1037f4:	e3043054 	movw	r3, #16468	; 0x4054
  1037f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1037fc:	e5933000 	ldr	r3, [r3]
  103800:	e7e82053 	ubfx	r2, r3, #0, #9
  103804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103808:	e5832018 	str	r2, [r3, #24]
        /* C3 - main_qspi_clk */

        pll_cfg->cntrs[4] = ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR));
  10380c:	e3043058 	movw	r3, #16472	; 0x4058
  103810:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103814:	e5933000 	ldr	r3, [r3]
  103818:	e7e82053 	ubfx	r2, r3, #0, #9
  10381c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103820:	e583201c 	str	r2, [r3, #28]
        /* C4 - main_nand_sdmmc_clk */

        pll_cfg->cntrs[5] = ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR));
  103824:	e304305c 	movw	r3, #16476	; 0x405c
  103828:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10382c:	e5933000 	ldr	r3, [r3]
  103830:	e7e82053 	ubfx	r2, r3, #0, #9
  103834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103838:	e5832020 	str	r2, [r3, #32]
        /* C5 - cfg_s2f_user0_clk aka cfg_h2f_user0_clk */

        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
            pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
  10383c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103840:	e3a02000 	mov	r2, #0
  103844:	e5832038 	str	r2, [r3, #56]	; 0x38
  103848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10384c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  103850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103854:	e5832034 	str	r2, [r3, #52]	; 0x34
  103858:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10385c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  103860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103864:	e5832030 	str	r2, [r3, #48]	; 0x30
  103868:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10386c:	e5932030 	ldr	r2, [r3, #48]	; 0x30

        pll_cfg->cntrs[5] = ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR));
        /* C5 - cfg_s2f_user0_clk aka cfg_h2f_user0_clk */

        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
  103870:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103874:	e583202c 	str	r2, [r3, #44]	; 0x2c
  103878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10387c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  103880:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103884:	e5832028 	str	r2, [r3, #40]	; 0x28
  103888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10388c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  103890:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103894:	e5832024 	str	r2, [r3, #36]	; 0x24
            pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
        ret = ALT_E_SUCCESS;
  103898:	e3a03000 	mov	r3, #0
  10389c:	e50b3008 	str	r3, [fp, #-8]
  1038a0:	ea0000e8 	b	103c48 <alt_clk_pll_cfg_get+0x52c>
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  1038a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1038a8:	e353000a 	cmp	r3, #10
  1038ac:	1a000069 	bne	103a58 <alt_clk_pll_cfg_get+0x33c>
    {
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
  1038b0:	e3043080 	movw	r3, #16512	; 0x4080
  1038b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1038b8:	e5933000 	ldr	r3, [r3]
  1038bc:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  1038c0:	e1a03b23 	lsr	r3, r3, #22
  1038c4:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= 2)
  1038c8:	e51b300c 	ldr	r3, [fp, #-12]
  1038cc:	e3530002 	cmp	r3, #2
  1038d0:	8a0000dc 	bhi	103c48 <alt_clk_pll_cfg_get+0x52c>
        {
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
  1038d4:	e51b300c 	ldr	r3, [fp, #-12]
  1038d8:	e3530000 	cmp	r3, #0
  1038dc:	1a000003 	bne	1038f0 <alt_clk_pll_cfg_get+0x1d4>
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
  1038e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1038e4:	e3a02000 	mov	r2, #0
  1038e8:	e5c32000 	strb	r2, [r3]
  1038ec:	ea00000c 	b	103924 <alt_clk_pll_cfg_get+0x208>
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
  1038f0:	e51b300c 	ldr	r3, [fp, #-12]
  1038f4:	e3530001 	cmp	r3, #1
  1038f8:	1a000003 	bne	10390c <alt_clk_pll_cfg_get+0x1f0>
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC2;
  1038fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103900:	e3a02001 	mov	r2, #1
  103904:	e5c32000 	strb	r2, [r3]
  103908:	ea000005 	b	103924 <alt_clk_pll_cfg_get+0x208>
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
  10390c:	e51b300c 	ldr	r3, [fp, #-12]
  103910:	e3530002 	cmp	r3, #2
  103914:	1a000002 	bne	103924 <alt_clk_pll_cfg_get+0x208>
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_PERIPH_REF;
  103918:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10391c:	e3a02002 	mov	r2, #2
  103920:	e5c32000 	strb	r2, [r3]
            }

            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  103924:	e3043080 	movw	r3, #16512	; 0x4080
  103928:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10392c:	e5933000 	ldr	r3, [r3]
  103930:	e50b300c 	str	r3, [fp, #-12]
            pll_cfg->mult = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
  103934:	e51b200c 	ldr	r2, [fp, #-12]
  103938:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  10393c:	e0033002 	and	r3, r3, r2
  103940:	e1a021a3 	lsr	r2, r3, #3
  103944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103948:	e5832004 	str	r2, [r3, #4]
            pll_cfg->div = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
  10394c:	e51b300c 	ldr	r3, [fp, #-12]
  103950:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  103954:	e1a02823 	lsr	r2, r3, #16
  103958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10395c:	e5832008 	str	r2, [r3, #8]

            /* Get the C0-C5 divider values: */
            pll_cfg->cntrs[0] = ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR));
  103960:	e3043088 	movw	r3, #16520	; 0x4088
  103964:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103968:	e5933000 	ldr	r3, [r3]
  10396c:	e7e82053 	ubfx	r2, r3, #0, #9
  103970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103974:	e583200c 	str	r2, [r3, #12]
            /* C0 - emac0_clk */

            pll_cfg->cntrs[1] = ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR));
  103978:	e304308c 	movw	r3, #16524	; 0x408c
  10397c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103980:	e5933000 	ldr	r3, [r3]
  103984:	e7e82053 	ubfx	r2, r3, #0, #9
  103988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10398c:	e5832010 	str	r2, [r3, #16]
            /* C1 - emac1_clk */

            pll_cfg->cntrs[2] = ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR));
  103990:	e3043090 	movw	r3, #16528	; 0x4090
  103994:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103998:	e5933000 	ldr	r3, [r3]
  10399c:	e7e82053 	ubfx	r2, r3, #0, #9
  1039a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1039a4:	e5832014 	str	r2, [r3, #20]
            /* C2 - periph_qspi_clk */

            pll_cfg->cntrs[3] = ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR));
  1039a8:	e3043094 	movw	r3, #16532	; 0x4094
  1039ac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1039b0:	e5933000 	ldr	r3, [r3]
  1039b4:	e7e82053 	ubfx	r2, r3, #0, #9
  1039b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1039bc:	e5832018 	str	r2, [r3, #24]
            /* C3 - periph_nand_sdmmc_clk */

            pll_cfg->cntrs[4] = ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR));
  1039c0:	e3043098 	movw	r3, #16536	; 0x4098
  1039c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1039c8:	e5933000 	ldr	r3, [r3]
  1039cc:	e7e82053 	ubfx	r2, r3, #0, #9
  1039d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1039d4:	e583201c 	str	r2, [r3, #28]
            /* C4 - periph_base_clk */

            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
  1039d8:	e304309c 	movw	r3, #16540	; 0x409c
  1039dc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1039e0:	e5933000 	ldr	r3, [r3]
  1039e4:	e7e82053 	ubfx	r2, r3, #0, #9
  1039e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1039ec:	e5832020 	str	r2, [r3, #32]
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
                pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
  1039f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1039f4:	e3a02000 	mov	r2, #0
  1039f8:	e5832038 	str	r2, [r3, #56]	; 0x38
  1039fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a00:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  103a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a08:	e5832034 	str	r2, [r3, #52]	; 0x34
  103a0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a10:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  103a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a18:	e5832030 	str	r2, [r3, #48]	; 0x30
  103a1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a20:	e5932030 	ldr	r2, [r3, #48]	; 0x30

            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
  103a24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a28:	e583202c 	str	r2, [r3, #44]	; 0x2c
  103a2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a30:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  103a34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a38:	e5832028 	str	r2, [r3, #40]	; 0x28
  103a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a40:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  103a44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a48:	e5832024 	str	r2, [r3, #36]	; 0x24
                pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
            ret = ALT_E_SUCCESS;
  103a4c:	e3a03000 	mov	r3, #0
  103a50:	e50b3008 	str	r3, [fp, #-8]
  103a54:	ea00007b 	b	103c48 <alt_clk_pll_cfg_get+0x52c>
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  103a58:	e55b300d 	ldrb	r3, [fp, #-13]
  103a5c:	e353000b 	cmp	r3, #11
  103a60:	1a000078 	bne	103c48 <alt_clk_pll_cfg_get+0x52c>
    {
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
  103a64:	e30430c0 	movw	r3, #16576	; 0x40c0
  103a68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103a6c:	e5933000 	ldr	r3, [r3]
  103a70:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  103a74:	e1a03b23 	lsr	r3, r3, #22
  103a78:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= 2)
  103a7c:	e51b300c 	ldr	r3, [fp, #-12]
  103a80:	e3530002 	cmp	r3, #2
  103a84:	8a00006f 	bhi	103c48 <alt_clk_pll_cfg_get+0x52c>
        {
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
  103a88:	e51b300c 	ldr	r3, [fp, #-12]
  103a8c:	e3530000 	cmp	r3, #0
  103a90:	1a000003 	bne	103aa4 <alt_clk_pll_cfg_get+0x388>
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
  103a94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103a98:	e3a02000 	mov	r2, #0
  103a9c:	e5c32000 	strb	r2, [r3]
  103aa0:	ea00000c 	b	103ad8 <alt_clk_pll_cfg_get+0x3bc>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
  103aa4:	e51b300c 	ldr	r3, [fp, #-12]
  103aa8:	e3530001 	cmp	r3, #1
  103aac:	1a000003 	bne	103ac0 <alt_clk_pll_cfg_get+0x3a4>
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC2;
  103ab0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103ab4:	e3a02001 	mov	r2, #1
  103ab8:	e5c32000 	strb	r2, [r3]
  103abc:	ea000005 	b	103ad8 <alt_clk_pll_cfg_get+0x3bc>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
  103ac0:	e51b300c 	ldr	r3, [fp, #-12]
  103ac4:	e3530002 	cmp	r3, #2
  103ac8:	1a000002 	bne	103ad8 <alt_clk_pll_cfg_get+0x3bc>
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_SDRAM_REF;
  103acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103ad0:	e3a02003 	mov	r2, #3
  103ad4:	e5c32000 	strb	r2, [r3]
            }

            pll_cfg->mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
  103ad8:	e30430c0 	movw	r3, #16576	; 0x40c0
  103adc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103ae0:	e5932000 	ldr	r2, [r3]
  103ae4:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  103ae8:	e0033002 	and	r3, r3, r2
  103aec:	e1a021a3 	lsr	r2, r3, #3
  103af0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103af4:	e5832004 	str	r2, [r3, #4]
            pll_cfg->div = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
  103af8:	e30430c0 	movw	r3, #16576	; 0x40c0
  103afc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103b00:	e5933000 	ldr	r3, [r3]
  103b04:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  103b08:	e1a02823 	lsr	r2, r3, #16
  103b0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103b10:	e5832008 	str	r2, [r3, #8]

            /* Get the C0-C5 divider values: */
            pll_cfg->cntrs[0]  = ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR));
  103b14:	e30430c8 	movw	r3, #16584	; 0x40c8
  103b18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103b1c:	e5933000 	ldr	r3, [r3]
  103b20:	e7e82053 	ubfx	r2, r3, #0, #9
  103b24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103b28:	e583200c 	str	r2, [r3, #12]
            pll_cfg->pshift[0] = ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR));
  103b2c:	e30430c8 	movw	r3, #16584	; 0x40c8
  103b30:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103b34:	e5932000 	ldr	r2, [r3]
  103b38:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  103b3c:	e340301f 	movt	r3, #31
  103b40:	e0033002 	and	r3, r3, r2
  103b44:	e1a024a3 	lsr	r2, r3, #9
  103b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103b4c:	e5832024 	str	r2, [r3, #36]	; 0x24
            /* C0  - ddr_dqs_clk */

            pll_cfg->cntrs[1]  = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
  103b50:	e30430cc 	movw	r3, #16588	; 0x40cc
  103b54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103b58:	e5933000 	ldr	r3, [r3]
  103b5c:	e7e82053 	ubfx	r2, r3, #0, #9
  103b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103b64:	e5832010 	str	r2, [r3, #16]
            pll_cfg->pshift[1] = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
  103b68:	e30430cc 	movw	r3, #16588	; 0x40cc
  103b6c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103b70:	e5932000 	ldr	r2, [r3]
  103b74:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  103b78:	e340301f 	movt	r3, #31
  103b7c:	e0033002 	and	r3, r3, r2
  103b80:	e1a024a3 	lsr	r2, r3, #9
  103b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103b88:	e5832028 	str	r2, [r3, #40]	; 0x28
            /* C1  - ddr_2x_dqs_clk */

            pll_cfg->cntrs[2]  = ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
  103b8c:	e30430d0 	movw	r3, #16592	; 0x40d0
  103b90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103b94:	e5933000 	ldr	r3, [r3]
  103b98:	e7e82053 	ubfx	r2, r3, #0, #9
  103b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103ba0:	e5832014 	str	r2, [r3, #20]
            pll_cfg->pshift[2] = ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
  103ba4:	e30430d0 	movw	r3, #16592	; 0x40d0
  103ba8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103bac:	e5932000 	ldr	r2, [r3]
  103bb0:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  103bb4:	e340301f 	movt	r3, #31
  103bb8:	e0033002 	and	r3, r3, r2
  103bbc:	e1a024a3 	lsr	r2, r3, #9
  103bc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103bc4:	e583202c 	str	r2, [r3, #44]	; 0x2c
            /* C2  - ddr_dq_clk */

            pll_cfg->cntrs[3]  = pll_cfg->cntrs[4] = pll_cfg->pshift[3] = pll_cfg->pshift[4] = 0;
  103bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103bcc:	e3a02000 	mov	r2, #0
  103bd0:	e5832034 	str	r2, [r3, #52]	; 0x34
  103bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103bd8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  103bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103be0:	e5832030 	str	r2, [r3, #48]	; 0x30
  103be4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103be8:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  103bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103bf0:	e583201c 	str	r2, [r3, #28]
  103bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103bf8:	e593201c 	ldr	r2, [r3, #28]
  103bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103c00:	e5832018 	str	r2, [r3, #24]
            /* C3  & C4 outputs don't exist on the SDRAM PLL */

            pll_cfg->cntrs[5]  = ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR));
  103c04:	e30430d4 	movw	r3, #16596	; 0x40d4
  103c08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103c0c:	e5933000 	ldr	r3, [r3]
  103c10:	e7e82053 	ubfx	r2, r3, #0, #9
  103c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103c18:	e5832020 	str	r2, [r3, #32]
            pll_cfg->pshift[5] = ALT_CLKMGR_SDRPLL_S2FUSER2CLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR));
  103c1c:	e30430d4 	movw	r3, #16596	; 0x40d4
  103c20:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103c24:	e5932000 	ldr	r2, [r3]
  103c28:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  103c2c:	e340301f 	movt	r3, #31
  103c30:	e0033002 	and	r3, r3, r2
  103c34:	e1a024a3 	lsr	r2, r3, #9
  103c38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103c3c:	e5832038 	str	r2, [r3, #56]	; 0x38
            /* C5  - s2f_user2_clk or h2f_user2_clk */

            ret = ALT_E_SUCCESS;
  103c40:	e3a03000 	mov	r3, #0
  103c44:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    return ret;
  103c48:	e51b3008 	ldr	r3, [fp, #-8]
}
  103c4c:	e1a00003 	mov	r0, r3
  103c50:	e24bd000 	sub	sp, fp, #0
  103c54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c58:	e12fff1e 	bx	lr

00103c5c <alt_clk_pll_cfg_set>:
/*
// alt_clk_pll_cfg_set() sets the PLL configuration using the configuration parameters
// specified in pll_cfg.
*/
ALT_STATUS_CODE alt_clk_pll_cfg_set(ALT_CLK_t pll, const ALT_CLK_PLL_CFG_t * pll_cfg)
{
  103c5c:	e92d4800 	push	{fp, lr}
  103c60:	e28db004 	add	fp, sp, #4
  103c64:	e24dd018 	sub	sp, sp, #24
  103c68:	e1a03000 	mov	r3, r0
  103c6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  103c70:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE ret = ALT_E_ERROR;
  103c74:	e3e03000 	mvn	r3, #0
  103c78:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp;

    if (pll_cfg == NULL)
  103c7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103c80:	e3530000 	cmp	r3, #0
  103c84:	1a000001 	bne	103c90 <alt_clk_pll_cfg_set+0x34>
    {
        return ALT_E_BAD_ARG;
  103c88:	e3e03008 	mvn	r3, #8
  103c8c:	ea000146 	b	1041ac <alt_clk_pll_cfg_set+0x550>
    }

    if (alt_clk_pll_is_bypassed(pll) != ALT_E_TRUE)         /* safe to write the PLL registers? */
  103c90:	e55b300d 	ldrb	r3, [fp, #-13]
  103c94:	e1a00003 	mov	r0, r3
  103c98:	ebfff67f 	bl	10169c <alt_clk_pll_is_bypassed>
  103c9c:	e1a03000 	mov	r3, r0
  103ca0:	e3530001 	cmp	r3, #1
  103ca4:	0a000001 	beq	103cb0 <alt_clk_pll_cfg_set+0x54>
    {
        return ALT_E_ERROR;
  103ca8:	e3e03000 	mvn	r3, #0
  103cac:	ea00013e 	b	1041ac <alt_clk_pll_cfg_set+0x550>
    }

    if (pll == ALT_CLK_MAIN_PLL)
  103cb0:	e55b300d 	ldrb	r3, [fp, #-13]
  103cb4:	e3530009 	cmp	r3, #9
  103cb8:	1a000037 	bne	103d9c <alt_clk_pll_cfg_set+0x140>
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  103cbc:	e3043040 	movw	r3, #16448	; 0x4040
  103cc0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103cc4:	e5932000 	ldr	r2, [r3]
        return ALT_E_ERROR;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
  103cc8:	e3a03007 	mov	r3, #7
  103ccc:	e34f3fc0 	movt	r3, #65472	; 0xffc0
  103cd0:	e0033002 	and	r3, r3, r2
  103cd4:	e50b300c 	str	r3, [fp, #-12]
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
  103cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103cdc:	e5933004 	ldr	r3, [r3, #4]
  103ce0:	e1a03183 	lsl	r3, r3, #3
  103ce4:	e6ff2073 	uxth	r2, r3
            ALT_CLKMGR_MAINPLL_VCO_DENOM_SET(pll_cfg->div);
  103ce8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103cec:	e5933008 	ldr	r3, [r3, #8]
  103cf0:	e1a03803 	lsl	r3, r3, #16
  103cf4:	e203383f 	and	r3, r3, #4128768	; 0x3f0000

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
  103cf8:	e1823003 	orr	r3, r2, r3
  103cfc:	e51b200c 	ldr	r2, [fp, #-12]
  103d00:	e1823003 	orr	r3, r2, r3
  103d04:	e50b300c 	str	r3, [fp, #-12]
            ALT_CLKMGR_MAINPLL_VCO_DENOM_SET(pll_cfg->div);

        alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp);
  103d08:	e3043040 	movw	r3, #16448	; 0x4040
  103d0c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d10:	e51b200c 	ldr	r2, [fp, #-12]
  103d14:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MISC_MPUCLK_ADDR,           pll_cfg->cntrs[0]);
  103d18:	e30430e0 	movw	r3, #16608	; 0x40e0
  103d1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103d24:	e592200c 	ldr	r2, [r2, #12]
  103d28:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MISC_MAINCLK_ADDR,          pll_cfg->cntrs[1]);
  103d2c:	e30430e4 	movw	r3, #16612	; 0x40e4
  103d30:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d34:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103d38:	e5922010 	ldr	r2, [r2, #16]
  103d3c:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR,         pll_cfg->cntrs[2]);
  103d40:	e3043050 	movw	r3, #16464	; 0x4050
  103d44:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103d4c:	e5922014 	ldr	r2, [r2, #20]
  103d50:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,      pll_cfg->cntrs[3]);
  103d54:	e3043054 	movw	r3, #16468	; 0x4054
  103d58:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103d60:	e5922018 	ldr	r2, [r2, #24]
  103d64:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, pll_cfg->cntrs[4]);
  103d68:	e3043058 	movw	r3, #16472	; 0x4058
  103d6c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d70:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103d74:	e592201c 	ldr	r2, [r2, #28]
  103d78:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR,   pll_cfg->cntrs[5]);
  103d7c:	e304305c 	movw	r3, #16476	; 0x405c
  103d80:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103d84:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103d88:	e5922020 	ldr	r2, [r2, #32]
  103d8c:	e5832000 	str	r2, [r3]
        ret = ALT_E_SUCCESS;
  103d90:	e3a03000 	mov	r3, #0
  103d94:	e50b3008 	str	r3, [fp, #-8]
  103d98:	ea000102 	b	1041a8 <alt_clk_pll_cfg_set+0x54c>
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  103d9c:	e55b300d 	ldrb	r3, [fp, #-13]
  103da0:	e353000a 	cmp	r3, #10
  103da4:	1a000054 	bne	103efc <alt_clk_pll_cfg_set+0x2a0>
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
  103da8:	e3a03007 	mov	r3, #7
  103dac:	e34f3f00 	movt	r3, #65280	; 0xff00
  103db0:	e50b300c 	str	r3, [fp, #-12]
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  103db4:	e3043080 	movw	r3, #16512	; 0x4080
  103db8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e51b200c 	ldr	r2, [fp, #-12]
  103dc4:	e0033002 	and	r3, r3, r2
  103dc8:	e50b300c 	str	r3, [fp, #-12]
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
  103dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103dd0:	e5933004 	ldr	r3, [r3, #4]
  103dd4:	e1a03183 	lsl	r3, r3, #3
  103dd8:	e6ff2073 	uxth	r2, r3
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);
  103ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103de0:	e5933008 	ldr	r3, [r3, #8]
  103de4:	e1a03803 	lsl	r3, r3, #16
  103de8:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  103dec:	e1823003 	orr	r3, r2, r3
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
  103df0:	e51b200c 	ldr	r2, [fp, #-12]
  103df4:	e1823003 	orr	r3, r2, r3
  103df8:	e50b300c 	str	r3, [fp, #-12]
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
  103dfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103e00:	e5d33000 	ldrb	r3, [r3]
  103e04:	e3530000 	cmp	r3, #0
  103e08:	0a000015 	beq	103e64 <alt_clk_pll_cfg_set+0x208>
  103e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103e10:	e5d33000 	ldrb	r3, [r3]
  103e14:	e353000c 	cmp	r3, #12
  103e18:	0a000011 	beq	103e64 <alt_clk_pll_cfg_set+0x208>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC2)
  103e1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103e20:	e5d33000 	ldrb	r3, [r3]
  103e24:	e3530001 	cmp	r3, #1
  103e28:	1a000003 	bne	103e3c <alt_clk_pll_cfg_set+0x1e0>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2);
  103e2c:	e51b300c 	ldr	r3, [fp, #-12]
  103e30:	e3833501 	orr	r3, r3, #4194304	; 0x400000
  103e34:	e50b300c 	str	r3, [fp, #-12]
  103e38:	ea00000a 	b	103e68 <alt_clk_pll_cfg_set+0x20c>
        }
        else if (pll_cfg->ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103e3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103e40:	e5d33000 	ldrb	r3, [r3]
  103e44:	e3530002 	cmp	r3, #2
  103e48:	1a000003 	bne	103e5c <alt_clk_pll_cfg_set+0x200>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF);
  103e4c:	e51b300c 	ldr	r3, [fp, #-12]
  103e50:	e3833502 	orr	r3, r3, #8388608	; 0x800000
  103e54:	e50b300c 	str	r3, [fp, #-12]
  103e58:	ea000002 	b	103e68 <alt_clk_pll_cfg_set+0x20c>
        }
        else
        {
            return ret;
  103e5c:	e51b3008 	ldr	r3, [fp, #-8]
  103e60:	ea0000d1 	b	1041ac <alt_clk_pll_cfg_set+0x550>
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
  103e64:	e1a00000 	nop			; (mov r0, r0)
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
  103e68:	e3043080 	movw	r3, #16512	; 0x4080
  103e6c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103e70:	e51b200c 	ldr	r2, [fp, #-12]
  103e74:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR,        pll_cfg->cntrs[0]);
  103e78:	e3043088 	movw	r3, #16520	; 0x4088
  103e7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103e80:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103e84:	e592200c 	ldr	r2, [r2, #12]
  103e88:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR,        pll_cfg->cntrs[1]);
  103e8c:	e304308c 	movw	r3, #16524	; 0x408c
  103e90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103e94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103e98:	e5922010 	ldr	r2, [r2, #16]
  103e9c:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,      pll_cfg->cntrs[2]);
  103ea0:	e3043090 	movw	r3, #16528	; 0x4090
  103ea4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103ea8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103eac:	e5922014 	ldr	r2, [r2, #20]
  103eb0:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, pll_cfg->cntrs[3]);
  103eb4:	e3043094 	movw	r3, #16532	; 0x4094
  103eb8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103ebc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103ec0:	e5922018 	ldr	r2, [r2, #24]
  103ec4:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR,      pll_cfg->cntrs[4]);
  103ec8:	e3043098 	movw	r3, #16536	; 0x4098
  103ecc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103ed0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103ed4:	e592201c 	ldr	r2, [r2, #28]
  103ed8:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR,     pll_cfg->cntrs[5]);
  103edc:	e304309c 	movw	r3, #16540	; 0x409c
  103ee0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103ee4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  103ee8:	e5922020 	ldr	r2, [r2, #32]
  103eec:	e5832000 	str	r2, [r3]
        ret = ALT_E_SUCCESS;
  103ef0:	e3a03000 	mov	r3, #0
  103ef4:	e50b3008 	str	r3, [fp, #-8]
  103ef8:	ea0000aa 	b	1041a8 <alt_clk_pll_cfg_set+0x54c>
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  103efc:	e55b300d 	ldrb	r3, [fp, #-13]
  103f00:	e353000b 	cmp	r3, #11
  103f04:	1a0000a7 	bne	1041a8 <alt_clk_pll_cfg_set+0x54c>
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
  103f08:	e3a03007 	mov	r3, #7
  103f0c:	e34f3f00 	movt	r3, #65280	; 0xff00
  103f10:	e50b300c 	str	r3, [fp, #-12]
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  103f14:	e30430c0 	movw	r3, #16576	; 0x40c0
  103f18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103f1c:	e5933000 	ldr	r3, [r3]
  103f20:	e51b200c 	ldr	r2, [fp, #-12]
  103f24:	e0033002 	and	r3, r3, r2
  103f28:	e50b300c 	str	r3, [fp, #-12]
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
  103f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f30:	e5933004 	ldr	r3, [r3, #4]
  103f34:	e1a03183 	lsl	r3, r3, #3
  103f38:	e6ff2073 	uxth	r2, r3
            | ALT_CLKMGR_SDRPLL_VCO_DENOM_SET(pll_cfg->div)
  103f3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f40:	e5933008 	ldr	r3, [r3, #8]
  103f44:	e1a03803 	lsl	r3, r3, #16
  103f48:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  103f4c:	e1822003 	orr	r2, r2, r3
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
  103f50:	e51b300c 	ldr	r3, [fp, #-12]
  103f54:	e1823003 	orr	r3, r2, r3
  103f58:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  103f5c:	e50b300c 	str	r3, [fp, #-12]
            | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK;
        /* setting this bit aligns the output phase of the counters and prevents
        // glitches and too-short clock periods when restarting.
        // this bit is cleared at the end of this routine */

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
  103f60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f64:	e5d33000 	ldrb	r3, [r3]
  103f68:	e3530000 	cmp	r3, #0
  103f6c:	0a000015 	beq	103fc8 <alt_clk_pll_cfg_set+0x36c>
  103f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f74:	e5d33000 	ldrb	r3, [r3]
  103f78:	e353000c 	cmp	r3, #12
  103f7c:	0a000011 	beq	103fc8 <alt_clk_pll_cfg_set+0x36c>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC2)
  103f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f84:	e5d33000 	ldrb	r3, [r3]
  103f88:	e3530001 	cmp	r3, #1
  103f8c:	1a000003 	bne	103fa0 <alt_clk_pll_cfg_set+0x344>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2);
  103f90:	e51b300c 	ldr	r3, [fp, #-12]
  103f94:	e3833501 	orr	r3, r3, #4194304	; 0x400000
  103f98:	e50b300c 	str	r3, [fp, #-12]
  103f9c:	ea00000a 	b	103fcc <alt_clk_pll_cfg_set+0x370>
        }
        else if (pll_cfg->ref_clk == ALT_CLK_F2H_PERIPH_REF)
  103fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103fa4:	e5d33000 	ldrb	r3, [r3]
  103fa8:	e3530002 	cmp	r3, #2
  103fac:	1a000003 	bne	103fc0 <alt_clk_pll_cfg_set+0x364>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF);
  103fb0:	e51b300c 	ldr	r3, [fp, #-12]
  103fb4:	e3833502 	orr	r3, r3, #8388608	; 0x800000
  103fb8:	e50b300c 	str	r3, [fp, #-12]
  103fbc:	ea000002 	b	103fcc <alt_clk_pll_cfg_set+0x370>
        }
        else
        {
            return ret;
  103fc0:	e51b3008 	ldr	r3, [fp, #-8]
  103fc4:	ea000078 	b	1041ac <alt_clk_pll_cfg_set+0x550>
        // glitches and too-short clock periods when restarting.
        // this bit is cleared at the end of this routine */

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
  103fc8:	e1a00000 	nop			; (mov r0, r0)
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
  103fcc:	e30430c0 	movw	r3, #16576	; 0x40c0
  103fd0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  103fd4:	e51b200c 	ldr	r2, [fp, #-12]
  103fd8:	e5832000 	str	r2, [r3]

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
  103fdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103fe0:	e593300c 	ldr	r3, [r3, #12]
  103fe4:	e7e82053 	ubfx	r2, r3, #0, #9
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);
  103fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103fec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  103ff0:	e1a01483 	lsl	r1, r3, #9
  103ff4:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  103ff8:	e340301f 	movt	r3, #31
  103ffc:	e0033001 	and	r3, r3, r1
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
  104000:	e1823003 	orr	r3, r2, r3
  104004:	e50b300c 	str	r3, [fp, #-12]
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);

        alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR, ALT_CLKMGR_STAT_ADDR,
  104008:	e3a03000 	mov	r3, #0
  10400c:	e58d3004 	str	r3, [sp, #4]
  104010:	e30f3fff 	movw	r3, #65535	; 0xffff
  104014:	e340301f 	movt	r3, #31
  104018:	e58d3000 	str	r3, [sp]
  10401c:	e51b300c 	ldr	r3, [fp, #-12]
  104020:	e30420c8 	movw	r2, #16584	; 0x40c8
  104024:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  104028:	e3041014 	movw	r1, #16404	; 0x4014
  10402c:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  104030:	e30400c0 	movw	r0, #16576	; 0x40c0
  104034:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  104038:	ebfff2fe 	bl	100c38 <alt_clk_pllcounter_write>
                                 ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR, temp,
                                 ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET_MSK | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET_MSK,
                                 ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_LSB);

        /* write the SDRAM PLL C1 Divide Counter ----------------------------- */
        if (ret == ALT_E_SUCCESS)
  10403c:	e51b3008 	ldr	r3, [fp, #-8]
  104040:	e3530000 	cmp	r3, #0
  104044:	1a000017 	bne	1040a8 <alt_clk_pll_cfg_set+0x44c>
        {
            temp =  ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET(pll_cfg->cntrs[1])
  104048:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10404c:	e5933010 	ldr	r3, [r3, #16]
  104050:	e7e82053 	ubfx	r2, r3, #0, #9
                | ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_SET(pll_cfg->pshift[1]);
  104054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104058:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10405c:	e1a01483 	lsl	r1, r3, #9
  104060:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  104064:	e340301f 	movt	r3, #31
  104068:	e0033001 	and	r3, r3, r1
                                 ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_LSB);

        /* write the SDRAM PLL C1 Divide Counter ----------------------------- */
        if (ret == ALT_E_SUCCESS)
        {
            temp =  ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET(pll_cfg->cntrs[1])
  10406c:	e1823003 	orr	r3, r2, r3
  104070:	e50b300c 	str	r3, [fp, #-12]
                | ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_SET(pll_cfg->pshift[1]);
            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR, ALT_CLKMGR_STAT_ADDR,
  104074:	e3a03000 	mov	r3, #0
  104078:	e58d3004 	str	r3, [sp, #4]
  10407c:	e30f3fff 	movw	r3, #65535	; 0xffff
  104080:	e340301f 	movt	r3, #31
  104084:	e58d3000 	str	r3, [sp]
  104088:	e51b300c 	ldr	r3, [fp, #-12]
  10408c:	e30420cc 	movw	r2, #16588	; 0x40cc
  104090:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  104094:	e3041014 	movw	r1, #16404	; 0x4014
  104098:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  10409c:	e30400c0 	movw	r0, #16576	; 0x40c0
  1040a0:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1040a4:	ebfff2e3 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET_MSK | ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_SET_MSK,
                                     ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_LSB);
        }

        /* write the SDRAM PLL C2 Divide Counter ----------------------------- */
        if (ret == ALT_E_SUCCESS)
  1040a8:	e51b3008 	ldr	r3, [fp, #-8]
  1040ac:	e3530000 	cmp	r3, #0
  1040b0:	1a000017 	bne	104114 <alt_clk_pll_cfg_set+0x4b8>
        {
            temp =  ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET(pll_cfg->cntrs[2])
  1040b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1040b8:	e5933014 	ldr	r3, [r3, #20]
  1040bc:	e7e82053 	ubfx	r2, r3, #0, #9
                | ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_SET(pll_cfg->pshift[2]);
  1040c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1040c4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1040c8:	e1a01483 	lsl	r1, r3, #9
  1040cc:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  1040d0:	e340301f 	movt	r3, #31
  1040d4:	e0033001 	and	r3, r3, r1
        }

        /* write the SDRAM PLL C2 Divide Counter ----------------------------- */
        if (ret == ALT_E_SUCCESS)
        {
            temp =  ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET(pll_cfg->cntrs[2])
  1040d8:	e1823003 	orr	r3, r2, r3
  1040dc:	e50b300c 	str	r3, [fp, #-12]
                | ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_SET(pll_cfg->pshift[2]);
            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR, ALT_CLKMGR_STAT_ADDR,
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e58d3004 	str	r3, [sp, #4]
  1040e8:	e30f3fff 	movw	r3, #65535	; 0xffff
  1040ec:	e340301f 	movt	r3, #31
  1040f0:	e58d3000 	str	r3, [sp]
  1040f4:	e51b300c 	ldr	r3, [fp, #-12]
  1040f8:	e30420d0 	movw	r2, #16592	; 0x40d0
  1040fc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  104100:	e3041014 	movw	r1, #16404	; 0x4014
  104104:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  104108:	e30400c0 	movw	r0, #16576	; 0x40c0
  10410c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  104110:	ebfff2c8 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET_MSK | ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_SET_MSK,
                                     ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_LSB);
        }

        /* write the SDRAM PLL C5 Divide Counter ----------------------------- */
        if (ret == ALT_E_SUCCESS)
  104114:	e51b3008 	ldr	r3, [fp, #-8]
  104118:	e3530000 	cmp	r3, #0
  10411c:	1a000017 	bne	104180 <alt_clk_pll_cfg_set+0x524>
        {
            temp =  ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET(pll_cfg->cntrs[2])
  104120:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104124:	e5933014 	ldr	r3, [r3, #20]
  104128:	e7e82053 	ubfx	r2, r3, #0, #9
                | ALT_CLKMGR_SDRPLL_S2FUSER2CLK_PHASE_SET(pll_cfg->pshift[2]);
  10412c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104130:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104134:	e1a01483 	lsl	r1, r3, #9
  104138:	e3a03cfe 	mov	r3, #65024	; 0xfe00
  10413c:	e340301f 	movt	r3, #31
  104140:	e0033001 	and	r3, r3, r1
        }

        /* write the SDRAM PLL C5 Divide Counter ----------------------------- */
        if (ret == ALT_E_SUCCESS)
        {
            temp =  ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET(pll_cfg->cntrs[2])
  104144:	e1823003 	orr	r3, r2, r3
  104148:	e50b300c 	str	r3, [fp, #-12]
                | ALT_CLKMGR_SDRPLL_S2FUSER2CLK_PHASE_SET(pll_cfg->pshift[2]);
            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR, ALT_CLKMGR_STAT_ADDR,
  10414c:	e3a03000 	mov	r3, #0
  104150:	e58d3004 	str	r3, [sp, #4]
  104154:	e30f3fff 	movw	r3, #65535	; 0xffff
  104158:	e340301f 	movt	r3, #31
  10415c:	e58d3000 	str	r3, [sp]
  104160:	e51b300c 	ldr	r3, [fp, #-12]
  104164:	e30420d4 	movw	r2, #16596	; 0x40d4
  104168:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10416c:	e3041014 	movw	r1, #16404	; 0x4014
  104170:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  104174:	e30400c0 	movw	r0, #16576	; 0x40c0
  104178:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10417c:	ebfff2ad 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR, temp,
                                     ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET_MSK | ALT_CLKMGR_SDRPLL_S2FUSER2CLK_PHASE_SET_MSK,
                                     ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_LSB);
        }

        if (ret == ALT_E_SUCCESS)
  104180:	e51b3008 	ldr	r3, [fp, #-8]
  104184:	e3530000 	cmp	r3, #0
  104188:	1a000006 	bne	1041a8 <alt_clk_pll_cfg_set+0x54c>
        {
            alt_clrbits_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK);
  10418c:	e30430c0 	movw	r3, #16576	; 0x40c0
  104190:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104194:	e30420c0 	movw	r2, #16576	; 0x40c0
  104198:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10419c:	e5922000 	ldr	r2, [r2]
  1041a0:	e3c22401 	bic	r2, r2, #16777216	; 0x1000000
  1041a4:	e5832000 	str	r2, [r3]
            /* allow the phase multiplexer and output counter to leave reset */
        }
    }

    return ret;
  1041a8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1041ac:	e1a00003 	mov	r0, r3
  1041b0:	e24bd004 	sub	sp, fp, #4
  1041b4:	e8bd8800 	pop	{fp, pc}

001041b8 <alt_clk_pll_vco_cfg_get>:

/*
// alt_clk_pll_vco_cfg_get() returns the current PLL VCO frequency configuration.
*/
ALT_STATUS_CODE alt_clk_pll_vco_cfg_get(ALT_CLK_t pll, uint32_t * mult, uint32_t * div)
{
  1041b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1041bc:	e28db000 	add	fp, sp, #0
  1041c0:	e24dd01c 	sub	sp, sp, #28
  1041c4:	e1a03000 	mov	r3, r0
  1041c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1041cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1041d0:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  1041d4:	e3a03000 	mov	r3, #0
  1041d8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp;

    if ( (mult == NULL) || (div == NULL) )
  1041dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1041e0:	e3530000 	cmp	r3, #0
  1041e4:	0a000002 	beq	1041f4 <alt_clk_pll_vco_cfg_get+0x3c>
  1041e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1041ec:	e3530000 	cmp	r3, #0
  1041f0:	1a000001 	bne	1041fc <alt_clk_pll_vco_cfg_get+0x44>
    {
        return ALT_E_BAD_ARG;
  1041f4:	e3e03008 	mvn	r3, #8
  1041f8:	ea000041 	b	104304 <alt_clk_pll_vco_cfg_get+0x14c>
    }

    if (pll == ALT_CLK_MAIN_PLL)
  1041fc:	e55b300d 	ldrb	r3, [fp, #-13]
  104200:	e3530009 	cmp	r3, #9
  104204:	1a000011 	bne	104250 <alt_clk_pll_vco_cfg_get+0x98>
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  104208:	e3043040 	movw	r3, #16448	; 0x4040
  10420c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104210:	e5933000 	ldr	r3, [r3]
  104214:	e50b300c 	str	r3, [fp, #-12]
        *mult = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp) + 1;
  104218:	e51b200c 	ldr	r2, [fp, #-12]
  10421c:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104220:	e0033002 	and	r3, r3, r2
  104224:	e1a031a3 	lsr	r3, r3, #3
  104228:	e2832001 	add	r2, r3, #1
  10422c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104230:	e5832000 	str	r2, [r3]
        *div  = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp) + 1;
  104234:	e51b300c 	ldr	r3, [fp, #-12]
  104238:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  10423c:	e1a03823 	lsr	r3, r3, #16
  104240:	e2832001 	add	r2, r3, #1
  104244:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104248:	e5832000 	str	r2, [r3]
  10424c:	ea00002b 	b	104300 <alt_clk_pll_vco_cfg_get+0x148>
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  104250:	e55b300d 	ldrb	r3, [fp, #-13]
  104254:	e353000a 	cmp	r3, #10
  104258:	1a000011 	bne	1042a4 <alt_clk_pll_vco_cfg_get+0xec>
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  10425c:	e3043080 	movw	r3, #16512	; 0x4080
  104260:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104264:	e5933000 	ldr	r3, [r3]
  104268:	e50b300c 	str	r3, [fp, #-12]
        *mult = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp) + 1;
  10426c:	e51b200c 	ldr	r2, [fp, #-12]
  104270:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104274:	e0033002 	and	r3, r3, r2
  104278:	e1a031a3 	lsr	r3, r3, #3
  10427c:	e2832001 	add	r2, r3, #1
  104280:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104284:	e5832000 	str	r2, [r3]
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
  104288:	e51b300c 	ldr	r3, [fp, #-12]
  10428c:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  104290:	e1a03823 	lsr	r3, r3, #16
  104294:	e2832001 	add	r2, r3, #1
  104298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10429c:	e5832000 	str	r2, [r3]
  1042a0:	ea000016 	b	104300 <alt_clk_pll_vco_cfg_get+0x148>
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  1042a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1042a8:	e353000b 	cmp	r3, #11
  1042ac:	1a000011 	bne	1042f8 <alt_clk_pll_vco_cfg_get+0x140>
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  1042b0:	e30430c0 	movw	r3, #16576	; 0x40c0
  1042b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1042b8:	e5933000 	ldr	r3, [r3]
  1042bc:	e50b300c 	str	r3, [fp, #-12]
        *mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp) + 1;
  1042c0:	e51b200c 	ldr	r2, [fp, #-12]
  1042c4:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  1042c8:	e0033002 	and	r3, r3, r2
  1042cc:	e1a031a3 	lsr	r3, r3, #3
  1042d0:	e2832001 	add	r2, r3, #1
  1042d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1042d8:	e5832000 	str	r2, [r3]
        *div  = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp) + 1;
  1042dc:	e51b300c 	ldr	r3, [fp, #-12]
  1042e0:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  1042e4:	e1a03823 	lsr	r3, r3, #16
  1042e8:	e2832001 	add	r2, r3, #1
  1042ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042f0:	e5832000 	str	r2, [r3]
  1042f4:	ea000001 	b	104300 <alt_clk_pll_vco_cfg_get+0x148>
    }
    else
    {
        status = ALT_E_ERROR;
  1042f8:	e3e03000 	mvn	r3, #0
  1042fc:	e50b3008 	str	r3, [fp, #-8]
    }

    return status;
  104300:	e51b3008 	ldr	r3, [fp, #-8]
}
  104304:	e1a00003 	mov	r0, r3
  104308:	e24bd000 	sub	sp, fp, #0
  10430c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104310:	e12fff1e 	bx	lr

00104314 <alt_clk_pll_vco_chg_methods_get>:



static ALT_CLK_PLL_VCO_CHG_METHOD_t alt_clk_pll_vco_chg_methods_get(ALT_CLK_t pll,
        uint32_t mult, uint32_t div )
{
  104314:	e92d4800 	push	{fp, lr}
  104318:	e28db004 	add	fp, sp, #4
  10431c:	e24dd038 	sub	sp, sp, #56	; 0x38
  104320:	e1a03000 	mov	r3, r0
  104324:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  104328:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  10432c:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    /* used for testing */
    return ALT_VCO_CHG_NOCHANGE;

#else
    ALT_CLK_PLL_VCO_CHG_METHOD_t    ret = ALT_VCO_CHG_NONE_VALID;
  104330:	e3a03000 	mov	r3, #0
  104334:	e14b30b6 	strh	r3, [fp, #-6]
    uint32_t                        denom;
    uint32_t                        freqmax;
    uint32_t                        freqmin;
    uint32_t                        inputfreq;
    uint32_t                        guardband;
    bool                            numerchg = false;
  104338:	e3a03000 	mov	r3, #0
  10433c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    bool                            denomchg = false;
  104340:	e3a03000 	mov	r3, #0
  104344:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
    bool                            within_gb;

    /* check PLL max value limits */
    if (   (mult == 0) || (mult > ALT_CLK_PLL_MULT_MAX)
  104348:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10434c:	e3530000 	cmp	r3, #0
  104350:	0a000008 	beq	104378 <alt_clk_pll_vco_chg_methods_get+0x64>
  104354:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  104358:	e3530a01 	cmp	r3, #4096	; 0x1000
  10435c:	8a000005 	bhi	104378 <alt_clk_pll_vco_chg_methods_get+0x64>
        || (div  == 0) || (div  > ALT_CLK_PLL_DIV_MAX)
  104360:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  104364:	e3530000 	cmp	r3, #0
  104368:	0a000002 	beq	104378 <alt_clk_pll_vco_chg_methods_get+0x64>
  10436c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  104370:	e3530040 	cmp	r3, #64	; 0x40
  104374:	9a000001 	bls	104380 <alt_clk_pll_vco_chg_methods_get+0x6c>
       )
    {
        return ALT_VCO_CHG_NONE_VALID;
  104378:	e3a03000 	mov	r3, #0
  10437c:	ea0001de 	b	104afc <alt_clk_pll_vco_chg_methods_get+0x7e8>
    }

    /* gather data values according to PLL */
    if (pll == ALT_CLK_MAIN_PLL)
  104380:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  104384:	e3530009 	cmp	r3, #9
  104388:	1a00001f 	bne	10440c <alt_clk_pll_vco_chg_methods_get+0xf8>
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  10438c:	e3043040 	movw	r3, #16448	; 0x4040
  104390:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104394:	e5933000 	ldr	r3, [r3]
  104398:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
  10439c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1043a0:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  1043a4:	e0033002 	and	r3, r3, r2
  1043a8:	e1a031a3 	lsr	r3, r3, #3
  1043ac:	e50b300c 	str	r3, [fp, #-12]
        denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
  1043b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1043b4:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  1043b8:	e1a03823 	lsr	r3, r3, #16
  1043bc:	e50b3010 	str	r3, [fp, #-16]

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
  1043c0:	e30732f0 	movw	r3, #29424	; 0x72f0
  1043c4:	e3403011 	movt	r3, #17
  1043c8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1043cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        freqmin   = alt_pll_clk_paramblok.MainPLL_800.freqmin;
  1043d0:	e30732f0 	movw	r3, #29424	; 0x72f0
  1043d4:	e3403011 	movt	r3, #17
  1043d8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1043dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        guardband = alt_pll_clk_paramblok.MainPLL_800.guardband;
  1043e0:	e30732f0 	movw	r3, #29424	; 0x72f0
  1043e4:	e3403011 	movt	r3, #17
  1043e8:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
  1043ec:	e7e63053 	ubfx	r3, r3, #0, #7
  1043f0:	e6ef3073 	uxtb	r3, r3
  1043f4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
  1043f8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1043fc:	e3403011 	movt	r3, #17
  104400:	e5933000 	ldr	r3, [r3]
  104404:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  104408:	ea000079 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
    }

    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  10440c:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  104410:	e353000a 	cmp	r3, #10
  104414:	1a000038 	bne	1044fc <alt_clk_pll_vco_chg_methods_get+0x1e8>
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  104418:	e3043080 	movw	r3, #16512	; 0x4080
  10441c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104420:	e5933000 	ldr	r3, [r3]
  104424:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
  104428:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10442c:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104430:	e0033002 	and	r3, r3, r2
  104434:	e1a031a3 	lsr	r3, r3, #3
  104438:	e50b300c 	str	r3, [fp, #-12]
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
  10443c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104440:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  104444:	e1a03823 	lsr	r3, r3, #16
  104448:	e50b3010 	str	r3, [fp, #-16]

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
  10444c:	e30732f0 	movw	r3, #29424	; 0x72f0
  104450:	e3403011 	movt	r3, #17
  104454:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  104458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        freqmin   = alt_pll_clk_paramblok.PeriphPLL_800.freqmin;
  10445c:	e30732f0 	movw	r3, #29424	; 0x72f0
  104460:	e3403011 	movt	r3, #17
  104464:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  104468:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        guardband = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
  10446c:	e30732f0 	movw	r3, #29424	; 0x72f0
  104470:	e3403011 	movt	r3, #17
  104474:	e5d3304c 	ldrb	r3, [r3, #76]	; 0x4c
  104478:	e7e63053 	ubfx	r3, r3, #0, #7
  10447c:	e6ef3073 	uxtb	r3, r3
  104480:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
  104484:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104488:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  10448c:	e1a03b23 	lsr	r3, r3, #22
  104490:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
  104494:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104498:	e3530000 	cmp	r3, #0
  10449c:	1a000004 	bne	1044b4 <alt_clk_pll_vco_chg_methods_get+0x1a0>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
  1044a0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1044a4:	e3403011 	movt	r3, #17
  1044a8:	e5933000 	ldr	r3, [r3]
  1044ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1044b0:	ea00004f 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
  1044b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1044b8:	e3530001 	cmp	r3, #1
  1044bc:	1a000004 	bne	1044d4 <alt_clk_pll_vco_chg_methods_get+0x1c0>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc2.freqcur;
  1044c0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1044c4:	e3403011 	movt	r3, #17
  1044c8:	e5933010 	ldr	r3, [r3, #16]
  1044cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1044d0:	ea000047 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
  1044d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1044d8:	e3530002 	cmp	r3, #2
  1044dc:	1a000004 	bne	1044f4 <alt_clk_pll_vco_chg_methods_get+0x1e0>
        {
            inputfreq = alt_ext_clk_paramblok.periph.freqcur;
  1044e0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1044e4:	e3403011 	movt	r3, #17
  1044e8:	e5933020 	ldr	r3, [r3, #32]
  1044ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1044f0:	ea00003f 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
        }
        else
        {
            return ret;
  1044f4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1044f8:	ea00017f 	b	104afc <alt_clk_pll_vco_chg_methods_get+0x7e8>
        }
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
  1044fc:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  104500:	e353000b 	cmp	r3, #11
  104504:	1a000038 	bne	1045ec <alt_clk_pll_vco_chg_methods_get+0x2d8>
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  104508:	e30430c0 	movw	r3, #16576	; 0x40c0
  10450c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104510:	e5933000 	ldr	r3, [r3]
  104514:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
  104518:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10451c:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104520:	e0033002 	and	r3, r3, r2
  104524:	e1a031a3 	lsr	r3, r3, #3
  104528:	e50b300c 	str	r3, [fp, #-12]
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
  10452c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104530:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  104534:	e1a03823 	lsr	r3, r3, #16
  104538:	e50b3010 	str	r3, [fp, #-16]

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
  10453c:	e30732f0 	movw	r3, #29424	; 0x72f0
  104540:	e3403011 	movt	r3, #17
  104544:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  104548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        freqmin   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmin;
  10454c:	e30732f0 	movw	r3, #29424	; 0x72f0
  104550:	e3403011 	movt	r3, #17
  104554:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  104558:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        guardband = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
  10455c:	e30732f0 	movw	r3, #29424	; 0x72f0
  104560:	e3403011 	movt	r3, #17
  104564:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
  104568:	e7e63053 	ubfx	r3, r3, #0, #7
  10456c:	e6ef3073 	uxtb	r3, r3
  104570:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
  104574:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104578:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  10457c:	e1a03b23 	lsr	r3, r3, #22
  104580:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
  104584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  104588:	e3530000 	cmp	r3, #0
  10458c:	1a000004 	bne	1045a4 <alt_clk_pll_vco_chg_methods_get+0x290>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
  104590:	e30732b0 	movw	r3, #29360	; 0x72b0
  104594:	e3403011 	movt	r3, #17
  104598:	e5933000 	ldr	r3, [r3]
  10459c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1045a0:	ea000013 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
  1045a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1045a8:	e3530001 	cmp	r3, #1
  1045ac:	1a000004 	bne	1045c4 <alt_clk_pll_vco_chg_methods_get+0x2b0>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc2.freqcur;
  1045b0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1045b4:	e3403011 	movt	r3, #17
  1045b8:	e5933010 	ldr	r3, [r3, #16]
  1045bc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1045c0:	ea00000b 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
  1045c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1045c8:	e3530002 	cmp	r3, #2
  1045cc:	1a000004 	bne	1045e4 <alt_clk_pll_vco_chg_methods_get+0x2d0>
        {
            inputfreq = alt_ext_clk_paramblok.sdram.freqcur;
  1045d0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1045d4:	e3403011 	movt	r3, #17
  1045d8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1045dc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1045e0:	ea000003 	b	1045f4 <alt_clk_pll_vco_chg_methods_get+0x2e0>
        }
        else
        {
            return ret;
  1045e4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1045e8:	ea000143 	b	104afc <alt_clk_pll_vco_chg_methods_get+0x7e8>
        }
    }
    else
    {
        return ret;
  1045ec:	e15b30b6 	ldrh	r3, [fp, #-6]
  1045f0:	ea000141 	b	104afc <alt_clk_pll_vco_chg_methods_get+0x7e8>
    }

    temp = mult * (inputfreq / div);
  1045f4:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  1045f8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1045fc:	eb0020a6 	bl	10c89c <__aeabi_uidiv>
  104600:	e1a03000 	mov	r3, r0
  104604:	e1a02003 	mov	r2, r3
  104608:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10460c:	e0030293 	mul	r3, r3, r2
  104610:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    if ((temp <= freqmax) && (temp >= freqmin))     /* are the final values within frequency limits? */
  104614:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  104618:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10461c:	e1520003 	cmp	r2, r3
  104620:	8a000134 	bhi	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
  104624:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  104628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10462c:	e1520003 	cmp	r2, r3
  104630:	3a000130 	bcc	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
    {
        numer++;
  104634:	e51b300c 	ldr	r3, [fp, #-12]
  104638:	e2833001 	add	r3, r3, #1
  10463c:	e50b300c 	str	r3, [fp, #-12]
        denom++;
  104640:	e51b3010 	ldr	r3, [fp, #-16]
  104644:	e2833001 	add	r3, r3, #1
  104648:	e50b3010 	str	r3, [fp, #-16]
        numerchg = (mult != numer);
  10464c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  104650:	e51b300c 	ldr	r3, [fp, #-12]
  104654:	e1520003 	cmp	r2, r3
  104658:	13a03001 	movne	r3, #1
  10465c:	03a03000 	moveq	r3, #0
  104660:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        denomchg = (div != denom);
  104664:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  104668:	e51b3010 	ldr	r3, [fp, #-16]
  10466c:	e1520003 	cmp	r2, r3
  104670:	13a03001 	movne	r3, #1
  104674:	03a03000 	moveq	r3, #0
  104678:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde

        if (!numerchg && !denomchg)
  10467c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  104680:	e2233001 	eor	r3, r3, #1
  104684:	e6ef3073 	uxtb	r3, r3
  104688:	e3530000 	cmp	r3, #0
  10468c:	0a000007 	beq	1046b0 <alt_clk_pll_vco_chg_methods_get+0x39c>
  104690:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
  104694:	e2233001 	eor	r3, r3, #1
  104698:	e6ef3073 	uxtb	r3, r3
  10469c:	e3530000 	cmp	r3, #0
  1046a0:	0a000002 	beq	1046b0 <alt_clk_pll_vco_chg_methods_get+0x39c>
        {
            ret = ALT_VCO_CHG_NOCHANGE;
  1046a4:	e3a03001 	mov	r3, #1
  1046a8:	e14b30b6 	strh	r3, [fp, #-6]
  1046ac:	ea000111 	b	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
        }
        else if (numerchg && !denomchg)
  1046b0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1046b4:	e3530000 	cmp	r3, #0
  1046b8:	0a000044 	beq	1047d0 <alt_clk_pll_vco_chg_methods_get+0x4bc>
  1046bc:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
  1046c0:	e2233001 	eor	r3, r3, #1
  1046c4:	e6ef3073 	uxtb	r3, r3
  1046c8:	e3530000 	cmp	r3, #0
  1046cc:	0a00003f 	beq	1047d0 <alt_clk_pll_vco_chg_methods_get+0x4bc>
        {
            within_gb = alt_within_delta(numer, mult, guardband);
  1046d0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1046d4:	e1a03103 	lsl	r3, r3, #2
  1046d8:	e1a02103 	lsl	r2, r3, #2
  1046dc:	e0833002 	add	r3, r3, r2
  1046e0:	e1a02103 	lsl	r2, r3, #2
  1046e4:	e0833002 	add	r3, r3, r2
  1046e8:	e51b100c 	ldr	r1, [fp, #-12]
  1046ec:	e1a00003 	mov	r0, r3
  1046f0:	eb002069 	bl	10c89c <__aeabi_uidiv>
  1046f4:	e1a03000 	mov	r3, r0
  1046f8:	e1a02003 	mov	r2, r3
  1046fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104700:	e2833064 	add	r3, r3, #100	; 0x64
  104704:	e1520003 	cmp	r2, r3
  104708:	2a000010 	bcs	104750 <alt_clk_pll_vco_chg_methods_get+0x43c>
  10470c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  104710:	e1a03103 	lsl	r3, r3, #2
  104714:	e1a02103 	lsl	r2, r3, #2
  104718:	e0833002 	add	r3, r3, r2
  10471c:	e1a02103 	lsl	r2, r3, #2
  104720:	e0833002 	add	r3, r3, r2
  104724:	e51b100c 	ldr	r1, [fp, #-12]
  104728:	e1a00003 	mov	r0, r3
  10472c:	eb00205a 	bl	10c89c <__aeabi_uidiv>
  104730:	e1a03000 	mov	r3, r0
  104734:	e1a02003 	mov	r2, r3
  104738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10473c:	e2633064 	rsb	r3, r3, #100	; 0x64
  104740:	e1520003 	cmp	r2, r3
  104744:	9a000001 	bls	104750 <alt_clk_pll_vco_chg_methods_get+0x43c>
  104748:	e3a03001 	mov	r3, #1
  10474c:	ea000000 	b	104754 <alt_clk_pll_vco_chg_methods_get+0x440>
  104750:	e3a03000 	mov	r3, #0
  104754:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  104758:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10475c:	e2033001 	and	r3, r3, #1
  104760:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
            /* check if change is within the guardband limits */
            temp = mult * (inputfreq / denom);
  104764:	e51b1010 	ldr	r1, [fp, #-16]
  104768:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10476c:	eb00204a 	bl	10c89c <__aeabi_uidiv>
  104770:	e1a03000 	mov	r3, r0
  104774:	e1a02003 	mov	r2, r3
  104778:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10477c:	e0030293 	mul	r3, r3, r2
  104780:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
            if ((temp <= freqmax) && (temp >= freqmin))
  104784:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  104788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10478c:	e1520003 	cmp	r2, r3
  104790:	8a0000d5 	bhi	104aec <alt_clk_pll_vco_chg_methods_get+0x7d8>
  104794:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  104798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10479c:	e1520003 	cmp	r2, r3
  1047a0:	3a0000d1 	bcc	104aec <alt_clk_pll_vco_chg_methods_get+0x7d8>
            {
                ret = ALT_VCO_CHG_NUM;
  1047a4:	e3a03002 	mov	r3, #2
  1047a8:	e14b30b6 	strh	r3, [fp, #-6]
                if (!within_gb) ret |= ALT_VCO_CHG_NUM_BYP;
  1047ac:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1047b0:	e2233001 	eor	r3, r3, #1
  1047b4:	e6ef3073 	uxtb	r3, r3
  1047b8:	e3530000 	cmp	r3, #0
  1047bc:	0a0000ca 	beq	104aec <alt_clk_pll_vco_chg_methods_get+0x7d8>
  1047c0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1047c4:	e3833004 	orr	r3, r3, #4
  1047c8:	e14b30b6 	strh	r3, [fp, #-6]
        else if (numerchg && !denomchg)
        {
            within_gb = alt_within_delta(numer, mult, guardband);
            /* check if change is within the guardband limits */
            temp = mult * (inputfreq / denom);
            if ((temp <= freqmax) && (temp >= freqmin))
  1047cc:	ea0000c6 	b	104aec <alt_clk_pll_vco_chg_methods_get+0x7d8>
            {
                ret = ALT_VCO_CHG_NUM;
                if (!within_gb) ret |= ALT_VCO_CHG_NUM_BYP;
            }
        }
        else if (!numerchg && denomchg)
  1047d0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1047d4:	e2233001 	eor	r3, r3, #1
  1047d8:	e6ef3073 	uxtb	r3, r3
  1047dc:	e3530000 	cmp	r3, #0
  1047e0:	0a000042 	beq	1048f0 <alt_clk_pll_vco_chg_methods_get+0x5dc>
  1047e4:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
  1047e8:	e3530000 	cmp	r3, #0
  1047ec:	0a00003f 	beq	1048f0 <alt_clk_pll_vco_chg_methods_get+0x5dc>
        {
            within_gb = alt_within_delta(denom, div, guardband);
  1047f0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1047f4:	e1a03103 	lsl	r3, r3, #2
  1047f8:	e1a02103 	lsl	r2, r3, #2
  1047fc:	e0833002 	add	r3, r3, r2
  104800:	e1a02103 	lsl	r2, r3, #2
  104804:	e0833002 	add	r3, r3, r2
  104808:	e51b1010 	ldr	r1, [fp, #-16]
  10480c:	e1a00003 	mov	r0, r3
  104810:	eb002021 	bl	10c89c <__aeabi_uidiv>
  104814:	e1a03000 	mov	r3, r0
  104818:	e1a02003 	mov	r2, r3
  10481c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104820:	e2833064 	add	r3, r3, #100	; 0x64
  104824:	e1520003 	cmp	r2, r3
  104828:	2a000010 	bcs	104870 <alt_clk_pll_vco_chg_methods_get+0x55c>
  10482c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  104830:	e1a03103 	lsl	r3, r3, #2
  104834:	e1a02103 	lsl	r2, r3, #2
  104838:	e0833002 	add	r3, r3, r2
  10483c:	e1a02103 	lsl	r2, r3, #2
  104840:	e0833002 	add	r3, r3, r2
  104844:	e51b1010 	ldr	r1, [fp, #-16]
  104848:	e1a00003 	mov	r0, r3
  10484c:	eb002012 	bl	10c89c <__aeabi_uidiv>
  104850:	e1a03000 	mov	r3, r0
  104854:	e1a02003 	mov	r2, r3
  104858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10485c:	e2633064 	rsb	r3, r3, #100	; 0x64
  104860:	e1520003 	cmp	r2, r3
  104864:	9a000001 	bls	104870 <alt_clk_pll_vco_chg_methods_get+0x55c>
  104868:	e3a03001 	mov	r3, #1
  10486c:	ea000000 	b	104874 <alt_clk_pll_vco_chg_methods_get+0x560>
  104870:	e3a03000 	mov	r3, #0
  104874:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  104878:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10487c:	e2033001 	and	r3, r3, #1
  104880:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
            temp = numer * (inputfreq / div);
  104884:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  104888:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10488c:	eb002002 	bl	10c89c <__aeabi_uidiv>
  104890:	e1a03000 	mov	r3, r0
  104894:	e1a02003 	mov	r2, r3
  104898:	e51b300c 	ldr	r3, [fp, #-12]
  10489c:	e0030293 	mul	r3, r3, r2
  1048a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
            if ((temp <= freqmax) && (temp >= freqmin))
  1048a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1048a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1048ac:	e1520003 	cmp	r2, r3
  1048b0:	8a00008f 	bhi	104af4 <alt_clk_pll_vco_chg_methods_get+0x7e0>
  1048b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1048b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1048bc:	e1520003 	cmp	r2, r3
  1048c0:	3a00008b 	bcc	104af4 <alt_clk_pll_vco_chg_methods_get+0x7e0>
            {
                ret = ALT_VCO_CHG_DENOM;
  1048c4:	e3a03008 	mov	r3, #8
  1048c8:	e14b30b6 	strh	r3, [fp, #-6]
                if (!within_gb)
  1048cc:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1048d0:	e2233001 	eor	r3, r3, #1
  1048d4:	e6ef3073 	uxtb	r3, r3
  1048d8:	e3530000 	cmp	r3, #0
  1048dc:	0a000084 	beq	104af4 <alt_clk_pll_vco_chg_methods_get+0x7e0>
                {
                    ret |= ALT_VCO_CHG_DENOM_BYP;
  1048e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1048e4:	e3833010 	orr	r3, r3, #16
  1048e8:	e14b30b6 	strh	r3, [fp, #-6]
        }
        else if (!numerchg && denomchg)
        {
            within_gb = alt_within_delta(denom, div, guardband);
            temp = numer * (inputfreq / div);
            if ((temp <= freqmax) && (temp >= freqmin))
  1048ec:	ea000080 	b	104af4 <alt_clk_pll_vco_chg_methods_get+0x7e0>
                }
            }
        }
        else    /*numerchg && denomchg */
        {
            within_gb = alt_within_delta(numer, mult, guardband);
  1048f0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1048f4:	e1a03103 	lsl	r3, r3, #2
  1048f8:	e1a02103 	lsl	r2, r3, #2
  1048fc:	e0833002 	add	r3, r3, r2
  104900:	e1a02103 	lsl	r2, r3, #2
  104904:	e0833002 	add	r3, r3, r2
  104908:	e51b100c 	ldr	r1, [fp, #-12]
  10490c:	e1a00003 	mov	r0, r3
  104910:	eb001fe1 	bl	10c89c <__aeabi_uidiv>
  104914:	e1a03000 	mov	r3, r0
  104918:	e1a02003 	mov	r2, r3
  10491c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104920:	e2833064 	add	r3, r3, #100	; 0x64
  104924:	e1520003 	cmp	r2, r3
  104928:	2a000010 	bcs	104970 <alt_clk_pll_vco_chg_methods_get+0x65c>
  10492c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  104930:	e1a03103 	lsl	r3, r3, #2
  104934:	e1a02103 	lsl	r2, r3, #2
  104938:	e0833002 	add	r3, r3, r2
  10493c:	e1a02103 	lsl	r2, r3, #2
  104940:	e0833002 	add	r3, r3, r2
  104944:	e51b100c 	ldr	r1, [fp, #-12]
  104948:	e1a00003 	mov	r0, r3
  10494c:	eb001fd2 	bl	10c89c <__aeabi_uidiv>
  104950:	e1a03000 	mov	r3, r0
  104954:	e1a02003 	mov	r2, r3
  104958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10495c:	e2633064 	rsb	r3, r3, #100	; 0x64
  104960:	e1520003 	cmp	r2, r3
  104964:	9a000001 	bls	104970 <alt_clk_pll_vco_chg_methods_get+0x65c>
  104968:	e3a03001 	mov	r3, #1
  10496c:	ea000000 	b	104974 <alt_clk_pll_vco_chg_methods_get+0x660>
  104970:	e3a03000 	mov	r3, #0
  104974:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  104978:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10497c:	e2033001 	and	r3, r3, #1
  104980:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
            temp = mult * (inputfreq / denom);
  104984:	e51b1010 	ldr	r1, [fp, #-16]
  104988:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10498c:	eb001fc2 	bl	10c89c <__aeabi_uidiv>
  104990:	e1a03000 	mov	r3, r0
  104994:	e1a02003 	mov	r2, r3
  104998:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10499c:	e0030293 	mul	r3, r3, r2
  1049a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
            if ((temp <= freqmax) && (temp >= freqmin))
  1049a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1049a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1049ac:	e1520003 	cmp	r2, r3
  1049b0:	8a00000d 	bhi	1049ec <alt_clk_pll_vco_chg_methods_get+0x6d8>
  1049b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1049b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1049bc:	e1520003 	cmp	r2, r3
  1049c0:	3a000009 	bcc	1049ec <alt_clk_pll_vco_chg_methods_get+0x6d8>
            {
                ret = ALT_VCO_CHG_NUM_DENOM;
  1049c4:	e3a03020 	mov	r3, #32
  1049c8:	e14b30b6 	strh	r3, [fp, #-6]
                if (!within_gb)
  1049cc:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1049d0:	e2233001 	eor	r3, r3, #1
  1049d4:	e6ef3073 	uxtb	r3, r3
  1049d8:	e3530000 	cmp	r3, #0
  1049dc:	0a000002 	beq	1049ec <alt_clk_pll_vco_chg_methods_get+0x6d8>
                {
                    ret |= ALT_VCO_CHG_NUM_DENOM_BYP;
  1049e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1049e4:	e3833040 	orr	r3, r3, #64	; 0x40
  1049e8:	e14b30b6 	strh	r3, [fp, #-6]
                }
            }
            within_gb = alt_within_delta(denom, div, guardband);
  1049ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1049f0:	e1a03103 	lsl	r3, r3, #2
  1049f4:	e1a02103 	lsl	r2, r3, #2
  1049f8:	e0833002 	add	r3, r3, r2
  1049fc:	e1a02103 	lsl	r2, r3, #2
  104a00:	e0833002 	add	r3, r3, r2
  104a04:	e51b1010 	ldr	r1, [fp, #-16]
  104a08:	e1a00003 	mov	r0, r3
  104a0c:	eb001fa2 	bl	10c89c <__aeabi_uidiv>
  104a10:	e1a03000 	mov	r3, r0
  104a14:	e1a02003 	mov	r2, r3
  104a18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104a1c:	e2833064 	add	r3, r3, #100	; 0x64
  104a20:	e1520003 	cmp	r2, r3
  104a24:	2a000010 	bcs	104a6c <alt_clk_pll_vco_chg_methods_get+0x758>
  104a28:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  104a2c:	e1a03103 	lsl	r3, r3, #2
  104a30:	e1a02103 	lsl	r2, r3, #2
  104a34:	e0833002 	add	r3, r3, r2
  104a38:	e1a02103 	lsl	r2, r3, #2
  104a3c:	e0833002 	add	r3, r3, r2
  104a40:	e51b1010 	ldr	r1, [fp, #-16]
  104a44:	e1a00003 	mov	r0, r3
  104a48:	eb001f93 	bl	10c89c <__aeabi_uidiv>
  104a4c:	e1a03000 	mov	r3, r0
  104a50:	e1a02003 	mov	r2, r3
  104a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104a58:	e2633064 	rsb	r3, r3, #100	; 0x64
  104a5c:	e1520003 	cmp	r2, r3
  104a60:	9a000001 	bls	104a6c <alt_clk_pll_vco_chg_methods_get+0x758>
  104a64:	e3a03001 	mov	r3, #1
  104a68:	ea000000 	b	104a70 <alt_clk_pll_vco_chg_methods_get+0x75c>
  104a6c:	e3a03000 	mov	r3, #0
  104a70:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  104a74:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  104a78:	e2033001 	and	r3, r3, #1
  104a7c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
            temp = numer * (inputfreq / div);
  104a80:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  104a84:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  104a88:	eb001f83 	bl	10c89c <__aeabi_uidiv>
  104a8c:	e1a03000 	mov	r3, r0
  104a90:	e1a02003 	mov	r2, r3
  104a94:	e51b300c 	ldr	r3, [fp, #-12]
  104a98:	e0030293 	mul	r3, r3, r2
  104a9c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
            if ((temp <= freqmax) && (temp >= freqmin))
  104aa0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  104aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104aa8:	e1520003 	cmp	r2, r3
  104aac:	8a000011 	bhi	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
  104ab0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  104ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104ab8:	e1520003 	cmp	r2, r3
  104abc:	3a00000d 	bcc	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
            {
                ret = ALT_VCO_CHG_DENOM_NUM;
  104ac0:	e3a03080 	mov	r3, #128	; 0x80
  104ac4:	e14b30b6 	strh	r3, [fp, #-6]
                if (!within_gb)
  104ac8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  104acc:	e2233001 	eor	r3, r3, #1
  104ad0:	e6ef3073 	uxtb	r3, r3
  104ad4:	e3530000 	cmp	r3, #0
  104ad8:	0a000006 	beq	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
                {
                    ret |= ALT_VCO_CHG_DENOM_NUM_BYP;
  104adc:	e15b30b6 	ldrh	r3, [fp, #-6]
  104ae0:	e3833c01 	orr	r3, r3, #256	; 0x100
  104ae4:	e14b30b6 	strh	r3, [fp, #-6]
  104ae8:	ea000002 	b	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
        else if (numerchg && !denomchg)
        {
            within_gb = alt_within_delta(numer, mult, guardband);
            /* check if change is within the guardband limits */
            temp = mult * (inputfreq / denom);
            if ((temp <= freqmax) && (temp >= freqmin))
  104aec:	e1a00000 	nop			; (mov r0, r0)
  104af0:	ea000000 	b	104af8 <alt_clk_pll_vco_chg_methods_get+0x7e4>
        }
        else if (!numerchg && denomchg)
        {
            within_gb = alt_within_delta(denom, div, guardband);
            temp = numer * (inputfreq / div);
            if ((temp <= freqmax) && (temp >= freqmin))
  104af4:	e1a00000 	nop			; (mov r0, r0)
                }
            }
        }
    }

    return ret;
  104af8:	e15b30b6 	ldrh	r3, [fp, #-6]
#endif
}
  104afc:	e1a00003 	mov	r0, r3
  104b00:	e24bd004 	sub	sp, fp, #4
  104b04:	e8bd8800 	pop	{fp, pc}

00104b08 <alt_clk_pll_vco_cfg_set>:
/* bypassed. alt_clk_pll_vco_cfg_set() then carries out the actions required to effect  */
/* the method chosen to change the VCO settings.                                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_vco_cfg_set(ALT_CLK_t pll, uint32_t mult, uint32_t div)
{
  104b08:	e92d4800 	push	{fp, lr}
  104b0c:	e28db004 	add	fp, sp, #4
  104b10:	e24dd030 	sub	sp, sp, #48	; 0x30
  104b14:	e1a03000 	mov	r3, r0
  104b18:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  104b1c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  104b20:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    ALT_STATUS_CODE                 ret = ALT_E_ERROR;
  104b24:	e3e03000 	mvn	r3, #0
  104b28:	e50b3008 	str	r3, [fp, #-8]
    ALT_CLK_PLL_VCO_CHG_METHOD_t    method;
    bool                            byp = false;
  104b2c:	e3a03000 	mov	r3, #0
  104b30:	e54b3009 	strb	r3, [fp, #-9]
    void                            *vaddr;
    uint32_t                        numermask, denommask;
    uint32_t                        numershift, denomshift;


    method = alt_clk_pll_vco_chg_methods_get(pll, mult, div);
  104b34:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104b38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  104b3c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  104b40:	e1a00003 	mov	r0, r3
  104b44:	ebfffdf2 	bl	104314 <alt_clk_pll_vco_chg_methods_get>
  104b48:	e1a03000 	mov	r3, r0
  104b4c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

    if (method == ALT_VCO_CHG_NONE_VALID)
  104b50:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104b54:	e3530000 	cmp	r3, #0
  104b58:	1a000002 	bne	104b68 <alt_clk_pll_vco_cfg_set+0x60>
    {
        ret = ALT_E_BAD_CLK;
  104b5c:	e3e0300d 	mvn	r3, #13
  104b60:	e50b3008 	str	r3, [fp, #-8]
  104b64:	ea0000e5 	b	104f00 <alt_clk_pll_vco_cfg_set+0x3f8>
    }
    else if (method == ALT_VCO_CHG_NOCHANGE)
  104b68:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104b6c:	e3530001 	cmp	r3, #1
  104b70:	1a000002 	bne	104b80 <alt_clk_pll_vco_cfg_set+0x78>
    {
        ret = ALT_E_INV_OPTION;
  104b74:	e3e0300a 	mvn	r3, #10
  104b78:	e50b3008 	str	r3, [fp, #-8]
  104b7c:	ea0000df 	b	104f00 <alt_clk_pll_vco_cfg_set+0x3f8>
    }
    else
    {
        if (pll == ALT_CLK_MAIN_PLL)
  104b80:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104b84:	e3530009 	cmp	r3, #9
  104b88:	1a00000b 	bne	104bbc <alt_clk_pll_vco_cfg_set+0xb4>
        {
            vaddr = ALT_CLKMGR_MAINPLL_VCO_ADDR;
  104b8c:	e3043040 	movw	r3, #16448	; 0x4040
  104b90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104b94:	e50b3010 	str	r3, [fp, #-16]
            numermask = ALT_CLKMGR_MAINPLL_VCO_NUMER_SET_MSK;
  104b98:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            denommask = ALT_CLKMGR_MAINPLL_VCO_DENOM_SET_MSK;
  104ba0:	e3a0383f 	mov	r3, #4128768	; 0x3f0000
  104ba4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            numershift = ALT_CLKMGR_MAINPLL_VCO_NUMER_LSB;
  104ba8:	e3a03003 	mov	r3, #3
  104bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            denomshift = ALT_CLKMGR_MAINPLL_VCO_DENOM_LSB;
  104bb0:	e3a03010 	mov	r3, #16
  104bb4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  104bb8:	ea00001f 	b	104c3c <alt_clk_pll_vco_cfg_set+0x134>
        }
        else if (pll == ALT_CLK_PERIPHERAL_PLL)
  104bbc:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104bc0:	e353000a 	cmp	r3, #10
  104bc4:	1a00000b 	bne	104bf8 <alt_clk_pll_vco_cfg_set+0xf0>
        {
            vaddr = ALT_CLKMGR_PERPLL_VCO_ADDR;
  104bc8:	e3043080 	movw	r3, #16512	; 0x4080
  104bcc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104bd0:	e50b3010 	str	r3, [fp, #-16]
            numermask = ALT_CLKMGR_PERPLL_VCO_NUMER_SET_MSK;
  104bd4:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104bd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            denommask = ALT_CLKMGR_PERPLL_VCO_DENOM_SET_MSK;
  104bdc:	e3a0383f 	mov	r3, #4128768	; 0x3f0000
  104be0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            numershift = ALT_CLKMGR_PERPLL_VCO_NUMER_LSB;
  104be4:	e3a03003 	mov	r3, #3
  104be8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            denomshift = ALT_CLKMGR_PERPLL_VCO_DENOM_LSB;
  104bec:	e3a03010 	mov	r3, #16
  104bf0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  104bf4:	ea000010 	b	104c3c <alt_clk_pll_vco_cfg_set+0x134>
        }
        else if (pll == ALT_CLK_SDRAM_PLL)
  104bf8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104bfc:	e353000b 	cmp	r3, #11
  104c00:	1a00000b 	bne	104c34 <alt_clk_pll_vco_cfg_set+0x12c>
        {
            vaddr = ALT_CLKMGR_SDRPLL_VCO_ADDR;
  104c04:	e30430c0 	movw	r3, #16576	; 0x40c0
  104c08:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104c0c:	e50b3010 	str	r3, [fp, #-16]
            numermask = ALT_CLKMGR_SDRPLL_VCO_NUMER_SET_MSK;
  104c10:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104c14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            denommask = ALT_CLKMGR_SDRPLL_VCO_DENOM_SET_MSK;
  104c18:	e3a0383f 	mov	r3, #4128768	; 0x3f0000
  104c1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            numershift = ALT_CLKMGR_SDRPLL_VCO_NUMER_LSB;
  104c20:	e3a03003 	mov	r3, #3
  104c24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            denomshift = ALT_CLKMGR_SDRPLL_VCO_DENOM_LSB;
  104c28:	e3a03010 	mov	r3, #16
  104c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  104c30:	ea000001 	b	104c3c <alt_clk_pll_vco_cfg_set+0x134>
        }
        else { return ALT_E_BAD_ARG; }
  104c34:	e3e03008 	mvn	r3, #8
  104c38:	ea0000b1 	b	104f04 <alt_clk_pll_vco_cfg_set+0x3fc>

        mult--;
  104c3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104c40:	e2433001 	sub	r3, r3, #1
  104c44:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        div--;
  104c48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  104c4c:	e2433001 	sub	r3, r3, #1
  104c50:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

        if (method & ALT_VCO_CHG_NUM)
  104c54:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104c58:	e2033002 	and	r3, r3, #2
  104c5c:	e3530000 	cmp	r3, #0
  104c60:	0a00001a 	beq	104cd0 <alt_clk_pll_vco_cfg_set+0x1c8>
        {
            if (method & ALT_VCO_CHG_NUM_BYP)
  104c64:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104c68:	e2033004 	and	r3, r3, #4
  104c6c:	e3530000 	cmp	r3, #0
  104c70:	0a000008 	beq	104c98 <alt_clk_pll_vco_cfg_set+0x190>
            {
                alt_clk_pll_bypass_enable(pll, 0);
  104c74:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104c78:	e3a01000 	mov	r1, #0
  104c7c:	e1a00003 	mov	r0, r3
  104c80:	ebfff1ad 	bl	10133c <alt_clk_pll_bypass_enable>
                byp = true;
  104c84:	e3a03001 	mov	r3, #1
  104c88:	e54b3009 	strb	r3, [fp, #-9]
                alt_clk_mgr_wait(vaddr, ALT_SW_MANAGED_CLK_WAIT_BYPASS);
  104c8c:	e3a0101e 	mov	r1, #30
  104c90:	e51b0010 	ldr	r0, [fp, #-16]
  104c94:	ebffef85 	bl	100ab0 <alt_clk_mgr_wait>
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
  104c98:	e51b3010 	ldr	r3, [fp, #-16]
  104c9c:	e5932000 	ldr	r2, [r3]
  104ca0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104ca4:	e1e03003 	mvn	r3, r3
  104ca8:	e0022003 	and	r2, r2, r3
  104cac:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  104cb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104cb4:	e1a01311 	lsl	r1, r1, r3
  104cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104cbc:	e0033001 	and	r3, r3, r1
  104cc0:	e1822003 	orr	r2, r2, r3
  104cc4:	e51b3010 	ldr	r3, [fp, #-16]
  104cc8:	e5832000 	str	r2, [r3]
  104ccc:	ea00007e 	b	104ecc <alt_clk_pll_vco_cfg_set+0x3c4>
        }

        else if (method & ALT_VCO_CHG_DENOM)
  104cd0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104cd4:	e2033008 	and	r3, r3, #8
  104cd8:	e3530000 	cmp	r3, #0
  104cdc:	0a000017 	beq	104d40 <alt_clk_pll_vco_cfg_set+0x238>
        {
            if (method & ALT_VCO_CHG_DENOM_BYP)
  104ce0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104ce4:	e2033010 	and	r3, r3, #16
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a000005 	beq	104d08 <alt_clk_pll_vco_cfg_set+0x200>
            {
                alt_clk_pll_bypass_enable(pll, 0);
  104cf0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104cf4:	e3a01000 	mov	r1, #0
  104cf8:	e1a00003 	mov	r0, r3
  104cfc:	ebfff18e 	bl	10133c <alt_clk_pll_bypass_enable>
                byp = true;
  104d00:	e3a03001 	mov	r3, #1
  104d04:	e54b3009 	strb	r3, [fp, #-9]
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
  104d08:	e51b3010 	ldr	r3, [fp, #-16]
  104d0c:	e5932000 	ldr	r2, [r3]
  104d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104d14:	e1e03003 	mvn	r3, r3
  104d18:	e0022003 	and	r2, r2, r3
  104d1c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  104d20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104d24:	e1a01311 	lsl	r1, r1, r3
  104d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104d2c:	e0033001 	and	r3, r3, r1
  104d30:	e1822003 	orr	r2, r2, r3
  104d34:	e51b3010 	ldr	r3, [fp, #-16]
  104d38:	e5832000 	str	r2, [r3]
  104d3c:	ea000062 	b	104ecc <alt_clk_pll_vco_cfg_set+0x3c4>
        }

        else if (method & ALT_VCO_CHG_NUM_DENOM)
  104d40:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104d44:	e2033020 	and	r3, r3, #32
  104d48:	e3530000 	cmp	r3, #0
  104d4c:	0a00002d 	beq	104e08 <alt_clk_pll_vco_cfg_set+0x300>
        {
            if (method & ALT_VCO_CHG_NUM_DENOM_BYP)
  104d50:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104d54:	e2033040 	and	r3, r3, #64	; 0x40
  104d58:	e3530000 	cmp	r3, #0
  104d5c:	0a000005 	beq	104d78 <alt_clk_pll_vco_cfg_set+0x270>
            {
                alt_clk_pll_bypass_enable(pll, 0);
  104d60:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104d64:	e3a01000 	mov	r1, #0
  104d68:	e1a00003 	mov	r0, r3
  104d6c:	ebfff172 	bl	10133c <alt_clk_pll_bypass_enable>
                byp = true;
  104d70:	e3a03001 	mov	r3, #1
  104d74:	e54b3009 	strb	r3, [fp, #-9]
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
  104d78:	e51b3010 	ldr	r3, [fp, #-16]
  104d7c:	e5932000 	ldr	r2, [r3]
  104d80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104d84:	e1e03003 	mvn	r3, r3
  104d88:	e0022003 	and	r2, r2, r3
  104d8c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  104d90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104d94:	e1a01311 	lsl	r1, r1, r3
  104d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104d9c:	e0033001 	and	r3, r3, r1
  104da0:	e1822003 	orr	r2, r2, r3
  104da4:	e51b3010 	ldr	r3, [fp, #-16]
  104da8:	e5832000 	str	r2, [r3]
            if (!byp)       /* if PLL is not bypassed */
  104dac:	e55b3009 	ldrb	r3, [fp, #-9]
  104db0:	e2233001 	eor	r3, r3, #1
  104db4:	e6ef3073 	uxtb	r3, r3
  104db8:	e3530000 	cmp	r3, #0
  104dbc:	0a000003 	beq	104dd0 <alt_clk_pll_vco_cfg_set+0x2c8>
            {
                ret = alt_clk_pll_lock_wait(ALT_CLK_MAIN_PLL, 1000);
  104dc0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  104dc4:	e3a00009 	mov	r0, #9
  104dc8:	ebffef69 	bl	100b74 <alt_clk_pll_lock_wait>
  104dcc:	e50b0008 	str	r0, [fp, #-8]
                      /* verify PLL is still locked or wait for it to lock again */
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5932000 	ldr	r2, [r3]
  104dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104ddc:	e1e03003 	mvn	r3, r3
  104de0:	e0022003 	and	r2, r2, r3
  104de4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  104de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104dec:	e1a01311 	lsl	r1, r1, r3
  104df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104df4:	e0033001 	and	r3, r3, r1
  104df8:	e1822003 	orr	r2, r2, r3
  104dfc:	e51b3010 	ldr	r3, [fp, #-16]
  104e00:	e5832000 	str	r2, [r3]
  104e04:	ea000030 	b	104ecc <alt_clk_pll_vco_cfg_set+0x3c4>
        }

        else if (method & ALT_VCO_CHG_DENOM_NUM)
  104e08:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104e0c:	e2033080 	and	r3, r3, #128	; 0x80
  104e10:	e3530000 	cmp	r3, #0
  104e14:	0a00002c 	beq	104ecc <alt_clk_pll_vco_cfg_set+0x3c4>
        {
            if (method & ALT_VCO_CHG_DENOM_NUM_BYP)
  104e18:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  104e1c:	e2033c01 	and	r3, r3, #256	; 0x100
  104e20:	e3530000 	cmp	r3, #0
  104e24:	0a000005 	beq	104e40 <alt_clk_pll_vco_cfg_set+0x338>
            {
                alt_clk_pll_bypass_enable(pll, 0);
  104e28:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104e2c:	e3a01000 	mov	r1, #0
  104e30:	e1a00003 	mov	r0, r3
  104e34:	ebfff140 	bl	10133c <alt_clk_pll_bypass_enable>
                byp = true;
  104e38:	e3a03001 	mov	r3, #1
  104e3c:	e54b3009 	strb	r3, [fp, #-9]
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
  104e40:	e51b3010 	ldr	r3, [fp, #-16]
  104e44:	e5932000 	ldr	r2, [r3]
  104e48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104e4c:	e1e03003 	mvn	r3, r3
  104e50:	e0022003 	and	r2, r2, r3
  104e54:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  104e58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104e5c:	e1a01311 	lsl	r1, r1, r3
  104e60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104e64:	e0033001 	and	r3, r3, r1
  104e68:	e1822003 	orr	r2, r2, r3
  104e6c:	e51b3010 	ldr	r3, [fp, #-16]
  104e70:	e5832000 	str	r2, [r3]
            if (!byp)       /* if PLL is not bypassed */
  104e74:	e55b3009 	ldrb	r3, [fp, #-9]
  104e78:	e2233001 	eor	r3, r3, #1
  104e7c:	e6ef3073 	uxtb	r3, r3
  104e80:	e3530000 	cmp	r3, #0
  104e84:	0a000003 	beq	104e98 <alt_clk_pll_vco_cfg_set+0x390>
            {
                ret = alt_clk_pll_lock_wait(ALT_CLK_MAIN_PLL, 1000);
  104e88:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  104e8c:	e3a00009 	mov	r0, #9
  104e90:	ebffef37 	bl	100b74 <alt_clk_pll_lock_wait>
  104e94:	e50b0008 	str	r0, [fp, #-8]
                      /* verify PLL is still locked or wait for it to lock again */
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
  104e98:	e51b3010 	ldr	r3, [fp, #-16]
  104e9c:	e5932000 	ldr	r2, [r3]
  104ea0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104ea4:	e1e03003 	mvn	r3, r3
  104ea8:	e0022003 	and	r2, r2, r3
  104eac:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  104eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  104eb4:	e1a01311 	lsl	r1, r1, r3
  104eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104ebc:	e0033001 	and	r3, r3, r1
  104ec0:	e1822003 	orr	r2, r2, r3
  104ec4:	e51b3010 	ldr	r3, [fp, #-16]
  104ec8:	e5832000 	str	r2, [r3]
        }

        ret = alt_clk_pll_lock_wait(ALT_CLK_MAIN_PLL, 1000);
  104ecc:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  104ed0:	e3a00009 	mov	r0, #9
  104ed4:	ebffef26 	bl	100b74 <alt_clk_pll_lock_wait>
  104ed8:	e50b0008 	str	r0, [fp, #-8]
              /* verify PLL is still locked or wait for it to lock again */
        if (byp)
  104edc:	e55b3009 	ldrb	r3, [fp, #-9]
  104ee0:	e3530000 	cmp	r3, #0
  104ee4:	0a000005 	beq	104f00 <alt_clk_pll_vco_cfg_set+0x3f8>
        {
            alt_clk_pll_bypass_disable(pll);
  104ee8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  104eec:	e1a00003 	mov	r0, r3
  104ef0:	ebfff022 	bl	100f80 <alt_clk_pll_bypass_disable>
            alt_clk_mgr_wait(vaddr, ALT_SW_MANAGED_CLK_WAIT_BYPASS);
  104ef4:	e3a0101e 	mov	r1, #30
  104ef8:	e51b0010 	ldr	r0, [fp, #-16]
  104efc:	ebffeeeb 	bl	100ab0 <alt_clk_mgr_wait>
                /* wait for PLL to come out of bypass mode completely */
        }
    }
    return ret;
  104f00:	e51b3008 	ldr	r3, [fp, #-8]
}
  104f04:	e1a00003 	mov	r0, r3
  104f08:	e24bd004 	sub	sp, fp, #4
  104f0c:	e8bd8800 	pop	{fp, pc}

00104f10 <alt_clk_pll_vco_freq_get>:
// Note that since there is at present no known way for software to obtain the speed
// bin of the SoC or MPU that it is running on, the function below only deals with the
// 800 MHz part. This may need to be revised in the future.
*/
ALT_STATUS_CODE alt_clk_pll_vco_freq_get(ALT_CLK_t pll, alt_freq_t * freq)
{
  104f10:	e92d4800 	push	{fp, lr}
  104f14:	e28db004 	add	fp, sp, #4
  104f18:	e24dd020 	sub	sp, sp, #32
  104f1c:	e1a03000 	mov	r3, r0
  104f20:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  104f24:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    uint64_t            temp1 = 0;
  104f28:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
  104f2c:	ed4b0b03 	vstr	d16, [fp, #-12]
    uint32_t            temp;
    uint32_t            numer;
    uint32_t            denom;
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
  104f30:	e3e03008 	mvn	r3, #8
  104f34:	e50b3010 	str	r3, [fp, #-16]

    if (freq == NULL)
  104f38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  104f3c:	e3530000 	cmp	r3, #0
  104f40:	1a000001 	bne	104f4c <alt_clk_pll_vco_freq_get+0x3c>
    {
        return ret;
  104f44:	e51b3010 	ldr	r3, [fp, #-16]
  104f48:	ea00014c 	b	105480 <alt_clk_pll_vco_freq_get+0x570>
    }

    if (pll == ALT_CLK_MAIN_PLL)
  104f4c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  104f50:	e3530009 	cmp	r3, #9
  104f54:	1a00004f 	bne	105098 <alt_clk_pll_vco_freq_get+0x188>
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
  104f58:	e3043004 	movw	r3, #16388	; 0x4004
  104f5c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104f60:	e5933000 	ldr	r3, [r3]
  104f64:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
  104f68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f6c:	e2033001 	and	r3, r3, #1
  104f70:	e3530000 	cmp	r3, #0
  104f74:	0a000007 	beq	104f98 <alt_clk_pll_vco_freq_get+0x88>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
  104f78:	e30732b0 	movw	r3, #29360	; 0x72b0
  104f7c:	e3403011 	movt	r3, #17
  104f80:	e5932000 	ldr	r2, [r3]
  104f84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  104f88:	e5832000 	str	r2, [r3]
            ret = ALT_E_SUCCESS;
  104f8c:	e3a03000 	mov	r3, #0
  104f90:	e50b3010 	str	r3, [fp, #-16]
  104f94:	ea000138 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  104f98:	e3043040 	movw	r3, #16448	; 0x4040
  104f9c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  104fa0:	e5933000 	ldr	r3, [r3]
  104fa4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
  104fa8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104fac:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  104fb0:	e0033002 	and	r3, r3, r2
  104fb4:	e1a031a3 	lsr	r3, r3, #3
  104fb8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
  104fbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104fc0:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  104fc4:	e1a03823 	lsr	r3, r3, #16
  104fc8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
  104fcc:	e30732b0 	movw	r3, #29360	; 0x72b0
  104fd0:	e3403011 	movt	r3, #17
  104fd4:	e5933000 	ldr	r3, [r3]
  104fd8:	e1a02003 	mov	r2, r3
  104fdc:	e3a03000 	mov	r3, #0
  104fe0:	e14b20fc 	strd	r2, [fp, #-12]
            temp1 *= (numer + 1);
  104fe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104fe8:	e2833001 	add	r3, r3, #1
  104fec:	e1a02003 	mov	r2, r3
  104ff0:	e3a03000 	mov	r3, #0
  104ff4:	e51b1008 	ldr	r1, [fp, #-8]
  104ff8:	e0000192 	mul	r0, r2, r1
  104ffc:	e51b100c 	ldr	r1, [fp, #-12]
  105000:	e0010193 	mul	r1, r3, r1
  105004:	e0801001 	add	r1, r0, r1
  105008:	e51b000c 	ldr	r0, [fp, #-12]
  10500c:	e0832290 	umull	r2, r3, r0, r2
  105010:	e0811003 	add	r1, r1, r3
  105014:	e1a03001 	mov	r3, r1
  105018:	e14b20fc 	strd	r2, [fp, #-12]
  10501c:	e14b20fc 	strd	r2, [fp, #-12]
            temp1 /= (denom + 1);
  105020:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  105024:	e2833001 	add	r3, r3, #1
  105028:	e1a02003 	mov	r2, r3
  10502c:	e3a03000 	mov	r3, #0
  105030:	e14b00dc 	ldrd	r0, [fp, #-12]
  105034:	eb001e9c 	bl	10caac <__aeabi_uldivmod>
  105038:	e1a02000 	mov	r2, r0
  10503c:	e1a03001 	mov	r3, r1
  105040:	e14b20fc 	strd	r2, [fp, #-12]

            if (temp1 <= UINT32_MAX)
  105044:	e14b20dc 	ldrd	r2, [fp, #-12]
  105048:	e3e00000 	mvn	r0, #0
  10504c:	e3a01000 	mov	r1, #0
  105050:	e1530001 	cmp	r3, r1
  105054:	01520000 	cmpeq	r2, r0
  105058:	8a00000b 	bhi	10508c <alt_clk_pll_vco_freq_get+0x17c>
            {
                temp = (alt_freq_t) temp1;
  10505c:	e51b300c 	ldr	r3, [fp, #-12]
  105060:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
  105064:	e30732f0 	movw	r3, #29424	; 0x72f0
  105068:	e3403011 	movt	r3, #17
  10506c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105070:	e5832030 	str	r2, [r3, #48]	; 0x30
                /* store this value in the parameter block table */
                *freq = temp;
  105074:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  105078:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10507c:	e5832000 	str	r2, [r3]
                /* should NOT check value against PLL frequency limits */
                ret = ALT_E_SUCCESS;
  105080:	e3a03000 	mov	r3, #0
  105084:	e50b3010 	str	r3, [fp, #-16]
  105088:	ea0000fb 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
            }
            else
            {
                ret = ALT_E_ERROR;
  10508c:	e3e03000 	mvn	r3, #0
  105090:	e50b3010 	str	r3, [fp, #-16]
  105094:	ea0000f8 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  105098:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  10509c:	e353000a 	cmp	r3, #10
  1050a0:	1a000079 	bne	10528c <alt_clk_pll_vco_freq_get+0x37c>
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
  1050a4:	e3043004 	movw	r3, #16388	; 0x4004
  1050a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1050ac:	e5933000 	ldr	r3, [r3]
  1050b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
  1050b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1050b8:	e2033008 	and	r3, r3, #8
  1050bc:	e1a031a3 	lsr	r3, r3, #3
  1050c0:	e3530000 	cmp	r3, #0
  1050c4:	0a000012 	beq	105114 <alt_clk_pll_vco_freq_get+0x204>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
  1050c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1050cc:	e2033010 	and	r3, r3, #16
  1050d0:	e1a03223 	lsr	r3, r3, #4
  1050d4:	e3530000 	cmp	r3, #0
  1050d8:	1a000005 	bne	1050f4 <alt_clk_pll_vco_freq_get+0x1e4>
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
  1050dc:	e30732b0 	movw	r3, #29360	; 0x72b0
  1050e0:	e3403011 	movt	r3, #17
  1050e4:	e5932000 	ldr	r2, [r3]
  1050e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1050ec:	e5832000 	str	r2, [r3]
  1050f0:	ea000004 	b	105108 <alt_clk_pll_vco_freq_get+0x1f8>
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
  1050f4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1050f8:	e3403011 	movt	r3, #17
  1050fc:	e5932020 	ldr	r2, [r3, #32]
  105100:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  105104:	e5832000 	str	r2, [r3]
            ret = ALT_E_SUCCESS;
  105108:	e3a03000 	mov	r3, #0
  10510c:	e50b3010 	str	r3, [fp, #-16]
  105110:	ea0000d9 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  105114:	e3043080 	movw	r3, #16512	; 0x4080
  105118:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10511c:	e5933000 	ldr	r3, [r3]
  105120:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
  105124:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105128:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  10512c:	e0033002 	and	r3, r3, r2
  105130:	e1a031a3 	lsr	r3, r3, #3
  105134:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
  105138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10513c:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  105140:	e1a03823 	lsr	r3, r3, #16
  105144:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
  105148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10514c:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  105150:	e1a03b23 	lsr	r3, r3, #22
  105154:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
  105158:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10515c:	e3530000 	cmp	r3, #0
  105160:	1a000006 	bne	105180 <alt_clk_pll_vco_freq_get+0x270>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
  105164:	e30732b0 	movw	r3, #29360	; 0x72b0
  105168:	e3403011 	movt	r3, #17
  10516c:	e5933000 	ldr	r3, [r3]
  105170:	e1a02003 	mov	r2, r3
  105174:	e3a03000 	mov	r3, #0
  105178:	e14b20fc 	strd	r2, [fp, #-12]
  10517c:	ea000012 	b	1051cc <alt_clk_pll_vco_freq_get+0x2bc>
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
  105180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105184:	e3530001 	cmp	r3, #1
  105188:	1a000006 	bne	1051a8 <alt_clk_pll_vco_freq_get+0x298>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
  10518c:	e30732b0 	movw	r3, #29360	; 0x72b0
  105190:	e3403011 	movt	r3, #17
  105194:	e5933010 	ldr	r3, [r3, #16]
  105198:	e1a02003 	mov	r2, r3
  10519c:	e3a03000 	mov	r3, #0
  1051a0:	e14b20fc 	strd	r2, [fp, #-12]
  1051a4:	ea000008 	b	1051cc <alt_clk_pll_vco_freq_get+0x2bc>
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
  1051a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1051ac:	e3530002 	cmp	r3, #2
  1051b0:	1a000005 	bne	1051cc <alt_clk_pll_vco_freq_get+0x2bc>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
  1051b4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1051b8:	e3403011 	movt	r3, #17
  1051bc:	e5933020 	ldr	r3, [r3, #32]
  1051c0:	e1a02003 	mov	r2, r3
  1051c4:	e3a03000 	mov	r3, #0
  1051c8:	e14b20fc 	strd	r2, [fp, #-12]
            }
    
            if (temp1 != 0)
  1051cc:	e14b20dc 	ldrd	r2, [fp, #-12]
  1051d0:	e1923003 	orrs	r3, r2, r3
  1051d4:	0a0000a8 	beq	10547c <alt_clk_pll_vco_freq_get+0x56c>
            {
                temp1 *= (numer + 1);
  1051d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051dc:	e2833001 	add	r3, r3, #1
  1051e0:	e1a02003 	mov	r2, r3
  1051e4:	e3a03000 	mov	r3, #0
  1051e8:	e51b1008 	ldr	r1, [fp, #-8]
  1051ec:	e0000192 	mul	r0, r2, r1
  1051f0:	e51b100c 	ldr	r1, [fp, #-12]
  1051f4:	e0010193 	mul	r1, r3, r1
  1051f8:	e0801001 	add	r1, r0, r1
  1051fc:	e51b000c 	ldr	r0, [fp, #-12]
  105200:	e0832290 	umull	r2, r3, r0, r2
  105204:	e0811003 	add	r1, r1, r3
  105208:	e1a03001 	mov	r3, r1
  10520c:	e14b20fc 	strd	r2, [fp, #-12]
  105210:	e14b20fc 	strd	r2, [fp, #-12]
                temp1 /= (denom + 1);
  105214:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  105218:	e2833001 	add	r3, r3, #1
  10521c:	e1a02003 	mov	r2, r3
  105220:	e3a03000 	mov	r3, #0
  105224:	e14b00dc 	ldrd	r0, [fp, #-12]
  105228:	eb001e1f 	bl	10caac <__aeabi_uldivmod>
  10522c:	e1a02000 	mov	r2, r0
  105230:	e1a03001 	mov	r3, r1
  105234:	e14b20fc 	strd	r2, [fp, #-12]
                if (temp1 <= UINT32_MAX)
  105238:	e14b20dc 	ldrd	r2, [fp, #-12]
  10523c:	e3e00000 	mvn	r0, #0
  105240:	e3a01000 	mov	r1, #0
  105244:	e1530001 	cmp	r3, r1
  105248:	01520000 	cmpeq	r2, r0
  10524c:	8a00000b 	bhi	105280 <alt_clk_pll_vco_freq_get+0x370>
                {
                    temp = (alt_freq_t) temp1;
  105250:	e51b300c 	ldr	r3, [fp, #-12]
  105254:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
  105258:	e30732f0 	movw	r3, #29424	; 0x72f0
  10525c:	e3403011 	movt	r3, #17
  105260:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105264:	e5832040 	str	r2, [r3, #64]	; 0x40
                    /* store this value in the parameter block table */
    
                    *freq = temp;
  105268:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10526c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105270:	e5832000 	str	r2, [r3]
                    ret = ALT_E_SUCCESS;
  105274:	e3a03000 	mov	r3, #0
  105278:	e50b3010 	str	r3, [fp, #-16]
  10527c:	ea00007e 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
                }
                else
                {
                    ret = ALT_E_ERROR;
  105280:	e3e03000 	mvn	r3, #0
  105284:	e50b3010 	str	r3, [fp, #-16]
  105288:	ea00007b 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
                }
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  10528c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  105290:	e353000b 	cmp	r3, #11
  105294:	1a000078 	bne	10547c <alt_clk_pll_vco_freq_get+0x56c>
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
  105298:	e3043004 	movw	r3, #16388	; 0x4004
  10529c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1052a0:	e5933000 	ldr	r3, [r3]
  1052a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
  1052a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1052ac:	e1a03083 	lsl	r3, r3, #1
  1052b0:	e2033002 	and	r3, r3, #2
  1052b4:	e3530000 	cmp	r3, #0
  1052b8:	0a000012 	beq	105308 <alt_clk_pll_vco_freq_get+0x3f8>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
  1052bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1052c0:	e2033004 	and	r3, r3, #4
  1052c4:	e1a03123 	lsr	r3, r3, #2
  1052c8:	e3530000 	cmp	r3, #0
  1052cc:	1a000005 	bne	1052e8 <alt_clk_pll_vco_freq_get+0x3d8>
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
  1052d0:	e30732b0 	movw	r3, #29360	; 0x72b0
  1052d4:	e3403011 	movt	r3, #17
  1052d8:	e5932000 	ldr	r2, [r3]
  1052dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000004 	b	1052fc <alt_clk_pll_vco_freq_get+0x3ec>
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
  1052e8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1052ec:	e3403011 	movt	r3, #17
  1052f0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  1052f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1052f8:	e5832000 	str	r2, [r3]
            ret = ALT_E_SUCCESS;
  1052fc:	e3a03000 	mov	r3, #0
  105300:	e50b3010 	str	r3, [fp, #-16]
  105304:	ea00005c 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  105308:	e30430c0 	movw	r3, #16576	; 0x40c0
  10530c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
  105318:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10531c:	e30f3ff8 	movw	r3, #65528	; 0xfff8
  105320:	e0033002 	and	r3, r3, r2
  105324:	e1a031a3 	lsr	r3, r3, #3
  105328:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
  10532c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105330:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
  105334:	e1a03823 	lsr	r3, r3, #16
  105338:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
  10533c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105340:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  105344:	e1a03b23 	lsr	r3, r3, #22
  105348:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
  10534c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105350:	e3530000 	cmp	r3, #0
  105354:	1a000006 	bne	105374 <alt_clk_pll_vco_freq_get+0x464>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
  105358:	e30732b0 	movw	r3, #29360	; 0x72b0
  10535c:	e3403011 	movt	r3, #17
  105360:	e5933000 	ldr	r3, [r3]
  105364:	e1a02003 	mov	r2, r3
  105368:	e3a03000 	mov	r3, #0
  10536c:	e14b20fc 	strd	r2, [fp, #-12]
  105370:	ea000012 	b	1053c0 <alt_clk_pll_vco_freq_get+0x4b0>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
  105374:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105378:	e3530001 	cmp	r3, #1
  10537c:	1a000006 	bne	10539c <alt_clk_pll_vco_freq_get+0x48c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
  105380:	e30732b0 	movw	r3, #29360	; 0x72b0
  105384:	e3403011 	movt	r3, #17
  105388:	e5933010 	ldr	r3, [r3, #16]
  10538c:	e1a02003 	mov	r2, r3
  105390:	e3a03000 	mov	r3, #0
  105394:	e14b20fc 	strd	r2, [fp, #-12]
  105398:	ea000008 	b	1053c0 <alt_clk_pll_vco_freq_get+0x4b0>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
  10539c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1053a0:	e3530002 	cmp	r3, #2
  1053a4:	1a000005 	bne	1053c0 <alt_clk_pll_vco_freq_get+0x4b0>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
  1053a8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1053ac:	e3403011 	movt	r3, #17
  1053b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1053b4:	e1a02003 	mov	r2, r3
  1053b8:	e3a03000 	mov	r3, #0
  1053bc:	e14b20fc 	strd	r2, [fp, #-12]
            }
    
            if (temp1 != 0)
  1053c0:	e14b20dc 	ldrd	r2, [fp, #-12]
  1053c4:	e1923003 	orrs	r3, r2, r3
  1053c8:	0a00002b 	beq	10547c <alt_clk_pll_vco_freq_get+0x56c>
            {
                temp1 *= (numer + 1);
  1053cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1053d0:	e2833001 	add	r3, r3, #1
  1053d4:	e1a02003 	mov	r2, r3
  1053d8:	e3a03000 	mov	r3, #0
  1053dc:	e51b1008 	ldr	r1, [fp, #-8]
  1053e0:	e0000192 	mul	r0, r2, r1
  1053e4:	e51b100c 	ldr	r1, [fp, #-12]
  1053e8:	e0010193 	mul	r1, r3, r1
  1053ec:	e0801001 	add	r1, r0, r1
  1053f0:	e51b000c 	ldr	r0, [fp, #-12]
  1053f4:	e0832290 	umull	r2, r3, r0, r2
  1053f8:	e0811003 	add	r1, r1, r3
  1053fc:	e1a03001 	mov	r3, r1
  105400:	e14b20fc 	strd	r2, [fp, #-12]
  105404:	e14b20fc 	strd	r2, [fp, #-12]
                temp1 /= (denom + 1);
  105408:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10540c:	e2833001 	add	r3, r3, #1
  105410:	e1a02003 	mov	r2, r3
  105414:	e3a03000 	mov	r3, #0
  105418:	e14b00dc 	ldrd	r0, [fp, #-12]
  10541c:	eb001da2 	bl	10caac <__aeabi_uldivmod>
  105420:	e1a02000 	mov	r2, r0
  105424:	e1a03001 	mov	r3, r1
  105428:	e14b20fc 	strd	r2, [fp, #-12]
                if (temp1 <= UINT32_MAX)
  10542c:	e14b20dc 	ldrd	r2, [fp, #-12]
  105430:	e3e00000 	mvn	r0, #0
  105434:	e3a01000 	mov	r1, #0
  105438:	e1530001 	cmp	r3, r1
  10543c:	01520000 	cmpeq	r2, r0
  105440:	8a00000b 	bhi	105474 <alt_clk_pll_vco_freq_get+0x564>
                {
                    temp = (alt_freq_t) temp1;
  105444:	e51b300c 	ldr	r3, [fp, #-12]
  105448:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
  10544c:	e30732f0 	movw	r3, #29424	; 0x72f0
  105450:	e3403011 	movt	r3, #17
  105454:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105458:	e5832050 	str	r2, [r3, #80]	; 0x50
                    /* store this value in the parameter block table */
    
                    *freq = temp;
  10545c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  105460:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105464:	e5832000 	str	r2, [r3]
                    ret = ALT_E_SUCCESS;
  105468:	e3a03000 	mov	r3, #0
  10546c:	e50b3010 	str	r3, [fp, #-16]
  105470:	ea000001 	b	10547c <alt_clk_pll_vco_freq_get+0x56c>
                }
                else
                {
                    ret = ALT_E_ERROR;
  105474:	e3e03000 	mvn	r3, #0
  105478:	e50b3010 	str	r3, [fp, #-16]
                }
            }
        }
    }       /* which returns ALT_BAD_ARG if the source isn't known */

    return ret;
  10547c:	e51b3010 	ldr	r3, [fp, #-16]
}
  105480:	e1a00003 	mov	r0, r3
  105484:	e24bd004 	sub	sp, fp, #4
  105488:	e8bd8800 	pop	{fp, pc}

0010548c <alt_clk_pll_guard_band_get>:

/*
// Returns the current guard band range in effect for the PLL.
*/
uint32_t alt_clk_pll_guard_band_get(ALT_CLK_t pll)
{
  10548c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105490:	e28db000 	add	fp, sp, #0
  105494:	e24dd014 	sub	sp, sp, #20
  105498:	e1a03000 	mov	r3, r0
  10549c:	e54b300d 	strb	r3, [fp, #-13]
    uint32_t ret = 0;
  1054a0:	e3a03000 	mov	r3, #0
  1054a4:	e50b3008 	str	r3, [fp, #-8]

    if (pll == ALT_CLK_MAIN_PLL)
  1054a8:	e55b300d 	ldrb	r3, [fp, #-13]
  1054ac:	e3530009 	cmp	r3, #9
  1054b0:	1a000006 	bne	1054d0 <alt_clk_pll_guard_band_get+0x44>
    {
        ret = alt_pll_clk_paramblok.MainPLL_800.guardband;
  1054b4:	e30732f0 	movw	r3, #29424	; 0x72f0
  1054b8:	e3403011 	movt	r3, #17
  1054bc:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
  1054c0:	e7e63053 	ubfx	r3, r3, #0, #7
  1054c4:	e6ef3073 	uxtb	r3, r3
  1054c8:	e50b3008 	str	r3, [fp, #-8]
  1054cc:	ea000012 	b	10551c <alt_clk_pll_guard_band_get+0x90>
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  1054d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1054d4:	e353000a 	cmp	r3, #10
  1054d8:	1a000006 	bne	1054f8 <alt_clk_pll_guard_band_get+0x6c>
    {
        ret = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
  1054dc:	e30732f0 	movw	r3, #29424	; 0x72f0
  1054e0:	e3403011 	movt	r3, #17
  1054e4:	e5d3304c 	ldrb	r3, [r3, #76]	; 0x4c
  1054e8:	e7e63053 	ubfx	r3, r3, #0, #7
  1054ec:	e6ef3073 	uxtb	r3, r3
  1054f0:	e50b3008 	str	r3, [fp, #-8]
  1054f4:	ea000008 	b	10551c <alt_clk_pll_guard_band_get+0x90>
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  1054f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1054fc:	e353000b 	cmp	r3, #11
  105500:	1a000005 	bne	10551c <alt_clk_pll_guard_band_get+0x90>
    {
        ret = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
  105504:	e30732f0 	movw	r3, #29424	; 0x72f0
  105508:	e3403011 	movt	r3, #17
  10550c:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
  105510:	e7e63053 	ubfx	r3, r3, #0, #7
  105514:	e6ef3073 	uxtb	r3, r3
  105518:	e50b3008 	str	r3, [fp, #-8]
    }
    return ret;
  10551c:	e51b3008 	ldr	r3, [fp, #-8]
}
  105520:	e1a00003 	mov	r0, r3
  105524:	e24bd000 	sub	sp, fp, #0
  105528:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10552c:	e12fff1e 	bx	lr

00105530 <alt_clk_pll_guard_band_set>:
// clk_mgr_pll_guard_band_set() changes the guard band from its current value to permit
// a more lenient or stringent policy to be in effect for the implementation of the
// functions configuring PLL VCO frequency.
*/
ALT_STATUS_CODE alt_clk_pll_guard_band_set(ALT_CLK_t pll, uint32_t guard_band)
{
  105530:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105534:	e28db000 	add	fp, sp, #0
  105538:	e24dd014 	sub	sp, sp, #20
  10553c:	e1a03000 	mov	r3, r0
  105540:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  105544:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  105548:	e3a03000 	mov	r3, #0
  10554c:	e50b3008 	str	r3, [fp, #-8]

    if (   (guard_band > UINT12_MAX) || (guard_band <= 0)
  105550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105554:	e3530a01 	cmp	r3, #4096	; 0x1000
  105558:	8a000005 	bhi	105574 <alt_clk_pll_guard_band_set+0x44>
  10555c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105560:	e3530000 	cmp	r3, #0
  105564:	0a000002 	beq	105574 <alt_clk_pll_guard_band_set+0x44>
        || (guard_band > ALT_GUARDBAND_LIMIT)
  105568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10556c:	e3530014 	cmp	r3, #20
  105570:	9a000001 	bls	10557c <alt_clk_pll_guard_band_set+0x4c>
       )
    {
        return ALT_E_ARG_RANGE;
  105574:	e3e03007 	mvn	r3, #7
  105578:	ea000029 	b	105624 <alt_clk_pll_guard_band_set+0xf4>
    }

    if (pll == ALT_CLK_MAIN_PLL)
  10557c:	e55b300d 	ldrb	r3, [fp, #-13]
  105580:	e3530009 	cmp	r3, #9
  105584:	1a000009 	bne	1055b0 <alt_clk_pll_guard_band_set+0x80>
    {
        alt_pll_clk_paramblok.MainPLL_800.guardband = guard_band;
  105588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10558c:	e6ef3073 	uxtb	r3, r3
  105590:	e203307f 	and	r3, r3, #127	; 0x7f
  105594:	e6ef1073 	uxtb	r1, r3
  105598:	e30732f0 	movw	r3, #29424	; 0x72f0
  10559c:	e3403011 	movt	r3, #17
  1055a0:	e5d3203c 	ldrb	r2, [r3, #60]	; 0x3c
  1055a4:	e7c62011 	bfi	r2, r1, #0, #7
  1055a8:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
  1055ac:	ea00001b 	b	105620 <alt_clk_pll_guard_band_set+0xf0>
        /* alt_pll_clk_paramblok.MainPLL_600.guardband = guard_band;
        // ??? Don't know how to check the MPU speed bin yet, so only 800 MHz struct is used */
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
  1055b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1055b4:	e353000a 	cmp	r3, #10
  1055b8:	1a000009 	bne	1055e4 <alt_clk_pll_guard_band_set+0xb4>
    {
        alt_pll_clk_paramblok.PeriphPLL_800.guardband = guard_band;
  1055bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1055c0:	e6ef3073 	uxtb	r3, r3
  1055c4:	e203307f 	and	r3, r3, #127	; 0x7f
  1055c8:	e6ef1073 	uxtb	r1, r3
  1055cc:	e30732f0 	movw	r3, #29424	; 0x72f0
  1055d0:	e3403011 	movt	r3, #17
  1055d4:	e5d3204c 	ldrb	r2, [r3, #76]	; 0x4c
  1055d8:	e7c62011 	bfi	r2, r1, #0, #7
  1055dc:	e5c3204c 	strb	r2, [r3, #76]	; 0x4c
  1055e0:	ea00000e 	b	105620 <alt_clk_pll_guard_band_set+0xf0>
        /*alt_pll_clk_paramblok.PeriphPLL_600.guardband = guard_band; */
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
  1055e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1055e8:	e353000b 	cmp	r3, #11
  1055ec:	1a000009 	bne	105618 <alt_clk_pll_guard_band_set+0xe8>
    {
        alt_pll_clk_paramblok.SDRAMPLL_800.guardband = guard_band;
  1055f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1055f4:	e6ef3073 	uxtb	r3, r3
  1055f8:	e203307f 	and	r3, r3, #127	; 0x7f
  1055fc:	e6ef1073 	uxtb	r1, r3
  105600:	e30732f0 	movw	r3, #29424	; 0x72f0
  105604:	e3403011 	movt	r3, #17
  105608:	e5d3205c 	ldrb	r2, [r3, #92]	; 0x5c
  10560c:	e7c62011 	bfi	r2, r1, #0, #7
  105610:	e5c3205c 	strb	r2, [r3, #92]	; 0x5c
  105614:	ea000001 	b	105620 <alt_clk_pll_guard_band_set+0xf0>
        /*alt_pll_clk_paramblok.SDRAMPLL_600.guardband = guard_band; */
    }
    else
    {
        status = ALT_E_ERROR;
  105618:	e3e03000 	mvn	r3, #0
  10561c:	e50b3008 	str	r3, [fp, #-8]
    }

    return status;
  105620:	e51b3008 	ldr	r3, [fp, #-8]
}
  105624:	e1a00003 	mov	r0, r3
  105628:	e24bd000 	sub	sp, fp, #0
  10562c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105630:	e12fff1e 	bx	lr

00105634 <alt_clk_divider_get>:

/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
  105634:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105638:	e28db000 	add	fp, sp, #0
  10563c:	e24dd014 	sub	sp, sp, #20
  105640:	e1a03000 	mov	r3, r0
  105644:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  105648:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  10564c:	e3a03000 	mov	r3, #0
  105650:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp;

    if (div == NULL)
  105654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105658:	e3530000 	cmp	r3, #0
  10565c:	1a000001 	bne	105668 <alt_clk_divider_get+0x34>
    {
        return ALT_E_BAD_ARG;
  105660:	e3e03008 	mvn	r3, #8
  105664:	ea0001ad 	b	105d20 <alt_clk_divider_get+0x6ec>
    }

    switch (clk)
  105668:	e55b300d 	ldrb	r3, [fp, #-13]
  10566c:	e243300d 	sub	r3, r3, #13
  105670:	e3530033 	cmp	r3, #51	; 0x33
  105674:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  105678:	ea0001a4 	b	105d10 <alt_clk_divider_get+0x6dc>
  10567c:	0010574c 	andseq	r5, r0, ip, asr #14
  105680:	00105784 	andseq	r5, r0, r4, lsl #15
  105684:	001057bc 			; <UNDEFINED> instruction: 0x001057bc
  105688:	001057f4 			; <UNDEFINED> instruction: 0x001057f4
  10568c:	00105814 	andseq	r5, r0, r4, lsl r8
  105690:	00105834 	andseq	r5, r0, r4, lsr r8
  105694:	0010574c 	andseq	r5, r0, ip, asr #14
  105698:	00105cf0 			; <UNDEFINED> instruction: 0x00105cf0
  10569c:	00105ce0 	andseq	r5, r0, r0, ror #25
  1056a0:	00105784 	andseq	r5, r0, r4, lsl #15
  1056a4:	00105994 	mulseq	r0, r4, r9
  1056a8:	001059d4 			; <UNDEFINED> instruction: 0x001059d4
  1056ac:	00105784 	andseq	r5, r0, r4, lsl #15
  1056b0:	00105a18 	andseq	r5, r0, r8, lsl sl
  1056b4:	00105a64 	andseq	r5, r0, r4, ror #20
  1056b8:	001057bc 			; <UNDEFINED> instruction: 0x001057bc
  1056bc:	00105ab0 			; <UNDEFINED> instruction: 0x00105ab0
  1056c0:	00105b44 	andseq	r5, r0, r4, asr #22
  1056c4:	001057bc 			; <UNDEFINED> instruction: 0x001057bc
  1056c8:	00105af8 			; <UNDEFINED> instruction: 0x00105af8
  1056cc:	001057f4 			; <UNDEFINED> instruction: 0x001057f4
  1056d0:	00105814 	andseq	r5, r0, r4, lsl r8
  1056d4:	00105834 	andseq	r5, r0, r4, lsr r8
  1056d8:	00105834 	andseq	r5, r0, r4, lsr r8
  1056dc:	00105854 	andseq	r5, r0, r4, asr r8
  1056e0:	00105874 	andseq	r5, r0, r4, ror r8
  1056e4:	00105894 	mulseq	r0, r4, r8
  1056e8:	001058b4 			; <UNDEFINED> instruction: 0x001058b4
  1056ec:	001058d4 			; <UNDEFINED> instruction: 0x001058d4
  1056f0:	001058f4 			; <UNDEFINED> instruction: 0x001058f4
  1056f4:	00105b8c 	andseq	r5, r0, ip, lsl #23
  1056f8:	00105bd4 			; <UNDEFINED> instruction: 0x00105bd4
  1056fc:	00105d10 	andseq	r5, r0, r0, lsl sp
  105700:	00105d10 	andseq	r5, r0, r0, lsl sp
  105704:	00105d00 	andseq	r5, r0, r0, lsl #26
  105708:	00105d10 	andseq	r5, r0, r0, lsl sp
  10570c:	00105854 	andseq	r5, r0, r4, asr r8
  105710:	00105874 	andseq	r5, r0, r4, ror r8
  105714:	00105c20 	andseq	r5, r0, r0, lsr #24
  105718:	00105c6c 	andseq	r5, r0, ip, ror #24
  10571c:	00105cb8 			; <UNDEFINED> instruction: 0x00105cb8
  105720:	001058f4 			; <UNDEFINED> instruction: 0x001058f4
  105724:	00105914 	andseq	r5, r0, r4, lsl r9
  105728:	00105934 	andseq	r5, r0, r4, lsr r9
  10572c:	00105954 	andseq	r5, r0, r4, asr r9
  105730:	00105d10 	andseq	r5, r0, r0, lsl sp
  105734:	00105d10 	andseq	r5, r0, r0, lsl sp
  105738:	00105974 	andseq	r5, r0, r4, ror r9
  10573c:	00105914 	andseq	r5, r0, r4, lsl r9
  105740:	00105934 	andseq	r5, r0, r4, lsr r9
  105744:	00105954 	andseq	r5, r0, r4, asr r9
  105748:	00105974 	andseq	r5, r0, r4, ror r9
    {
        /* Main PLL outputs */
    case ALT_CLK_MAIN_PLL_C0:
    case ALT_CLK_MPU:
        *div = (ALT_CLKMGR_MAINPLL_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR)) + 1) *
  10574c:	e3043048 	movw	r3, #16456	; 0x4048
  105750:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105754:	e5933000 	ldr	r3, [r3]
  105758:	e7e83053 	ubfx	r3, r3, #0, #9
  10575c:	e2832001 	add	r2, r3, #1
               (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);
  105760:	e30430e0 	movw	r3, #16608	; 0x40e0
  105764:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105768:	e5933000 	ldr	r3, [r3]
  10576c:	e7e83053 	ubfx	r3, r3, #0, #9
  105770:	e2833001 	add	r3, r3, #1
    switch (clk)
    {
        /* Main PLL outputs */
    case ALT_CLK_MAIN_PLL_C0:
    case ALT_CLK_MPU:
        *div = (ALT_CLKMGR_MAINPLL_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR)) + 1) *
  105774:	e0020293 	mul	r2, r3, r2
  105778:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10577c:	e5832000 	str	r2, [r3]
               (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);
        break;
  105780:	ea000165 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
        *div = (ALT_CLKMGR_MAINPLL_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR)) + 1) *
  105784:	e304304c 	movw	r3, #16460	; 0x404c
  105788:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10578c:	e5933000 	ldr	r3, [r3]
  105790:	e7e83053 	ubfx	r3, r3, #0, #9
  105794:	e2832001 	add	r2, r3, #1
               (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);
  105798:	e30430e4 	movw	r3, #16612	; 0x40e4
  10579c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1057a0:	e5933000 	ldr	r3, [r3]
  1057a4:	e7e83053 	ubfx	r3, r3, #0, #9
  1057a8:	e2833001 	add	r3, r3, #1
        break;

    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
        *div = (ALT_CLKMGR_MAINPLL_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR)) + 1) *
  1057ac:	e0020293 	mul	r2, r3, r2
  1057b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1057b4:	e5832000 	str	r2, [r3]
               (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);
        break;
  1057b8:	ea000157 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
  1057bc:	e3043050 	movw	r3, #16464	; 0x4050
  1057c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1057c4:	e5933000 	ldr	r3, [r3]
  1057c8:	e7e83053 	ubfx	r3, r3, #0, #9
  1057cc:	e2832001 	add	r2, r3, #1
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
  1057d0:	e30430e8 	movw	r3, #16616	; 0x40e8
  1057d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1057d8:	e5933000 	ldr	r3, [r3]
  1057dc:	e7e83053 	ubfx	r3, r3, #0, #9
  1057e0:	e2833001 	add	r3, r3, #1
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
  1057e4:	e0020293 	mul	r2, r3, r2
  1057e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1057ec:	e5832000 	str	r2, [r3]
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
        break;
  1057f0:	ea000149 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MAIN_PLL_C3:
    case ALT_CLK_MAIN_QSPI:
        *div = (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR))) + 1;
  1057f4:	e3043054 	movw	r3, #16468	; 0x4054
  1057f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1057fc:	e5933000 	ldr	r3, [r3]
  105800:	e7e83053 	ubfx	r3, r3, #0, #9
  105804:	e2832001 	add	r2, r3, #1
  105808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10580c:	e5832000 	str	r2, [r3]
        break;
  105810:	ea000141 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        *div = (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR))) + 1;
  105814:	e3043058 	movw	r3, #16472	; 0x4058
  105818:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10581c:	e5933000 	ldr	r3, [r3]
  105820:	e7e83053 	ubfx	r3, r3, #0, #9
  105824:	e2832001 	add	r2, r3, #1
  105828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10582c:	e5832000 	str	r2, [r3]
        break;
  105830:	ea000139 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MAIN_PLL_C5:
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        *div = (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR))) + 1;
  105834:	e304305c 	movw	r3, #16476	; 0x405c
  105838:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10583c:	e5933000 	ldr	r3, [r3]
  105840:	e7e83053 	ubfx	r3, r3, #0, #9
  105844:	e2832001 	add	r2, r3, #1
  105848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10584c:	e5832000 	str	r2, [r3]
        break;
  105850:	ea000131 	b	105d1c <alt_clk_divider_get+0x6e8>

        /* Peripheral PLL outputs */
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        *div = (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR))) + 1;
  105854:	e3043088 	movw	r3, #16520	; 0x4088
  105858:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10585c:	e5933000 	ldr	r3, [r3]
  105860:	e7e83053 	ubfx	r3, r3, #0, #9
  105864:	e2832001 	add	r2, r3, #1
  105868:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10586c:	e5832000 	str	r2, [r3]
        break;
  105870:	ea000129 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        *div = (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR))) + 1;
  105874:	e304308c 	movw	r3, #16524	; 0x408c
  105878:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10587c:	e5933000 	ldr	r3, [r3]
  105880:	e7e83053 	ubfx	r3, r3, #0, #9
  105884:	e2832001 	add	r2, r3, #1
  105888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10588c:	e5832000 	str	r2, [r3]
        break;
  105890:	ea000121 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_PERIPHERAL_PLL_C2:
        *div = (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR))) + 1;
  105894:	e3043090 	movw	r3, #16528	; 0x4090
  105898:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10589c:	e5933000 	ldr	r3, [r3]
  1058a0:	e7e83053 	ubfx	r3, r3, #0, #9
  1058a4:	e2832001 	add	r2, r3, #1
  1058a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1058ac:	e5832000 	str	r2, [r3]
        break;
  1058b0:	ea000119 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_PERIPHERAL_PLL_C3:
        *div = (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR))) + 1;
  1058b4:	e3043094 	movw	r3, #16532	; 0x4094
  1058b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1058bc:	e5933000 	ldr	r3, [r3]
  1058c0:	e7e83053 	ubfx	r3, r3, #0, #9
  1058c4:	e2832001 	add	r2, r3, #1
  1058c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1058cc:	e5832000 	str	r2, [r3]
        break;
  1058d0:	ea000111 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_PERIPHERAL_PLL_C4:
        *div = (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR))) + 1;
  1058d4:	e3043098 	movw	r3, #16536	; 0x4098
  1058d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1058dc:	e5933000 	ldr	r3, [r3]
  1058e0:	e7e83053 	ubfx	r3, r3, #0, #9
  1058e4:	e2832001 	add	r2, r3, #1
  1058e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1058ec:	e5832000 	str	r2, [r3]
        break;
  1058f0:	ea000109 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        *div = (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR))) + 1;
  1058f4:	e304309c 	movw	r3, #16540	; 0x409c
  1058f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1058fc:	e5933000 	ldr	r3, [r3]
  105900:	e7e83053 	ubfx	r3, r3, #0, #9
  105904:	e2832001 	add	r2, r3, #1
  105908:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10590c:	e5832000 	str	r2, [r3]
        break;
  105910:	ea000101 	b	105d1c <alt_clk_divider_get+0x6e8>

        /* SDRAM PLL outputs */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        *div = (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR))) + 1;
  105914:	e30430c8 	movw	r3, #16584	; 0x40c8
  105918:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10591c:	e5933000 	ldr	r3, [r3]
  105920:	e7e83053 	ubfx	r3, r3, #0, #9
  105924:	e2832001 	add	r2, r3, #1
  105928:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10592c:	e5832000 	str	r2, [r3]
        break;
  105930:	ea0000f9 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        *div = (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR))) + 1;
  105934:	e30430cc 	movw	r3, #16588	; 0x40cc
  105938:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10593c:	e5933000 	ldr	r3, [r3]
  105940:	e7e83053 	ubfx	r3, r3, #0, #9
  105944:	e2832001 	add	r2, r3, #1
  105948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10594c:	e5832000 	str	r2, [r3]
        break;
  105950:	ea0000f1 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        *div = (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR))) + 1;
  105954:	e30430d0 	movw	r3, #16592	; 0x40d0
  105958:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10595c:	e5933000 	ldr	r3, [r3]
  105960:	e7e83053 	ubfx	r3, r3, #0, #9
  105964:	e2832001 	add	r2, r3, #1
  105968:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10596c:	e5832000 	str	r2, [r3]
        break;
  105970:	ea0000e9 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        *div = (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR))) + 1;
  105974:	e30430d4 	movw	r3, #16596	; 0x40d4
  105978:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10597c:	e5933000 	ldr	r3, [r3]
  105980:	e7e83053 	ubfx	r3, r3, #0, #9
  105984:	e2832001 	add	r2, r3, #1
  105988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10598c:	e5832000 	str	r2, [r3]
        break;
  105990:	ea0000e1 	b	105d1c <alt_clk_divider_get+0x6e8>

        /* Other clock dividers */
    case ALT_CLK_L3_MP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
  105994:	e3043064 	movw	r3, #16484	; 0x4064
  105998:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10599c:	e5933000 	ldr	r3, [r3]
  1059a0:	e2033003 	and	r3, r3, #3
  1059a4:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV2)
  1059a8:	e51b300c 	ldr	r3, [fp, #-12]
  1059ac:	e3530001 	cmp	r3, #1
  1059b0:	8a000004 	bhi	1059c8 <alt_clk_divider_get+0x394>
        {
            *div = temp + 1;
  1059b4:	e51b300c 	ldr	r3, [fp, #-12]
  1059b8:	e2832001 	add	r2, r3, #1
  1059bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1059c0:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  1059c4:	ea0000d4 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = temp + 1;
        }
        else
        {
            status = ALT_E_ERROR;
  1059c8:	e3e03000 	mvn	r3, #0
  1059cc:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1059d0:	ea0000d1 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_L3_SP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
  1059d4:	e3043064 	movw	r3, #16484	; 0x4064
  1059d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1059dc:	e5933000 	ldr	r3, [r3]
  1059e0:	e203300c 	and	r3, r3, #12
  1059e4:	e1a03123 	lsr	r3, r3, #2
  1059e8:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV2)
  1059ec:	e51b300c 	ldr	r3, [fp, #-12]
  1059f0:	e3530001 	cmp	r3, #1
  1059f4:	8a000004 	bhi	105a0c <alt_clk_divider_get+0x3d8>
        {
            *div = temp + 1;
  1059f8:	e51b300c 	ldr	r3, [fp, #-12]
  1059fc:	e2832001 	add	r2, r3, #1
  105a00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105a04:	e5832000 	str	r2, [r3]
        {
            status = ALT_E_ERROR;
        }
        /* note that this value does not include the additional effect 
           of the L3_MP divider that is upchain from this one */
        break;
  105a08:	ea0000c3 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = temp + 1;
        }
        else
        {
            status = ALT_E_ERROR;
  105a0c:	e3e03000 	mvn	r3, #0
  105a10:	e50b3008 	str	r3, [fp, #-8]
        }
        /* note that this value does not include the additional effect 
           of the L3_MP divider that is upchain from this one */
        break;
  105a14:	ea0000c0 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_L4_MP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
  105a18:	e3043064 	movw	r3, #16484	; 0x4064
  105a1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105a20:	e5933000 	ldr	r3, [r3]
  105a24:	e2033070 	and	r3, r3, #112	; 0x70
  105a28:	e1a03223 	lsr	r3, r3, #4
  105a2c:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV16)
  105a30:	e51b300c 	ldr	r3, [fp, #-12]
  105a34:	e3530004 	cmp	r3, #4
  105a38:	8a000006 	bhi	105a58 <alt_clk_divider_get+0x424>
        {
            *div = 1 << temp;
  105a3c:	e3a02001 	mov	r2, #1
  105a40:	e51b300c 	ldr	r3, [fp, #-12]
  105a44:	e1a03312 	lsl	r3, r2, r3
  105a48:	e1a02003 	mov	r2, r3
  105a4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105a50:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105a54:	ea0000b0 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105a58:	e3e03000 	mvn	r3, #0
  105a5c:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105a60:	ea0000ad 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_L4_SP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
  105a64:	e3043064 	movw	r3, #16484	; 0x4064
  105a68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105a6c:	e5933000 	ldr	r3, [r3]
  105a70:	e2033d0e 	and	r3, r3, #896	; 0x380
  105a74:	e1a033a3 	lsr	r3, r3, #7
  105a78:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV16)
  105a7c:	e51b300c 	ldr	r3, [fp, #-12]
  105a80:	e3530004 	cmp	r3, #4
  105a84:	8a000006 	bhi	105aa4 <alt_clk_divider_get+0x470>
        {
            *div = 1 << temp;
  105a88:	e3a02001 	mov	r2, #1
  105a8c:	e51b300c 	ldr	r3, [fp, #-12]
  105a90:	e1a03312 	lsl	r3, r2, r3
  105a94:	e1a02003 	mov	r2, r3
  105a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105a9c:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105aa0:	ea00009d 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105aa4:	e3e03000 	mvn	r3, #0
  105aa8:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105aac:	ea00009a 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_DBG_AT:
        temp = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR));
  105ab0:	e3043068 	movw	r3, #16488	; 0x4068
  105ab4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105ab8:	e5933000 	ldr	r3, [r3]
  105abc:	e2033003 	and	r3, r3, #3
  105ac0:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV4)
  105ac4:	e51b300c 	ldr	r3, [fp, #-12]
  105ac8:	e3530002 	cmp	r3, #2
  105acc:	8a000006 	bhi	105aec <alt_clk_divider_get+0x4b8>
        {
            *div = 1 << temp;
  105ad0:	e3a02001 	mov	r2, #1
  105ad4:	e51b300c 	ldr	r3, [fp, #-12]
  105ad8:	e1a03312 	lsl	r3, r2, r3
  105adc:	e1a02003 	mov	r2, r3
  105ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105ae4:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105ae8:	ea00008b 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105aec:	e3e03000 	mvn	r3, #0
  105af0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105af4:	ea000088 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_DBG:
        temp = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR));
  105af8:	e3043068 	movw	r3, #16488	; 0x4068
  105afc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105b00:	e5933000 	ldr	r3, [r3]
  105b04:	e203300c 	and	r3, r3, #12
  105b08:	e1a03123 	lsr	r3, r3, #2
  105b0c:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV4)
  105b10:	e51b300c 	ldr	r3, [fp, #-12]
  105b14:	e3530002 	cmp	r3, #2
  105b18:	8a000006 	bhi	105b38 <alt_clk_divider_get+0x504>
        {
            *div =  1 << temp;
  105b1c:	e3a02001 	mov	r2, #1
  105b20:	e51b300c 	ldr	r3, [fp, #-12]
  105b24:	e1a03312 	lsl	r3, r2, r3
  105b28:	e1a02003 	mov	r2, r3
  105b2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105b30:	e5832000 	str	r2, [r3]
        else
        {
            status = ALT_E_ERROR;
        }
        /* note that this value does not include the value of the upstream dbg_at_clk divder */
        break;
  105b34:	ea000078 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div =  1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105b38:	e3e03000 	mvn	r3, #0
  105b3c:	e50b3008 	str	r3, [fp, #-8]
        }
        /* note that this value does not include the value of the upstream dbg_at_clk divder */
        break;
  105b40:	ea000075 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_DBG_TRACE:
        temp = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR));
  105b44:	e304306c 	movw	r3, #16492	; 0x406c
  105b48:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105b4c:	e5933000 	ldr	r3, [r3]
  105b50:	e2033007 	and	r3, r3, #7
  105b54:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV16)
  105b58:	e51b300c 	ldr	r3, [fp, #-12]
  105b5c:	e3530004 	cmp	r3, #4
  105b60:	8a000006 	bhi	105b80 <alt_clk_divider_get+0x54c>
        {
            *div =  1 << temp;
  105b64:	e3a02001 	mov	r2, #1
  105b68:	e51b300c 	ldr	r3, [fp, #-12]
  105b6c:	e1a03312 	lsl	r3, r2, r3
  105b70:	e1a02003 	mov	r2, r3
  105b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105b78:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105b7c:	ea000066 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div =  1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105b80:	e3e03000 	mvn	r3, #0
  105b84:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105b88:	ea000063 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_USB_MP:
        temp = ALT_CLKMGR_PERPLL_DIV_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
  105b8c:	e30430a4 	movw	r3, #16548	; 0x40a4
  105b90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105b94:	e5933000 	ldr	r3, [r3]
  105b98:	e2033007 	and	r3, r3, #7
  105b9c:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV16)
  105ba0:	e51b300c 	ldr	r3, [fp, #-12]
  105ba4:	e3530004 	cmp	r3, #4
  105ba8:	8a000006 	bhi	105bc8 <alt_clk_divider_get+0x594>
        {
            *div = 1 << temp;
  105bac:	e3a02001 	mov	r2, #1
  105bb0:	e51b300c 	ldr	r3, [fp, #-12]
  105bb4:	e1a03312 	lsl	r3, r2, r3
  105bb8:	e1a02003 	mov	r2, r3
  105bbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bc0:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105bc4:	ea000054 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105bc8:	e3e03000 	mvn	r3, #0
  105bcc:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105bd0:	ea000051 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_SPI_M:
        temp = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
  105bd4:	e30430a4 	movw	r3, #16548	; 0x40a4
  105bd8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105bdc:	e5933000 	ldr	r3, [r3]
  105be0:	e2033038 	and	r3, r3, #56	; 0x38
  105be4:	e1a031a3 	lsr	r3, r3, #3
  105be8:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV16)
  105bec:	e51b300c 	ldr	r3, [fp, #-12]
  105bf0:	e3530004 	cmp	r3, #4
  105bf4:	8a000006 	bhi	105c14 <alt_clk_divider_get+0x5e0>
        {
            *div = 1 << temp;
  105bf8:	e3a02001 	mov	r2, #1
  105bfc:	e51b300c 	ldr	r3, [fp, #-12]
  105c00:	e1a03312 	lsl	r3, r2, r3
  105c04:	e1a02003 	mov	r2, r3
  105c08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105c0c:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105c10:	ea000041 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105c14:	e3e03000 	mvn	r3, #0
  105c18:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105c1c:	ea00003e 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_CAN0:
        temp = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
  105c20:	e30430a4 	movw	r3, #16548	; 0x40a4
  105c24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105c28:	e5933000 	ldr	r3, [r3]
  105c2c:	e2033d07 	and	r3, r3, #448	; 0x1c0
  105c30:	e1a03323 	lsr	r3, r3, #6
  105c34:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV16)
  105c38:	e51b300c 	ldr	r3, [fp, #-12]
  105c3c:	e3530004 	cmp	r3, #4
  105c40:	8a000006 	bhi	105c60 <alt_clk_divider_get+0x62c>
        {
            *div = 1 << temp;
  105c44:	e3a02001 	mov	r2, #1
  105c48:	e51b300c 	ldr	r3, [fp, #-12]
  105c4c:	e1a03312 	lsl	r3, r2, r3
  105c50:	e1a02003 	mov	r2, r3
  105c54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105c58:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105c5c:	ea00002e 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105c60:	e3e03000 	mvn	r3, #0
  105c64:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105c68:	ea00002b 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_CAN1:
        temp = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
  105c6c:	e30430a4 	movw	r3, #16548	; 0x40a4
  105c70:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105c74:	e5933000 	ldr	r3, [r3]
  105c78:	e2033c0e 	and	r3, r3, #3584	; 0xe00
  105c7c:	e1a034a3 	lsr	r3, r3, #9
  105c80:	e50b300c 	str	r3, [fp, #-12]
        if (temp <= ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16)
  105c84:	e51b300c 	ldr	r3, [fp, #-12]
  105c88:	e3530004 	cmp	r3, #4
  105c8c:	8a000006 	bhi	105cac <alt_clk_divider_get+0x678>
        {
            *div = 1 << temp;
  105c90:	e3a02001 	mov	r2, #1
  105c94:	e51b300c 	ldr	r3, [fp, #-12]
  105c98:	e1a03312 	lsl	r3, r2, r3
  105c9c:	e1a02003 	mov	r2, r3
  105ca0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105ca4:	e5832000 	str	r2, [r3]
        }
        else
        {
            status = ALT_E_ERROR;
        }
        break;
  105ca8:	ea00001b 	b	105d1c <alt_clk_divider_get+0x6e8>
        {
            *div = 1 << temp;
        }
        else
        {
            status = ALT_E_ERROR;
  105cac:	e3e03000 	mvn	r3, #0
  105cb0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  105cb4:	ea000018 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_GPIO_DB:
        temp = ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR));
  105cb8:	e30430a8 	movw	r3, #16552	; 0x40a8
  105cbc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  105cc0:	e5933000 	ldr	r3, [r3]
  105cc4:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
  105cc8:	e50b300c 	str	r3, [fp, #-12]
        *div = temp + 1;
  105ccc:	e51b300c 	ldr	r3, [fp, #-12]
  105cd0:	e2832001 	add	r2, r3, #1
  105cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105cd8:	e5832000 	str	r2, [r3]
        break;
  105cdc:	ea00000e 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MPU_PERIPH:
        *div = 4;                           /* set by hardware */
  105ce0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105ce4:	e3a02004 	mov	r2, #4
  105ce8:	e5832000 	str	r2, [r3]
        break;
  105cec:	ea00000a 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_MPU_L2_RAM:
        *div = 2;                           /* set by hardware */
  105cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105cf4:	e3a02002 	mov	r2, #2
  105cf8:	e5832000 	str	r2, [r3]
        break;
  105cfc:	ea000006 	b	105d1c <alt_clk_divider_get+0x6e8>

    case ALT_CLK_NAND:
        *div = 4;                           /* set by hardware */
  105d00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d04:	e3a02004 	mov	r2, #4
  105d08:	e5832000 	str	r2, [r3]
        break;
  105d0c:	ea000002 	b	105d1c <alt_clk_divider_get+0x6e8>

    default:
        status = ALT_E_BAD_ARG;
  105d10:	e3e03008 	mvn	r3, #8
  105d14:	e50b3008 	str	r3, [fp, #-8]
        break;
  105d18:	e1a00000 	nop			; (mov r0, r0)
    }

    return status;
  105d1c:	e51b3008 	ldr	r3, [fp, #-8]
}
  105d20:	e1a00003 	mov	r0, r3
  105d24:	e24bd000 	sub	sp, fp, #0
  105d28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105d2c:	e12fff1e 	bx	lr

00105d30 <alt_clk_within_freq_limits>:
    /* used for testing writes to the the full range of counters without
       regard to the usual output frequency upper and lower limits */


static ALT_STATUS_CODE alt_clk_within_freq_limits(ALT_CLK_t clk, uint32_t div)
{
  105d30:	e92d4800 	push	{fp, lr}
  105d34:	e28db004 	add	fp, sp, #4
  105d38:	e24dd018 	sub	sp, sp, #24
  105d3c:	e1a03000 	mov	r3, r0
  105d40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105d44:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  105d48:	e3a03000 	mov	r3, #0
  105d4c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        numer = 0;
  105d50:	e3a03000 	mov	r3, #0
  105d54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
  105d58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  105d5c:	e3530000 	cmp	r3, #0
  105d60:	1a000001 	bne	105d6c <alt_clk_within_freq_limits+0x3c>
    {
        return ALT_E_BAD_ARG;
  105d64:	e3e03008 	mvn	r3, #8
  105d68:	ea00011c 	b	1061e0 <alt_clk_within_freq_limits+0x4b0>
    }

    switch (clk)
  105d6c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  105d70:	e243300d 	sub	r3, r3, #13
  105d74:	e353002f 	cmp	r3, #47	; 0x2f
  105d78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  105d7c:	ea0000fd 	b	106178 <alt_clk_within_freq_limits+0x448>
  105d80:	00105e40 	andseq	r5, r0, r0, asr #28
  105d84:	00105e78 	andseq	r5, r0, r8, ror lr
  105d88:	00105eb0 			; <UNDEFINED> instruction: 0x00105eb0
  105d8c:	00105ee8 	andseq	r5, r0, r8, ror #29
  105d90:	00105f18 	andseq	r5, r0, r8, lsl pc
  105d94:	00105f50 	andseq	r5, r0, r0, asr pc
  105d98:	00106178 	andseq	r6, r0, r8, ror r1
  105d9c:	00106178 	andseq	r6, r0, r8, ror r1
  105da0:	00106178 	andseq	r6, r0, r8, ror r1
  105da4:	00106178 	andseq	r6, r0, r8, ror r1
  105da8:	00106178 	andseq	r6, r0, r8, ror r1
  105dac:	00106178 	andseq	r6, r0, r8, ror r1
  105db0:	00106178 	andseq	r6, r0, r8, ror r1
  105db4:	00106178 	andseq	r6, r0, r8, ror r1
  105db8:	00106178 	andseq	r6, r0, r8, ror r1
  105dbc:	00106178 	andseq	r6, r0, r8, ror r1
  105dc0:	00106178 	andseq	r6, r0, r8, ror r1
  105dc4:	00106178 	andseq	r6, r0, r8, ror r1
  105dc8:	00106178 	andseq	r6, r0, r8, ror r1
  105dcc:	00106178 	andseq	r6, r0, r8, ror r1
  105dd0:	00106178 	andseq	r6, r0, r8, ror r1
  105dd4:	00106178 	andseq	r6, r0, r8, ror r1
  105dd8:	00106178 	andseq	r6, r0, r8, ror r1
  105ddc:	00106178 	andseq	r6, r0, r8, ror r1
  105de0:	00105f88 	andseq	r5, r0, r8, lsl #31
  105de4:	00105fb8 			; <UNDEFINED> instruction: 0x00105fb8
  105de8:	00105fe8 	andseq	r5, r0, r8, ror #31
  105dec:	00106018 	andseq	r6, r0, r8, lsl r0
  105df0:	00106048 	andseq	r6, r0, r8, asr #32
  105df4:	00106078 	andseq	r6, r0, r8, ror r0
  105df8:	00106178 	andseq	r6, r0, r8, ror r1
  105dfc:	00106178 	andseq	r6, r0, r8, ror r1
  105e00:	00106178 	andseq	r6, r0, r8, ror r1
  105e04:	00106178 	andseq	r6, r0, r8, ror r1
  105e08:	00106178 	andseq	r6, r0, r8, ror r1
  105e0c:	00106178 	andseq	r6, r0, r8, ror r1
  105e10:	00106178 	andseq	r6, r0, r8, ror r1
  105e14:	00106178 	andseq	r6, r0, r8, ror r1
  105e18:	00106178 	andseq	r6, r0, r8, ror r1
  105e1c:	00106178 	andseq	r6, r0, r8, ror r1
  105e20:	00106178 	andseq	r6, r0, r8, ror r1
  105e24:	00106178 	andseq	r6, r0, r8, ror r1
  105e28:	001060b0 	ldrheq	r6, [r0], -r0
  105e2c:	001060e0 	andseq	r6, r0, r0, ror #1
  105e30:	00106110 	andseq	r6, r0, r0, lsl r1
  105e34:	00106178 	andseq	r6, r0, r8, ror r1
  105e38:	00106178 	andseq	r6, r0, r8, ror r1
  105e3c:	00106140 	andseq	r6, r0, r0, asr #2
    {
        /* Counters of the Main PLL */
    case ALT_CLK_MAIN_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
  105e40:	e3073350 	movw	r3, #29520	; 0x7350
  105e44:	e3403011 	movt	r3, #17
  105e48:	e5933000 	ldr	r3, [r3]
  105e4c:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  105e50:	e30732b0 	movw	r3, #29360	; 0x72b0
  105e54:	e3403011 	movt	r3, #17
  105e58:	e5933000 	ldr	r3, [r3]
  105e5c:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
  105e60:	e24b3014 	sub	r3, fp, #20
  105e64:	e1a01003 	mov	r1, r3
  105e68:	e3a00009 	mov	r0, #9
  105e6c:	ebfffc27 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105e70:	e50b0008 	str	r0, [fp, #-8]
        break;
  105e74:	ea0000c2 	b	106184 <alt_clk_within_freq_limits+0x454>
    case  ALT_CLK_MAIN_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
  105e78:	e3073350 	movw	r3, #29520	; 0x7350
  105e7c:	e3403011 	movt	r3, #17
  105e80:	e5933004 	ldr	r3, [r3, #4]
  105e84:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  105e88:	e30732b0 	movw	r3, #29360	; 0x72b0
  105e8c:	e3403011 	movt	r3, #17
  105e90:	e5933000 	ldr	r3, [r3]
  105e94:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
  105e98:	e24b3014 	sub	r3, fp, #20
  105e9c:	e1a01003 	mov	r1, r3
  105ea0:	e3a00009 	mov	r0, #9
  105ea4:	ebfffc19 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105ea8:	e50b0008 	str	r0, [fp, #-8]
        break;
  105eac:	ea0000b4 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_MAIN_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
  105eb0:	e3073350 	movw	r3, #29520	; 0x7350
  105eb4:	e3403011 	movt	r3, #17
  105eb8:	e5933008 	ldr	r3, [r3, #8]
  105ebc:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  105ec0:	e30732b0 	movw	r3, #29360	; 0x72b0
  105ec4:	e3403011 	movt	r3, #17
  105ec8:	e5933000 	ldr	r3, [r3]
  105ecc:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
  105ed0:	e24b3014 	sub	r3, fp, #20
  105ed4:	e1a01003 	mov	r1, r3
  105ed8:	e3a00009 	mov	r0, #9
  105edc:	ebfffc0b 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105ee0:	e50b0008 	str	r0, [fp, #-8]
        break;
  105ee4:	ea0000a6 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_MAIN_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
  105ee8:	e3073350 	movw	r3, #29520	; 0x7350
  105eec:	e3403011 	movt	r3, #17
  105ef0:	e593300c 	ldr	r3, [r3, #12]
  105ef4:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  105ef8:	e3a03000 	mov	r3, #0
  105efc:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
  105f00:	e24b3014 	sub	r3, fp, #20
  105f04:	e1a01003 	mov	r1, r3
  105f08:	e3a00009 	mov	r0, #9
  105f0c:	ebfffbff 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105f10:	e50b0008 	str	r0, [fp, #-8]
        break;
  105f14:	ea00009a 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_MAIN_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
  105f18:	e3073350 	movw	r3, #29520	; 0x7350
  105f1c:	e3403011 	movt	r3, #17
  105f20:	e5933010 	ldr	r3, [r3, #16]
  105f24:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  105f28:	e30732b0 	movw	r3, #29360	; 0x72b0
  105f2c:	e3403011 	movt	r3, #17
  105f30:	e5933000 	ldr	r3, [r3]
  105f34:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
  105f38:	e24b3014 	sub	r3, fp, #20
  105f3c:	e1a01003 	mov	r1, r3
  105f40:	e3a00009 	mov	r0, #9
  105f44:	ebfffbf1 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105f48:	e50b0008 	str	r0, [fp, #-8]
        break;
  105f4c:	ea00008c 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_MAIN_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C5;
  105f50:	e3073350 	movw	r3, #29520	; 0x7350
  105f54:	e3403011 	movt	r3, #17
  105f58:	e5933014 	ldr	r3, [r3, #20]
  105f5c:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  105f60:	e30732b0 	movw	r3, #29360	; 0x72b0
  105f64:	e3403011 	movt	r3, #17
  105f68:	e5933000 	ldr	r3, [r3]
  105f6c:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
  105f70:	e24b3014 	sub	r3, fp, #20
  105f74:	e1a01003 	mov	r1, r3
  105f78:	e3a00009 	mov	r0, #9
  105f7c:	ebfffbe3 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105f80:	e50b0008 	str	r0, [fp, #-8]
        break;
  105f84:	ea00007e 	b	106184 <alt_clk_within_freq_limits+0x454>

    /* Counters of the Peripheral PLL */
    case ALT_CLK_PERIPHERAL_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
  105f88:	e3073350 	movw	r3, #29520	; 0x7350
  105f8c:	e3403011 	movt	r3, #17
  105f90:	e5933018 	ldr	r3, [r3, #24]
  105f94:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  105f98:	e3a03000 	mov	r3, #0
  105f9c:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
  105fa0:	e24b3014 	sub	r3, fp, #20
  105fa4:	e1a01003 	mov	r1, r3
  105fa8:	e3a0000a 	mov	r0, #10
  105fac:	ebfffbd7 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105fb0:	e50b0008 	str	r0, [fp, #-8]
        break;
  105fb4:	ea000072 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_PERIPHERAL_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
  105fb8:	e3073350 	movw	r3, #29520	; 0x7350
  105fbc:	e3403011 	movt	r3, #17
  105fc0:	e593301c 	ldr	r3, [r3, #28]
  105fc4:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  105fc8:	e3a03000 	mov	r3, #0
  105fcc:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
  105fd0:	e24b3014 	sub	r3, fp, #20
  105fd4:	e1a01003 	mov	r1, r3
  105fd8:	e3a0000a 	mov	r0, #10
  105fdc:	ebfffbcb 	bl	104f10 <alt_clk_pll_vco_freq_get>
  105fe0:	e50b0008 	str	r0, [fp, #-8]
        break;
  105fe4:	ea000066 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_PERIPHERAL_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
  105fe8:	e3073350 	movw	r3, #29520	; 0x7350
  105fec:	e3403011 	movt	r3, #17
  105ff0:	e5933020 	ldr	r3, [r3, #32]
  105ff4:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  105ff8:	e3a03000 	mov	r3, #0
  105ffc:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
  106000:	e24b3014 	sub	r3, fp, #20
  106004:	e1a01003 	mov	r1, r3
  106008:	e3a0000a 	mov	r0, #10
  10600c:	ebfffbbf 	bl	104f10 <alt_clk_pll_vco_freq_get>
  106010:	e50b0008 	str	r0, [fp, #-8]
        break;
  106014:	ea00005a 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_PERIPHERAL_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
  106018:	e3073350 	movw	r3, #29520	; 0x7350
  10601c:	e3403011 	movt	r3, #17
  106020:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  106024:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  106028:	e3a03000 	mov	r3, #0
  10602c:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
  106030:	e24b3014 	sub	r3, fp, #20
  106034:	e1a01003 	mov	r1, r3
  106038:	e3a0000a 	mov	r0, #10
  10603c:	ebfffbb3 	bl	104f10 <alt_clk_pll_vco_freq_get>
  106040:	e50b0008 	str	r0, [fp, #-8]
        break;
  106044:	ea00004e 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_PERIPHERAL_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
  106048:	e3073350 	movw	r3, #29520	; 0x7350
  10604c:	e3403011 	movt	r3, #17
  106050:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  106054:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  106058:	e3a03000 	mov	r3, #0
  10605c:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
  106060:	e24b3014 	sub	r3, fp, #20
  106064:	e1a01003 	mov	r1, r3
  106068:	e3a0000a 	mov	r0, #10
  10606c:	ebfffba7 	bl	104f10 <alt_clk_pll_vco_freq_get>
  106070:	e50b0008 	str	r0, [fp, #-8]
        break;
  106074:	ea000042 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_PERIPHERAL_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C5;
  106078:	e3073350 	movw	r3, #29520	; 0x7350
  10607c:	e3403011 	movt	r3, #17
  106080:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  106084:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  106088:	e30732b0 	movw	r3, #29360	; 0x72b0
  10608c:	e3403011 	movt	r3, #17
  106090:	e5933000 	ldr	r3, [r3]
  106094:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
  106098:	e24b3014 	sub	r3, fp, #20
  10609c:	e1a01003 	mov	r1, r3
  1060a0:	e3a0000a 	mov	r0, #10
  1060a4:	ebfffb99 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1060a8:	e50b0008 	str	r0, [fp, #-8]
        break;
  1060ac:	ea000034 	b	106184 <alt_clk_within_freq_limits+0x454>

    /* Counters of the SDRAM PLL */
    case ALT_CLK_SDRAM_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
  1060b0:	e3073350 	movw	r3, #29520	; 0x7350
  1060b4:	e3403011 	movt	r3, #17
  1060b8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1060bc:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  1060c0:	e3a03000 	mov	r3, #0
  1060c4:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
  1060c8:	e24b3014 	sub	r3, fp, #20
  1060cc:	e1a01003 	mov	r1, r3
  1060d0:	e3a0000b 	mov	r0, #11
  1060d4:	ebfffb8d 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1060d8:	e50b0008 	str	r0, [fp, #-8]
        break;
  1060dc:	ea000028 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_SDRAM_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
  1060e0:	e3073350 	movw	r3, #29520	; 0x7350
  1060e4:	e3403011 	movt	r3, #17
  1060e8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1060ec:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  1060f0:	e3a03000 	mov	r3, #0
  1060f4:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
  1060f8:	e24b3014 	sub	r3, fp, #20
  1060fc:	e1a01003 	mov	r1, r3
  106100:	e3a0000b 	mov	r0, #11
  106104:	ebfffb81 	bl	104f10 <alt_clk_pll_vco_freq_get>
  106108:	e50b0008 	str	r0, [fp, #-8]
        break;
  10610c:	ea00001c 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_SDRAM_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
  106110:	e3073350 	movw	r3, #29520	; 0x7350
  106114:	e3403011 	movt	r3, #17
  106118:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10611c:	e50b300c 	str	r3, [fp, #-12]
        lolimit = 0;
  106120:	e3a03000 	mov	r3, #0
  106124:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
  106128:	e24b3014 	sub	r3, fp, #20
  10612c:	e1a01003 	mov	r1, r3
  106130:	e3a0000b 	mov	r0, #11
  106134:	ebfffb75 	bl	104f10 <alt_clk_pll_vco_freq_get>
  106138:	e50b0008 	str	r0, [fp, #-8]
        break;
  10613c:	ea000010 	b	106184 <alt_clk_within_freq_limits+0x454>
    case ALT_CLK_SDRAM_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C5;
  106140:	e3073350 	movw	r3, #29520	; 0x7350
  106144:	e3403011 	movt	r3, #17
  106148:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10614c:	e50b300c 	str	r3, [fp, #-12]
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
  106150:	e30732b0 	movw	r3, #29360	; 0x72b0
  106154:	e3403011 	movt	r3, #17
  106158:	e5933000 	ldr	r3, [r3]
  10615c:	e50b3010 	str	r3, [fp, #-16]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
  106160:	e24b3014 	sub	r3, fp, #20
  106164:	e1a01003 	mov	r1, r3
  106168:	e3a0000b 	mov	r0, #11
  10616c:	ebfffb67 	bl	104f10 <alt_clk_pll_vco_freq_get>
  106170:	e50b0008 	str	r0, [fp, #-8]
        break;
  106174:	ea000002 	b	106184 <alt_clk_within_freq_limits+0x454>

    default:
        status = ALT_E_BAD_ARG;
  106178:	e3e03008 	mvn	r3, #8
  10617c:	e50b3008 	str	r3, [fp, #-8]
        break;
  106180:	e1a00000 	nop			; (mov r0, r0)
    }

    if (status == ALT_E_SUCCESS)
  106184:	e51b3008 	ldr	r3, [fp, #-8]
  106188:	e3530000 	cmp	r3, #0
  10618c:	1a000012 	bne	1061dc <alt_clk_within_freq_limits+0x4ac>
    {
        numer = numer / div;
  106190:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106194:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  106198:	e1a00003 	mov	r0, r3
  10619c:	eb0019be 	bl	10c89c <__aeabi_uidiv>
  1061a0:	e1a03000 	mov	r3, r0
  1061a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if ((numer <= hilimit) && (numer >= lolimit))
  1061a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1061ac:	e51b300c 	ldr	r3, [fp, #-12]
  1061b0:	e1520003 	cmp	r2, r3
  1061b4:	8a000006 	bhi	1061d4 <alt_clk_within_freq_limits+0x4a4>
  1061b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1061bc:	e51b3010 	ldr	r3, [fp, #-16]
  1061c0:	e1520003 	cmp	r2, r3
  1061c4:	3a000002 	bcc	1061d4 <alt_clk_within_freq_limits+0x4a4>
        {
            status = ALT_E_TRUE;
  1061c8:	e3a03001 	mov	r3, #1
  1061cc:	e50b3008 	str	r3, [fp, #-8]
  1061d0:	ea000001 	b	1061dc <alt_clk_within_freq_limits+0x4ac>
        }
        else
        {
            status = ALT_E_FALSE;
  1061d4:	e3a03000 	mov	r3, #0
  1061d8:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    return status;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
#endif
}
  1061e0:	e1a00003 	mov	r0, r3
  1061e4:	e24bd004 	sub	sp, fp, #4
  1061e8:	e8bd8800 	pop	{fp, pc}

001061ec <alt_clkmgr_is_val_modulo_n>:

static bool alt_clkmgr_is_val_modulo_n(uint32_t div, uint32_t mod)
{
  1061ec:	e92d4800 	push	{fp, lr}
  1061f0:	e28db004 	add	fp, sp, #4
  1061f4:	e24dd008 	sub	sp, sp, #8
  1061f8:	e50b0008 	str	r0, [fp, #-8]
  1061fc:	e50b100c 	str	r1, [fp, #-12]
    if (mod == 1)
  106200:	e51b300c 	ldr	r3, [fp, #-12]
  106204:	e3530001 	cmp	r3, #1
  106208:	1a000001 	bne	106214 <alt_clkmgr_is_val_modulo_n+0x28>
    {
        return true;
  10620c:	e3a03001 	mov	r3, #1
  106210:	ea00001c 	b	106288 <alt_clkmgr_is_val_modulo_n+0x9c>
    }
    else if (mod == 2)
  106214:	e51b300c 	ldr	r3, [fp, #-12]
  106218:	e3530002 	cmp	r3, #2
  10621c:	1a000006 	bne	10623c <alt_clkmgr_is_val_modulo_n+0x50>
    {
        return (div & 0x1) == 0;
  106220:	e51b3008 	ldr	r3, [fp, #-8]
  106224:	e2033001 	and	r3, r3, #1
  106228:	e3530000 	cmp	r3, #0
  10622c:	03a03001 	moveq	r3, #1
  106230:	13a03000 	movne	r3, #0
  106234:	e6ef3073 	uxtb	r3, r3
  106238:	ea000012 	b	106288 <alt_clkmgr_is_val_modulo_n+0x9c>
    }
    else if (mod == 4)
  10623c:	e51b300c 	ldr	r3, [fp, #-12]
  106240:	e3530004 	cmp	r3, #4
  106244:	1a000006 	bne	106264 <alt_clkmgr_is_val_modulo_n+0x78>
    {
        return (div & 0x3) == 0;
  106248:	e51b3008 	ldr	r3, [fp, #-8]
  10624c:	e2033003 	and	r3, r3, #3
  106250:	e3530000 	cmp	r3, #0
  106254:	03a03001 	moveq	r3, #1
  106258:	13a03000 	movne	r3, #0
  10625c:	e6ef3073 	uxtb	r3, r3
  106260:	ea000008 	b	106288 <alt_clkmgr_is_val_modulo_n+0x9c>
    }
    else
    {
        return (div % mod) == 0;
  106264:	e51b3008 	ldr	r3, [fp, #-8]
  106268:	e51b100c 	ldr	r1, [fp, #-12]
  10626c:	e1a00003 	mov	r0, r3
  106270:	eb001a04 	bl	10ca88 <__aeabi_uidivmod>
  106274:	e1a03001 	mov	r3, r1
  106278:	e3530000 	cmp	r3, #0
  10627c:	03a03001 	moveq	r3, #1
  106280:	13a03000 	movne	r3, #0
  106284:	e6ef3073 	uxtb	r3, r3
    }
}
  106288:	e1a00003 	mov	r0, r3
  10628c:	e24bd004 	sub	sp, fp, #4
  106290:	e8bd8800 	pop	{fp, pc}

00106294 <alt_clk_divider_set>:
//
// See pages 38, 44, 45, and 46 of the HPS-Clocking NPP for a map of the
// HPS clocking architecture and hierarchy of connections.
*/
ALT_STATUS_CODE alt_clk_divider_set(ALT_CLK_t clk, uint32_t div)
{
  106294:	e92d4800 	push	{fp, lr}
  106298:	e28db004 	add	fp, sp, #4
  10629c:	e24dd030 	sub	sp, sp, #48	; 0x30
  1062a0:	e1a03000 	mov	r3, r0
  1062a4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1062a8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
  1062ac:	e3e03008 	mvn	r3, #8
  1062b0:	e50b3008 	str	r3, [fp, #-8]
    volatile uint32_t   temp, temp1;
    uint32_t            wrval = UINT32_MAX;              /* value to be written */
  1062b4:	e3e03000 	mvn	r3, #0
  1062b8:	e50b300c 	str	r3, [fp, #-12]
    bool                restore_0 = false;
  1062bc:	e3a03000 	mov	r3, #0
  1062c0:	e54b300d 	strb	r3, [fp, #-13]
    bool                restore_1 = false;
  1062c4:	e3a03000 	mov	r3, #0
  1062c8:	e54b300e 	strb	r3, [fp, #-14]
    bool                restore_2 = false;
  1062cc:	e3a03000 	mov	r3, #0
  1062d0:	e54b300f 	strb	r3, [fp, #-15]

    switch (clk)
  1062d4:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1062d8:	e243300d 	sub	r3, r3, #13
  1062dc:	e3530033 	cmp	r3, #51	; 0x33
  1062e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1062e4:	ea000855 	b	108440 <alt_clk_divider_set+0x21ac>
  1062e8:	001063b8 			; <UNDEFINED> instruction: 0x001063b8
  1062ec:	00106454 	andseq	r6, r0, r4, asr r4
  1062f0:	001065f8 			; <UNDEFINED> instruction: 0x001065f8
  1062f4:	00106694 	mulseq	r0, r4, r6
  1062f8:	0010679c 	mulseq	r0, ip, r7
  1062fc:	001069b8 			; <UNDEFINED> instruction: 0x001069b8
  106300:	001063b8 			; <UNDEFINED> instruction: 0x001063b8
  106304:	00108440 	andseq	r8, r0, r0, asr #8
  106308:	00108440 	andseq	r8, r0, r0, asr #8
  10630c:	00106454 	andseq	r6, r0, r4, asr r4
  106310:	00107648 	andseq	r7, r0, r8, asr #12
  106314:	00107728 	andseq	r7, r0, r8, lsr #14
  106318:	00108440 	andseq	r8, r0, r0, asr #8
  10631c:	001077b4 			; <UNDEFINED> instruction: 0x001077b4
  106320:	001078e0 	andseq	r7, r0, r0, ror #17
  106324:	001065f8 			; <UNDEFINED> instruction: 0x001065f8
  106328:	00107a0c 	andseq	r7, r0, ip, lsl #20
  10632c:	00107be8 	andseq	r7, r0, r8, ror #23
  106330:	00108440 	andseq	r8, r0, r0, asr #8
  106334:	00107b04 	andseq	r7, r0, r4, lsl #22
  106338:	0010827c 	andseq	r8, r0, ip, ror r2
  10633c:	0010679c 	mulseq	r0, ip, r7
  106340:	001069b8 			; <UNDEFINED> instruction: 0x001069b8
  106344:	001069b8 			; <UNDEFINED> instruction: 0x001069b8
  106348:	00106ac8 	andseq	r6, r0, r8, asr #21
  10634c:	00106bb4 			; <UNDEFINED> instruction: 0x00106bb4
  106350:	00106ca0 	andseq	r6, r0, r0, lsr #25
  106354:	00106db0 			; <UNDEFINED> instruction: 0x00106db0
  106358:	00106ff8 			; <UNDEFINED> instruction: 0x00106ff8
  10635c:	0010721c 	andseq	r7, r0, ip, lsl r2
  106360:	00107d10 	andseq	r7, r0, r0, lsl sp
  106364:	00107e38 	andseq	r7, r0, r8, lsr lr
  106368:	00108440 	andseq	r8, r0, r0, asr #8
  10636c:	00108440 	andseq	r8, r0, r0, asr #8
  106370:	00108440 	andseq	r8, r0, r0, asr #8
  106374:	00108440 	andseq	r8, r0, r0, asr #8
  106378:	00106ac8 	andseq	r6, r0, r8, asr #21
  10637c:	00106bb4 			; <UNDEFINED> instruction: 0x00106bb4
  106380:	00107f64 	andseq	r7, r0, r4, ror #30
  106384:	00108090 	mulseq	r0, r0, r0
  106388:	001081bc 			; <UNDEFINED> instruction: 0x001081bc
  10638c:	0010721c 	andseq	r7, r0, ip, lsl r2
  106390:	00107308 	andseq	r7, r0, r8, lsl #6
  106394:	001073d8 			; <UNDEFINED> instruction: 0x001073d8
  106398:	001074a8 	andseq	r7, r0, r8, lsr #9
  10639c:	00108440 	andseq	r8, r0, r0, asr #8
  1063a0:	00108440 	andseq	r8, r0, r0, asr #8
  1063a4:	00107578 	andseq	r7, r0, r8, ror r5
  1063a8:	00107308 	andseq	r7, r0, r8, lsl #6
  1063ac:	001073d8 			; <UNDEFINED> instruction: 0x001073d8
  1063b0:	001074a8 	andseq	r7, r0, r8, lsr #9
  1063b4:	00107578 	andseq	r7, r0, r8, ror r5
    {
        /* Main PLL outputs */
    case ALT_CLK_MAIN_PLL_C0:
    case ALT_CLK_MPU:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);
  1063b8:	e30430e0 	movw	r3, #16608	; 0x40e0
  1063bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1063c0:	e5933000 	ldr	r3, [r3]
  1063c4:	e7e83053 	ubfx	r3, r3, #0, #9
  1063c8:	e2833001 	add	r3, r3, #1
  1063cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET_MSK + 1) * prediv))
  1063d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1063d4:	e1a02483 	lsl	r2, r3, #9
  1063d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1063dc:	e1520003 	cmp	r2, r3
  1063e0:	3a000018 	bcc	106448 <alt_clk_divider_set+0x1b4>
                && alt_clkmgr_is_val_modulo_n(div, prediv)
  1063e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1063e8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1063ec:	ebffff7e 	bl	1061ec <alt_clkmgr_is_val_modulo_n>
  1063f0:	e1a03000 	mov	r3, r0
  1063f4:	e3530000 	cmp	r3, #0
  1063f8:	0a000012 	beq	106448 <alt_clk_divider_set+0x1b4>
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C0, div) == ALT_E_TRUE) )
  1063fc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  106400:	e3a0000d 	mov	r0, #13
  106404:	ebfffe49 	bl	105d30 <alt_clk_within_freq_limits>
  106408:	e1a03000 	mov	r3, r0
  10640c:	e3530001 	cmp	r3, #1
  106410:	1a00000c 	bne	106448 <alt_clk_divider_set+0x1b4>
            {
                wrval = (div / prediv) - 1;
  106414:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  106418:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  10641c:	eb00191e 	bl	10c89c <__aeabi_uidiv>
  106420:	e1a03000 	mov	r3, r0
  106424:	e2433001 	sub	r3, r3, #1
  106428:	e50b300c 	str	r3, [fp, #-12]

                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR, wrval);
  10642c:	e3043048 	movw	r3, #16456	; 0x4048
  106430:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106434:	e51b200c 	ldr	r2, [fp, #-12]
  106438:	e5832000 	str	r2, [r3]
                ret = ALT_E_SUCCESS;
  10643c:	e3a03000 	mov	r3, #0
  106440:	e50b3008 	str	r3, [fp, #-8]
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  106444:	ea000801 	b	108450 <alt_clk_divider_set+0x21bc>
                alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR, wrval);
                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ARG_RANGE;
  106448:	e3e03007 	mvn	r3, #7
  10644c:	e50b3008 	str	r3, [fp, #-8]
            }
        }
        break;
  106450:	ea0007fe 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_L3_MAIN:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);
  106454:	e30430e4 	movw	r3, #16612	; 0x40e4
  106458:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10645c:	e5933000 	ldr	r3, [r3]
  106460:	e7e83053 	ubfx	r3, r3, #0, #9
  106464:	e2833001 	add	r3, r3, #1
  106468:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MAINCLK_CNT_SET_MSK + 1) * prediv))
  10646c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106470:	e1a02483 	lsl	r2, r3, #9
  106474:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106478:	e1520003 	cmp	r2, r3
  10647c:	3a00005a 	bcc	1065ec <alt_clk_divider_set+0x358>
                && alt_clkmgr_is_val_modulo_n(div, prediv)
  106480:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106484:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  106488:	ebffff57 	bl	1061ec <alt_clkmgr_is_val_modulo_n>
  10648c:	e1a03000 	mov	r3, r0
  106490:	e3530000 	cmp	r3, #0
  106494:	0a000054 	beq	1065ec <alt_clk_divider_set+0x358>
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C1, div) == ALT_E_TRUE) )
  106498:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  10649c:	e3a0000e 	mov	r0, #14
  1064a0:	ebfffe22 	bl	105d30 <alt_clk_within_freq_limits>
  1064a4:	e1a03000 	mov	r3, r0
  1064a8:	e3530001 	cmp	r3, #1
  1064ac:	1a00004e 	bne	1065ec <alt_clk_divider_set+0x358>
            {
                /* HW managed clock, change by writing to the external counter, no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */

                wrval = (div / prediv) - 1;
  1064b0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1064b4:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1064b8:	eb0018f7 	bl	10c89c <__aeabi_uidiv>
  1064bc:	e1a03000 	mov	r3, r0
  1064c0:	e2433001 	sub	r3, r3, #1
  1064c4:	e50b300c 	str	r3, [fp, #-12]

#if ALT_PREVENT_GLITCH_CHGC1
                /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing
                // bypass state, then gate clock back on. FogBugz #63778 */
                temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  1064c8:	e3043070 	movw	r3, #16496	; 0x4070
  1064cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1064d0:	e5933000 	ldr	r3, [r3]
  1064d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  1064d8:	e3043060 	movw	r3, #16480	; 0x4060
  1064dc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1064e0:	e5933000 	ldr	r3, [r3]
  1064e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
  1064e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1064ec:	e2033004 	and	r3, r3, #4
  1064f0:	e3530000 	cmp	r3, #0
  1064f4:	0a000005 	beq	106510 <alt_clk_divider_set+0x27c>
  1064f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1064fc:	e2033001 	and	r3, r3, #1
  106500:	e3530000 	cmp	r3, #0
  106504:	1a000001 	bne	106510 <alt_clk_divider_set+0x27c>
                {
                    restore_0 = true;
  106508:	e3a03001 	mov	r3, #1
  10650c:	e54b300d 	strb	r3, [fp, #-13]
                }
                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
  106510:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106514:	e2033008 	and	r3, r3, #8
  106518:	e3530000 	cmp	r3, #0
  10651c:	0a000005 	beq	106538 <alt_clk_divider_set+0x2a4>
  106520:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106524:	e2033002 	and	r3, r3, #2
  106528:	e3530000 	cmp	r3, #0
  10652c:	1a000001 	bne	106538 <alt_clk_divider_set+0x2a4>
                {
                    restore_1 = true;
  106530:	e3a03001 	mov	r3, #1
  106534:	e54b300e 	strb	r3, [fp, #-14]
                }
                temp = temp1;
  106538:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10653c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
  106540:	e55b300d 	ldrb	r3, [fp, #-13]
  106544:	e3530000 	cmp	r3, #0
  106548:	0a000002 	beq	106558 <alt_clk_divider_set+0x2c4>
  10654c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106550:	e3c33004 	bic	r3, r3, #4
  106554:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
  106558:	e55b300e 	ldrb	r3, [fp, #-14]
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000002 	beq	106570 <alt_clk_divider_set+0x2dc>
  106564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106568:	e3c33008 	bic	r3, r3, #8
  10656c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
  106570:	e55b300d 	ldrb	r3, [fp, #-13]
  106574:	e3530000 	cmp	r3, #0
  106578:	1a000002 	bne	106588 <alt_clk_divider_set+0x2f4>
  10657c:	e55b300e 	ldrb	r3, [fp, #-14]
  106580:	e3530000 	cmp	r3, #0
  106584:	0a000003 	beq	106598 <alt_clk_divider_set+0x304>
  106588:	e3043060 	movw	r3, #16480	; 0x4060
  10658c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106590:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106594:	e5832000 	str	r2, [r3]

                alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR, wrval);
  106598:	e304304c 	movw	r3, #16460	; 0x404c
  10659c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1065a0:	e51b200c 	ldr	r2, [fp, #-12]
  1065a4:	e5832000 	str	r2, [r3]

                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  1065a8:	e3a0101e 	mov	r1, #30
  1065ac:	e3040060 	movw	r0, #16480	; 0x4060
  1065b0:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1065b4:	ebffe93d 	bl	100ab0 <alt_clk_mgr_wait>
                /* wait a bit before reenabling the L4MP and L4SP clocks */
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
  1065b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1065bc:	e3530000 	cmp	r3, #0
  1065c0:	1a000002 	bne	1065d0 <alt_clk_divider_set+0x33c>
  1065c4:	e55b300e 	ldrb	r3, [fp, #-14]
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a000003 	beq	1065e0 <alt_clk_divider_set+0x34c>
  1065d0:	e3043060 	movw	r3, #16480	; 0x4060
  1065d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1065d8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1065dc:	e5832000 	str	r2, [r3]
#else
                alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR, wrval);
#endif
                ret = ALT_E_SUCCESS;
  1065e0:	e3a03000 	mov	r3, #0
  1065e4:	e50b3008 	str	r3, [fp, #-8]
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  1065e8:	ea000798 	b	108450 <alt_clk_divider_set+0x21bc>
#endif
                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ARG_RANGE;
  1065ec:	e3e03007 	mvn	r3, #7
  1065f0:	e50b3008 	str	r3, [fp, #-8]
            }
        }
        break;
  1065f4:	ea000795 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
  1065f8:	e30430e8 	movw	r3, #16616	; 0x40e8
  1065fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106600:	e5933000 	ldr	r3, [r3]
  106604:	e7e83053 	ubfx	r3, r3, #0, #9
  106608:	e2833001 	add	r3, r3, #1
  10660c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

            if (   (div <= ((ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_SET_MSK + 1) * prediv))
  106610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106614:	e1a02483 	lsl	r2, r3, #9
  106618:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10661c:	e1520003 	cmp	r2, r3
  106620:	3a000018 	bcc	106688 <alt_clk_divider_set+0x3f4>
                   && alt_clkmgr_is_val_modulo_n(div, prediv)
  106624:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  106628:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  10662c:	ebfffeee 	bl	1061ec <alt_clkmgr_is_val_modulo_n>
  106630:	e1a03000 	mov	r3, r0
  106634:	e3530000 	cmp	r3, #0
  106638:	0a000012 	beq	106688 <alt_clk_divider_set+0x3f4>
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C2, div) == ALT_E_TRUE) )
  10663c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  106640:	e3a0000f 	mov	r0, #15
  106644:	ebfffdb9 	bl	105d30 <alt_clk_within_freq_limits>
  106648:	e1a03000 	mov	r3, r0
  10664c:	e3530001 	cmp	r3, #1
  106650:	1a00000c 	bne	106688 <alt_clk_divider_set+0x3f4>
            {
                wrval = (div / prediv) - 1;
  106654:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  106658:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  10665c:	eb00188e 	bl	10c89c <__aeabi_uidiv>
  106660:	e1a03000 	mov	r3, r0
  106664:	e2433001 	sub	r3, r3, #1
  106668:	e50b300c 	str	r3, [fp, #-12]
                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR, wrval);
  10666c:	e3043050 	movw	r3, #16464	; 0x4050
  106670:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106674:	e51b200c 	ldr	r2, [fp, #-12]
  106678:	e5832000 	str	r2, [r3]

                ret = ALT_E_SUCCESS;
  10667c:	e3a03000 	mov	r3, #0
  106680:	e50b3008 	str	r3, [fp, #-8]
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  106684:	ea000771 	b	108450 <alt_clk_divider_set+0x21bc>

                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ARG_RANGE;
  106688:	e3e03007 	mvn	r3, #7
  10668c:	e50b3008 	str	r3, [fp, #-8]
            }
        }
        break;
  106690:	ea00076e 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_MAIN_PLL_C3:
        /* The rest of the PLL outputs do not have external counters, but
        // their internal counters are programmable rather than fixed */
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK + 1))
  106694:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106698:	e3530c02 	cmp	r3, #512	; 0x200
  10669c:	8a00003a 	bhi	10678c <alt_clk_divider_set+0x4f8>
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C3, div) == ALT_E_TRUE) )
  1066a0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1066a4:	e3a00010 	mov	r0, #16
  1066a8:	ebfffda0 	bl	105d30 <alt_clk_within_freq_limits>
  1066ac:	e1a03000 	mov	r3, r0
  1066b0:	e3530001 	cmp	r3, #1
  1066b4:	1a000034 	bne	10678c <alt_clk_divider_set+0x4f8>
        {
            /* if the main_qspi_clk input is selected for the qspi_clk */
            if (ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR)) ==
  1066b8:	e30430ac 	movw	r3, #16556	; 0x40ac
  1066bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1066c0:	e5933000 	ldr	r3, [r3]
  1066c4:	e2033030 	and	r3, r3, #48	; 0x30
  1066c8:	e1a03223 	lsr	r3, r3, #4
  1066cc:	e3530001 	cmp	r3, #1
  1066d0:	1a000030 	bne	106798 <alt_clk_divider_set+0x504>
                ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
            {
                restore_0 = (temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
  1066d4:	e30430a0 	movw	r3, #16544	; 0x40a0
  1066d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1066dc:	e5933000 	ldr	r3, [r3]
  1066e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1066e4:	e2033b02 	and	r3, r3, #2048	; 0x800
  1066e8:	e3530000 	cmp	r3, #0
  1066ec:	13a03001 	movne	r3, #1
  1066f0:	03a03000 	moveq	r3, #0
  1066f4:	e54b300d 	strb	r3, [fp, #-13]
                if (restore_0)             /* AND if the QSPI clock is currently enabled */
  1066f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1066fc:	e3530000 	cmp	r3, #0
  106700:	0a000004 	beq	106718 <alt_clk_divider_set+0x484>
                {
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_CLR_MSK);
  106704:	e30430a0 	movw	r3, #16544	; 0x40a0
  106708:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10670c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106710:	e3c22b02 	bic	r2, r2, #2048	; 0x800
  106714:	e5832000 	str	r2, [r3]
                    /* gate off the QSPI clock */
                }

                wrval = div - 1;
  106718:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10671c:	e2433001 	sub	r3, r3, #1
  106720:	e50b300c 	str	r3, [fp, #-12]
                /* the rest are software-managed clocks and require a reset sequence to write to */
                alt_clk_pllcounter_write(ALT_CLKMGR_MAINPLL_VCO_ADDR,
  106724:	e3a03019 	mov	r3, #25
  106728:	e58d3004 	str	r3, [sp, #4]
  10672c:	e3a03008 	mov	r3, #8
  106730:	e58d3000 	str	r3, [sp]
  106734:	e51b300c 	ldr	r3, [fp, #-12]
  106738:	e3042054 	movw	r2, #16468	; 0x4054
  10673c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106740:	e3041074 	movw	r1, #16500	; 0x4074
  106744:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106748:	e3040040 	movw	r0, #16448	; 0x4040
  10674c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106750:	ebffe938 	bl	100c38 <alt_clk_pllcounter_write>
                                         ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,
                                         wrval,
                                         ALT_CLK_PLL_RST_BIT_C3,
                                         ALT_CLKMGR_MAINPLL_VCO_OUTRST_LSB);

                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  106754:	e3a0101e 	mov	r1, #30
  106758:	e3040054 	movw	r0, #16468	; 0x4054
  10675c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106760:	ebffe8d2 	bl	100ab0 <alt_clk_mgr_wait>
                if (restore_0)
  106764:	e55b300d 	ldrb	r3, [fp, #-13]
  106768:	e3530000 	cmp	r3, #0
  10676c:	0a000003 	beq	106780 <alt_clk_divider_set+0x4ec>
                {
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106770:	e30430a0 	movw	r3, #16544	; 0x40a0
  106774:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106778:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10677c:	e5832000 	str	r2, [r3]
                    /* if the QSPI clock was gated on (enabled) before, return it to that state */
                }
                ret = ALT_E_SUCCESS;
  106780:	e3a03000 	mov	r3, #0
  106784:	e50b3008 	str	r3, [fp, #-8]
        // their internal counters are programmable rather than fixed */
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C3, div) == ALT_E_TRUE) )
        {
            /* if the main_qspi_clk input is selected for the qspi_clk */
            if (ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR)) ==
  106788:	ea000002 	b	106798 <alt_clk_divider_set+0x504>
                ret = ALT_E_SUCCESS;
            }
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  10678c:	e3e03007 	mvn	r3, #7
  106790:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  106794:	ea00072d 	b	108450 <alt_clk_divider_set+0x21bc>
  106798:	ea00072c 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_SET_MSK + 1))
  10679c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1067a0:	e3530c02 	cmp	r3, #512	; 0x200
  1067a4:	8a000080 	bhi	1069ac <alt_clk_divider_set+0x718>
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C4, div) == ALT_E_TRUE) )
  1067a8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1067ac:	e3a00011 	mov	r0, #17
  1067b0:	ebfffd5e 	bl	105d30 <alt_clk_within_freq_limits>
  1067b4:	e1a03000 	mov	r3, r0
  1067b8:	e3530001 	cmp	r3, #1
  1067bc:	1a00007a 	bne	1069ac <alt_clk_divider_set+0x718>
        {
            temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
  1067c0:	e30430ac 	movw	r3, #16556	; 0x40ac
  1067c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1067c8:	e5933000 	ldr	r3, [r3]
  1067cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  1067d0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1067d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1067d8:	e5933000 	ldr	r3, [r3]
  1067dc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

            /* do we need to gate off the SDMMC clock ? */
            if (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
  1067e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1067e4:	e2033003 	and	r3, r3, #3
  1067e8:	e3530001 	cmp	r3, #1
  1067ec:	1a000005 	bne	106808 <alt_clk_divider_set+0x574>
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK) { restore_0 = true; }
  1067f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1067f4:	e2033c01 	and	r3, r3, #256	; 0x100
  1067f8:	e3530000 	cmp	r3, #0
  1067fc:	0a000001 	beq	106808 <alt_clk_divider_set+0x574>
  106800:	e3a03001 	mov	r3, #1
  106804:	e54b300d 	strb	r3, [fp, #-13]
            }

            /* do we need to gate off the NAND clock and/or the NANDX clock? */
            if (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
  106808:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10680c:	e203300c 	and	r3, r3, #12
  106810:	e1a03123 	lsr	r3, r3, #2
  106814:	e3530001 	cmp	r3, #1
  106818:	1a00000b 	bne	10684c <alt_clk_divider_set+0x5b8>
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK) { restore_1 = true; }
  10681c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106820:	e2033c02 	and	r3, r3, #512	; 0x200
  106824:	e3530000 	cmp	r3, #0
  106828:	0a000001 	beq	106834 <alt_clk_divider_set+0x5a0>
  10682c:	e3a03001 	mov	r3, #1
  106830:	e54b300e 	strb	r3, [fp, #-14]
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK)  { restore_2 = true; }
  106834:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106838:	e2033b01 	and	r3, r3, #1024	; 0x400
  10683c:	e3530000 	cmp	r3, #0
  106840:	0a000001 	beq	10684c <alt_clk_divider_set+0x5b8>
  106844:	e3a03001 	mov	r3, #1
  106848:	e54b300f 	strb	r3, [fp, #-15]
            }

            temp = temp1;
  10684c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106850:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (restore_1 && restore_2)
  106854:	e55b300e 	ldrb	r3, [fp, #-14]
  106858:	e3530000 	cmp	r3, #0
  10685c:	0a00000d 	beq	106898 <alt_clk_divider_set+0x604>
  106860:	e55b300f 	ldrb	r3, [fp, #-15]
  106864:	e3530000 	cmp	r3, #0
  106868:	0a00000a 	beq	106898 <alt_clk_divider_set+0x604>
            {
                temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK;
  10686c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106870:	e3c33b01 	bic	r3, r3, #1024	; 0x400
  106874:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106878:	e30430a0 	movw	r3, #16544	; 0x40a0
  10687c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106880:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106884:	e5832000 	str	r2, [r3]
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
  106888:	e3a01008 	mov	r1, #8
  10688c:	e30400a0 	movw	r0, #16544	; 0x40a0
  106890:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106894:	ebffe885 	bl	100ab0 <alt_clk_mgr_wait>
                /* gate nand_clk off at least 8 MPU clock cycles before before nand_x_clk */
            }

            if (restore_0 || restore_1)
  106898:	e55b300d 	ldrb	r3, [fp, #-13]
  10689c:	e3530000 	cmp	r3, #0
  1068a0:	1a000002 	bne	1068b0 <alt_clk_divider_set+0x61c>
  1068a4:	e55b300e 	ldrb	r3, [fp, #-14]
  1068a8:	e3530000 	cmp	r3, #0
  1068ac:	0a00000f 	beq	1068f0 <alt_clk_divider_set+0x65c>
            {
                if (restore_0) { temp &= ALT_CLKMGR_PERPLL_EN_SDMMCCLK_CLR_MSK; }
  1068b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1068b4:	e3530000 	cmp	r3, #0
  1068b8:	0a000002 	beq	1068c8 <alt_clk_divider_set+0x634>
  1068bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1068c0:	e3c33c01 	bic	r3, r3, #256	; 0x100
  1068c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                if (restore_1) { temp &= ALT_CLKMGR_PERPLL_EN_NANDXCLK_CLR_MSK; }
  1068c8:	e55b300e 	ldrb	r3, [fp, #-14]
  1068cc:	e3530000 	cmp	r3, #0
  1068d0:	0a000002 	beq	1068e0 <alt_clk_divider_set+0x64c>
  1068d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1068d8:	e3c33c02 	bic	r3, r3, #512	; 0x200
  1068dc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  1068e0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1068e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1068e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1068ec:	e5832000 	str	r2, [r3]
                /* gate off sdmmc_clk and/or nand_x_clk */
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
  1068f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1068f4:	e2433001 	sub	r3, r3, #1
  1068f8:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_MAINPLL_VCO_ADDR,
  1068fc:	e3a03019 	mov	r3, #25
  106900:	e58d3004 	str	r3, [sp, #4]
  106904:	e3a03010 	mov	r3, #16
  106908:	e58d3000 	str	r3, [sp]
  10690c:	e51b300c 	ldr	r3, [fp, #-12]
  106910:	e3042058 	movw	r2, #16472	; 0x4058
  106914:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106918:	e3041074 	movw	r1, #16500	; 0x4074
  10691c:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106920:	e3040040 	movw	r0, #16448	; 0x4040
  106924:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106928:	ebffe8c2 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_MAINPLL_STAT_ADDR,
                                     ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C4,
                                     ALT_CLKMGR_MAINPLL_VCO_OUTRST_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  10692c:	e3a0101e 	mov	r1, #30
  106930:	e3040058 	movw	r0, #16472	; 0x4058
  106934:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106938:	ebffe85c 	bl	100ab0 <alt_clk_mgr_wait>

            if (restore_0 || restore_1)
  10693c:	e55b300d 	ldrb	r3, [fp, #-13]
  106940:	e3530000 	cmp	r3, #0
  106944:	1a000002 	bne	106954 <alt_clk_divider_set+0x6c0>
  106948:	e55b300e 	ldrb	r3, [fp, #-14]
  10694c:	e3530000 	cmp	r3, #0
  106950:	0a000012 	beq	1069a0 <alt_clk_divider_set+0x70c>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
  106954:	e30430a0 	movw	r3, #16544	; 0x40a0
  106958:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10695c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  106960:	e3c22b01 	bic	r2, r2, #1024	; 0x400
  106964:	e5832000 	str	r2, [r3]
                /* if the NANDX and/or SDMMC clock was gated on (enabled) before, return it to that state */
                if (restore_1 && restore_2)
  106968:	e55b300e 	ldrb	r3, [fp, #-14]
  10696c:	e3530000 	cmp	r3, #0
  106970:	0a00000a 	beq	1069a0 <alt_clk_divider_set+0x70c>
  106974:	e55b300f 	ldrb	r3, [fp, #-15]
  106978:	e3530000 	cmp	r3, #0
  10697c:	0a000007 	beq	1069a0 <alt_clk_divider_set+0x70c>
                {
                    /* wait at least 8 clock cycles to turn the nand_clk on */
                    alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
  106980:	e3a01008 	mov	r1, #8
  106984:	e30400a0 	movw	r0, #16544	; 0x40a0
  106988:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10698c:	ebffe847 	bl	100ab0 <alt_clk_mgr_wait>
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
  106990:	e30430a0 	movw	r3, #16544	; 0x40a0
  106994:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106998:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10699c:	e5832000 	str	r2, [r3]
                }
            }
            ret = ALT_E_SUCCESS;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1069a8:	ea0006a8 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  1069ac:	e3e03007 	mvn	r3, #7
  1069b0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1069b4:	ea0006a5 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_MAIN_PLL_C5:
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
  1069b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1069bc:	e3530c02 	cmp	r3, #512	; 0x200
  1069c0:	8a00003d 	bhi	106abc <alt_clk_divider_set+0x828>
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C5, div) == ALT_E_TRUE) )
  1069c4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1069c8:	e3a00012 	mov	r0, #18
  1069cc:	ebfffcd7 	bl	105d30 <alt_clk_within_freq_limits>
  1069d0:	e1a03000 	mov	r3, r0
  1069d4:	e3530001 	cmp	r3, #1
  1069d8:	1a000037 	bne	106abc <alt_clk_divider_set+0x828>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  1069dc:	e3043060 	movw	r3, #16480	; 0x4060
  1069e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1069e4:	e5933000 	ldr	r3, [r3]
  1069e8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            restore_0 = ((temp & ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK) ||
  1069ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f0:	e2033c01 	and	r3, r3, #256	; 0x100
  1069f4:	e3530000 	cmp	r3, #0
  1069f8:	1a000003 	bne	106a0c <alt_clk_divider_set+0x778>
                         (temp & ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK));
  1069fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a00:	e2033c02 	and	r3, r3, #512	; 0x200
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C5, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            restore_0 = ((temp & ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK) ||
  106a04:	e3530000 	cmp	r3, #0
  106a08:	0a000001 	beq	106a14 <alt_clk_divider_set+0x780>
  106a0c:	e3a03001 	mov	r3, #1
  106a10:	ea000000 	b	106a18 <alt_clk_divider_set+0x784>
  106a14:	e3a03000 	mov	r3, #0
  106a18:	e54b300d 	strb	r3, [fp, #-13]
  106a1c:	e55b300d 	ldrb	r3, [fp, #-13]
  106a20:	e2033001 	and	r3, r3, #1
  106a24:	e54b300d 	strb	r3, [fp, #-13]
                         (temp & ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK));
            if (restore_0)
  106a28:	e55b300d 	ldrb	r3, [fp, #-13]
  106a2c:	e3530000 	cmp	r3, #0
  106a30:	0a000004 	beq	106a48 <alt_clk_divider_set+0x7b4>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & (ALT_CLKMGR_MAINPLL_EN_CFGCLK_CLR_MSK &
  106a34:	e3043060 	movw	r3, #16480	; 0x4060
  106a38:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106a3c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106a40:	e3c22c03 	bic	r2, r2, #768	; 0x300
  106a44:	e5832000 	str	r2, [r3]
                                                                   ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_CLR_MSK)); /* clear both */
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
  106a48:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106a4c:	e2433001 	sub	r3, r3, #1
  106a50:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_MAINPLL_VCO_ADDR,
  106a54:	e3a03019 	mov	r3, #25
  106a58:	e58d3004 	str	r3, [sp, #4]
  106a5c:	e3a03020 	mov	r3, #32
  106a60:	e58d3000 	str	r3, [sp]
  106a64:	e51b300c 	ldr	r3, [fp, #-12]
  106a68:	e304205c 	movw	r2, #16476	; 0x405c
  106a6c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106a70:	e3041074 	movw	r1, #16500	; 0x4074
  106a74:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106a78:	e3040040 	movw	r0, #16448	; 0x4040
  106a7c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106a80:	ebffe86c 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_MAINPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  106a84:	e3a0101e 	mov	r1, #30
  106a88:	e304005c 	movw	r0, #16476	; 0x405c
  106a8c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106a90:	ebffe806 	bl	100ab0 <alt_clk_mgr_wait>

            if (restore_0)
  106a94:	e55b300d 	ldrb	r3, [fp, #-13]
  106a98:	e3530000 	cmp	r3, #0
  106a9c:	0a000003 	beq	106ab0 <alt_clk_divider_set+0x81c>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  106aa0:	e3043060 	movw	r3, #16480	; 0x4060
  106aa4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106aa8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106aac:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  106ab0:	e3a03000 	mov	r3, #0
  106ab4:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  106ab8:	ea000664 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  106abc:	e3e03007 	mvn	r3, #7
  106ac0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  106ac4:	ea000661 	b	108450 <alt_clk_divider_set+0x21bc>

        /* Peripheral PLL outputs */
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_SET_MSK + 1))
  106ac8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106acc:	e3530c02 	cmp	r3, #512	; 0x200
  106ad0:	8a000034 	bhi	106ba8 <alt_clk_divider_set+0x914>
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C0, div) == ALT_E_TRUE) )
  106ad4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  106ad8:	e3a00025 	mov	r0, #37	; 0x25
  106adc:	ebfffc93 	bl	105d30 <alt_clk_within_freq_limits>
  106ae0:	e1a03000 	mov	r3, r0
  106ae4:	e3530001 	cmp	r3, #1
  106ae8:	1a00002e 	bne	106ba8 <alt_clk_divider_set+0x914>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  106aec:	e30430a0 	movw	r3, #16544	; 0x40a0
  106af0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106af4:	e5933000 	ldr	r3, [r3]
  106af8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            restore_0 = temp & ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK;
  106afc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106b00:	e2033001 	and	r3, r3, #1
  106b04:	e3530000 	cmp	r3, #0
  106b08:	13a03001 	movne	r3, #1
  106b0c:	03a03000 	moveq	r3, #0
  106b10:	e54b300d 	strb	r3, [fp, #-13]

            if (restore_0)
  106b14:	e55b300d 	ldrb	r3, [fp, #-13]
  106b18:	e3530000 	cmp	r3, #0
  106b1c:	0a000004 	beq	106b34 <alt_clk_divider_set+0x8a0>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_EMAC0CLK_CLR_MSK);
  106b20:	e30430a0 	movw	r3, #16544	; 0x40a0
  106b24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106b28:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106b2c:	e3c22001 	bic	r2, r2, #1
  106b30:	e5832000 	str	r2, [r3]
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
  106b34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b38:	e2433001 	sub	r3, r3, #1
  106b3c:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  106b40:	e3a03019 	mov	r3, #25
  106b44:	e58d3004 	str	r3, [sp, #4]
  106b48:	e3a03001 	mov	r3, #1
  106b4c:	e58d3000 	str	r3, [sp]
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e3042088 	movw	r2, #16520	; 0x4088
  106b58:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106b5c:	e30410b0 	movw	r1, #16560	; 0x40b0
  106b60:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106b64:	e3040080 	movw	r0, #16512	; 0x4080
  106b68:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106b6c:	ebffe831 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C0,
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  106b70:	e3a0101e 	mov	r1, #30
  106b74:	e3040088 	movw	r0, #16520	; 0x4088
  106b78:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106b7c:	ebffe7cb 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  106b80:	e55b300d 	ldrb	r3, [fp, #-13]
  106b84:	e3530000 	cmp	r3, #0
  106b88:	0a000003 	beq	106b9c <alt_clk_divider_set+0x908>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106b8c:	e30430a0 	movw	r3, #16544	; 0x40a0
  106b90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106b94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106b98:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  106b9c:	e3a03000 	mov	r3, #0
  106ba0:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  106ba4:	ea000629 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  106ba8:	e3e03007 	mvn	r3, #7
  106bac:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  106bb0:	ea000626 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_SET_MSK + 1))
  106bb4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106bb8:	e3530c02 	cmp	r3, #512	; 0x200
  106bbc:	8a000034 	bhi	106c94 <alt_clk_divider_set+0xa00>
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C1, div) == ALT_E_TRUE) )
  106bc0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  106bc4:	e3a00026 	mov	r0, #38	; 0x26
  106bc8:	ebfffc58 	bl	105d30 <alt_clk_within_freq_limits>
  106bcc:	e1a03000 	mov	r3, r0
  106bd0:	e3530001 	cmp	r3, #1
  106bd4:	1a00002e 	bne	106c94 <alt_clk_divider_set+0xa00>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  106bd8:	e30430a0 	movw	r3, #16544	; 0x40a0
  106bdc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106be0:	e5933000 	ldr	r3, [r3]
  106be4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            restore_0 = temp & ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK;
  106be8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106bec:	e2033002 	and	r3, r3, #2
  106bf0:	e3530000 	cmp	r3, #0
  106bf4:	13a03001 	movne	r3, #1
  106bf8:	03a03000 	moveq	r3, #0
  106bfc:	e54b300d 	strb	r3, [fp, #-13]

            if (restore_0)
  106c00:	e55b300d 	ldrb	r3, [fp, #-13]
  106c04:	e3530000 	cmp	r3, #0
  106c08:	0a000004 	beq	106c20 <alt_clk_divider_set+0x98c>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_EMAC1CLK_CLR_MSK);
  106c0c:	e30430a0 	movw	r3, #16544	; 0x40a0
  106c10:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106c14:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106c18:	e3c22002 	bic	r2, r2, #2
  106c1c:	e5832000 	str	r2, [r3]
            }
            /* now write the new divisor ratio */
            wrval = div - 1;
  106c20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106c24:	e2433001 	sub	r3, r3, #1
  106c28:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  106c2c:	e3a03019 	mov	r3, #25
  106c30:	e58d3004 	str	r3, [sp, #4]
  106c34:	e3a03002 	mov	r3, #2
  106c38:	e58d3000 	str	r3, [sp]
  106c3c:	e51b300c 	ldr	r3, [fp, #-12]
  106c40:	e304208c 	movw	r2, #16524	; 0x408c
  106c44:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106c48:	e30410b0 	movw	r1, #16560	; 0x40b0
  106c4c:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106c50:	e3040080 	movw	r0, #16512	; 0x4080
  106c54:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106c58:	ebffe7f6 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C1,
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  106c5c:	e3a0101e 	mov	r1, #30
  106c60:	e304008c 	movw	r0, #16524	; 0x408c
  106c64:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106c68:	ebffe790 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e3530000 	cmp	r3, #0
  106c74:	0a000003 	beq	106c88 <alt_clk_divider_set+0x9f4>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106c78:	e30430a0 	movw	r3, #16544	; 0x40a0
  106c7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106c80:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106c84:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  106c88:	e3a03000 	mov	r3, #0
  106c8c:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  106c90:	ea0005ee 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  106c94:	e3e03007 	mvn	r3, #7
  106c98:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  106c9c:	ea0005eb 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_PERIPHERAL_PLL_C2:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_SET_MSK + 1))
  106ca0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106ca4:	e3530c02 	cmp	r3, #512	; 0x200
  106ca8:	8a00003d 	bhi	106da4 <alt_clk_divider_set+0xb10>
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C2, div) == ALT_E_TRUE) )
  106cac:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  106cb0:	e3a00027 	mov	r0, #39	; 0x27
  106cb4:	ebfffc1d 	bl	105d30 <alt_clk_within_freq_limits>
  106cb8:	e1a03000 	mov	r3, r0
  106cbc:	e3530001 	cmp	r3, #1
  106cc0:	1a000037 	bne	106da4 <alt_clk_divider_set+0xb10>
        {
            temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  106cc4:	e30430ac 	movw	r3, #16556	; 0x40ac
  106cc8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106ccc:	e5933000 	ldr	r3, [r3]
  106cd0:	e2033030 	and	r3, r3, #48	; 0x30
  106cd4:	e1a03223 	lsr	r3, r3, #4
  106cd8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
  106cdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106ce0:	e3530002 	cmp	r3, #2
  106ce4:	1a000011 	bne	106d30 <alt_clk_divider_set+0xa9c>
            {
                /* if qspi source is set to Peripheral PLL C2 */
                temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  106ce8:	e30430a0 	movw	r3, #16544	; 0x40a0
  106cec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106cf0:	e5933000 	ldr	r3, [r3]
  106cf4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                /* and if qspi_clk is enabled */
                restore_0 = temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
  106cf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106cfc:	e2033b02 	and	r3, r3, #2048	; 0x800
  106d00:	e3530000 	cmp	r3, #0
  106d04:	13a03001 	movne	r3, #1
  106d08:	03a03000 	moveq	r3, #0
  106d0c:	e54b300d 	strb	r3, [fp, #-13]
                if (restore_0)
  106d10:	e55b300d 	ldrb	r3, [fp, #-13]
  106d14:	e3530000 	cmp	r3, #0
  106d18:	0a000004 	beq	106d30 <alt_clk_divider_set+0xa9c>
                {
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_CLR_MSK);
  106d1c:	e30430a0 	movw	r3, #16544	; 0x40a0
  106d20:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106d24:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106d28:	e3c22b02 	bic	r2, r2, #2048	; 0x800
  106d2c:	e5832000 	str	r2, [r3]
                    /* gate it off */
                }
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
  106d30:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106d34:	e2433001 	sub	r3, r3, #1
  106d38:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  106d3c:	e3a03019 	mov	r3, #25
  106d40:	e58d3004 	str	r3, [sp, #4]
  106d44:	e3a03004 	mov	r3, #4
  106d48:	e58d3000 	str	r3, [sp]
  106d4c:	e51b300c 	ldr	r3, [fp, #-12]
  106d50:	e3042090 	movw	r2, #16528	; 0x4090
  106d54:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106d58:	e30410b0 	movw	r1, #16560	; 0x40b0
  106d5c:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106d60:	e3040080 	movw	r0, #16512	; 0x4080
  106d64:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106d68:	ebffe7b2 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C2,
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  106d6c:	e3a0101e 	mov	r1, #30
  106d70:	e3040090 	movw	r0, #16528	; 0x4090
  106d74:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106d78:	ebffe74c 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  106d7c:	e55b300d 	ldrb	r3, [fp, #-13]
  106d80:	e3530000 	cmp	r3, #0
  106d84:	0a000003 	beq	106d98 <alt_clk_divider_set+0xb04>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106d88:	e30430a0 	movw	r3, #16544	; 0x40a0
  106d8c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106d90:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106d94:	e5832000 	str	r2, [r3]
                /* if the clock was gated on (enabled) before, return it to that state */
            }
            ret = ALT_E_SUCCESS;
  106d98:	e3a03000 	mov	r3, #0
  106d9c:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  106da0:	ea0005aa 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  106da4:	e3e03007 	mvn	r3, #7
  106da8:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  106dac:	ea0005a7 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_PERIPHERAL_PLL_C3:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_SET_MSK + 1))
  106db0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106db4:	e3530c02 	cmp	r3, #512	; 0x200
  106db8:	8a00008b 	bhi	106fec <alt_clk_divider_set+0xd58>
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C3, div) == ALT_E_TRUE) )
  106dbc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  106dc0:	e3a00028 	mov	r0, #40	; 0x28
  106dc4:	ebfffbd9 	bl	105d30 <alt_clk_within_freq_limits>
  106dc8:	e1a03000 	mov	r3, r0
  106dcc:	e3530001 	cmp	r3, #1
  106dd0:	1a000085 	bne	106fec <alt_clk_divider_set+0xd58>
        {
            /* first, are the clock MUX input selections currently set to use the clock we want to change? */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
  106dd4:	e30430ac 	movw	r3, #16556	; 0x40ac
  106dd8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106ddc:	e5933000 	ldr	r3, [r3]
  106de0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            restore_0 = (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK);
  106de4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106de8:	e2033003 	and	r3, r3, #3
  106dec:	e3530002 	cmp	r3, #2
  106df0:	03a03001 	moveq	r3, #1
  106df4:	13a03000 	movne	r3, #0
  106df8:	e54b300d 	strb	r3, [fp, #-13]
            restore_1 = restore_2 = (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
  106dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106e00:	e203300c 	and	r3, r3, #12
  106e04:	e1a03123 	lsr	r3, r3, #2
  106e08:	e3530002 	cmp	r3, #2
  106e0c:	03a03001 	moveq	r3, #1
  106e10:	13a03000 	movne	r3, #0
  106e14:	e54b300f 	strb	r3, [fp, #-15]
  106e18:	e55b300f 	ldrb	r3, [fp, #-15]
  106e1c:	e54b300e 	strb	r3, [fp, #-14]

            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  106e20:	e30430a0 	movw	r3, #16544	; 0x40a0
  106e24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106e28:	e5933000 	ldr	r3, [r3]
  106e2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  106e30:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            restore_0 = restore_0 && (temp & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
  106e34:	e55b300d 	ldrb	r3, [fp, #-13]
  106e38:	e3530000 	cmp	r3, #0
  106e3c:	0a000005 	beq	106e58 <alt_clk_divider_set+0xbc4>
  106e40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106e44:	e2033c01 	and	r3, r3, #256	; 0x100
  106e48:	e3530000 	cmp	r3, #0
  106e4c:	0a000001 	beq	106e58 <alt_clk_divider_set+0xbc4>
  106e50:	e3a03001 	mov	r3, #1
  106e54:	ea000000 	b	106e5c <alt_clk_divider_set+0xbc8>
  106e58:	e3a03000 	mov	r3, #0
  106e5c:	e54b300d 	strb	r3, [fp, #-13]
  106e60:	e55b300d 	ldrb	r3, [fp, #-13]
  106e64:	e2033001 	and	r3, r3, #1
  106e68:	e54b300d 	strb	r3, [fp, #-13]
            restore_1 = restore_1 && (temp & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
  106e6c:	e55b300e 	ldrb	r3, [fp, #-14]
  106e70:	e3530000 	cmp	r3, #0
  106e74:	0a000005 	beq	106e90 <alt_clk_divider_set+0xbfc>
  106e78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106e7c:	e2033c02 	and	r3, r3, #512	; 0x200
  106e80:	e3530000 	cmp	r3, #0
  106e84:	0a000001 	beq	106e90 <alt_clk_divider_set+0xbfc>
  106e88:	e3a03001 	mov	r3, #1
  106e8c:	ea000000 	b	106e94 <alt_clk_divider_set+0xc00>
  106e90:	e3a03000 	mov	r3, #0
  106e94:	e54b300e 	strb	r3, [fp, #-14]
  106e98:	e55b300e 	ldrb	r3, [fp, #-14]
  106e9c:	e2033001 	and	r3, r3, #1
  106ea0:	e54b300e 	strb	r3, [fp, #-14]
            restore_2 = restore_2 && (temp & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
  106ea4:	e55b300f 	ldrb	r3, [fp, #-15]
  106ea8:	e3530000 	cmp	r3, #0
  106eac:	0a000005 	beq	106ec8 <alt_clk_divider_set+0xc34>
  106eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106eb4:	e2033b01 	and	r3, r3, #1024	; 0x400
  106eb8:	e3530000 	cmp	r3, #0
  106ebc:	0a000001 	beq	106ec8 <alt_clk_divider_set+0xc34>
  106ec0:	e3a03001 	mov	r3, #1
  106ec4:	ea000000 	b	106ecc <alt_clk_divider_set+0xc38>
  106ec8:	e3a03000 	mov	r3, #0
  106ecc:	e54b300f 	strb	r3, [fp, #-15]
  106ed0:	e55b300f 	ldrb	r3, [fp, #-15]
  106ed4:	e2033001 	and	r3, r3, #1
  106ed8:	e54b300f 	strb	r3, [fp, #-15]

            /* gate off the clocks that depend on the clock divider that we want to change */
            if (restore_2) { temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK; }
  106edc:	e55b300f 	ldrb	r3, [fp, #-15]
  106ee0:	e3530000 	cmp	r3, #0
  106ee4:	0a000002 	beq	106ef4 <alt_clk_divider_set+0xc60>
  106ee8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106eec:	e3c33b01 	bic	r3, r3, #1024	; 0x400
  106ef0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (restore_0) { temp &= ALT_CLKMGR_PERPLL_EN_SDMMCCLK_CLR_MSK; }
  106ef4:	e55b300d 	ldrb	r3, [fp, #-13]
  106ef8:	e3530000 	cmp	r3, #0
  106efc:	0a000002 	beq	106f0c <alt_clk_divider_set+0xc78>
  106f00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106f04:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106f08:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106f0c:	e30430a0 	movw	r3, #16544	; 0x40a0
  106f10:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106f14:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106f18:	e5832000 	str	r2, [r3]

            /* the NAND clock must be gated off before the NANDX clock, */
            if (restore_1)
  106f1c:	e55b300e 	ldrb	r3, [fp, #-14]
  106f20:	e3530000 	cmp	r3, #0
  106f24:	0a00000a 	beq	106f54 <alt_clk_divider_set+0xcc0>
            {
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
  106f28:	e3a01008 	mov	r1, #8
  106f2c:	e3040094 	movw	r0, #16532	; 0x4094
  106f30:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106f34:	ebffe6dd 	bl	100ab0 <alt_clk_mgr_wait>
                temp &= ALT_CLKMGR_PERPLL_EN_NANDXCLK_CLR_MSK;
  106f38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106f3c:	e3c33c02 	bic	r3, r3, #512	; 0x200
  106f40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  106f44:	e30430a0 	movw	r3, #16544	; 0x40a0
  106f48:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106f4c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  106f50:	e5832000 	str	r2, [r3]
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
  106f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106f58:	e2433001 	sub	r3, r3, #1
  106f5c:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  106f60:	e3a03019 	mov	r3, #25
  106f64:	e58d3004 	str	r3, [sp, #4]
  106f68:	e3a03008 	mov	r3, #8
  106f6c:	e58d3000 	str	r3, [sp]
  106f70:	e51b300c 	ldr	r3, [fp, #-12]
  106f74:	e3042094 	movw	r2, #16532	; 0x4094
  106f78:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  106f7c:	e30410b0 	movw	r1, #16560	; 0x40b0
  106f80:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  106f84:	e3040080 	movw	r0, #16512	; 0x4080
  106f88:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106f8c:	ebffe729 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C3,
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );
  106f90:	e3a0101e 	mov	r1, #30
  106f94:	e3040094 	movw	r0, #16532	; 0x4094
  106f98:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106f9c:	ebffe6c3 	bl	100ab0 <alt_clk_mgr_wait>

            /* NAND clock and NAND_X clock cannot be written together, must be a set sequence with a delay */
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
  106fa0:	e30430a0 	movw	r3, #16544	; 0x40a0
  106fa4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106fa8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  106fac:	e3c22b01 	bic	r2, r2, #1024	; 0x400
  106fb0:	e5832000 	str	r2, [r3]
            if (restore_2)
  106fb4:	e55b300f 	ldrb	r3, [fp, #-15]
  106fb8:	e3530000 	cmp	r3, #0
  106fbc:	0a000007 	beq	106fe0 <alt_clk_divider_set+0xd4c>
            {
                /* the NANDX clock must be gated on before the NAND clock. */
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK );
  106fc0:	e3a01008 	mov	r1, #8
  106fc4:	e3040094 	movw	r0, #16532	; 0x4094
  106fc8:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  106fcc:	ebffe6b7 	bl	100ab0 <alt_clk_mgr_wait>
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
  106fd0:	e30430a0 	movw	r3, #16544	; 0x40a0
  106fd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  106fd8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  106fdc:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  106fe0:	e3a03000 	mov	r3, #0
  106fe4:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  106fe8:	ea000518 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  106fec:	e3e03007 	mvn	r3, #7
  106ff0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  106ff4:	ea000515 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_PERIPHERAL_PLL_C4:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_SET_MSK + 1))
  106ff8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106ffc:	e3530c02 	cmp	r3, #512	; 0x200
  107000:	8a000082 	bhi	107210 <alt_clk_divider_set+0xf7c>
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C4, div) == ALT_E_TRUE) )
  107004:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107008:	e3a00029 	mov	r0, #41	; 0x29
  10700c:	ebfffb47 	bl	105d30 <alt_clk_within_freq_limits>
  107010:	e1a03000 	mov	r3, r0
  107014:	e3530001 	cmp	r3, #1
  107018:	1a00007c 	bne	107210 <alt_clk_divider_set+0xf7c>
        {
            /* look at the L4 set of clock gates first */
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  10701c:	e3043070 	movw	r3, #16496	; 0x4070
  107020:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            restore_0 = (ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL);
  10702c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107030:	e2033001 	and	r3, r3, #1
  107034:	e3530000 	cmp	r3, #0
  107038:	13a03001 	movne	r3, #1
  10703c:	03a03000 	moveq	r3, #0
  107040:	e54b300d 	strb	r3, [fp, #-13]
            restore_1 = (ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL);
  107044:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107048:	e2033002 	and	r3, r3, #2
  10704c:	e1a030a3 	lsr	r3, r3, #1
  107050:	e3530001 	cmp	r3, #1
  107054:	03a03001 	moveq	r3, #1
  107058:	13a03000 	movne	r3, #0
  10705c:	e54b300e 	strb	r3, [fp, #-14]
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  107060:	e30430a0 	movw	r3, #16544	; 0x40a0
  107064:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107068:	e5933000 	ldr	r3, [r3]
  10706c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            restore_0 = restore_0 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
  107070:	e55b300d 	ldrb	r3, [fp, #-13]
  107074:	e3530000 	cmp	r3, #0
  107078:	0a000005 	beq	107094 <alt_clk_divider_set+0xe00>
  10707c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107080:	e2033004 	and	r3, r3, #4
  107084:	e3530000 	cmp	r3, #0
  107088:	0a000001 	beq	107094 <alt_clk_divider_set+0xe00>
  10708c:	e3a03001 	mov	r3, #1
  107090:	ea000000 	b	107098 <alt_clk_divider_set+0xe04>
  107094:	e3a03000 	mov	r3, #0
  107098:	e54b300d 	strb	r3, [fp, #-13]
  10709c:	e55b300d 	ldrb	r3, [fp, #-13]
  1070a0:	e2033001 	and	r3, r3, #1
  1070a4:	e54b300d 	strb	r3, [fp, #-13]
            restore_1 = restore_1 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
  1070a8:	e55b300e 	ldrb	r3, [fp, #-14]
  1070ac:	e3530000 	cmp	r3, #0
  1070b0:	0a000005 	beq	1070cc <alt_clk_divider_set+0xe38>
  1070b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1070b8:	e2033008 	and	r3, r3, #8
  1070bc:	e3530000 	cmp	r3, #0
  1070c0:	0a000001 	beq	1070cc <alt_clk_divider_set+0xe38>
  1070c4:	e3a03001 	mov	r3, #1
  1070c8:	ea000000 	b	1070d0 <alt_clk_divider_set+0xe3c>
  1070cc:	e3a03000 	mov	r3, #0
  1070d0:	e54b300e 	strb	r3, [fp, #-14]
  1070d4:	e55b300e 	ldrb	r3, [fp, #-14]
  1070d8:	e2033001 	and	r3, r3, #1
  1070dc:	e54b300e 	strb	r3, [fp, #-14]

            /* if the l4_sp and l4_mp clocks are not set to use the periph_base_clk
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  1070e0:	e3043060 	movw	r3, #16480	; 0x4060
  1070e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1070e8:	e5933000 	ldr	r3, [r3]
  1070ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
  1070f0:	e55b300d 	ldrb	r3, [fp, #-13]
  1070f4:	e3530000 	cmp	r3, #0
  1070f8:	0a000002 	beq	107108 <alt_clk_divider_set+0xe74>
  1070fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107100:	e3c33004 	bic	r3, r3, #4
  107104:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
  107108:	e55b300e 	ldrb	r3, [fp, #-14]
  10710c:	e3530000 	cmp	r3, #0
  107110:	0a000002 	beq	107120 <alt_clk_divider_set+0xe8c>
  107114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107118:	e3c33008 	bic	r3, r3, #8
  10711c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  107120:	e3043060 	movw	r3, #16480	; 0x4060
  107124:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107128:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10712c:	e5832000 	str	r2, [r3]

            /* now look at the C4 direct set of clock gates
            // first, create a mask of the C4 direct set of clock gate enables */
            temp = (  ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK
  107130:	e3a0307c 	mov	r3, #124	; 0x7c
  107134:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                    | ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK
                    | ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK
                    | ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK );

            /* gate off all the C4 Direct set of clocks */
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ~temp);
  107138:	e30430a0 	movw	r3, #16544	; 0x40a0
  10713c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107140:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107144:	e1e01002 	mvn	r1, r2
  107148:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10714c:	e0022001 	and	r2, r2, r1
  107150:	e5832000 	str	r2, [r3]

            /* change the clock divider ratio - the reason we're here */
            wrval = div - 1;
  107154:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107158:	e2433001 	sub	r3, r3, #1
  10715c:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  107160:	e3a03019 	mov	r3, #25
  107164:	e58d3004 	str	r3, [sp, #4]
  107168:	e3a03010 	mov	r3, #16
  10716c:	e58d3000 	str	r3, [sp]
  107170:	e51b300c 	ldr	r3, [fp, #-12]
  107174:	e3042098 	movw	r2, #16536	; 0x4098
  107178:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10717c:	e30410b0 	movw	r1, #16560	; 0x40b0
  107180:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  107184:	e3040080 	movw	r0, #16512	; 0x4080
  107188:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10718c:	ebffe6a9 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_PERPLL_PERBASECLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C4,
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );
  107190:	e3a0101e 	mov	r1, #30
  107194:	e3040098 	movw	r0, #16536	; 0x4098
  107198:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10719c:	ebffe643 	bl	100ab0 <alt_clk_mgr_wait>

            /* gate the affected clocks that were on before back on - both sets of gates */
            temp = (restore_0) ? ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK : 0;
  1071a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1071a4:	e3530000 	cmp	r3, #0
  1071a8:	0a000001 	beq	1071b4 <alt_clk_divider_set+0xf20>
  1071ac:	e3a03004 	mov	r3, #4
  1071b0:	ea000000 	b	1071b8 <alt_clk_divider_set+0xf24>
  1071b4:	e3a03000 	mov	r3, #0
  1071b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (restore_1) { temp |= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK; }
  1071bc:	e55b300e 	ldrb	r3, [fp, #-14]
  1071c0:	e3530000 	cmp	r3, #0
  1071c4:	0a000002 	beq	1071d4 <alt_clk_divider_set+0xf40>
  1071c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071cc:	e3833008 	orr	r3, r3, #8
  1071d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  1071d4:	e3043060 	movw	r3, #16480	; 0x4060
  1071d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1071dc:	e3042060 	movw	r2, #16480	; 0x4060
  1071e0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1071e4:	e5921000 	ldr	r1, [r2]
  1071e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1071ec:	e1812002 	orr	r2, r1, r2
  1071f0:	e5832000 	str	r2, [r3]
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
  1071f4:	e30430a0 	movw	r3, #16544	; 0x40a0
  1071f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1071fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107200:	e5832000 	str	r2, [r3]
            ret = ALT_E_SUCCESS;
  107204:	e3a03000 	mov	r3, #0
  107208:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  10720c:	ea00048f 	b	108450 <alt_clk_divider_set+0x21bc>
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107210:	e3e03007 	mvn	r3, #7
  107214:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107218:	ea00048c 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        if (   (div <= (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_SET_MSK + 1))
  10721c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107220:	e3530c02 	cmp	r3, #512	; 0x200
  107224:	8a000034 	bhi	1072fc <alt_clk_divider_set+0x1068>
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C5, div) == ALT_E_TRUE) )
  107228:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  10722c:	e3a0002a 	mov	r0, #42	; 0x2a
  107230:	ebfffabe 	bl	105d30 <alt_clk_within_freq_limits>
  107234:	e1a03000 	mov	r3, r0
  107238:	e3530001 	cmp	r3, #1
  10723c:	1a00002e 	bne	1072fc <alt_clk_divider_set+0x1068>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  107240:	e30430a0 	movw	r3, #16544	; 0x40a0
  107244:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107248:	e5933000 	ldr	r3, [r3]
  10724c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            restore_0 = temp & ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK;
  107250:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107254:	e2033080 	and	r3, r3, #128	; 0x80
  107258:	e3530000 	cmp	r3, #0
  10725c:	13a03001 	movne	r3, #1
  107260:	03a03000 	moveq	r3, #0
  107264:	e54b300d 	strb	r3, [fp, #-13]
            if (restore_0)
  107268:	e55b300d 	ldrb	r3, [fp, #-13]
  10726c:	e3530000 	cmp	r3, #0
  107270:	0a000004 	beq	107288 <alt_clk_divider_set+0xff4>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_CLR_MSK);
  107274:	e30430a0 	movw	r3, #16544	; 0x40a0
  107278:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10727c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107280:	e3c22080 	bic	r2, r2, #128	; 0x80
  107284:	e5832000 	str	r2, [r3]
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
  107288:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10728c:	e2433001 	sub	r3, r3, #1
  107290:	e50b300c 	str	r3, [fp, #-12]
            alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  107294:	e3a03019 	mov	r3, #25
  107298:	e58d3004 	str	r3, [sp, #4]
  10729c:	e3a03020 	mov	r3, #32
  1072a0:	e58d3000 	str	r3, [sp]
  1072a4:	e51b300c 	ldr	r3, [fp, #-12]
  1072a8:	e304209c 	movw	r2, #16540	; 0x409c
  1072ac:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1072b0:	e30410b0 	movw	r1, #16560	; 0x40b0
  1072b4:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  1072b8:	e3040080 	movw	r0, #16512	; 0x4080
  1072bc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1072c0:	ebffe65c 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );
  1072c4:	e3a0101e 	mov	r1, #30
  1072c8:	e30400a0 	movw	r0, #16544	; 0x40a0
  1072cc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1072d0:	ebffe5f6 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0) { alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp); }
  1072d4:	e55b300d 	ldrb	r3, [fp, #-13]
  1072d8:	e3530000 	cmp	r3, #0
  1072dc:	0a000003 	beq	1072f0 <alt_clk_divider_set+0x105c>
  1072e0:	e30430a0 	movw	r3, #16544	; 0x40a0
  1072e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1072e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1072ec:	e5832000 	str	r2, [r3]
            ret = ALT_E_SUCCESS;
  1072f0:	e3a03000 	mov	r3, #0
  1072f4:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1072f8:	ea000454 	b	108450 <alt_clk_divider_set+0x21bc>
            if (restore_0) { alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp); }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  1072fc:	e3e03007 	mvn	r3, #7
  107300:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107304:	ea000451 	b	108450 <alt_clk_divider_set+0x21bc>

        /* SDRAM PLL outputs */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET_MSK + 1))
  107308:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10730c:	e3530c02 	cmp	r3, #512	; 0x200
  107310:	8a00002d 	bhi	1073cc <alt_clk_divider_set+0x1138>
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C0, div) == ALT_E_TRUE) )
  107314:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107318:	e3a00037 	mov	r0, #55	; 0x37
  10731c:	ebfffa83 	bl	105d30 <alt_clk_within_freq_limits>
  107320:	e1a03000 	mov	r3, r0
  107324:	e3530001 	cmp	r3, #1
  107328:	1a000027 	bne	1073cc <alt_clk_divider_set+0x1138>
        {
            wrval = div - 1;
  10732c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107330:	e2433001 	sub	r3, r3, #1
  107334:	e50b300c 	str	r3, [fp, #-12]
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
  107338:	e30430d8 	movw	r3, #16600	; 0x40d8
  10733c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107340:	e5933000 	ldr	r3, [r3]
  107344:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK)
  107348:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10734c:	e2033001 	and	r3, r3, #1
  107350:	e3530000 	cmp	r3, #0
  107354:	0a000006 	beq	107374 <alt_clk_divider_set+0x10e0>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_CLR_MSK);
  107358:	e30430d8 	movw	r3, #16600	; 0x40d8
  10735c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107360:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107364:	e3c22001 	bic	r2, r2, #1
  107368:	e5832000 	str	r2, [r3]
                restore_0 = true;
  10736c:	e3a03001 	mov	r3, #1
  107370:	e54b300d 	strb	r3, [fp, #-13]
            }

            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR,
  107374:	e3a03000 	mov	r3, #0
  107378:	e58d3004 	str	r3, [sp, #4]
  10737c:	e3a03001 	mov	r3, #1
  107380:	e58d3000 	str	r3, [sp]
  107384:	e51b300c 	ldr	r3, [fp, #-12]
  107388:	e30420c8 	movw	r2, #16584	; 0x40c8
  10738c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107390:	e30410dc 	movw	r1, #16604	; 0x40dc
  107394:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  107398:	e30400c0 	movw	r0, #16576	; 0x40c0
  10739c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1073a0:	ebffe624 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C0,
                                     ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_LSB);
            if (restore_0)
  1073a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1073a8:	e3530000 	cmp	r3, #0
  1073ac:	0a000003 	beq	1073c0 <alt_clk_divider_set+0x112c>
            {
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp);         /* which has the enable bit set */
  1073b0:	e30430d8 	movw	r3, #16600	; 0x40d8
  1073b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1073b8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1073bc:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  1073c0:	e3a03000 	mov	r3, #0
  1073c4:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1073c8:	ea000420 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  1073cc:	e3e03007 	mvn	r3, #7
  1073d0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1073d4:	ea00041d 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET_MSK + 1))
  1073d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1073dc:	e3530c02 	cmp	r3, #512	; 0x200
  1073e0:	8a00002d 	bhi	10749c <alt_clk_divider_set+0x1208>
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C1, div) == ALT_E_TRUE) )
  1073e4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1073e8:	e3a00038 	mov	r0, #56	; 0x38
  1073ec:	ebfffa4f 	bl	105d30 <alt_clk_within_freq_limits>
  1073f0:	e1a03000 	mov	r3, r0
  1073f4:	e3530001 	cmp	r3, #1
  1073f8:	1a000027 	bne	10749c <alt_clk_divider_set+0x1208>
        {
            wrval = div - 1;
  1073fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107400:	e2433001 	sub	r3, r3, #1
  107404:	e50b300c 	str	r3, [fp, #-12]
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
  107408:	e30430d8 	movw	r3, #16600	; 0x40d8
  10740c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107410:	e5933000 	ldr	r3, [r3]
  107414:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK)
  107418:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10741c:	e2033002 	and	r3, r3, #2
  107420:	e3530000 	cmp	r3, #0
  107424:	0a000006 	beq	107444 <alt_clk_divider_set+0x11b0>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_CLR_MSK);
  107428:	e30430d8 	movw	r3, #16600	; 0x40d8
  10742c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107430:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107434:	e3c22002 	bic	r2, r2, #2
  107438:	e5832000 	str	r2, [r3]
                restore_0 = true;
  10743c:	e3a03001 	mov	r3, #1
  107440:	e54b300d 	strb	r3, [fp, #-13]
            }

            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR,
  107444:	e3a03019 	mov	r3, #25
  107448:	e58d3004 	str	r3, [sp, #4]
  10744c:	e3a03002 	mov	r3, #2
  107450:	e58d3000 	str	r3, [sp]
  107454:	e51b300c 	ldr	r3, [fp, #-12]
  107458:	e30420cc 	movw	r2, #16588	; 0x40cc
  10745c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107460:	e30410dc 	movw	r1, #16604	; 0x40dc
  107464:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  107468:	e30400c0 	movw	r0, #16576	; 0x40c0
  10746c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107470:	ebffe5f0 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C1,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
  107474:	e55b300d 	ldrb	r3, [fp, #-13]
  107478:	e3530000 	cmp	r3, #0
  10747c:	0a000003 	beq	107490 <alt_clk_divider_set+0x11fc>
            {
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp);         /* which has the enable bit set */
  107480:	e30430d8 	movw	r3, #16600	; 0x40d8
  107484:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107488:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10748c:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107490:	e3a03000 	mov	r3, #0
  107494:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107498:	ea0003ec 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  10749c:	e3e03007 	mvn	r3, #7
  1074a0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1074a4:	ea0003e9 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET_MSK + 1))
  1074a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1074ac:	e3530c02 	cmp	r3, #512	; 0x200
  1074b0:	8a00002d 	bhi	10756c <alt_clk_divider_set+0x12d8>
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C2, div) == ALT_E_TRUE) )
  1074b4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1074b8:	e3a00039 	mov	r0, #57	; 0x39
  1074bc:	ebfffa1b 	bl	105d30 <alt_clk_within_freq_limits>
  1074c0:	e1a03000 	mov	r3, r0
  1074c4:	e3530001 	cmp	r3, #1
  1074c8:	1a000027 	bne	10756c <alt_clk_divider_set+0x12d8>
        {
            wrval = div - 1;
  1074cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1074d0:	e2433001 	sub	r3, r3, #1
  1074d4:	e50b300c 	str	r3, [fp, #-12]
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
  1074d8:	e30430d8 	movw	r3, #16600	; 0x40d8
  1074dc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1074e0:	e5933000 	ldr	r3, [r3]
  1074e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK)
  1074e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1074ec:	e2033004 	and	r3, r3, #4
  1074f0:	e3530000 	cmp	r3, #0
  1074f4:	0a000006 	beq	107514 <alt_clk_divider_set+0x1280>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_CLR_MSK);
  1074f8:	e30430d8 	movw	r3, #16600	; 0x40d8
  1074fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107500:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107504:	e3c22004 	bic	r2, r2, #4
  107508:	e5832000 	str	r2, [r3]
                restore_0 = true;
  10750c:	e3a03001 	mov	r3, #1
  107510:	e54b300d 	strb	r3, [fp, #-13]
            }

            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR,
  107514:	e3a03019 	mov	r3, #25
  107518:	e58d3004 	str	r3, [sp, #4]
  10751c:	e3a03004 	mov	r3, #4
  107520:	e58d3000 	str	r3, [sp]
  107524:	e51b300c 	ldr	r3, [fp, #-12]
  107528:	e30420d0 	movw	r2, #16592	; 0x40d0
  10752c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107530:	e30410dc 	movw	r1, #16604	; 0x40dc
  107534:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  107538:	e30400c0 	movw	r0, #16576	; 0x40c0
  10753c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107540:	ebffe5bc 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C2,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
  107544:	e55b300d 	ldrb	r3, [fp, #-13]
  107548:	e3530000 	cmp	r3, #0
  10754c:	0a000003 	beq	107560 <alt_clk_divider_set+0x12cc>
            {
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp);         /* which has the enable bit set */
  107550:	e30430d8 	movw	r3, #16600	; 0x40d8
  107554:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107558:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10755c:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107560:	e3a03000 	mov	r3, #0
  107564:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107568:	ea0003b8 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  10756c:	e3e03007 	mvn	r3, #7
  107570:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107574:	ea0003b5 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        if (   (div <= (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET_MSK + 1))
  107578:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10757c:	e3530c02 	cmp	r3, #512	; 0x200
  107580:	8a00002d 	bhi	10763c <alt_clk_divider_set+0x13a8>
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C5, div) == ALT_E_TRUE) )
  107584:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107588:	e3a0003c 	mov	r0, #60	; 0x3c
  10758c:	ebfff9e7 	bl	105d30 <alt_clk_within_freq_limits>
  107590:	e1a03000 	mov	r3, r0
  107594:	e3530001 	cmp	r3, #1
  107598:	1a000027 	bne	10763c <alt_clk_divider_set+0x13a8>
        {
            wrval = div - 1;
  10759c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1075a0:	e2433001 	sub	r3, r3, #1
  1075a4:	e50b300c 	str	r3, [fp, #-12]
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
  1075a8:	e30430d8 	movw	r3, #16600	; 0x40d8
  1075ac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1075b0:	e5933000 	ldr	r3, [r3]
  1075b4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK)
  1075b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1075bc:	e2033008 	and	r3, r3, #8
  1075c0:	e3530000 	cmp	r3, #0
  1075c4:	0a000006 	beq	1075e4 <alt_clk_divider_set+0x1350>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_CLR_MSK);
  1075c8:	e30430d8 	movw	r3, #16600	; 0x40d8
  1075cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1075d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075d4:	e3c22008 	bic	r2, r2, #8
  1075d8:	e5832000 	str	r2, [r3]
                restore_0 = true;
  1075dc:	e3a03001 	mov	r3, #1
  1075e0:	e54b300d 	strb	r3, [fp, #-13]
            }

            alt_clk_pllcounter_write(ALT_CLKMGR_SDRPLL_VCO_ADDR,
  1075e4:	e3a03019 	mov	r3, #25
  1075e8:	e58d3004 	str	r3, [sp, #4]
  1075ec:	e3a03020 	mov	r3, #32
  1075f0:	e58d3000 	str	r3, [sp]
  1075f4:	e51b300c 	ldr	r3, [fp, #-12]
  1075f8:	e30420d4 	movw	r2, #16596	; 0x40d4
  1075fc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107600:	e30410dc 	movw	r1, #16604	; 0x40dc
  107604:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  107608:	e30400c0 	movw	r0, #16576	; 0x40c0
  10760c:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107610:	ebffe588 	bl	100c38 <alt_clk_pllcounter_write>
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
  107614:	e55b300d 	ldrb	r3, [fp, #-13]
  107618:	e3530000 	cmp	r3, #0
  10761c:	0a000003 	beq	107630 <alt_clk_divider_set+0x139c>
            {
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp);         /* which has the enable bit set */
  107620:	e30430d8 	movw	r3, #16600	; 0x40d8
  107624:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107628:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10762c:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107630:	e3a03000 	mov	r3, #0
  107634:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107638:	ea000384 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  10763c:	e3e03007 	mvn	r3, #7
  107640:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107644:	ea000381 	b	108450 <alt_clk_divider_set+0x21bc>

        /* Other clock dividers */
    case ALT_CLK_L3_MP:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV1; }
  107648:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10764c:	e3530001 	cmp	r3, #1
  107650:	1a000002 	bne	107660 <alt_clk_divider_set+0x13cc>
  107654:	e3a03000 	mov	r3, #0
  107658:	e50b300c 	str	r3, [fp, #-12]
  10765c:	ea000004 	b	107674 <alt_clk_divider_set+0x13e0>
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV2; }
  107660:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107664:	e3530002 	cmp	r3, #2
  107668:	1a000001 	bne	107674 <alt_clk_divider_set+0x13e0>
  10766c:	e3a03001 	mov	r3, #1
  107670:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107674:	e51b300c 	ldr	r3, [fp, #-12]
  107678:	e3730001 	cmn	r3, #1
  10767c:	0a000026 	beq	10771c <alt_clk_divider_set+0x1488>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  107680:	e3043060 	movw	r3, #16480	; 0x4060
  107684:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107688:	e5933000 	ldr	r3, [r3]
  10768c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK)
  107690:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107694:	e2033002 	and	r3, r3, #2
  107698:	e3530000 	cmp	r3, #0
  10769c:	0a000006 	beq	1076bc <alt_clk_divider_set+0x1428>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_CLR_MSK);
  1076a0:	e3043060 	movw	r3, #16480	; 0x4060
  1076a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1076a8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1076ac:	e3c22002 	bic	r2, r2, #2
  1076b0:	e5832000 	str	r2, [r3]
                restore_0 = true;
  1076b4:	e3a03001 	mov	r3, #1
  1076b8:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_SET_MSK,
  1076bc:	e3043064 	movw	r3, #16484	; 0x4064
  1076c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1076c4:	e3042064 	movw	r2, #16484	; 0x4064
  1076c8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1076cc:	e5922000 	ldr	r2, [r2]
  1076d0:	e3c21003 	bic	r1, r2, #3
  1076d4:	e51b200c 	ldr	r2, [fp, #-12]
  1076d8:	e2022003 	and	r2, r2, #3
  1076dc:	e1812002 	orr	r2, r1, r2
  1076e0:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );
  1076e4:	e3a0101e 	mov	r1, #30
  1076e8:	e3040060 	movw	r0, #16480	; 0x4060
  1076ec:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1076f0:	ebffe4ee 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  1076f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1076f8:	e3530000 	cmp	r3, #0
  1076fc:	0a000003 	beq	107710 <alt_clk_divider_set+0x147c>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);         /* which has the enable bit set */
  107700:	e3043060 	movw	r3, #16480	; 0x4060
  107704:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107708:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10770c:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107710:	e3a03000 	mov	r3, #0
  107714:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107718:	ea00034c 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  10771c:	e3e03007 	mvn	r3, #7
  107720:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107724:	ea000349 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_L3_SP:
        /* note that the L3MP divider is upstream from the L3SP divider
        // and any changes to the former will affect the output of both */
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV1; }
  107728:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10772c:	e3530001 	cmp	r3, #1
  107730:	1a000002 	bne	107740 <alt_clk_divider_set+0x14ac>
  107734:	e3a03000 	mov	r3, #0
  107738:	e50b300c 	str	r3, [fp, #-12]
  10773c:	ea000004 	b	107754 <alt_clk_divider_set+0x14c0>
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV2; }
  107740:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107744:	e3530002 	cmp	r3, #2
  107748:	1a000001 	bne	107754 <alt_clk_divider_set+0x14c0>
  10774c:	e3a03001 	mov	r3, #1
  107750:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107754:	e51b300c 	ldr	r3, [fp, #-12]
  107758:	e3730001 	cmn	r3, #1
  10775c:	0a000011 	beq	1077a8 <alt_clk_divider_set+0x1514>
        {
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_SET_MSK,
  107760:	e3043064 	movw	r3, #16484	; 0x4064
  107764:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107768:	e3042064 	movw	r2, #16484	; 0x4064
  10776c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107770:	e5922000 	ldr	r2, [r2]
  107774:	e3c2100c 	bic	r1, r2, #12
  107778:	e51b200c 	ldr	r2, [fp, #-12]
  10777c:	e1a02102 	lsl	r2, r2, #2
  107780:	e202200c 	and	r2, r2, #12
  107784:	e1812002 	orr	r2, r1, r2
  107788:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_LSB);
            /* no clock gate to close and reopen */
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );
  10778c:	e3a0101e 	mov	r1, #30
  107790:	e3040064 	movw	r0, #16484	; 0x4064
  107794:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107798:	ebffe4c4 	bl	100ab0 <alt_clk_mgr_wait>
            ret = ALT_E_SUCCESS;
  10779c:	e3a03000 	mov	r3, #0
  1077a0:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1077a4:	ea000329 	b	108450 <alt_clk_divider_set+0x21bc>
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  1077a8:	e3e03007 	mvn	r3, #7
  1077ac:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1077b0:	ea000326 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_L4_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV1; }
  1077b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1077b8:	e3530001 	cmp	r3, #1
  1077bc:	1a000002 	bne	1077cc <alt_clk_divider_set+0x1538>
  1077c0:	e3a03000 	mov	r3, #0
  1077c4:	e50b300c 	str	r3, [fp, #-12]
  1077c8:	ea000016 	b	107828 <alt_clk_divider_set+0x1594>
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV2; }
  1077cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1077d0:	e3530002 	cmp	r3, #2
  1077d4:	1a000002 	bne	1077e4 <alt_clk_divider_set+0x1550>
  1077d8:	e3a03001 	mov	r3, #1
  1077dc:	e50b300c 	str	r3, [fp, #-12]
  1077e0:	ea000010 	b	107828 <alt_clk_divider_set+0x1594>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV4; }
  1077e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1077e8:	e3530004 	cmp	r3, #4
  1077ec:	1a000002 	bne	1077fc <alt_clk_divider_set+0x1568>
  1077f0:	e3a03002 	mov	r3, #2
  1077f4:	e50b300c 	str	r3, [fp, #-12]
  1077f8:	ea00000a 	b	107828 <alt_clk_divider_set+0x1594>
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV8; }
  1077fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107800:	e3530008 	cmp	r3, #8
  107804:	1a000002 	bne	107814 <alt_clk_divider_set+0x1580>
  107808:	e3a03003 	mov	r3, #3
  10780c:	e50b300c 	str	r3, [fp, #-12]
  107810:	ea000004 	b	107828 <alt_clk_divider_set+0x1594>
        else if (div == 16) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV16; }
  107814:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107818:	e3530010 	cmp	r3, #16
  10781c:	1a000001 	bne	107828 <alt_clk_divider_set+0x1594>
  107820:	e3a03004 	mov	r3, #4
  107824:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107828:	e51b300c 	ldr	r3, [fp, #-12]
  10782c:	e3730001 	cmn	r3, #1
  107830:	0a000027 	beq	1078d4 <alt_clk_divider_set+0x1640>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  107834:	e3043060 	movw	r3, #16480	; 0x4060
  107838:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10783c:	e5933000 	ldr	r3, [r3]
  107840:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK)
  107844:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107848:	e2033004 	and	r3, r3, #4
  10784c:	e3530000 	cmp	r3, #0
  107850:	0a000006 	beq	107870 <alt_clk_divider_set+0x15dc>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK);
  107854:	e3043060 	movw	r3, #16480	; 0x4060
  107858:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10785c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107860:	e3c22004 	bic	r2, r2, #4
  107864:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107868:	e3a03001 	mov	r3, #1
  10786c:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_SET_MSK,
  107870:	e3043064 	movw	r3, #16484	; 0x4064
  107874:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107878:	e3042064 	movw	r2, #16484	; 0x4064
  10787c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107880:	e5922000 	ldr	r2, [r2]
  107884:	e3c21070 	bic	r1, r2, #112	; 0x70
  107888:	e51b200c 	ldr	r2, [fp, #-12]
  10788c:	e1a02202 	lsl	r2, r2, #4
  107890:	e2022070 	and	r2, r2, #112	; 0x70
  107894:	e1812002 	orr	r2, r1, r2
  107898:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  10789c:	e3a0101e 	mov	r1, #30
  1078a0:	e3040064 	movw	r0, #16484	; 0x4064
  1078a4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1078a8:	ebffe480 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  1078ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1078b0:	e3530000 	cmp	r3, #0
  1078b4:	0a000003 	beq	1078c8 <alt_clk_divider_set+0x1634>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);         /* which has the enable bit set */
  1078b8:	e3043060 	movw	r3, #16480	; 0x4060
  1078bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1078c0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1078c4:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  1078c8:	e3a03000 	mov	r3, #0
  1078cc:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1078d0:	ea0002de 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  1078d4:	e3e03007 	mvn	r3, #7
  1078d8:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1078dc:	ea0002db 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_L4_SP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV1; }
  1078e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1078e4:	e3530001 	cmp	r3, #1
  1078e8:	1a000002 	bne	1078f8 <alt_clk_divider_set+0x1664>
  1078ec:	e3a03000 	mov	r3, #0
  1078f0:	e50b300c 	str	r3, [fp, #-12]
  1078f4:	ea000016 	b	107954 <alt_clk_divider_set+0x16c0>
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV2; }
  1078f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1078fc:	e3530002 	cmp	r3, #2
  107900:	1a000002 	bne	107910 <alt_clk_divider_set+0x167c>
  107904:	e3a03001 	mov	r3, #1
  107908:	e50b300c 	str	r3, [fp, #-12]
  10790c:	ea000010 	b	107954 <alt_clk_divider_set+0x16c0>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV4; }
  107910:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107914:	e3530004 	cmp	r3, #4
  107918:	1a000002 	bne	107928 <alt_clk_divider_set+0x1694>
  10791c:	e3a03002 	mov	r3, #2
  107920:	e50b300c 	str	r3, [fp, #-12]
  107924:	ea00000a 	b	107954 <alt_clk_divider_set+0x16c0>
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV8; }
  107928:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10792c:	e3530008 	cmp	r3, #8
  107930:	1a000002 	bne	107940 <alt_clk_divider_set+0x16ac>
  107934:	e3a03003 	mov	r3, #3
  107938:	e50b300c 	str	r3, [fp, #-12]
  10793c:	ea000004 	b	107954 <alt_clk_divider_set+0x16c0>
        else if (div == 16) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV16; }
  107940:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107944:	e3530010 	cmp	r3, #16
  107948:	1a000001 	bne	107954 <alt_clk_divider_set+0x16c0>
  10794c:	e3a03004 	mov	r3, #4
  107950:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107954:	e51b300c 	ldr	r3, [fp, #-12]
  107958:	e3730001 	cmn	r3, #1
  10795c:	0a000027 	beq	107a00 <alt_clk_divider_set+0x176c>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  107960:	e3043060 	movw	r3, #16480	; 0x4060
  107964:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107968:	e5933000 	ldr	r3, [r3]
  10796c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK)
  107970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107974:	e2033008 	and	r3, r3, #8
  107978:	e3530000 	cmp	r3, #0
  10797c:	0a000006 	beq	10799c <alt_clk_divider_set+0x1708>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK);
  107980:	e3043060 	movw	r3, #16480	; 0x4060
  107984:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107988:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10798c:	e3c22008 	bic	r2, r2, #8
  107990:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107994:	e3a03001 	mov	r3, #1
  107998:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_SET_MSK,
  10799c:	e3043064 	movw	r3, #16484	; 0x4064
  1079a0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1079a4:	e3042064 	movw	r2, #16484	; 0x4064
  1079a8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1079ac:	e5922000 	ldr	r2, [r2]
  1079b0:	e3c21d0e 	bic	r1, r2, #896	; 0x380
  1079b4:	e51b200c 	ldr	r2, [fp, #-12]
  1079b8:	e1a02382 	lsl	r2, r2, #7
  1079bc:	e2022d0e 	and	r2, r2, #896	; 0x380
  1079c0:	e1812002 	orr	r2, r1, r2
  1079c4:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  1079c8:	e3a0101e 	mov	r1, #30
  1079cc:	e3040064 	movw	r0, #16484	; 0x4064
  1079d0:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1079d4:	ebffe435 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  1079d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1079dc:	e3530000 	cmp	r3, #0
  1079e0:	0a000003 	beq	1079f4 <alt_clk_divider_set+0x1760>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  1079e4:	e3043060 	movw	r3, #16480	; 0x4060
  1079e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1079ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1079f0:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  1079f4:	e3a03000 	mov	r3, #0
  1079f8:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1079fc:	ea000293 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107a00:	e3e03007 	mvn	r3, #7
  107a04:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107a08:	ea000290 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_DBG_AT:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV1; }
  107a0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107a10:	e3530001 	cmp	r3, #1
  107a14:	1a000002 	bne	107a24 <alt_clk_divider_set+0x1790>
  107a18:	e3a03000 	mov	r3, #0
  107a1c:	e50b300c 	str	r3, [fp, #-12]
  107a20:	ea00000a 	b	107a50 <alt_clk_divider_set+0x17bc>
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV2; }
  107a24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107a28:	e3530002 	cmp	r3, #2
  107a2c:	1a000002 	bne	107a3c <alt_clk_divider_set+0x17a8>
  107a30:	e3a03001 	mov	r3, #1
  107a34:	e50b300c 	str	r3, [fp, #-12]
  107a38:	ea000004 	b	107a50 <alt_clk_divider_set+0x17bc>
        else if (div == 4) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV4; }
  107a3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107a40:	e3530004 	cmp	r3, #4
  107a44:	1a000001 	bne	107a50 <alt_clk_divider_set+0x17bc>
  107a48:	e3a03002 	mov	r3, #2
  107a4c:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107a50:	e51b300c 	ldr	r3, [fp, #-12]
  107a54:	e3730001 	cmn	r3, #1
  107a58:	0a000026 	beq	107af8 <alt_clk_divider_set+0x1864>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  107a5c:	e3043060 	movw	r3, #16480	; 0x4060
  107a60:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107a64:	e5933000 	ldr	r3, [r3]
  107a68:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK)
  107a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107a70:	e2033010 	and	r3, r3, #16
  107a74:	e3530000 	cmp	r3, #0
  107a78:	0a000006 	beq	107a98 <alt_clk_divider_set+0x1804>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_CLR_MSK);
  107a7c:	e3043060 	movw	r3, #16480	; 0x4060
  107a80:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107a84:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107a88:	e3c22010 	bic	r2, r2, #16
  107a8c:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107a90:	e3a03001 	mov	r3, #1
  107a94:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_SET_MSK,
  107a98:	e3043068 	movw	r3, #16488	; 0x4068
  107a9c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107aa0:	e3042068 	movw	r2, #16488	; 0x4068
  107aa4:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107aa8:	e5922000 	ldr	r2, [r2]
  107aac:	e3c21003 	bic	r1, r2, #3
  107ab0:	e51b200c 	ldr	r2, [fp, #-12]
  107ab4:	e2022003 	and	r2, r2, #3
  107ab8:	e1812002 	orr	r2, r1, r2
  107abc:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  107ac0:	e3a0101e 	mov	r1, #30
  107ac4:	e3040068 	movw	r0, #16488	; 0x4068
  107ac8:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107acc:	ebffe3f7 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  107ad0:	e55b300d 	ldrb	r3, [fp, #-13]
  107ad4:	e3530000 	cmp	r3, #0
  107ad8:	0a000003 	beq	107aec <alt_clk_divider_set+0x1858>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  107adc:	e3043060 	movw	r3, #16480	; 0x4060
  107ae0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107ae4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107ae8:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107aec:	e3a03000 	mov	r3, #0
  107af0:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107af4:	ea000255 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107af8:	e3e03007 	mvn	r3, #7
  107afc:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107b00:	ea000252 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_DBG:
        if      (div == 2) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV2; }
  107b04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107b08:	e3530002 	cmp	r3, #2
  107b0c:	1a000002 	bne	107b1c <alt_clk_divider_set+0x1888>
  107b10:	e3a03001 	mov	r3, #1
  107b14:	e50b300c 	str	r3, [fp, #-12]
  107b18:	ea000004 	b	107b30 <alt_clk_divider_set+0x189c>
        else if (div == 4) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV4; }
  107b1c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107b20:	e3530004 	cmp	r3, #4
  107b24:	1a000001 	bne	107b30 <alt_clk_divider_set+0x189c>
  107b28:	e3a03002 	mov	r3, #2
  107b2c:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107b30:	e51b300c 	ldr	r3, [fp, #-12]
  107b34:	e3730001 	cmn	r3, #1
  107b38:	0a000027 	beq	107bdc <alt_clk_divider_set+0x1948>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  107b3c:	e3043060 	movw	r3, #16480	; 0x4060
  107b40:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107b44:	e5933000 	ldr	r3, [r3]
  107b48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK)
  107b4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107b50:	e2033020 	and	r3, r3, #32
  107b54:	e3530000 	cmp	r3, #0
  107b58:	0a000006 	beq	107b78 <alt_clk_divider_set+0x18e4>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_CLR_MSK);
  107b5c:	e3043060 	movw	r3, #16480	; 0x4060
  107b60:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107b64:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107b68:	e3c22020 	bic	r2, r2, #32
  107b6c:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107b70:	e3a03001 	mov	r3, #1
  107b74:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_SET_MSK,
  107b78:	e3043068 	movw	r3, #16488	; 0x4068
  107b7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107b80:	e3042068 	movw	r2, #16488	; 0x4068
  107b84:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107b88:	e5922000 	ldr	r2, [r2]
  107b8c:	e3c2100c 	bic	r1, r2, #12
  107b90:	e51b200c 	ldr	r2, [fp, #-12]
  107b94:	e1a02082 	lsl	r2, r2, #1
  107b98:	e202200c 	and	r2, r2, #12
  107b9c:	e1812002 	orr	r2, r1, r2
  107ba0:	e5832000 	str	r2, [r3]
                              wrval << (ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_LSB - 1));
            /* account for the fact that the divisor ratios are 2x the value */
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  107ba4:	e3a0101e 	mov	r1, #30
  107ba8:	e3040068 	movw	r0, #16488	; 0x4068
  107bac:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107bb0:	ebffe3be 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  107bb4:	e55b300d 	ldrb	r3, [fp, #-13]
  107bb8:	e3530000 	cmp	r3, #0
  107bbc:	0a000003 	beq	107bd0 <alt_clk_divider_set+0x193c>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  107bc0:	e3043060 	movw	r3, #16480	; 0x4060
  107bc4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107bc8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107bcc:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107bd0:	e3a03000 	mov	r3, #0
  107bd4:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107bd8:	ea00021c 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107bdc:	e3e03007 	mvn	r3, #7
  107be0:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107be4:	ea000219 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_DBG_TRACE:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV1; }
  107be8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107bec:	e3530001 	cmp	r3, #1
  107bf0:	1a000002 	bne	107c00 <alt_clk_divider_set+0x196c>
  107bf4:	e3a03000 	mov	r3, #0
  107bf8:	e50b300c 	str	r3, [fp, #-12]
  107bfc:	ea000016 	b	107c5c <alt_clk_divider_set+0x19c8>
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV2; }
  107c00:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c04:	e3530002 	cmp	r3, #2
  107c08:	1a000002 	bne	107c18 <alt_clk_divider_set+0x1984>
  107c0c:	e3a03001 	mov	r3, #1
  107c10:	e50b300c 	str	r3, [fp, #-12]
  107c14:	ea000010 	b	107c5c <alt_clk_divider_set+0x19c8>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV4; }
  107c18:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c1c:	e3530004 	cmp	r3, #4
  107c20:	1a000002 	bne	107c30 <alt_clk_divider_set+0x199c>
  107c24:	e3a03002 	mov	r3, #2
  107c28:	e50b300c 	str	r3, [fp, #-12]
  107c2c:	ea00000a 	b	107c5c <alt_clk_divider_set+0x19c8>
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV8; }
  107c30:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c34:	e3530008 	cmp	r3, #8
  107c38:	1a000002 	bne	107c48 <alt_clk_divider_set+0x19b4>
  107c3c:	e3a03003 	mov	r3, #3
  107c40:	e50b300c 	str	r3, [fp, #-12]
  107c44:	ea000004 	b	107c5c <alt_clk_divider_set+0x19c8>
        else if (div == 16) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV16; }
  107c48:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c4c:	e3530010 	cmp	r3, #16
  107c50:	1a000001 	bne	107c5c <alt_clk_divider_set+0x19c8>
  107c54:	e3a03004 	mov	r3, #4
  107c58:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107c5c:	e51b300c 	ldr	r3, [fp, #-12]
  107c60:	e3730001 	cmn	r3, #1
  107c64:	0a000026 	beq	107d04 <alt_clk_divider_set+0x1a70>
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  107c68:	e3043060 	movw	r3, #16480	; 0x4060
  107c6c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107c70:	e5933000 	ldr	r3, [r3]
  107c74:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK)
  107c78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c7c:	e2033040 	and	r3, r3, #64	; 0x40
  107c80:	e3530000 	cmp	r3, #0
  107c84:	0a000006 	beq	107ca4 <alt_clk_divider_set+0x1a10>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_CLR_MSK);
  107c88:	e3043060 	movw	r3, #16480	; 0x4060
  107c8c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107c90:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107c94:	e3c22040 	bic	r2, r2, #64	; 0x40
  107c98:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107c9c:	e3a03001 	mov	r3, #1
  107ca0:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_SET_MSK,
  107ca4:	e304306c 	movw	r3, #16492	; 0x406c
  107ca8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107cac:	e304206c 	movw	r2, #16492	; 0x406c
  107cb0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107cb4:	e5922000 	ldr	r2, [r2]
  107cb8:	e3c21007 	bic	r1, r2, #7
  107cbc:	e51b200c 	ldr	r2, [fp, #-12]
  107cc0:	e2022007 	and	r2, r2, #7
  107cc4:	e1812002 	orr	r2, r1, r2
  107cc8:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  107ccc:	e3a0101e 	mov	r1, #30
  107cd0:	e304006c 	movw	r0, #16492	; 0x406c
  107cd4:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107cd8:	ebffe374 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  107cdc:	e55b300d 	ldrb	r3, [fp, #-13]
  107ce0:	e3530000 	cmp	r3, #0
  107ce4:	0a000003 	beq	107cf8 <alt_clk_divider_set+0x1a64>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
  107ce8:	e3043060 	movw	r3, #16480	; 0x4060
  107cec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107cf0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107cf4:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107cf8:	e3a03000 	mov	r3, #0
  107cfc:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107d00:	ea0001d2 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107d04:	e3e03007 	mvn	r3, #7
  107d08:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107d0c:	ea0001cf 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_USB_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV1; }
  107d10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107d14:	e3530001 	cmp	r3, #1
  107d18:	1a000002 	bne	107d28 <alt_clk_divider_set+0x1a94>
  107d1c:	e3a03000 	mov	r3, #0
  107d20:	e50b300c 	str	r3, [fp, #-12]
  107d24:	ea000016 	b	107d84 <alt_clk_divider_set+0x1af0>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV2; }
  107d28:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107d2c:	e3530002 	cmp	r3, #2
  107d30:	1a000002 	bne	107d40 <alt_clk_divider_set+0x1aac>
  107d34:	e3a03001 	mov	r3, #1
  107d38:	e50b300c 	str	r3, [fp, #-12]
  107d3c:	ea000010 	b	107d84 <alt_clk_divider_set+0x1af0>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV4; }
  107d40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107d44:	e3530004 	cmp	r3, #4
  107d48:	1a000002 	bne	107d58 <alt_clk_divider_set+0x1ac4>
  107d4c:	e3a03002 	mov	r3, #2
  107d50:	e50b300c 	str	r3, [fp, #-12]
  107d54:	ea00000a 	b	107d84 <alt_clk_divider_set+0x1af0>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV8; }
  107d58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107d5c:	e3530008 	cmp	r3, #8
  107d60:	1a000002 	bne	107d70 <alt_clk_divider_set+0x1adc>
  107d64:	e3a03003 	mov	r3, #3
  107d68:	e50b300c 	str	r3, [fp, #-12]
  107d6c:	ea000004 	b	107d84 <alt_clk_divider_set+0x1af0>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV16; }
  107d70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107d74:	e3530010 	cmp	r3, #16
  107d78:	1a000001 	bne	107d84 <alt_clk_divider_set+0x1af0>
  107d7c:	e3a03004 	mov	r3, #4
  107d80:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107d84:	e51b300c 	ldr	r3, [fp, #-12]
  107d88:	e3730001 	cmn	r3, #1
  107d8c:	0a000026 	beq	107e2c <alt_clk_divider_set+0x1b98>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  107d90:	e30430a0 	movw	r3, #16544	; 0x40a0
  107d94:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107d98:	e5933000 	ldr	r3, [r3]
  107d9c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK)
  107da0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107da4:	e2033004 	and	r3, r3, #4
  107da8:	e3530000 	cmp	r3, #0
  107dac:	0a000006 	beq	107dcc <alt_clk_divider_set+0x1b38>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_USBCLK_CLR_MSK);
  107db0:	e30430a0 	movw	r3, #16544	; 0x40a0
  107db4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107db8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107dbc:	e3c22004 	bic	r2, r2, #4
  107dc0:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107dc4:	e3a03001 	mov	r3, #1
  107dc8:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_USBCLK_SET_MSK,
  107dcc:	e30430a4 	movw	r3, #16548	; 0x40a4
  107dd0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107dd4:	e30420a4 	movw	r2, #16548	; 0x40a4
  107dd8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107ddc:	e5922000 	ldr	r2, [r2]
  107de0:	e3c21007 	bic	r1, r2, #7
  107de4:	e51b200c 	ldr	r2, [fp, #-12]
  107de8:	e2022007 	and	r2, r2, #7
  107dec:	e1812002 	orr	r2, r1, r2
  107df0:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_PERPLL_DIV_USBCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  107df4:	e3a0101e 	mov	r1, #30
  107df8:	e30400a4 	movw	r0, #16548	; 0x40a4
  107dfc:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107e00:	ebffe32a 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  107e04:	e55b300d 	ldrb	r3, [fp, #-13]
  107e08:	e3530000 	cmp	r3, #0
  107e0c:	0a000003 	beq	107e20 <alt_clk_divider_set+0x1b8c>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  107e10:	e30430a0 	movw	r3, #16544	; 0x40a0
  107e14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107e18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107e1c:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107e20:	e3a03000 	mov	r3, #0
  107e24:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107e28:	ea000188 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107e2c:	e3e03007 	mvn	r3, #7
  107e30:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107e34:	ea000185 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_SPI_M:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV1; }
  107e38:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107e3c:	e3530001 	cmp	r3, #1
  107e40:	1a000002 	bne	107e50 <alt_clk_divider_set+0x1bbc>
  107e44:	e3a03000 	mov	r3, #0
  107e48:	e50b300c 	str	r3, [fp, #-12]
  107e4c:	ea000016 	b	107eac <alt_clk_divider_set+0x1c18>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV2; }
  107e50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107e54:	e3530002 	cmp	r3, #2
  107e58:	1a000002 	bne	107e68 <alt_clk_divider_set+0x1bd4>
  107e5c:	e3a03001 	mov	r3, #1
  107e60:	e50b300c 	str	r3, [fp, #-12]
  107e64:	ea000010 	b	107eac <alt_clk_divider_set+0x1c18>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV4; }
  107e68:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107e6c:	e3530004 	cmp	r3, #4
  107e70:	1a000002 	bne	107e80 <alt_clk_divider_set+0x1bec>
  107e74:	e3a03002 	mov	r3, #2
  107e78:	e50b300c 	str	r3, [fp, #-12]
  107e7c:	ea00000a 	b	107eac <alt_clk_divider_set+0x1c18>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV8; }
  107e80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107e84:	e3530008 	cmp	r3, #8
  107e88:	1a000002 	bne	107e98 <alt_clk_divider_set+0x1c04>
  107e8c:	e3a03003 	mov	r3, #3
  107e90:	e50b300c 	str	r3, [fp, #-12]
  107e94:	ea000004 	b	107eac <alt_clk_divider_set+0x1c18>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV16; }
  107e98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107e9c:	e3530010 	cmp	r3, #16
  107ea0:	1a000001 	bne	107eac <alt_clk_divider_set+0x1c18>
  107ea4:	e3a03004 	mov	r3, #4
  107ea8:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107eac:	e51b300c 	ldr	r3, [fp, #-12]
  107eb0:	e3730001 	cmn	r3, #1
  107eb4:	0a000027 	beq	107f58 <alt_clk_divider_set+0x1cc4>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  107eb8:	e30430a0 	movw	r3, #16544	; 0x40a0
  107ebc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107ec0:	e5933000 	ldr	r3, [r3]
  107ec4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK)
  107ec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107ecc:	e2033008 	and	r3, r3, #8
  107ed0:	e3530000 	cmp	r3, #0
  107ed4:	0a000006 	beq	107ef4 <alt_clk_divider_set+0x1c60>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_CLR_MSK);
  107ed8:	e30430a0 	movw	r3, #16544	; 0x40a0
  107edc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107ee0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107ee4:	e3c22008 	bic	r2, r2, #8
  107ee8:	e5832000 	str	r2, [r3]
                restore_0 = true;
  107eec:	e3a03001 	mov	r3, #1
  107ef0:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_SPIMCLK_SET_MSK,
  107ef4:	e30430a4 	movw	r3, #16548	; 0x40a4
  107ef8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107efc:	e30420a4 	movw	r2, #16548	; 0x40a4
  107f00:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  107f04:	e5922000 	ldr	r2, [r2]
  107f08:	e3c21038 	bic	r1, r2, #56	; 0x38
  107f0c:	e51b200c 	ldr	r2, [fp, #-12]
  107f10:	e1a02182 	lsl	r2, r2, #3
  107f14:	e2022038 	and	r2, r2, #56	; 0x38
  107f18:	e1812002 	orr	r2, r1, r2
  107f1c:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_PERPLL_DIV_SPIMCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  107f20:	e3a0101e 	mov	r1, #30
  107f24:	e30400a4 	movw	r0, #16548	; 0x40a4
  107f28:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  107f2c:	ebffe2df 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  107f30:	e55b300d 	ldrb	r3, [fp, #-13]
  107f34:	e3530000 	cmp	r3, #0
  107f38:	0a000003 	beq	107f4c <alt_clk_divider_set+0x1cb8>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  107f3c:	e30430a0 	movw	r3, #16544	; 0x40a0
  107f40:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107f44:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107f48:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  107f4c:	e3a03000 	mov	r3, #0
  107f50:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  107f54:	ea00013d 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  107f58:	e3e03007 	mvn	r3, #7
  107f5c:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  107f60:	ea00013a 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_CAN0:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV1; }
  107f64:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107f68:	e3530001 	cmp	r3, #1
  107f6c:	1a000002 	bne	107f7c <alt_clk_divider_set+0x1ce8>
  107f70:	e3a03000 	mov	r3, #0
  107f74:	e50b300c 	str	r3, [fp, #-12]
  107f78:	ea000016 	b	107fd8 <alt_clk_divider_set+0x1d44>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV2; }
  107f7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107f80:	e3530002 	cmp	r3, #2
  107f84:	1a000002 	bne	107f94 <alt_clk_divider_set+0x1d00>
  107f88:	e3a03001 	mov	r3, #1
  107f8c:	e50b300c 	str	r3, [fp, #-12]
  107f90:	ea000010 	b	107fd8 <alt_clk_divider_set+0x1d44>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV4; }
  107f94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107f98:	e3530004 	cmp	r3, #4
  107f9c:	1a000002 	bne	107fac <alt_clk_divider_set+0x1d18>
  107fa0:	e3a03002 	mov	r3, #2
  107fa4:	e50b300c 	str	r3, [fp, #-12]
  107fa8:	ea00000a 	b	107fd8 <alt_clk_divider_set+0x1d44>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV8; }
  107fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107fb0:	e3530008 	cmp	r3, #8
  107fb4:	1a000002 	bne	107fc4 <alt_clk_divider_set+0x1d30>
  107fb8:	e3a03003 	mov	r3, #3
  107fbc:	e50b300c 	str	r3, [fp, #-12]
  107fc0:	ea000004 	b	107fd8 <alt_clk_divider_set+0x1d44>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV16; }
  107fc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107fc8:	e3530010 	cmp	r3, #16
  107fcc:	1a000001 	bne	107fd8 <alt_clk_divider_set+0x1d44>
  107fd0:	e3a03004 	mov	r3, #4
  107fd4:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  107fd8:	e51b300c 	ldr	r3, [fp, #-12]
  107fdc:	e3730001 	cmn	r3, #1
  107fe0:	0a000027 	beq	108084 <alt_clk_divider_set+0x1df0>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  107fe4:	e30430a0 	movw	r3, #16544	; 0x40a0
  107fe8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  107fec:	e5933000 	ldr	r3, [r3]
  107ff0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK)
  107ff4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107ff8:	e2033010 	and	r3, r3, #16
  107ffc:	e3530000 	cmp	r3, #0
  108000:	0a000006 	beq	108020 <alt_clk_divider_set+0x1d8c>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_CLR_MSK);
  108004:	e30430a0 	movw	r3, #16544	; 0x40a0
  108008:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10800c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108010:	e3c22010 	bic	r2, r2, #16
  108014:	e5832000 	str	r2, [r3]
                restore_0 = true;
  108018:	e3a03001 	mov	r3, #1
  10801c:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_CAN0CLK_SET_MSK,
  108020:	e30430a4 	movw	r3, #16548	; 0x40a4
  108024:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108028:	e30420a4 	movw	r2, #16548	; 0x40a4
  10802c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  108030:	e5922000 	ldr	r2, [r2]
  108034:	e3c21d07 	bic	r1, r2, #448	; 0x1c0
  108038:	e51b200c 	ldr	r2, [fp, #-12]
  10803c:	e1a02302 	lsl	r2, r2, #6
  108040:	e2022d07 	and	r2, r2, #448	; 0x1c0
  108044:	e1812002 	orr	r2, r1, r2
  108048:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_PERPLL_DIV_CAN0CLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  10804c:	e3a0101e 	mov	r1, #30
  108050:	e30400a4 	movw	r0, #16548	; 0x40a4
  108054:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  108058:	ebffe294 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  10805c:	e55b300d 	ldrb	r3, [fp, #-13]
  108060:	e3530000 	cmp	r3, #0
  108064:	0a000003 	beq	108078 <alt_clk_divider_set+0x1de4>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  108068:	e30430a0 	movw	r3, #16544	; 0x40a0
  10806c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108070:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108074:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  108078:	e3a03000 	mov	r3, #0
  10807c:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  108080:	ea0000f2 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  108084:	e3e03007 	mvn	r3, #7
  108088:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  10808c:	ea0000ef 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
  108090:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  108094:	e3530001 	cmp	r3, #1
  108098:	1a000002 	bne	1080a8 <alt_clk_divider_set+0x1e14>
  10809c:	e3a03000 	mov	r3, #0
  1080a0:	e50b300c 	str	r3, [fp, #-12]
  1080a4:	ea000016 	b	108104 <alt_clk_divider_set+0x1e70>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV2; }
  1080a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1080ac:	e3530002 	cmp	r3, #2
  1080b0:	1a000002 	bne	1080c0 <alt_clk_divider_set+0x1e2c>
  1080b4:	e3a03001 	mov	r3, #1
  1080b8:	e50b300c 	str	r3, [fp, #-12]
  1080bc:	ea000010 	b	108104 <alt_clk_divider_set+0x1e70>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV4; }
  1080c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1080c4:	e3530004 	cmp	r3, #4
  1080c8:	1a000002 	bne	1080d8 <alt_clk_divider_set+0x1e44>
  1080cc:	e3a03002 	mov	r3, #2
  1080d0:	e50b300c 	str	r3, [fp, #-12]
  1080d4:	ea00000a 	b	108104 <alt_clk_divider_set+0x1e70>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV8; }
  1080d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1080dc:	e3530008 	cmp	r3, #8
  1080e0:	1a000002 	bne	1080f0 <alt_clk_divider_set+0x1e5c>
  1080e4:	e3a03003 	mov	r3, #3
  1080e8:	e50b300c 	str	r3, [fp, #-12]
  1080ec:	ea000004 	b	108104 <alt_clk_divider_set+0x1e70>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16; }
  1080f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1080f4:	e3530010 	cmp	r3, #16
  1080f8:	1a000001 	bne	108104 <alt_clk_divider_set+0x1e70>
  1080fc:	e3a03004 	mov	r3, #4
  108100:	e50b300c 	str	r3, [fp, #-12]

        if (wrval != UINT32_MAX)
  108104:	e51b300c 	ldr	r3, [fp, #-12]
  108108:	e3730001 	cmn	r3, #1
  10810c:	0a000027 	beq	1081b0 <alt_clk_divider_set+0x1f1c>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  108110:	e30430a0 	movw	r3, #16544	; 0x40a0
  108114:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108118:	e5933000 	ldr	r3, [r3]
  10811c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK)
  108120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108124:	e2033020 	and	r3, r3, #32
  108128:	e3530000 	cmp	r3, #0
  10812c:	0a000006 	beq	10814c <alt_clk_divider_set+0x1eb8>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_CLR_MSK);
  108130:	e30430a0 	movw	r3, #16544	; 0x40a0
  108134:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108138:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10813c:	e3c22020 	bic	r2, r2, #32
  108140:	e5832000 	str	r2, [r3]
                restore_0 = true;
  108144:	e3a03001 	mov	r3, #1
  108148:	e54b300d 	strb	r3, [fp, #-13]
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_CAN1CLK_SET_MSK,
  10814c:	e30430a4 	movw	r3, #16548	; 0x40a4
  108150:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108154:	e30420a4 	movw	r2, #16548	; 0x40a4
  108158:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10815c:	e5922000 	ldr	r2, [r2]
  108160:	e3c21c0e 	bic	r1, r2, #3584	; 0xe00
  108164:	e51b200c 	ldr	r2, [fp, #-12]
  108168:	e1a02482 	lsl	r2, r2, #9
  10816c:	e2022c0e 	and	r2, r2, #3584	; 0xe00
  108170:	e1812002 	orr	r2, r1, r2
  108174:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_PERPLL_DIV_CAN1CLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  108178:	e3a0101e 	mov	r1, #30
  10817c:	e30400a4 	movw	r0, #16548	; 0x40a4
  108180:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  108184:	ebffe249 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  108188:	e55b300d 	ldrb	r3, [fp, #-13]
  10818c:	e3530000 	cmp	r3, #0
  108190:	0a000003 	beq	1081a4 <alt_clk_divider_set+0x1f10>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  108194:	e30430a0 	movw	r3, #16544	; 0x40a0
  108198:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10819c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081a0:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  1081a4:	e3a03000 	mov	r3, #0
  1081a8:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  1081ac:	ea0000a7 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  1081b0:	e3e03007 	mvn	r3, #7
  1081b4:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  1081b8:	ea0000a4 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_GPIO_DB:           /* GPIO debounce clock */
        if (div <= ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK)
  1081bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1081c0:	e3530401 	cmp	r3, #16777216	; 0x1000000
  1081c4:	2a000029 	bcs	108270 <alt_clk_divider_set+0x1fdc>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  1081c8:	e30430a0 	movw	r3, #16544	; 0x40a0
  1081cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1081d0:	e5933000 	ldr	r3, [r3]
  1081d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK)
  1081d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1081dc:	e2033040 	and	r3, r3, #64	; 0x40
  1081e0:	e3530000 	cmp	r3, #0
  1081e4:	0a000006 	beq	108204 <alt_clk_divider_set+0x1f70>
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
  1081e8:	e30430a0 	movw	r3, #16544	; 0x40a0
  1081ec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1081f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f4:	e3c22040 	bic	r2, r2, #64	; 0x40
  1081f8:	e5832000 	str	r2, [r3]
                restore_0 = true;
  1081fc:	e3a03001 	mov	r3, #1
  108200:	e54b300d 	strb	r3, [fp, #-13]
            }
            wrval = div - 1;
  108204:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  108208:	e2433001 	sub	r3, r3, #1
  10820c:	e50b300c 	str	r3, [fp, #-12]
            alt_replbits_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK,
  108210:	e30430a8 	movw	r3, #16552	; 0x40a8
  108214:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108218:	e30420a8 	movw	r2, #16552	; 0x40a8
  10821c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  108220:	e5922000 	ldr	r2, [r2]
  108224:	e20214ff 	and	r1, r2, #-16777216	; 0xff000000
  108228:	e51b200c 	ldr	r2, [fp, #-12]
  10822c:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
  108230:	e1812002 	orr	r2, r1, r2
  108234:	e5832000 	str	r2, [r3]
                              wrval << ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  108238:	e3a0101e 	mov	r1, #30
  10823c:	e30400a8 	movw	r0, #16552	; 0x40a8
  108240:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  108244:	ebffe219 	bl	100ab0 <alt_clk_mgr_wait>
            if (restore_0)
  108248:	e55b300d 	ldrb	r3, [fp, #-13]
  10824c:	e3530000 	cmp	r3, #0
  108250:	0a000003 	beq	108264 <alt_clk_divider_set+0x1fd0>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
  108254:	e30430a0 	movw	r3, #16544	; 0x40a0
  108258:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10825c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108260:	e5832000 	str	r2, [r3]
            }
            ret = ALT_E_SUCCESS;
  108264:	e3a03000 	mov	r3, #0
  108268:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
        }
        break;
  10826c:	ea000077 	b	108450 <alt_clk_divider_set+0x21bc>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
  108270:	e3e03007 	mvn	r3, #7
  108274:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  108278:	ea000074 	b	108450 <alt_clk_divider_set+0x21bc>

    case ALT_CLK_MAIN_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  10827c:	e30430ac 	movw	r3, #16556	; 0x40ac
  108280:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108284:	e5933000 	ldr	r3, [r3]
  108288:	e2033030 	and	r3, r3, #48	; 0x30
  10828c:	e1a03223 	lsr	r3, r3, #4
  108290:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        /* get the QSPI clock source */
        restore_0 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
  108294:	e30430a0 	movw	r3, #16544	; 0x40a0
  108298:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10829c:	e5933000 	ldr	r3, [r3]
  1082a0:	e2033b02 	and	r3, r3, #2048	; 0x800
  1082a4:	e3530000 	cmp	r3, #0
  1082a8:	13a03001 	movne	r3, #1
  1082ac:	03a03000 	moveq	r3, #0
  1082b0:	e54b300d 	strb	r3, [fp, #-13]
        /* and the current enable state */
        wrval = div - 1;
  1082b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1082b8:	e2433001 	sub	r3, r3, #1
  1082bc:	e50b300c 	str	r3, [fp, #-12]

        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
  1082c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1082c4:	e3530001 	cmp	r3, #1
  1082c8:	1a00002c 	bne	108380 <alt_clk_divider_set+0x20ec>
        {           /* if the main_qspi_clk (Main PLL C3 Ouput) input is selected */
            if (div <= ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK)
  1082cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1082d0:	e3530c02 	cmp	r3, #512	; 0x200
  1082d4:	2a000026 	bcs	108374 <alt_clk_divider_set+0x20e0>
            {
                if (restore_0)
  1082d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1082dc:	e3530000 	cmp	r3, #0
  1082e0:	0a000006 	beq	108300 <alt_clk_divider_set+0x206c>
                {
                    alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
  1082e4:	e30430a0 	movw	r3, #16544	; 0x40a0
  1082e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1082ec:	e30420a0 	movw	r2, #16544	; 0x40a0
  1082f0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1082f4:	e5922000 	ldr	r2, [r2]
  1082f8:	e3c22b02 	bic	r2, r2, #2048	; 0x800
  1082fc:	e5832000 	str	r2, [r3]
                }                /* gate off the QSPI clock */

                alt_clk_pllcounter_write(ALT_CLKMGR_MAINPLL_VCO_ADDR,
  108300:	e3a03019 	mov	r3, #25
  108304:	e58d3004 	str	r3, [sp, #4]
  108308:	e3a03008 	mov	r3, #8
  10830c:	e58d3000 	str	r3, [sp]
  108310:	e51b300c 	ldr	r3, [fp, #-12]
  108314:	e3042054 	movw	r2, #16468	; 0x4054
  108318:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10831c:	e3041074 	movw	r1, #16500	; 0x4074
  108320:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  108324:	e3040040 	movw	r0, #16448	; 0x4040
  108328:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10832c:	ebffe241 	bl	100c38 <alt_clk_pllcounter_write>
                                         ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,
                                         wrval,
                                         ALT_CLK_PLL_RST_BIT_C3,
                                         ALT_CLKMGR_MAINPLL_VCO_OUTRST_LSB);

                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  108330:	e3a0101e 	mov	r1, #30
  108334:	e3040054 	movw	r0, #16468	; 0x4054
  108338:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  10833c:	ebffe1db 	bl	100ab0 <alt_clk_mgr_wait>
                if (restore_0)
  108340:	e55b300d 	ldrb	r3, [fp, #-13]
  108344:	e3530000 	cmp	r3, #0
  108348:	0a000006 	beq	108368 <alt_clk_divider_set+0x20d4>
                {
                    alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
  10834c:	e30430a0 	movw	r3, #16544	; 0x40a0
  108350:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108354:	e30420a0 	movw	r2, #16544	; 0x40a0
  108358:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10835c:	e5922000 	ldr	r2, [r2]
  108360:	e3822b02 	orr	r2, r2, #2048	; 0x800
  108364:	e5832000 	str	r2, [r3]
                    /* if the QSPI clock was gated on (enabled) before, return it to that state */
                }
                ret = ALT_E_SUCCESS;
  108368:	e3a03000 	mov	r3, #0
  10836c:	e50b3008 	str	r3, [fp, #-8]
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  108370:	ea000035 	b	10844c <alt_clk_divider_set+0x21b8>
                }
                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ARG_RANGE;
  108374:	e3e03007 	mvn	r3, #7
  108378:	e50b3008 	str	r3, [fp, #-8]
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  10837c:	ea000032 	b	10844c <alt_clk_divider_set+0x21b8>
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
  108380:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108384:	e3530002 	cmp	r3, #2
  108388:	1a00002f 	bne	10844c <alt_clk_divider_set+0x21b8>
        {
            if (div <= ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_SET_MSK)
  10838c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  108390:	e3530c02 	cmp	r3, #512	; 0x200
  108394:	2a000026 	bcs	108434 <alt_clk_divider_set+0x21a0>
            {
                if (restore_0)
  108398:	e55b300d 	ldrb	r3, [fp, #-13]
  10839c:	e3530000 	cmp	r3, #0
  1083a0:	0a000006 	beq	1083c0 <alt_clk_divider_set+0x212c>
                {
                    alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
  1083a4:	e30430a0 	movw	r3, #16544	; 0x40a0
  1083a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1083ac:	e30420a0 	movw	r2, #16544	; 0x40a0
  1083b0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1083b4:	e5922000 	ldr	r2, [r2]
  1083b8:	e3c22b02 	bic	r2, r2, #2048	; 0x800
  1083bc:	e5832000 	str	r2, [r3]
                }                /* gate off the QSPI clock */

                alt_clk_pllcounter_write(ALT_CLKMGR_PERPLL_VCO_ADDR,
  1083c0:	e3a03019 	mov	r3, #25
  1083c4:	e58d3004 	str	r3, [sp, #4]
  1083c8:	e3a03004 	mov	r3, #4
  1083cc:	e58d3000 	str	r3, [sp]
  1083d0:	e51b300c 	ldr	r3, [fp, #-12]
  1083d4:	e3042090 	movw	r2, #16528	; 0x4090
  1083d8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  1083dc:	e30410b0 	movw	r1, #16560	; 0x40b0
  1083e0:	e34f1fd0 	movt	r1, #65488	; 0xffd0
  1083e4:	e3040080 	movw	r0, #16512	; 0x4080
  1083e8:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1083ec:	ebffe211 	bl	100c38 <alt_clk_pllcounter_write>
                                         ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,
                                         wrval,
                                         ALT_CLK_PLL_RST_BIT_C2,
                                         ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
  1083f0:	e3a0101e 	mov	r1, #30
  1083f4:	e3040090 	movw	r0, #16528	; 0x4090
  1083f8:	e34f0fd0 	movt	r0, #65488	; 0xffd0
  1083fc:	ebffe1ab 	bl	100ab0 <alt_clk_mgr_wait>
                if (restore_0)
  108400:	e55b300d 	ldrb	r3, [fp, #-13]
  108404:	e3530000 	cmp	r3, #0
  108408:	0a000006 	beq	108428 <alt_clk_divider_set+0x2194>
                {
                    alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
  10840c:	e30430a0 	movw	r3, #16544	; 0x40a0
  108410:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108414:	e30420a0 	movw	r2, #16544	; 0x40a0
  108418:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10841c:	e5922000 	ldr	r2, [r2]
  108420:	e3822b02 	orr	r2, r2, #2048	; 0x800
  108424:	e5832000 	str	r2, [r3]
                    /* if the QSPI clock was gated on (enabled) before, return it to that state */
                }
                ret = ALT_E_SUCCESS;
  108428:	e3a03000 	mov	r3, #0
  10842c:	e50b3008 	str	r3, [fp, #-8]
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  108430:	ea000005 	b	10844c <alt_clk_divider_set+0x21b8>
                }
                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ARG_RANGE;
  108434:	e3e03007 	mvn	r3, #7
  108438:	e50b3008 	str	r3, [fp, #-8]
            }
        }
        break;
  10843c:	ea000002 	b	10844c <alt_clk_divider_set+0x21b8>

    default:
        ret = ALT_E_BAD_ARG;
  108440:	e3e03008 	mvn	r3, #8
  108444:	e50b3008 	str	r3, [fp, #-8]
        break;
  108448:	ea000000 	b	108450 <alt_clk_divider_set+0x21bc>
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        break;
  10844c:	e1a00000 	nop			; (mov r0, r0)
    default:
        ret = ALT_E_BAD_ARG;
        break;
    }

    return ret;
  108450:	e51b3008 	ldr	r3, [fp, #-8]
}
  108454:	e1a00003 	mov	r0, r3
  108458:	e24bd004 	sub	sp, fp, #4
  10845c:	e8bd8800 	pop	{fp, pc}

00108460 <alt_clk_freq_get>:

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
  108460:	e92d4800 	push	{fp, lr}
  108464:	e28db004 	add	fp, sp, #4
  108468:	e24dd028 	sub	sp, sp, #40	; 0x28
  10846c:	e1a03000 	mov	r3, r0
  108470:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  108474:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
  108478:	e3e03008 	mvn	r3, #8
  10847c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t        temp = 0;
  108480:	e3a03000 	mov	r3, #0
  108484:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    uint64_t        numer = 0;
  108488:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
  10848c:	ed4b0b05 	vstr	d16, [fp, #-20]	; 0xffffffec
    uint64_t        denom = 1;
  108490:	e3a02001 	mov	r2, #1
  108494:	e3a03000 	mov	r3, #0
  108498:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

    if (freq == NULL)
  10849c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1084a0:	e3530000 	cmp	r3, #0
  1084a4:	1a000001 	bne	1084b0 <alt_clk_freq_get+0x50>
    {
        return ret;
  1084a8:	e51b3008 	ldr	r3, [fp, #-8]
  1084ac:	ea0006b8 	b	109f94 <alt_clk_freq_get+0x1b34>
    }

    switch (clk)
  1084b0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1084b4:	e3530040 	cmp	r3, #64	; 0x40
  1084b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1084bc:	ea000656 	b	109e1c <alt_clk_freq_get+0x19bc>
  1084c0:	001085c4 	andseq	r8, r0, r4, asr #11
  1084c4:	001085e8 	andseq	r8, r0, r8, ror #11
  1084c8:	0010860c 	andseq	r8, r0, ip, lsl #12
  1084cc:	00108630 	andseq	r8, r0, r0, lsr r6
  1084d0:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1084d4:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1084d8:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1084dc:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1084e0:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1084e4:	00108654 	andseq	r8, r0, r4, asr r6
  1084e8:	001086ac 	andseq	r8, r0, ip, lsr #13
  1084ec:	00108784 	andseq	r8, r0, r4, lsl #15
  1084f0:	001085c4 	andseq	r8, r0, r4, asr #11
  1084f4:	0010885c 	andseq	r8, r0, ip, asr r8
  1084f8:	0010885c 	andseq	r8, r0, ip, asr r8
  1084fc:	0010885c 	andseq	r8, r0, ip, asr r8
  108500:	0010885c 	andseq	r8, r0, ip, asr r8
  108504:	0010885c 	andseq	r8, r0, ip, asr r8
  108508:	0010885c 	andseq	r8, r0, ip, asr r8
  10850c:	001088b8 			; <UNDEFINED> instruction: 0x001088b8
  108510:	001089c0 	andseq	r8, r0, r0, asr #19
  108514:	00108910 	andseq	r8, r0, r0, lsl r9
  108518:	00108a70 	andseq	r8, r0, r0, ror sl
  10851c:	00108ac8 	andseq	r8, r0, r8, asr #21
  108520:	00108b78 	andseq	r8, r0, r8, ror fp
  108524:	00108a70 	andseq	r8, r0, r0, ror sl
  108528:	00108c80 	andseq	r8, r0, r0, lsl #25
  10852c:	00108ddc 			; <UNDEFINED> instruction: 0x00108ddc
  108530:	00108f3c 	andseq	r8, r0, ip, lsr pc
  108534:	00108fe4 	andseq	r8, r0, r4, ror #31
  108538:	00109238 	andseq	r9, r0, r8, lsr r2
  10853c:	00108f3c 	andseq	r8, r0, ip, lsr pc
  108540:	001090e4 	andseq	r9, r0, r4, ror #1
  108544:	00109334 	andseq	r9, r0, r4, lsr r3
  108548:	0010938c 	andseq	r9, r0, ip, lsl #7
  10854c:	001093e4 	andseq	r9, r0, r4, ror #7
  108550:	001093e4 	andseq	r9, r0, r4, ror #7
  108554:	0010943c 	andseq	r9, r0, ip, lsr r4
  108558:	0010943c 	andseq	r9, r0, ip, lsr r4
  10855c:	0010943c 	andseq	r9, r0, ip, lsr r4
  108560:	0010943c 	andseq	r9, r0, ip, lsr r4
  108564:	0010943c 	andseq	r9, r0, ip, lsr r4
  108568:	0010943c 	andseq	r9, r0, ip, lsr r4
  10856c:	00109548 	andseq	r9, r0, r8, asr #10
  108570:	001095f8 			; <UNDEFINED> instruction: 0x001095f8
  108574:	00109ba0 	andseq	r9, r0, r0, lsr #23
  108578:	00109a34 	andseq	r9, r0, r4, lsr sl
  10857c:	00109a28 	andseq	r9, r0, r8, lsr #20
  108580:	00109910 	andseq	r9, r0, r0, lsl r9
  108584:	00109498 	mulseq	r0, r8, r4
  108588:	001094f0 			; <UNDEFINED> instruction: 0x001094f0
  10858c:	001096a8 	andseq	r9, r0, r8, lsr #13
  108590:	00109758 	andseq	r9, r0, r8, asr r7
  108594:	00109808 	andseq	r9, r0, r8, lsl #16
  108598:	001098b8 			; <UNDEFINED> instruction: 0x001098b8
  10859c:	00109cbc 			; <UNDEFINED> instruction: 0x00109cbc
  1085a0:	00109d14 	andseq	r9, r0, r4, lsl sp
  1085a4:	00109d6c 	andseq	r9, r0, ip, ror #26
  1085a8:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1085ac:	00109e1c 	andseq	r9, r0, ip, lsl lr
  1085b0:	00109dc4 	andseq	r9, r0, r4, asr #27
  1085b4:	00109cbc 			; <UNDEFINED> instruction: 0x00109cbc
  1085b8:	00109d14 	andseq	r9, r0, r4, lsl sp
  1085bc:	00109d6c 	andseq	r9, r0, ip, ror #26
  1085c0:	00109dc4 	andseq	r9, r0, r4, asr #27
    {
        /* External Inputs */
    case ALT_CLK_IN_PIN_OSC1:
    case ALT_CLK_OSC1:
        numer = alt_ext_clk_paramblok.clkosc1.freqcur;
  1085c4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1085c8:	e3403011 	movt	r3, #17
  1085cc:	e5933000 	ldr	r3, [r3]
  1085d0:	e1a02003 	mov	r2, r3
  1085d4:	e3a03000 	mov	r3, #0
  1085d8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
  1085dc:	e3a03000 	mov	r3, #0
  1085e0:	e50b3008 	str	r3, [fp, #-8]
        break;
  1085e4:	ea00064e 	b	109f24 <alt_clk_freq_get+0x1ac4>

    case ALT_CLK_IN_PIN_OSC2:
        numer = alt_ext_clk_paramblok.clkosc2.freqcur;
  1085e8:	e30732b0 	movw	r3, #29360	; 0x72b0
  1085ec:	e3403011 	movt	r3, #17
  1085f0:	e5933010 	ldr	r3, [r3, #16]
  1085f4:	e1a02003 	mov	r2, r3
  1085f8:	e3a03000 	mov	r3, #0
  1085fc:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
  108600:	e3a03000 	mov	r3, #0
  108604:	e50b3008 	str	r3, [fp, #-8]
        break;
  108608:	ea000645 	b	109f24 <alt_clk_freq_get+0x1ac4>

    case ALT_CLK_F2H_PERIPH_REF:
        numer = alt_ext_clk_paramblok.periph.freqcur;
  10860c:	e30732b0 	movw	r3, #29360	; 0x72b0
  108610:	e3403011 	movt	r3, #17
  108614:	e5933020 	ldr	r3, [r3, #32]
  108618:	e1a02003 	mov	r2, r3
  10861c:	e3a03000 	mov	r3, #0
  108620:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
  108624:	e3a03000 	mov	r3, #0
  108628:	e50b3008 	str	r3, [fp, #-8]
        break;
  10862c:	ea00063c 	b	109f24 <alt_clk_freq_get+0x1ac4>

    case ALT_CLK_F2H_SDRAM_REF:
        numer = alt_ext_clk_paramblok.sdram.freqcur;
  108630:	e30732b0 	movw	r3, #29360	; 0x72b0
  108634:	e3403011 	movt	r3, #17
  108638:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10863c:	e1a02003 	mov	r2, r3
  108640:	e3a03000 	mov	r3, #0
  108644:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
  108648:	e3a03000 	mov	r3, #0
  10864c:	e50b3008 	str	r3, [fp, #-8]
        break;
  108650:	ea000633 	b	109f24 <alt_clk_freq_get+0x1ac4>

        /* PLLs */
    case ALT_CLK_MAIN_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE)
  108654:	e3a00009 	mov	r0, #9
  108658:	ebffe40f 	bl	10169c <alt_clk_pll_is_bypassed>
  10865c:	e1a03000 	mov	r3, r0
  108660:	e3530001 	cmp	r3, #1
  108664:	1a000006 	bne	108684 <alt_clk_freq_get+0x224>
        {
            temp = alt_ext_clk_paramblok.clkosc1.freqcur;
  108668:	e30732b0 	movw	r3, #29360	; 0x72b0
  10866c:	e3403011 	movt	r3, #17
  108670:	e5933000 	ldr	r3, [r3]
  108674:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            ret = ALT_E_SUCCESS;
  108678:	e3a03000 	mov	r3, #0
  10867c:	e50b3008 	str	r3, [fp, #-8]
  108680:	ea000004 	b	108698 <alt_clk_freq_get+0x238>
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108684:	e24b3020 	sub	r3, fp, #32
  108688:	e1a01003 	mov	r1, r3
  10868c:	e3a00009 	mov	r0, #9
  108690:	ebfff21e 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108694:	e50b0008 	str	r0, [fp, #-8]
        }
        numer = (uint64_t) temp;
  108698:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10869c:	e1a02003 	mov	r2, r3
  1086a0:	e3a03000 	mov	r3, #0
  1086a4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        break;
  1086a8:	ea00061d 	b	109f24 <alt_clk_freq_get+0x1ac4>

    case ALT_CLK_PERIPHERAL_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE)
  1086ac:	e3a0000a 	mov	r0, #10
  1086b0:	ebffe3f9 	bl	10169c <alt_clk_pll_is_bypassed>
  1086b4:	e1a03000 	mov	r3, r0
  1086b8:	e3530001 	cmp	r3, #1
  1086bc:	1a000026 	bne	10875c <alt_clk_freq_get+0x2fc>
        {
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
  1086c0:	e3043080 	movw	r3, #16512	; 0x4080
  1086c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1086c8:	e5933000 	ldr	r3, [r3]
  1086cc:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  1086d0:	e1a03b23 	lsr	r3, r3, #22
  1086d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
  1086d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1086dc:	e3530000 	cmp	r3, #0
  1086e0:	1a000006 	bne	108700 <alt_clk_freq_get+0x2a0>
            {
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
  1086e4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1086e8:	e3403011 	movt	r3, #17
  1086ec:	e5933000 	ldr	r3, [r3]
  1086f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                ret = ALT_E_SUCCESS;
  1086f4:	e3a03000 	mov	r3, #0
  1086f8:	e50b3008 	str	r3, [fp, #-8]
  1086fc:	ea00001b 	b	108770 <alt_clk_freq_get+0x310>
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
  108700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108704:	e3530001 	cmp	r3, #1
  108708:	1a000006 	bne	108728 <alt_clk_freq_get+0x2c8>
            {
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
  10870c:	e30732b0 	movw	r3, #29360	; 0x72b0
  108710:	e3403011 	movt	r3, #17
  108714:	e5933010 	ldr	r3, [r3, #16]
  108718:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                ret = ALT_E_SUCCESS;
  10871c:	e3a03000 	mov	r3, #0
  108720:	e50b3008 	str	r3, [fp, #-8]
  108724:	ea000011 	b	108770 <alt_clk_freq_get+0x310>
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
  108728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10872c:	e3530002 	cmp	r3, #2
  108730:	1a000006 	bne	108750 <alt_clk_freq_get+0x2f0>
            {
                temp = alt_ext_clk_paramblok.periph.freqcur;
  108734:	e30732b0 	movw	r3, #29360	; 0x72b0
  108738:	e3403011 	movt	r3, #17
  10873c:	e5933020 	ldr	r3, [r3, #32]
  108740:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                ret = ALT_E_SUCCESS;
  108744:	e3a03000 	mov	r3, #0
  108748:	e50b3008 	str	r3, [fp, #-8]
  10874c:	ea000007 	b	108770 <alt_clk_freq_get+0x310>
            }
            else
            {
                ret = ALT_E_ERROR;
  108750:	e3e03000 	mvn	r3, #0
  108754:	e50b3008 	str	r3, [fp, #-8]
  108758:	ea000004 	b	108770 <alt_clk_freq_get+0x310>
            }
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  10875c:	e24b3020 	sub	r3, fp, #32
  108760:	e1a01003 	mov	r1, r3
  108764:	e3a0000a 	mov	r0, #10
  108768:	ebfff1e8 	bl	104f10 <alt_clk_pll_vco_freq_get>
  10876c:	e50b0008 	str	r0, [fp, #-8]
        }
        numer = (uint64_t) temp;
  108770:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108774:	e1a02003 	mov	r2, r3
  108778:	e3a03000 	mov	r3, #0
  10877c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        break;
  108780:	ea0005e7 	b	109f24 <alt_clk_freq_get+0x1ac4>

    case ALT_CLK_SDRAM_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE)
  108784:	e3a0000b 	mov	r0, #11
  108788:	ebffe3c3 	bl	10169c <alt_clk_pll_is_bypassed>
  10878c:	e1a03000 	mov	r3, r0
  108790:	e3530001 	cmp	r3, #1
  108794:	1a000026 	bne	108834 <alt_clk_freq_get+0x3d4>
        {
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
  108798:	e30430c0 	movw	r3, #16576	; 0x40c0
  10879c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1087a0:	e5933000 	ldr	r3, [r3]
  1087a4:	e2033503 	and	r3, r3, #12582912	; 0xc00000
  1087a8:	e1a03b23 	lsr	r3, r3, #22
  1087ac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
  1087b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1087b4:	e3530000 	cmp	r3, #0
  1087b8:	1a000006 	bne	1087d8 <alt_clk_freq_get+0x378>
            {
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
  1087bc:	e30732b0 	movw	r3, #29360	; 0x72b0
  1087c0:	e3403011 	movt	r3, #17
  1087c4:	e5933000 	ldr	r3, [r3]
  1087c8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                ret = ALT_E_SUCCESS;
  1087cc:	e3a03000 	mov	r3, #0
  1087d0:	e50b3008 	str	r3, [fp, #-8]
  1087d4:	ea00001b 	b	108848 <alt_clk_freq_get+0x3e8>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
  1087d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1087dc:	e3530001 	cmp	r3, #1
  1087e0:	1a000006 	bne	108800 <alt_clk_freq_get+0x3a0>
            {
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
  1087e4:	e30732b0 	movw	r3, #29360	; 0x72b0
  1087e8:	e3403011 	movt	r3, #17
  1087ec:	e5933010 	ldr	r3, [r3, #16]
  1087f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                ret = ALT_E_SUCCESS;
  1087f4:	e3a03000 	mov	r3, #0
  1087f8:	e50b3008 	str	r3, [fp, #-8]
  1087fc:	ea000011 	b	108848 <alt_clk_freq_get+0x3e8>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
  108800:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108804:	e3530002 	cmp	r3, #2
  108808:	1a000006 	bne	108828 <alt_clk_freq_get+0x3c8>
            {
                temp = alt_ext_clk_paramblok.sdram.freqcur;
  10880c:	e30732b0 	movw	r3, #29360	; 0x72b0
  108810:	e3403011 	movt	r3, #17
  108814:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  108818:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                ret = ALT_E_SUCCESS;
  10881c:	e3a03000 	mov	r3, #0
  108820:	e50b3008 	str	r3, [fp, #-8]
  108824:	ea000007 	b	108848 <alt_clk_freq_get+0x3e8>
            }
            else
            {
                ret = ALT_E_ERROR;
  108828:	e3e03000 	mvn	r3, #0
  10882c:	e50b3008 	str	r3, [fp, #-8]
  108830:	ea000004 	b	108848 <alt_clk_freq_get+0x3e8>
            }
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
  108834:	e24b3020 	sub	r3, fp, #32
  108838:	e1a01003 	mov	r1, r3
  10883c:	e3a0000b 	mov	r0, #11
  108840:	ebfff1b2 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108844:	e50b0008 	str	r0, [fp, #-8]
        }
        numer = (uint64_t) temp;
  108848:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10884c:	e1a02003 	mov	r2, r3
  108850:	e3a03000 	mov	r3, #0
  108854:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
        /* denom = 1 by default */
        break;
  108858:	ea0005b1 	b	109f24 <alt_clk_freq_get+0x1ac4>
    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_MAIN_PLL_C3:
    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_PLL_C5:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  10885c:	e24b3020 	sub	r3, fp, #32
  108860:	e1a01003 	mov	r1, r3
  108864:	e3a00009 	mov	r0, #9
  108868:	ebfff1a8 	bl	104f10 <alt_clk_pll_vco_freq_get>
  10886c:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108870:	e51b3008 	ldr	r3, [fp, #-8]
  108874:	e3530000 	cmp	r3, #0
  108878:	1a00056a 	bne	109e28 <alt_clk_freq_get+0x19c8>
        {
            numer = (uint64_t) temp;
  10887c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108880:	e1a02003 	mov	r2, r3
  108884:	e3a03000 	mov	r3, #0
  108888:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(clk, &temp);
  10888c:	e24b2020 	sub	r2, fp, #32
  108890:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  108894:	e1a01002 	mov	r1, r2
  108898:	e1a00003 	mov	r0, r3
  10889c:	ebfff364 	bl	105634 <alt_clk_divider_get>
  1088a0:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  1088a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1088a8:	e1a02003 	mov	r2, r3
  1088ac:	e3a03000 	mov	r3, #0
  1088b0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1088b4:	ea00055b 	b	109e28 <alt_clk_freq_get+0x19c8>

    case ALT_CLK_MPU:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  1088b8:	e24b3020 	sub	r3, fp, #32
  1088bc:	e1a01003 	mov	r1, r3
  1088c0:	e3a00009 	mov	r0, #9
  1088c4:	ebfff191 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1088c8:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1088cc:	e51b3008 	ldr	r3, [fp, #-8]
  1088d0:	e3530000 	cmp	r3, #0
  1088d4:	1a000555 	bne	109e30 <alt_clk_freq_get+0x19d0>
        {
            numer = (uint64_t) temp;
  1088d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1088dc:	e1a02003 	mov	r2, r3
  1088e0:	e3a03000 	mov	r3, #0
  1088e4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
  1088e8:	e24b3020 	sub	r3, fp, #32
  1088ec:	e1a01003 	mov	r1, r3
  1088f0:	e3a0000d 	mov	r0, #13
  1088f4:	ebfff34e 	bl	105634 <alt_clk_divider_get>
  1088f8:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  1088fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108900:	e1a02003 	mov	r2, r3
  108904:	e3a03000 	mov	r3, #0
  108908:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  10890c:	ea000547 	b	109e30 <alt_clk_freq_get+0x19d0>

    case ALT_CLK_MPU_PERIPH:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108910:	e24b3020 	sub	r3, fp, #32
  108914:	e1a01003 	mov	r1, r3
  108918:	e3a00009 	mov	r0, #9
  10891c:	ebfff17b 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108920:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108924:	e51b3008 	ldr	r3, [fp, #-8]
  108928:	e3530000 	cmp	r3, #0
  10892c:	1a000008 	bne	108954 <alt_clk_freq_get+0x4f4>
        {
            numer = (uint64_t) temp;
  108930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108934:	e1a02003 	mov	r2, r3
  108938:	e3a03000 	mov	r3, #0
  10893c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
  108940:	e24b3020 	sub	r3, fp, #32
  108944:	e1a01003 	mov	r1, r3
  108948:	e3a0000d 	mov	r0, #13
  10894c:	ebfff338 	bl	105634 <alt_clk_divider_get>
  108950:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  108954:	e51b3008 	ldr	r3, [fp, #-8]
  108958:	e3530000 	cmp	r3, #0
  10895c:	1a000535 	bne	109e38 <alt_clk_freq_get+0x19d8>
        {
            denom = (uint64_t) temp;
  108960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108964:	e1a02003 	mov	r2, r3
  108968:	e3a03000 	mov	r3, #0
  10896c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_MPU_PERIPH, &temp);
  108970:	e24b3020 	sub	r3, fp, #32
  108974:	e1a01003 	mov	r1, r3
  108978:	e3a00015 	mov	r0, #21
  10897c:	ebfff32c 	bl	105634 <alt_clk_divider_get>
  108980:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  108984:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108988:	e1a02003 	mov	r2, r3
  10898c:	e3a03000 	mov	r3, #0
  108990:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108994:	e0000192 	mul	r0, r2, r1
  108998:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10899c:	e0010193 	mul	r1, r3, r1
  1089a0:	e0801001 	add	r1, r0, r1
  1089a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1089a8:	e0832290 	umull	r2, r3, r0, r2
  1089ac:	e0811003 	add	r1, r1, r3
  1089b0:	e1a03001 	mov	r3, r1
  1089b4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  1089b8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1089bc:	ea00051d 	b	109e38 <alt_clk_freq_get+0x19d8>

    case ALT_CLK_MPU_L2_RAM:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  1089c0:	e24b3020 	sub	r3, fp, #32
  1089c4:	e1a01003 	mov	r1, r3
  1089c8:	e3a00009 	mov	r0, #9
  1089cc:	ebfff14f 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1089d0:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1089d4:	e51b3008 	ldr	r3, [fp, #-8]
  1089d8:	e3530000 	cmp	r3, #0
  1089dc:	1a000008 	bne	108a04 <alt_clk_freq_get+0x5a4>
        {
            numer = (uint64_t) temp;
  1089e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1089e4:	e1a02003 	mov	r2, r3
  1089e8:	e3a03000 	mov	r3, #0
  1089ec:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
  1089f0:	e24b3020 	sub	r3, fp, #32
  1089f4:	e1a01003 	mov	r1, r3
  1089f8:	e3a0000d 	mov	r0, #13
  1089fc:	ebfff30c 	bl	105634 <alt_clk_divider_get>
  108a00:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  108a04:	e51b3008 	ldr	r3, [fp, #-8]
  108a08:	e3530000 	cmp	r3, #0
  108a0c:	1a00050b 	bne	109e40 <alt_clk_freq_get+0x19e0>
        {
            denom = (uint64_t) temp;
  108a10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108a14:	e1a02003 	mov	r2, r3
  108a18:	e3a03000 	mov	r3, #0
  108a1c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_MPU_L2_RAM, &temp);
  108a20:	e24b3020 	sub	r3, fp, #32
  108a24:	e1a01003 	mov	r1, r3
  108a28:	e3a00014 	mov	r0, #20
  108a2c:	ebfff300 	bl	105634 <alt_clk_divider_get>
  108a30:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  108a34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108a38:	e1a02003 	mov	r2, r3
  108a3c:	e3a03000 	mov	r3, #0
  108a40:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108a44:	e0000192 	mul	r0, r2, r1
  108a48:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108a4c:	e0010193 	mul	r1, r3, r1
  108a50:	e0801001 	add	r1, r0, r1
  108a54:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108a58:	e0832290 	umull	r2, r3, r0, r2
  108a5c:	e0811003 	add	r1, r1, r3
  108a60:	e1a03001 	mov	r3, r1
  108a64:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108a68:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  108a6c:	ea0004f3 	b	109e40 <alt_clk_freq_get+0x19e0>

    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108a70:	e24b3020 	sub	r3, fp, #32
  108a74:	e1a01003 	mov	r1, r3
  108a78:	e3a00009 	mov	r0, #9
  108a7c:	ebfff123 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108a80:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108a84:	e51b3008 	ldr	r3, [fp, #-8]
  108a88:	e3530000 	cmp	r3, #0
  108a8c:	1a0004ed 	bne	109e48 <alt_clk_freq_get+0x19e8>
        {
            numer = (uint64_t) temp;
  108a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108a94:	e1a02003 	mov	r2, r3
  108a98:	e3a03000 	mov	r3, #0
  108a9c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
  108aa0:	e24b3020 	sub	r3, fp, #32
  108aa4:	e1a01003 	mov	r1, r3
  108aa8:	e3a0000e 	mov	r0, #14
  108aac:	ebfff2e0 	bl	105634 <alt_clk_divider_get>
  108ab0:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  108ab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108ab8:	e1a02003 	mov	r2, r3
  108abc:	e3a03000 	mov	r3, #0
  108ac0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  108ac4:	ea0004df 	b	109e48 <alt_clk_freq_get+0x19e8>

    case ALT_CLK_L3_MP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108ac8:	e24b3020 	sub	r3, fp, #32
  108acc:	e1a01003 	mov	r1, r3
  108ad0:	e3a00009 	mov	r0, #9
  108ad4:	ebfff10d 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108ad8:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108adc:	e51b3008 	ldr	r3, [fp, #-8]
  108ae0:	e3530000 	cmp	r3, #0
  108ae4:	1a000008 	bne	108b0c <alt_clk_freq_get+0x6ac>
        {
            numer = (uint64_t) temp;
  108ae8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108aec:	e1a02003 	mov	r2, r3
  108af0:	e3a03000 	mov	r3, #0
  108af4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
  108af8:	e24b3020 	sub	r3, fp, #32
  108afc:	e1a01003 	mov	r1, r3
  108b00:	e3a0000e 	mov	r0, #14
  108b04:	ebfff2ca 	bl	105634 <alt_clk_divider_get>
  108b08:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  108b0c:	e51b3008 	ldr	r3, [fp, #-8]
  108b10:	e3530000 	cmp	r3, #0
  108b14:	1a0004cd 	bne	109e50 <alt_clk_freq_get+0x19f0>
        {
            denom = (uint64_t) temp;
  108b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108b1c:	e1a02003 	mov	r2, r3
  108b20:	e3a03000 	mov	r3, #0
  108b24:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
  108b28:	e24b3020 	sub	r3, fp, #32
  108b2c:	e1a01003 	mov	r1, r3
  108b30:	e3a00017 	mov	r0, #23
  108b34:	ebfff2be 	bl	105634 <alt_clk_divider_get>
  108b38:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  108b3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108b40:	e1a02003 	mov	r2, r3
  108b44:	e3a03000 	mov	r3, #0
  108b48:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108b4c:	e0000192 	mul	r0, r2, r1
  108b50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b54:	e0010193 	mul	r1, r3, r1
  108b58:	e0801001 	add	r1, r0, r1
  108b5c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108b60:	e0832290 	umull	r2, r3, r0, r2
  108b64:	e0811003 	add	r1, r1, r3
  108b68:	e1a03001 	mov	r3, r1
  108b6c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108b70:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  108b74:	ea0004b5 	b	109e50 <alt_clk_freq_get+0x19f0>

    case ALT_CLK_L3_SP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108b78:	e24b3020 	sub	r3, fp, #32
  108b7c:	e1a01003 	mov	r1, r3
  108b80:	e3a00009 	mov	r0, #9
  108b84:	ebfff0e1 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108b88:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108b8c:	e51b3008 	ldr	r3, [fp, #-8]
  108b90:	e3530000 	cmp	r3, #0
  108b94:	1a000008 	bne	108bbc <alt_clk_freq_get+0x75c>
        {
            numer = (uint64_t) temp;
  108b98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108b9c:	e1a02003 	mov	r2, r3
  108ba0:	e3a03000 	mov	r3, #0
  108ba4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
  108ba8:	e24b3020 	sub	r3, fp, #32
  108bac:	e1a01003 	mov	r1, r3
  108bb0:	e3a0000e 	mov	r0, #14
  108bb4:	ebfff29e 	bl	105634 <alt_clk_divider_get>
  108bb8:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  108bbc:	e51b3008 	ldr	r3, [fp, #-8]
  108bc0:	e3530000 	cmp	r3, #0
  108bc4:	1a000008 	bne	108bec <alt_clk_freq_get+0x78c>
        {
            denom = (uint64_t) temp;
  108bc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108bcc:	e1a02003 	mov	r2, r3
  108bd0:	e3a03000 	mov	r3, #0
  108bd4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
  108bd8:	e24b3020 	sub	r3, fp, #32
  108bdc:	e1a01003 	mov	r1, r3
  108be0:	e3a00017 	mov	r0, #23
  108be4:	ebfff292 	bl	105634 <alt_clk_divider_get>
  108be8:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  108bec:	e51b3008 	ldr	r3, [fp, #-8]
  108bf0:	e3530000 	cmp	r3, #0
  108bf4:	1a000497 	bne	109e58 <alt_clk_freq_get+0x19f8>
        {
            denom = denom * (uint64_t) temp;
  108bf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108bfc:	e1a02003 	mov	r2, r3
  108c00:	e3a03000 	mov	r3, #0
  108c04:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108c08:	e0000192 	mul	r0, r2, r1
  108c0c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c10:	e0010193 	mul	r1, r3, r1
  108c14:	e0801001 	add	r1, r0, r1
  108c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108c1c:	e0832290 	umull	r2, r3, r0, r2
  108c20:	e0811003 	add	r1, r1, r3
  108c24:	e1a03001 	mov	r3, r1
  108c28:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108c2c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_L3_SP, &temp);
  108c30:	e24b3020 	sub	r3, fp, #32
  108c34:	e1a01003 	mov	r1, r3
  108c38:	e3a00018 	mov	r0, #24
  108c3c:	ebfff27c 	bl	105634 <alt_clk_divider_get>
  108c40:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  108c44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108c48:	e1a02003 	mov	r2, r3
  108c4c:	e3a03000 	mov	r3, #0
  108c50:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108c54:	e0000192 	mul	r0, r2, r1
  108c58:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c5c:	e0010193 	mul	r1, r3, r1
  108c60:	e0801001 	add	r1, r0, r1
  108c64:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108c68:	e0832290 	umull	r2, r3, r0, r2
  108c6c:	e0811003 	add	r1, r1, r3
  108c70:	e1a03001 	mov	r3, r1
  108c74:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108c78:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  108c7c:	ea000475 	b	109e58 <alt_clk_freq_get+0x19f8>

    case ALT_CLK_L4_MP:
        ret = alt_clk_divider_get(ALT_CLK_L4_MP, &temp);
  108c80:	e24b3020 	sub	r3, fp, #32
  108c84:	e1a01003 	mov	r1, r3
  108c88:	e3a0001a 	mov	r0, #26
  108c8c:	ebfff268 	bl	105634 <alt_clk_divider_get>
  108c90:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108c94:	e51b3008 	ldr	r3, [fp, #-8]
  108c98:	e3530000 	cmp	r3, #0
  108c9c:	1a00046f 	bne	109e60 <alt_clk_freq_get+0x1a00>
        {
            denom = (uint64_t) temp;
  108ca0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108ca4:	e1a02003 	mov	r2, r3
  108ca8:	e3a03000 	mov	r3, #0
  108cac:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
  108cb0:	e3043070 	movw	r3, #16496	; 0x4070
  108cb4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108cb8:	e5933000 	ldr	r3, [r3]
  108cbc:	e2033001 	and	r3, r3, #1
  108cc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_MAINPLL)
  108cc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108cc8:	e3530000 	cmp	r3, #0
  108ccc:	1a00001f 	bne	108d50 <alt_clk_freq_get+0x8f0>
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108cd0:	e24b3020 	sub	r3, fp, #32
  108cd4:	e1a01003 	mov	r1, r3
  108cd8:	e3a00009 	mov	r0, #9
  108cdc:	ebfff08b 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108ce0:	e50b0008 	str	r0, [fp, #-8]
                if (ret == ALT_E_SUCCESS)
  108ce4:	e51b3008 	ldr	r3, [fp, #-8]
  108ce8:	e3530000 	cmp	r3, #0
  108cec:	1a00045b 	bne	109e60 <alt_clk_freq_get+0x1a00>
                {
                    numer = (uint64_t) temp;
  108cf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108cf4:	e1a02003 	mov	r2, r3
  108cf8:	e3a03000 	mov	r3, #0
  108cfc:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
  108d00:	e24b3020 	sub	r3, fp, #32
  108d04:	e1a01003 	mov	r1, r3
  108d08:	e3a0000e 	mov	r0, #14
  108d0c:	ebfff248 	bl	105634 <alt_clk_divider_get>
  108d10:	e50b0008 	str	r0, [fp, #-8]
                    denom = denom * (uint64_t) temp;        /* no real harm if temp is garbage data */
  108d14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108d18:	e1a02003 	mov	r2, r3
  108d1c:	e3a03000 	mov	r3, #0
  108d20:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108d24:	e0000192 	mul	r0, r2, r1
  108d28:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108d2c:	e0010193 	mul	r1, r3, r1
  108d30:	e0801001 	add	r1, r0, r1
  108d34:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108d38:	e0832290 	umull	r2, r3, r0, r2
  108d3c:	e0811003 	add	r1, r1, r3
  108d40:	e1a03001 	mov	r3, r1
  108d44:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108d48:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
                    denom = denom * (uint64_t) temp;
                }
            }
        }
        break;
  108d4c:	ea000443 	b	109e60 <alt_clk_freq_get+0x1a00>
                    numer = (uint64_t) temp;
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
                    denom = denom * (uint64_t) temp;        /* no real harm if temp is garbage data */
                }
            }
            else if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL)
  108d50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108d54:	e3530001 	cmp	r3, #1
  108d58:	1a000440 	bne	109e60 <alt_clk_freq_get+0x1a00>
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  108d5c:	e24b3020 	sub	r3, fp, #32
  108d60:	e1a01003 	mov	r1, r3
  108d64:	e3a0000a 	mov	r0, #10
  108d68:	ebfff068 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108d6c:	e50b0008 	str	r0, [fp, #-8]
                if (ret == ALT_E_SUCCESS)
  108d70:	e51b3008 	ldr	r3, [fp, #-8]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	1a000438 	bne	109e60 <alt_clk_freq_get+0x1a00>
                {
                    numer = (uint64_t) temp;
  108d7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108d80:	e1a02003 	mov	r2, r3
  108d84:	e3a03000 	mov	r3, #0
  108d88:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  108d8c:	e24b3020 	sub	r3, fp, #32
  108d90:	e1a01003 	mov	r1, r3
  108d94:	e3a00029 	mov	r0, #41	; 0x29
  108d98:	ebfff225 	bl	105634 <alt_clk_divider_get>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
                    denom = denom * (uint64_t) temp;
  108da0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108da4:	e1a02003 	mov	r2, r3
  108da8:	e3a03000 	mov	r3, #0
  108dac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108db0:	e0000192 	mul	r0, r2, r1
  108db4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108db8:	e0010193 	mul	r1, r3, r1
  108dbc:	e0801001 	add	r1, r0, r1
  108dc0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108dc4:	e0832290 	umull	r2, r3, r0, r2
  108dc8:	e0811003 	add	r1, r1, r3
  108dcc:	e1a03001 	mov	r3, r1
  108dd0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108dd4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
                }
            }
        }
        break;
  108dd8:	ea000420 	b	109e60 <alt_clk_freq_get+0x1a00>

    case ALT_CLK_L4_SP:
        ret = alt_clk_divider_get(ALT_CLK_L4_SP, &temp);
  108ddc:	e24b3020 	sub	r3, fp, #32
  108de0:	e1a01003 	mov	r1, r3
  108de4:	e3a0001b 	mov	r0, #27
  108de8:	ebfff211 	bl	105634 <alt_clk_divider_get>
  108dec:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  108df0:	e51b3008 	ldr	r3, [fp, #-8]
  108df4:	e3530000 	cmp	r3, #0
  108df8:	1a00041a 	bne	109e68 <alt_clk_freq_get+0x1a08>
        {
            denom = (uint64_t) temp;
  108dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108e00:	e1a02003 	mov	r2, r3
  108e04:	e3a03000 	mov	r3, #0
  108e08:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
  108e0c:	e3043070 	movw	r3, #16496	; 0x4070
  108e10:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108e14:	e5933000 	ldr	r3, [r3]
  108e18:	e2033002 	and	r3, r3, #2
  108e1c:	e1a030a3 	lsr	r3, r3, #1
  108e20:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
  108e24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108e28:	e3530000 	cmp	r3, #0
  108e2c:	1a00001f 	bne	108eb0 <alt_clk_freq_get+0xa50>
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108e30:	e24b3020 	sub	r3, fp, #32
  108e34:	e1a01003 	mov	r1, r3
  108e38:	e3a00009 	mov	r0, #9
  108e3c:	ebfff033 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108e40:	e50b0008 	str	r0, [fp, #-8]
                if (ret == ALT_E_SUCCESS)
  108e44:	e51b3008 	ldr	r3, [fp, #-8]
  108e48:	e3530000 	cmp	r3, #0
  108e4c:	1a000405 	bne	109e68 <alt_clk_freq_get+0x1a08>
                {
                    numer = (uint64_t) temp;
  108e50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108e54:	e1a02003 	mov	r2, r3
  108e58:	e3a03000 	mov	r3, #0
  108e5c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
  108e60:	e24b3020 	sub	r3, fp, #32
  108e64:	e1a01003 	mov	r1, r3
  108e68:	e3a0000e 	mov	r0, #14
  108e6c:	ebfff1f0 	bl	105634 <alt_clk_divider_get>
  108e70:	e50b0008 	str	r0, [fp, #-8]
                    denom = denom * (uint64_t) temp;
  108e74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108e78:	e1a02003 	mov	r2, r3
  108e7c:	e3a03000 	mov	r3, #0
  108e80:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108e84:	e0000192 	mul	r0, r2, r1
  108e88:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108e8c:	e0010193 	mul	r1, r3, r1
  108e90:	e0801001 	add	r1, r0, r1
  108e94:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108e98:	e0832290 	umull	r2, r3, r0, r2
  108e9c:	e0811003 	add	r1, r1, r3
  108ea0:	e1a03001 	mov	r3, r1
  108ea4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108ea8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
                    denom = denom * (uint64_t) temp;
                }
            }
        }
        break;
  108eac:	ea0003ed 	b	109e68 <alt_clk_freq_get+0x1a08>
                    numer = (uint64_t) temp;
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
                    denom = denom * (uint64_t) temp;
                }
            }
            else if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL)         /* periph_base_clk */
  108eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108eb4:	e3530001 	cmp	r3, #1
  108eb8:	1a0003ea 	bne	109e68 <alt_clk_freq_get+0x1a08>
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  108ebc:	e24b3020 	sub	r3, fp, #32
  108ec0:	e1a01003 	mov	r1, r3
  108ec4:	e3a0000a 	mov	r0, #10
  108ec8:	ebfff010 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108ecc:	e50b0008 	str	r0, [fp, #-8]
                if (ret == ALT_E_SUCCESS)
  108ed0:	e51b3008 	ldr	r3, [fp, #-8]
  108ed4:	e3530000 	cmp	r3, #0
  108ed8:	1a0003e2 	bne	109e68 <alt_clk_freq_get+0x1a08>
                {
                    numer = (uint64_t) temp;
  108edc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108ee0:	e1a02003 	mov	r2, r3
  108ee4:	e3a03000 	mov	r3, #0
  108ee8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  108eec:	e24b3020 	sub	r3, fp, #32
  108ef0:	e1a01003 	mov	r1, r3
  108ef4:	e3a00029 	mov	r0, #41	; 0x29
  108ef8:	ebfff1cd 	bl	105634 <alt_clk_divider_get>
  108efc:	e50b0008 	str	r0, [fp, #-8]
                    denom = denom * (uint64_t) temp;
  108f00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108f04:	e1a02003 	mov	r2, r3
  108f08:	e3a03000 	mov	r3, #0
  108f0c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  108f10:	e0000192 	mul	r0, r2, r1
  108f14:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108f18:	e0010193 	mul	r1, r3, r1
  108f1c:	e0801001 	add	r1, r0, r1
  108f20:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  108f24:	e0832290 	umull	r2, r3, r0, r2
  108f28:	e0811003 	add	r1, r1, r3
  108f2c:	e1a03001 	mov	r3, r1
  108f30:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  108f34:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
                }
            }
        }
        break;
  108f38:	ea0003ca 	b	109e68 <alt_clk_freq_get+0x1a08>

    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
  108f3c:	e3043010 	movw	r3, #16400	; 0x4010
  108f40:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108f44:	e5933000 	ldr	r3, [r3]
  108f48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
  108f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108f50:	e2033001 	and	r3, r3, #1
  108f54:	e3530000 	cmp	r3, #0
  108f58:	0a00000b 	beq	108f8c <alt_clk_freq_get+0xb2c>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
  108f5c:	e30732b0 	movw	r3, #29360	; 0x72b0
  108f60:	e3403011 	movt	r3, #17
  108f64:	e5933000 	ldr	r3, [r3]
  108f68:	e1a02003 	mov	r2, r3
  108f6c:	e3a03000 	mov	r3, #0
  108f70:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            denom = 1;
  108f74:	e3a02001 	mov	r2, #1
  108f78:	e3a03000 	mov	r3, #0
  108f7c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = ALT_E_SUCCESS;
  108f80:	e3a03000 	mov	r3, #0
  108f84:	e50b3008 	str	r3, [fp, #-8]
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
                denom = (uint64_t) temp;
            }
        }
        break;
  108f88:	ea0003b8 	b	109e70 <alt_clk_freq_get+0x1a10>
            denom = 1;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  108f8c:	e24b3020 	sub	r3, fp, #32
  108f90:	e1a01003 	mov	r1, r3
  108f94:	e3a00009 	mov	r0, #9
  108f98:	ebffefdc 	bl	104f10 <alt_clk_pll_vco_freq_get>
  108f9c:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  108fa0:	e51b3008 	ldr	r3, [fp, #-8]
  108fa4:	e3530000 	cmp	r3, #0
  108fa8:	1a0003b0 	bne	109e70 <alt_clk_freq_get+0x1a10>
            {
                numer = (uint64_t) temp;
  108fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108fb0:	e1a02003 	mov	r2, r3
  108fb4:	e3a03000 	mov	r3, #0
  108fb8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
  108fbc:	e24b3020 	sub	r3, fp, #32
  108fc0:	e1a01003 	mov	r1, r3
  108fc4:	e3a0000f 	mov	r0, #15
  108fc8:	ebfff199 	bl	105634 <alt_clk_divider_get>
  108fcc:	e50b0008 	str	r0, [fp, #-8]
                denom = (uint64_t) temp;
  108fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108fd4:	e1a02003 	mov	r2, r3
  108fd8:	e3a03000 	mov	r3, #0
  108fdc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            }
        }
        break;
  108fe0:	ea0003a2 	b	109e70 <alt_clk_freq_get+0x1a10>

    case ALT_CLK_DBG_AT:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
  108fe4:	e3043010 	movw	r3, #16400	; 0x4010
  108fe8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  108fec:	e5933000 	ldr	r3, [r3]
  108ff0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
  108ff4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  108ff8:	e2033001 	and	r3, r3, #1
  108ffc:	e3530000 	cmp	r3, #0
  109000:	0a00000b 	beq	109034 <alt_clk_freq_get+0xbd4>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
  109004:	e30732b0 	movw	r3, #29360	; 0x72b0
  109008:	e3403011 	movt	r3, #17
  10900c:	e5933000 	ldr	r3, [r3]
  109010:	e1a02003 	mov	r2, r3
  109014:	e3a03000 	mov	r3, #0
  109018:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            denom = 1;
  10901c:	e3a02001 	mov	r2, #1
  109020:	e3a03000 	mov	r3, #0
  109024:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = ALT_E_SUCCESS;
  109028:	e3a03000 	mov	r3, #0
  10902c:	e50b3008 	str	r3, [fp, #-8]
  109030:	ea000010 	b	109078 <alt_clk_freq_get+0xc18>
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109034:	e24b3020 	sub	r3, fp, #32
  109038:	e1a01003 	mov	r1, r3
  10903c:	e3a00009 	mov	r0, #9
  109040:	ebffefb2 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109044:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109048:	e51b3008 	ldr	r3, [fp, #-8]
  10904c:	e3530000 	cmp	r3, #0
  109050:	1a000008 	bne	109078 <alt_clk_freq_get+0xc18>
            {
                numer = (uint64_t) temp;
  109054:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109058:	e1a02003 	mov	r2, r3
  10905c:	e3a03000 	mov	r3, #0
  109060:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
  109064:	e24b3020 	sub	r3, fp, #32
  109068:	e1a01003 	mov	r1, r3
  10906c:	e3a0000f 	mov	r0, #15
  109070:	ebfff16f 	bl	105634 <alt_clk_divider_get>
  109074:	e50b0008 	str	r0, [fp, #-8]
            }
        }
        if (ret == ALT_E_SUCCESS)
  109078:	e51b3008 	ldr	r3, [fp, #-8]
  10907c:	e3530000 	cmp	r3, #0
  109080:	1a00037c 	bne	109e78 <alt_clk_freq_get+0x1a18>
        {
            denom = (uint64_t) temp;
  109084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109088:	e1a02003 	mov	r2, r3
  10908c:	e3a03000 	mov	r3, #0
  109090:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
  109094:	e24b3020 	sub	r3, fp, #32
  109098:	e1a01003 	mov	r1, r3
  10909c:	e3a0001d 	mov	r0, #29
  1090a0:	ebfff163 	bl	105634 <alt_clk_divider_get>
  1090a4:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  1090a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1090ac:	e1a02003 	mov	r2, r3
  1090b0:	e3a03000 	mov	r3, #0
  1090b4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1090b8:	e0000192 	mul	r0, r2, r1
  1090bc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1090c0:	e0010193 	mul	r1, r3, r1
  1090c4:	e0801001 	add	r1, r0, r1
  1090c8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1090cc:	e0832290 	umull	r2, r3, r0, r2
  1090d0:	e0811003 	add	r1, r1, r3
  1090d4:	e1a03001 	mov	r3, r1
  1090d8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  1090dc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1090e0:	ea000364 	b	109e78 <alt_clk_freq_get+0x1a18>

    case ALT_CLK_DBG:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
  1090e4:	e3043010 	movw	r3, #16400	; 0x4010
  1090e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  1090ec:	e5933000 	ldr	r3, [r3]
  1090f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
  1090f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1090f8:	e2033001 	and	r3, r3, #1
  1090fc:	e3530000 	cmp	r3, #0
  109100:	0a00000a 	beq	109130 <alt_clk_freq_get+0xcd0>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
  109104:	e30732b0 	movw	r3, #29360	; 0x72b0
  109108:	e3403011 	movt	r3, #17
  10910c:	e5933000 	ldr	r3, [r3]
  109110:	e1a02003 	mov	r2, r3
  109114:	e3a03000 	mov	r3, #0
  109118:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            temp = 1;
  10911c:	e3a03001 	mov	r3, #1
  109120:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            ret = ALT_E_SUCCESS;
  109124:	e3a03000 	mov	r3, #0
  109128:	e50b3008 	str	r3, [fp, #-8]
  10912c:	ea000010 	b	109174 <alt_clk_freq_get+0xd14>
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109130:	e24b3020 	sub	r3, fp, #32
  109134:	e1a01003 	mov	r1, r3
  109138:	e3a00009 	mov	r0, #9
  10913c:	ebffef73 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109140:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109144:	e51b3008 	ldr	r3, [fp, #-8]
  109148:	e3530000 	cmp	r3, #0
  10914c:	1a000008 	bne	109174 <alt_clk_freq_get+0xd14>
            {
                numer = (uint64_t) temp;
  109150:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109154:	e1a02003 	mov	r2, r3
  109158:	e3a03000 	mov	r3, #0
  10915c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
  109160:	e24b3020 	sub	r3, fp, #32
  109164:	e1a01003 	mov	r1, r3
  109168:	e3a0000f 	mov	r0, #15
  10916c:	ebfff130 	bl	105634 <alt_clk_divider_get>
  109170:	e50b0008 	str	r0, [fp, #-8]
            }
        }
        if (ret == ALT_E_SUCCESS)
  109174:	e51b3008 	ldr	r3, [fp, #-8]
  109178:	e3530000 	cmp	r3, #0
  10917c:	1a000008 	bne	1091a4 <alt_clk_freq_get+0xd44>
        {
            denom = (uint64_t) temp;
  109180:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109184:	e1a02003 	mov	r2, r3
  109188:	e3a03000 	mov	r3, #0
  10918c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
  109190:	e24b3020 	sub	r3, fp, #32
  109194:	e1a01003 	mov	r1, r3
  109198:	e3a0001d 	mov	r0, #29
  10919c:	ebfff124 	bl	105634 <alt_clk_divider_get>
  1091a0:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  1091a4:	e51b3008 	ldr	r3, [fp, #-8]
  1091a8:	e3530000 	cmp	r3, #0
  1091ac:	1a000333 	bne	109e80 <alt_clk_freq_get+0x1a20>
        {
            denom = denom * (uint64_t) temp;
  1091b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1091b4:	e1a02003 	mov	r2, r3
  1091b8:	e3a03000 	mov	r3, #0
  1091bc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1091c0:	e0000192 	mul	r0, r2, r1
  1091c4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1091c8:	e0010193 	mul	r1, r3, r1
  1091cc:	e0801001 	add	r1, r0, r1
  1091d0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1091d4:	e0832290 	umull	r2, r3, r0, r2
  1091d8:	e0811003 	add	r1, r1, r3
  1091dc:	e1a03001 	mov	r3, r1
  1091e0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  1091e4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_DBG, &temp);
  1091e8:	e24b3020 	sub	r3, fp, #32
  1091ec:	e1a01003 	mov	r1, r3
  1091f0:	e3a00020 	mov	r0, #32
  1091f4:	ebfff10e 	bl	105634 <alt_clk_divider_get>
  1091f8:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  1091fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109200:	e1a02003 	mov	r2, r3
  109204:	e3a03000 	mov	r3, #0
  109208:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10920c:	e0000192 	mul	r0, r2, r1
  109210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109214:	e0010193 	mul	r1, r3, r1
  109218:	e0801001 	add	r1, r0, r1
  10921c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  109220:	e0832290 	umull	r2, r3, r0, r2
  109224:	e0811003 	add	r1, r1, r3
  109228:	e1a03001 	mov	r3, r1
  10922c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  109230:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109234:	ea000311 	b	109e80 <alt_clk_freq_get+0x1a20>

    case ALT_CLK_DBG_TRACE:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
  109238:	e3043010 	movw	r3, #16400	; 0x4010
  10923c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  109240:	e5933000 	ldr	r3, [r3]
  109244:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
  109248:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10924c:	e2033001 	and	r3, r3, #1
  109250:	e3530000 	cmp	r3, #0
  109254:	0a00000a 	beq	109284 <alt_clk_freq_get+0xe24>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
  109258:	e30732b0 	movw	r3, #29360	; 0x72b0
  10925c:	e3403011 	movt	r3, #17
  109260:	e5933000 	ldr	r3, [r3]
  109264:	e1a02003 	mov	r2, r3
  109268:	e3a03000 	mov	r3, #0
  10926c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            temp = 1;
  109270:	e3a03001 	mov	r3, #1
  109274:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            ret = ALT_E_SUCCESS;
  109278:	e3a03000 	mov	r3, #0
  10927c:	e50b3008 	str	r3, [fp, #-8]
  109280:	ea000010 	b	1092c8 <alt_clk_freq_get+0xe68>
        }
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109284:	e24b3020 	sub	r3, fp, #32
  109288:	e1a01003 	mov	r1, r3
  10928c:	e3a00009 	mov	r0, #9
  109290:	ebffef1e 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109294:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109298:	e51b3008 	ldr	r3, [fp, #-8]
  10929c:	e3530000 	cmp	r3, #0
  1092a0:	1a000008 	bne	1092c8 <alt_clk_freq_get+0xe68>
            {
                numer = (uint64_t) temp;
  1092a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1092a8:	e1a02003 	mov	r2, r3
  1092ac:	e3a03000 	mov	r3, #0
  1092b0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
  1092b4:	e24b3020 	sub	r3, fp, #32
  1092b8:	e1a01003 	mov	r1, r3
  1092bc:	e3a0000f 	mov	r0, #15
  1092c0:	ebfff0db 	bl	105634 <alt_clk_divider_get>
  1092c4:	e50b0008 	str	r0, [fp, #-8]
            }
        }
        if (ret == ALT_E_SUCCESS)
  1092c8:	e51b3008 	ldr	r3, [fp, #-8]
  1092cc:	e3530000 	cmp	r3, #0
  1092d0:	1a0002ec 	bne	109e88 <alt_clk_freq_get+0x1a28>
        {
            denom = (uint64_t) temp;
  1092d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1092d8:	e1a02003 	mov	r2, r3
  1092dc:	e3a03000 	mov	r3, #0
  1092e0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_DBG_TRACE, &temp);
  1092e4:	e24b3020 	sub	r3, fp, #32
  1092e8:	e1a01003 	mov	r1, r3
  1092ec:	e3a0001e 	mov	r0, #30
  1092f0:	ebfff0cf 	bl	105634 <alt_clk_divider_get>
  1092f4:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  1092f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1092fc:	e1a02003 	mov	r2, r3
  109300:	e3a03000 	mov	r3, #0
  109304:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  109308:	e0000192 	mul	r0, r2, r1
  10930c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109310:	e0010193 	mul	r1, r3, r1
  109314:	e0801001 	add	r1, r0, r1
  109318:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10931c:	e0832290 	umull	r2, r3, r0, r2
  109320:	e0811003 	add	r1, r1, r3
  109324:	e1a03001 	mov	r3, r1
  109328:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  10932c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109330:	ea0002d4 	b	109e88 <alt_clk_freq_get+0x1a28>

    case ALT_CLK_MAIN_QSPI:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109334:	e24b3020 	sub	r3, fp, #32
  109338:	e1a01003 	mov	r1, r3
  10933c:	e3a00009 	mov	r0, #9
  109340:	ebffeef2 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109344:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109348:	e51b3008 	ldr	r3, [fp, #-8]
  10934c:	e3530000 	cmp	r3, #0
  109350:	1a0002ce 	bne	109e90 <alt_clk_freq_get+0x1a30>
        {
            numer = (uint64_t) temp;
  109354:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109358:	e1a02003 	mov	r2, r3
  10935c:	e3a03000 	mov	r3, #0
  109360:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
  109364:	e24b3020 	sub	r3, fp, #32
  109368:	e1a01003 	mov	r1, r3
  10936c:	e3a00010 	mov	r0, #16
  109370:	ebfff0af 	bl	105634 <alt_clk_divider_get>
  109374:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109378:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10937c:	e1a02003 	mov	r2, r3
  109380:	e3a03000 	mov	r3, #0
  109384:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109388:	ea0002c0 	b	109e90 <alt_clk_freq_get+0x1a30>

    case ALT_CLK_MAIN_NAND_SDMMC:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  10938c:	e24b3020 	sub	r3, fp, #32
  109390:	e1a01003 	mov	r1, r3
  109394:	e3a00009 	mov	r0, #9
  109398:	ebffeedc 	bl	104f10 <alt_clk_pll_vco_freq_get>
  10939c:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1093a0:	e51b3008 	ldr	r3, [fp, #-8]
  1093a4:	e3530000 	cmp	r3, #0
  1093a8:	1a0002ba 	bne	109e98 <alt_clk_freq_get+0x1a38>
        {
            numer = (uint64_t) temp;
  1093ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1093b0:	e1a02003 	mov	r2, r3
  1093b4:	e3a03000 	mov	r3, #0
  1093b8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
  1093bc:	e24b3020 	sub	r3, fp, #32
  1093c0:	e1a01003 	mov	r1, r3
  1093c4:	e3a00011 	mov	r0, #17
  1093c8:	ebfff099 	bl	105634 <alt_clk_divider_get>
  1093cc:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  1093d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1093d4:	e1a02003 	mov	r2, r3
  1093d8:	e3a03000 	mov	r3, #0
  1093dc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1093e0:	ea0002ac 	b	109e98 <alt_clk_freq_get+0x1a38>

    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  1093e4:	e24b3020 	sub	r3, fp, #32
  1093e8:	e1a01003 	mov	r1, r3
  1093ec:	e3a00009 	mov	r0, #9
  1093f0:	ebffeec6 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1093f4:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1093f8:	e51b3008 	ldr	r3, [fp, #-8]
  1093fc:	e3530000 	cmp	r3, #0
  109400:	1a0002a6 	bne	109ea0 <alt_clk_freq_get+0x1a40>
        {
            numer = (uint64_t) temp;
  109404:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109408:	e1a02003 	mov	r2, r3
  10940c:	e3a03000 	mov	r3, #0
  109410:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C5, &temp);
  109414:	e24b3020 	sub	r3, fp, #32
  109418:	e1a01003 	mov	r1, r3
  10941c:	e3a00012 	mov	r0, #18
  109420:	ebfff083 	bl	105634 <alt_clk_divider_get>
  109424:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109428:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10942c:	e1a02003 	mov	r2, r3
  109430:	e3a03000 	mov	r3, #0
  109434:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109438:	ea000298 	b	109ea0 <alt_clk_freq_get+0x1a40>
    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_PERIPHERAL_PLL_C2:
    case ALT_CLK_PERIPHERAL_PLL_C3:
    case ALT_CLK_PERIPHERAL_PLL_C4:
    case ALT_CLK_PERIPHERAL_PLL_C5:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  10943c:	e24b3020 	sub	r3, fp, #32
  109440:	e1a01003 	mov	r1, r3
  109444:	e3a0000a 	mov	r0, #10
  109448:	ebffeeb0 	bl	104f10 <alt_clk_pll_vco_freq_get>
  10944c:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109450:	e51b3008 	ldr	r3, [fp, #-8]
  109454:	e3530000 	cmp	r3, #0
  109458:	1a000292 	bne	109ea8 <alt_clk_freq_get+0x1a48>
        {
            numer = (uint64_t) temp;
  10945c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109460:	e1a02003 	mov	r2, r3
  109464:	e3a03000 	mov	r3, #0
  109468:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(clk, &temp);
  10946c:	e24b2020 	sub	r2, fp, #32
  109470:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  109474:	e1a01002 	mov	r1, r2
  109478:	e1a00003 	mov	r0, r3
  10947c:	ebfff06c 	bl	105634 <alt_clk_divider_get>
  109480:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109484:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109488:	e1a02003 	mov	r2, r3
  10948c:	e3a03000 	mov	r3, #0
  109490:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109494:	ea000283 	b	109ea8 <alt_clk_freq_get+0x1a48>

    case ALT_CLK_EMAC0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  109498:	e24b3020 	sub	r3, fp, #32
  10949c:	e1a01003 	mov	r1, r3
  1094a0:	e3a0000a 	mov	r0, #10
  1094a4:	ebffee99 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1094a8:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1094ac:	e51b3008 	ldr	r3, [fp, #-8]
  1094b0:	e3530000 	cmp	r3, #0
  1094b4:	1a00027d 	bne	109eb0 <alt_clk_freq_get+0x1a50>
        {
            numer = (uint64_t) temp;
  1094b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1094bc:	e1a02003 	mov	r2, r3
  1094c0:	e3a03000 	mov	r3, #0
  1094c4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C0, &temp);
  1094c8:	e24b3020 	sub	r3, fp, #32
  1094cc:	e1a01003 	mov	r1, r3
  1094d0:	e3a00025 	mov	r0, #37	; 0x25
  1094d4:	ebfff056 	bl	105634 <alt_clk_divider_get>
  1094d8:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  1094dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1094e0:	e1a02003 	mov	r2, r3
  1094e4:	e3a03000 	mov	r3, #0
  1094e8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1094ec:	ea00026f 	b	109eb0 <alt_clk_freq_get+0x1a50>

    case ALT_CLK_EMAC1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  1094f0:	e24b3020 	sub	r3, fp, #32
  1094f4:	e1a01003 	mov	r1, r3
  1094f8:	e3a0000a 	mov	r0, #10
  1094fc:	ebffee83 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109500:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109504:	e51b3008 	ldr	r3, [fp, #-8]
  109508:	e3530000 	cmp	r3, #0
  10950c:	1a000269 	bne	109eb8 <alt_clk_freq_get+0x1a58>
        {
            numer = (uint64_t) temp;
  109510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109514:	e1a02003 	mov	r2, r3
  109518:	e3a03000 	mov	r3, #0
  10951c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C1, &temp);
  109520:	e24b3020 	sub	r3, fp, #32
  109524:	e1a01003 	mov	r1, r3
  109528:	e3a00026 	mov	r0, #38	; 0x26
  10952c:	ebfff040 	bl	105634 <alt_clk_divider_get>
  109530:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109534:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109538:	e1a02003 	mov	r2, r3
  10953c:	e3a03000 	mov	r3, #0
  109540:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109544:	ea00025b 	b	109eb8 <alt_clk_freq_get+0x1a58>

    case ALT_CLK_USB_MP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  109548:	e24b3020 	sub	r3, fp, #32
  10954c:	e1a01003 	mov	r1, r3
  109550:	e3a0000a 	mov	r0, #10
  109554:	ebffee6d 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109558:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  10955c:	e51b3008 	ldr	r3, [fp, #-8]
  109560:	e3530000 	cmp	r3, #0
  109564:	1a000255 	bne	109ec0 <alt_clk_freq_get+0x1a60>
        {
            numer = (uint64_t) temp;
  109568:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10956c:	e1a02003 	mov	r2, r3
  109570:	e3a03000 	mov	r3, #0
  109574:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  109578:	e24b3020 	sub	r3, fp, #32
  10957c:	e1a01003 	mov	r1, r3
  109580:	e3a00029 	mov	r0, #41	; 0x29
  109584:	ebfff02a 	bl	105634 <alt_clk_divider_get>
  109588:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  10958c:	e51b3008 	ldr	r3, [fp, #-8]
  109590:	e3530000 	cmp	r3, #0
  109594:	1a000249 	bne	109ec0 <alt_clk_freq_get+0x1a60>
            {
                denom = (uint64_t) temp;
  109598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10959c:	e1a02003 	mov	r2, r3
  1095a0:	e3a03000 	mov	r3, #0
  1095a4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
                ret = alt_clk_divider_get(ALT_CLK_USB_MP, &temp);
  1095a8:	e24b3020 	sub	r3, fp, #32
  1095ac:	e1a01003 	mov	r1, r3
  1095b0:	e3a0002b 	mov	r0, #43	; 0x2b
  1095b4:	ebfff01e 	bl	105634 <alt_clk_divider_get>
  1095b8:	e50b0008 	str	r0, [fp, #-8]
                denom = denom * (uint64_t) temp;
  1095bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1095c0:	e1a02003 	mov	r2, r3
  1095c4:	e3a03000 	mov	r3, #0
  1095c8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1095cc:	e0000192 	mul	r0, r2, r1
  1095d0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095d4:	e0010193 	mul	r1, r3, r1
  1095d8:	e0801001 	add	r1, r0, r1
  1095dc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1095e0:	e0832290 	umull	r2, r3, r0, r2
  1095e4:	e0811003 	add	r1, r1, r3
  1095e8:	e1a03001 	mov	r3, r1
  1095ec:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  1095f0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            }
        }
        break;
  1095f4:	ea000231 	b	109ec0 <alt_clk_freq_get+0x1a60>

    case ALT_CLK_SPI_M:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  1095f8:	e24b3020 	sub	r3, fp, #32
  1095fc:	e1a01003 	mov	r1, r3
  109600:	e3a0000a 	mov	r0, #10
  109604:	ebffee41 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109608:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  10960c:	e51b3008 	ldr	r3, [fp, #-8]
  109610:	e3530000 	cmp	r3, #0
  109614:	1a000008 	bne	10963c <alt_clk_freq_get+0x11dc>
        {
            numer = (uint64_t) temp;
  109618:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10961c:	e1a02003 	mov	r2, r3
  109620:	e3a03000 	mov	r3, #0
  109624:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  109628:	e24b3020 	sub	r3, fp, #32
  10962c:	e1a01003 	mov	r1, r3
  109630:	e3a00029 	mov	r0, #41	; 0x29
  109634:	ebffeffe 	bl	105634 <alt_clk_divider_get>
  109638:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  10963c:	e51b3008 	ldr	r3, [fp, #-8]
  109640:	e3530000 	cmp	r3, #0
  109644:	1a00021f 	bne	109ec8 <alt_clk_freq_get+0x1a68>
        {
            denom = (uint64_t) temp;
  109648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10964c:	e1a02003 	mov	r2, r3
  109650:	e3a03000 	mov	r3, #0
  109654:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_SPI_M, &temp);
  109658:	e24b3020 	sub	r3, fp, #32
  10965c:	e1a01003 	mov	r1, r3
  109660:	e3a0002c 	mov	r0, #44	; 0x2c
  109664:	ebffeff2 	bl	105634 <alt_clk_divider_get>
  109668:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  10966c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109670:	e1a02003 	mov	r2, r3
  109674:	e3a03000 	mov	r3, #0
  109678:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10967c:	e0000192 	mul	r0, r2, r1
  109680:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109684:	e0010193 	mul	r1, r3, r1
  109688:	e0801001 	add	r1, r0, r1
  10968c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  109690:	e0832290 	umull	r2, r3, r0, r2
  109694:	e0811003 	add	r1, r1, r3
  109698:	e1a03001 	mov	r3, r1
  10969c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  1096a0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1096a4:	ea000207 	b	109ec8 <alt_clk_freq_get+0x1a68>

    case ALT_CLK_CAN0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  1096a8:	e24b3020 	sub	r3, fp, #32
  1096ac:	e1a01003 	mov	r1, r3
  1096b0:	e3a0000a 	mov	r0, #10
  1096b4:	ebffee15 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1096b8:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1096bc:	e51b3008 	ldr	r3, [fp, #-8]
  1096c0:	e3530000 	cmp	r3, #0
  1096c4:	1a000008 	bne	1096ec <alt_clk_freq_get+0x128c>
        {
            numer = (uint64_t) temp;
  1096c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1096cc:	e1a02003 	mov	r2, r3
  1096d0:	e3a03000 	mov	r3, #0
  1096d4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  1096d8:	e24b3020 	sub	r3, fp, #32
  1096dc:	e1a01003 	mov	r1, r3
  1096e0:	e3a00029 	mov	r0, #41	; 0x29
  1096e4:	ebffefd2 	bl	105634 <alt_clk_divider_get>
  1096e8:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  1096ec:	e51b3008 	ldr	r3, [fp, #-8]
  1096f0:	e3530000 	cmp	r3, #0
  1096f4:	1a0001f5 	bne	109ed0 <alt_clk_freq_get+0x1a70>
        {
            denom = (uint64_t) temp;
  1096f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1096fc:	e1a02003 	mov	r2, r3
  109700:	e3a03000 	mov	r3, #0
  109704:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_CAN0, &temp);
  109708:	e24b3020 	sub	r3, fp, #32
  10970c:	e1a01003 	mov	r1, r3
  109710:	e3a00033 	mov	r0, #51	; 0x33
  109714:	ebffefc6 	bl	105634 <alt_clk_divider_get>
  109718:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  10971c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109720:	e1a02003 	mov	r2, r3
  109724:	e3a03000 	mov	r3, #0
  109728:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10972c:	e0000192 	mul	r0, r2, r1
  109730:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109734:	e0010193 	mul	r1, r3, r1
  109738:	e0801001 	add	r1, r0, r1
  10973c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  109740:	e0832290 	umull	r2, r3, r0, r2
  109744:	e0811003 	add	r1, r1, r3
  109748:	e1a03001 	mov	r3, r1
  10974c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  109750:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109754:	ea0001dd 	b	109ed0 <alt_clk_freq_get+0x1a70>

    case ALT_CLK_CAN1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  109758:	e24b3020 	sub	r3, fp, #32
  10975c:	e1a01003 	mov	r1, r3
  109760:	e3a0000a 	mov	r0, #10
  109764:	ebffede9 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109768:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  10976c:	e51b3008 	ldr	r3, [fp, #-8]
  109770:	e3530000 	cmp	r3, #0
  109774:	1a000008 	bne	10979c <alt_clk_freq_get+0x133c>
        {
            numer = (uint64_t) temp;
  109778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10977c:	e1a02003 	mov	r2, r3
  109780:	e3a03000 	mov	r3, #0
  109784:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  109788:	e24b3020 	sub	r3, fp, #32
  10978c:	e1a01003 	mov	r1, r3
  109790:	e3a00029 	mov	r0, #41	; 0x29
  109794:	ebffefa6 	bl	105634 <alt_clk_divider_get>
  109798:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  10979c:	e51b3008 	ldr	r3, [fp, #-8]
  1097a0:	e3530000 	cmp	r3, #0
  1097a4:	1a0001cb 	bne	109ed8 <alt_clk_freq_get+0x1a78>
        {
            denom = (uint64_t) temp;
  1097a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1097ac:	e1a02003 	mov	r2, r3
  1097b0:	e3a03000 	mov	r3, #0
  1097b4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_CAN1, &temp);
  1097b8:	e24b3020 	sub	r3, fp, #32
  1097bc:	e1a01003 	mov	r1, r3
  1097c0:	e3a00034 	mov	r0, #52	; 0x34
  1097c4:	ebffef9a 	bl	105634 <alt_clk_divider_get>
  1097c8:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  1097cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1097d0:	e1a02003 	mov	r2, r3
  1097d4:	e3a03000 	mov	r3, #0
  1097d8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1097dc:	e0000192 	mul	r0, r2, r1
  1097e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1097e4:	e0010193 	mul	r1, r3, r1
  1097e8:	e0801001 	add	r1, r0, r1
  1097ec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1097f0:	e0832290 	umull	r2, r3, r0, r2
  1097f4:	e0811003 	add	r1, r1, r3
  1097f8:	e1a03001 	mov	r3, r1
  1097fc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  109800:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109804:	ea0001b3 	b	109ed8 <alt_clk_freq_get+0x1a78>

    case ALT_CLK_GPIO_DB:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  109808:	e24b3020 	sub	r3, fp, #32
  10980c:	e1a01003 	mov	r1, r3
  109810:	e3a0000a 	mov	r0, #10
  109814:	ebffedbd 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109818:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  10981c:	e51b3008 	ldr	r3, [fp, #-8]
  109820:	e3530000 	cmp	r3, #0
  109824:	1a000008 	bne	10984c <alt_clk_freq_get+0x13ec>
        {
            numer = (uint64_t) temp;
  109828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10982c:	e1a02003 	mov	r2, r3
  109830:	e3a03000 	mov	r3, #0
  109834:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
  109838:	e24b3020 	sub	r3, fp, #32
  10983c:	e1a01003 	mov	r1, r3
  109840:	e3a00029 	mov	r0, #41	; 0x29
  109844:	ebffef7a 	bl	105634 <alt_clk_divider_get>
  109848:	e50b0008 	str	r0, [fp, #-8]
        }
        if (ret == ALT_E_SUCCESS)
  10984c:	e51b3008 	ldr	r3, [fp, #-8]
  109850:	e3530000 	cmp	r3, #0
  109854:	1a0001a1 	bne	109ee0 <alt_clk_freq_get+0x1a80>
        {
            denom = (uint64_t) temp;
  109858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10985c:	e1a02003 	mov	r2, r3
  109860:	e3a03000 	mov	r3, #0
  109864:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
            ret = alt_clk_divider_get(ALT_CLK_GPIO_DB, &temp);
  109868:	e24b3020 	sub	r3, fp, #32
  10986c:	e1a01003 	mov	r1, r3
  109870:	e3a00035 	mov	r0, #53	; 0x35
  109874:	ebffef6e 	bl	105634 <alt_clk_divider_get>
  109878:	e50b0008 	str	r0, [fp, #-8]
            denom = denom * (uint64_t) temp;
  10987c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109880:	e1a02003 	mov	r2, r3
  109884:	e3a03000 	mov	r3, #0
  109888:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10988c:	e0000192 	mul	r0, r2, r1
  109890:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109894:	e0010193 	mul	r1, r3, r1
  109898:	e0801001 	add	r1, r0, r1
  10989c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1098a0:	e0832290 	umull	r2, r3, r0, r2
  1098a4:	e0811003 	add	r1, r1, r3
  1098a8:	e1a03001 	mov	r3, r1
  1098ac:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  1098b0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  1098b4:	ea000189 	b	109ee0 <alt_clk_freq_get+0x1a80>

    case ALT_CLK_H2F_USER1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  1098b8:	e24b3020 	sub	r3, fp, #32
  1098bc:	e1a01003 	mov	r1, r3
  1098c0:	e3a0000a 	mov	r0, #10
  1098c4:	ebffed91 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1098c8:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  1098cc:	e51b3008 	ldr	r3, [fp, #-8]
  1098d0:	e3530000 	cmp	r3, #0
  1098d4:	1a000183 	bne	109ee8 <alt_clk_freq_get+0x1a88>
        {
            numer = (uint64_t) temp;
  1098d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1098dc:	e1a02003 	mov	r2, r3
  1098e0:	e3a03000 	mov	r3, #0
  1098e4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C5, &temp);
  1098e8:	e24b3020 	sub	r3, fp, #32
  1098ec:	e1a01003 	mov	r1, r3
  1098f0:	e3a0002a 	mov	r0, #42	; 0x2a
  1098f4:	ebffef4e 	bl	105634 <alt_clk_divider_get>
  1098f8:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  1098fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109900:	e1a02003 	mov	r2, r3
  109904:	e3a03000 	mov	r3, #0
  109908:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  10990c:	ea000175 	b	109ee8 <alt_clk_freq_get+0x1a88>

        /* Clocks That Can Switch Between Different Clock Groups */
    case ALT_CLK_SDMMC:
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  109910:	e30430ac 	movw	r3, #16556	; 0x40ac
  109914:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  109918:	e5933000 	ldr	r3, [r3]
  10991c:	e2033003 	and	r3, r3, #3
  109920:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
  109924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109928:	e3530000 	cmp	r3, #0
  10992c:	1a000008 	bne	109954 <alt_clk_freq_get+0x14f4>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
  109930:	e30732b0 	movw	r3, #29360	; 0x72b0
  109934:	e3403011 	movt	r3, #17
  109938:	e5933020 	ldr	r3, [r3, #32]
  10993c:	e1a02003 	mov	r2, r3
  109940:	e3a03000 	mov	r3, #0
  109944:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            /* denom = 1 by default */
            ret = ALT_E_SUCCESS;
  109948:	e3a03000 	mov	r3, #0
  10994c:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109950:	ea000166 	b	109ef0 <alt_clk_freq_get+0x1a90>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            /* denom = 1 by default */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
  109954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109958:	e3530001 	cmp	r3, #1
  10995c:	1a000015 	bne	1099b8 <alt_clk_freq_get+0x1558>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109960:	e24b3020 	sub	r3, fp, #32
  109964:	e1a01003 	mov	r1, r3
  109968:	e3a00009 	mov	r0, #9
  10996c:	ebffed67 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109970:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109974:	e51b3008 	ldr	r3, [fp, #-8]
  109978:	e3530000 	cmp	r3, #0
  10997c:	1a00015b 	bne	109ef0 <alt_clk_freq_get+0x1a90>
            {
                numer = (uint64_t) temp;
  109980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109984:	e1a02003 	mov	r2, r3
  109988:	e3a03000 	mov	r3, #0
  10998c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
  109990:	e24b3020 	sub	r3, fp, #32
  109994:	e1a01003 	mov	r1, r3
  109998:	e3a00011 	mov	r0, #17
  10999c:	ebffef24 	bl	105634 <alt_clk_divider_get>
  1099a0:	e50b0008 	str	r0, [fp, #-8]
                denom = (uint64_t) temp;
  1099a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1099a8:	e1a02003 	mov	r2, r3
  1099ac:	e3a03000 	mov	r3, #0
  1099b0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  1099b4:	ea00014d 	b	109ef0 <alt_clk_freq_get+0x1a90>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
                denom = (uint64_t) temp;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
  1099b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1099bc:	e3530002 	cmp	r3, #2
  1099c0:	1a000015 	bne	109a1c <alt_clk_freq_get+0x15bc>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  1099c4:	e24b3020 	sub	r3, fp, #32
  1099c8:	e1a01003 	mov	r1, r3
  1099cc:	e3a0000a 	mov	r0, #10
  1099d0:	ebffed4e 	bl	104f10 <alt_clk_pll_vco_freq_get>
  1099d4:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  1099d8:	e51b3008 	ldr	r3, [fp, #-8]
  1099dc:	e3530000 	cmp	r3, #0
  1099e0:	1a000142 	bne	109ef0 <alt_clk_freq_get+0x1a90>
            {
                numer = (uint64_t) temp;
  1099e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1099e8:	e1a02003 	mov	r2, r3
  1099ec:	e3a03000 	mov	r3, #0
  1099f0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C3, &temp);
  1099f4:	e24b3020 	sub	r3, fp, #32
  1099f8:	e1a01003 	mov	r1, r3
  1099fc:	e3a00028 	mov	r0, #40	; 0x28
  109a00:	ebffef0b 	bl	105634 <alt_clk_divider_get>
  109a04:	e50b0008 	str	r0, [fp, #-8]
                denom = (uint64_t) temp;
  109a08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109a0c:	e1a02003 	mov	r2, r3
  109a10:	e3a03000 	mov	r3, #0
  109a14:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109a18:	ea000134 	b	109ef0 <alt_clk_freq_get+0x1a90>
                denom = (uint64_t) temp;
            }
        }
        else
        {
            ret = ALT_E_ERROR;
  109a1c:	e3e03000 	mvn	r3, #0
  109a20:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  109a24:	ea000131 	b	109ef0 <alt_clk_freq_get+0x1a90>

    case ALT_CLK_NAND:
        denom = 4;
  109a28:	e3a02004 	mov	r2, #4
  109a2c:	e3a03000 	mov	r3, #0
  109a30:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        /* the absence of a break statement here is not a mistake */
    case ALT_CLK_NAND_X:
        temp = ALT_CLKMGR_PERPLL_SRC_NAND_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  109a34:	e30430ac 	movw	r3, #16556	; 0x40ac
  109a38:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  109a3c:	e5933000 	ldr	r3, [r3]
  109a40:	e203300c 	and	r3, r3, #12
  109a44:	e1a03123 	lsr	r3, r3, #2
  109a48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK)
  109a4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109a50:	e3530000 	cmp	r3, #0
  109a54:	1a000008 	bne	109a7c <alt_clk_freq_get+0x161c>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
  109a58:	e30732b0 	movw	r3, #29360	; 0x72b0
  109a5c:	e3403011 	movt	r3, #17
  109a60:	e5933020 	ldr	r3, [r3, #32]
  109a64:	e1a02003 	mov	r2, r3
  109a68:	e3a03000 	mov	r3, #0
  109a6c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            /* denom = 1 or 4 by default; */
            ret = ALT_E_SUCCESS;
  109a70:	e3a03000 	mov	r3, #0
  109a74:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109a78:	ea00011e 	b	109ef8 <alt_clk_freq_get+0x1a98>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            /* denom = 1 or 4 by default; */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
  109a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109a80:	e3530001 	cmp	r3, #1
  109a84:	1a00001f 	bne	109b08 <alt_clk_freq_get+0x16a8>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109a88:	e24b3020 	sub	r3, fp, #32
  109a8c:	e1a01003 	mov	r1, r3
  109a90:	e3a00009 	mov	r0, #9
  109a94:	ebffed1d 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109a98:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109a9c:	e51b3008 	ldr	r3, [fp, #-8]
  109aa0:	e3530000 	cmp	r3, #0
  109aa4:	1a000113 	bne	109ef8 <alt_clk_freq_get+0x1a98>
            {
                numer = (uint64_t) temp;
  109aa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109aac:	e1a02003 	mov	r2, r3
  109ab0:	e3a03000 	mov	r3, #0
  109ab4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
  109ab8:	e24b3020 	sub	r3, fp, #32
  109abc:	e1a01003 	mov	r1, r3
  109ac0:	e3a00011 	mov	r0, #17
  109ac4:	ebffeeda 	bl	105634 <alt_clk_divider_get>
  109ac8:	e50b0008 	str	r0, [fp, #-8]
                denom = denom * (uint64_t) temp;
  109acc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109ad0:	e1a02003 	mov	r2, r3
  109ad4:	e3a03000 	mov	r3, #0
  109ad8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  109adc:	e0000192 	mul	r0, r2, r1
  109ae0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109ae4:	e0010193 	mul	r1, r3, r1
  109ae8:	e0801001 	add	r1, r0, r1
  109aec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  109af0:	e0832290 	umull	r2, r3, r0, r2
  109af4:	e0811003 	add	r1, r1, r3
  109af8:	e1a03001 	mov	r3, r1
  109afc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  109b00:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109b04:	ea0000fb 	b	109ef8 <alt_clk_freq_get+0x1a98>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
                denom = denom * (uint64_t) temp;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
  109b08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109b0c:	e3530002 	cmp	r3, #2
  109b10:	1a00001f 	bne	109b94 <alt_clk_freq_get+0x1734>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  109b14:	e24b3020 	sub	r3, fp, #32
  109b18:	e1a01003 	mov	r1, r3
  109b1c:	e3a0000a 	mov	r0, #10
  109b20:	ebffecfa 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109b24:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109b28:	e51b3008 	ldr	r3, [fp, #-8]
  109b2c:	e3530000 	cmp	r3, #0
  109b30:	1a0000f0 	bne	109ef8 <alt_clk_freq_get+0x1a98>
            {
                numer = (uint64_t) temp;
  109b34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109b38:	e1a02003 	mov	r2, r3
  109b3c:	e3a03000 	mov	r3, #0
  109b40:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C3, &temp);
  109b44:	e24b3020 	sub	r3, fp, #32
  109b48:	e1a01003 	mov	r1, r3
  109b4c:	e3a00028 	mov	r0, #40	; 0x28
  109b50:	ebffeeb7 	bl	105634 <alt_clk_divider_get>
  109b54:	e50b0008 	str	r0, [fp, #-8]
                denom = denom * (uint64_t) temp;
  109b58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109b5c:	e1a02003 	mov	r2, r3
  109b60:	e3a03000 	mov	r3, #0
  109b64:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  109b68:	e0000192 	mul	r0, r2, r1
  109b6c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109b70:	e0010193 	mul	r1, r3, r1
  109b74:	e0801001 	add	r1, r0, r1
  109b78:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  109b7c:	e0832290 	umull	r2, r3, r0, r2
  109b80:	e0811003 	add	r1, r1, r3
  109b84:	e1a03001 	mov	r3, r1
  109b88:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
  109b8c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109b90:	ea0000d8 	b	109ef8 <alt_clk_freq_get+0x1a98>
                denom = denom * (uint64_t) temp;
            }
        }
        else
        {
            ret = ALT_E_ERROR;
  109b94:	e3e03000 	mvn	r3, #0
  109b98:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  109b9c:	ea0000d5 	b	109ef8 <alt_clk_freq_get+0x1a98>

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
  109ba0:	e30430ac 	movw	r3, #16556	; 0x40ac
  109ba4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  109ba8:	e5933000 	ldr	r3, [r3]
  109bac:	e2033030 	and	r3, r3, #48	; 0x30
  109bb0:	e1a03223 	lsr	r3, r3, #4
  109bb4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
  109bb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109bbc:	e3530000 	cmp	r3, #0
  109bc0:	1a000008 	bne	109be8 <alt_clk_freq_get+0x1788>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
  109bc4:	e30732b0 	movw	r3, #29360	; 0x72b0
  109bc8:	e3403011 	movt	r3, #17
  109bcc:	e5933020 	ldr	r3, [r3, #32]
  109bd0:	e1a02003 	mov	r2, r3
  109bd4:	e3a03000 	mov	r3, #0
  109bd8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            /* denom = 1 by default; */
            ret = ALT_E_SUCCESS;
  109bdc:	e3a03000 	mov	r3, #0
  109be0:	e50b3008 	str	r3, [fp, #-8]
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109be4:	ea0000c5 	b	109f00 <alt_clk_freq_get+0x1aa0>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            /* denom = 1 by default; */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
  109be8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109bec:	e3530001 	cmp	r3, #1
  109bf0:	1a000015 	bne	109c4c <alt_clk_freq_get+0x17ec>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
  109bf4:	e24b3020 	sub	r3, fp, #32
  109bf8:	e1a01003 	mov	r1, r3
  109bfc:	e3a00009 	mov	r0, #9
  109c00:	ebffecc2 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109c04:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109c08:	e51b3008 	ldr	r3, [fp, #-8]
  109c0c:	e3530000 	cmp	r3, #0
  109c10:	1a0000ba 	bne	109f00 <alt_clk_freq_get+0x1aa0>
            {
                numer = (uint64_t) temp;
  109c14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109c18:	e1a02003 	mov	r2, r3
  109c1c:	e3a03000 	mov	r3, #0
  109c20:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
  109c24:	e24b3020 	sub	r3, fp, #32
  109c28:	e1a01003 	mov	r1, r3
  109c2c:	e3a00010 	mov	r0, #16
  109c30:	ebffee7f 	bl	105634 <alt_clk_divider_get>
  109c34:	e50b0008 	str	r0, [fp, #-8]
                denom = (uint64_t) temp;
  109c38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109c3c:	e1a02003 	mov	r2, r3
  109c40:	e3a03000 	mov	r3, #0
  109c44:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109c48:	ea0000ac 	b	109f00 <alt_clk_freq_get+0x1aa0>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
                denom = (uint64_t) temp;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
  109c4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109c50:	e3530002 	cmp	r3, #2
  109c54:	1a000015 	bne	109cb0 <alt_clk_freq_get+0x1850>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
  109c58:	e24b3020 	sub	r3, fp, #32
  109c5c:	e1a01003 	mov	r1, r3
  109c60:	e3a0000a 	mov	r0, #10
  109c64:	ebffeca9 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109c68:	e50b0008 	str	r0, [fp, #-8]
            if (ret == ALT_E_SUCCESS)
  109c6c:	e51b3008 	ldr	r3, [fp, #-8]
  109c70:	e3530000 	cmp	r3, #0
  109c74:	1a0000a1 	bne	109f00 <alt_clk_freq_get+0x1aa0>
            {
                numer = (uint64_t) temp;
  109c78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109c7c:	e1a02003 	mov	r2, r3
  109c80:	e3a03000 	mov	r3, #0
  109c84:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C2, &temp);
  109c88:	e24b3020 	sub	r3, fp, #32
  109c8c:	e1a01003 	mov	r1, r3
  109c90:	e3a00027 	mov	r0, #39	; 0x27
  109c94:	ebffee66 	bl	105634 <alt_clk_divider_get>
  109c98:	e50b0008 	str	r0, [fp, #-8]
                denom = (uint64_t) temp;
  109c9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109ca0:	e1a02003 	mov	r2, r3
  109ca4:	e3a03000 	mov	r3, #0
  109ca8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109cac:	ea000093 	b	109f00 <alt_clk_freq_get+0x1aa0>
                denom = (uint64_t) temp;
            }
        }
        else
        {
            ret = ALT_E_ERROR;
  109cb0:	e3e03000 	mvn	r3, #0
  109cb4:	e50b3008 	str	r3, [fp, #-8]
        }
        break;
  109cb8:	ea000090 	b	109f00 <alt_clk_freq_get+0x1aa0>

        /* SDRAM Clock Group */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
  109cbc:	e24b3020 	sub	r3, fp, #32
  109cc0:	e1a01003 	mov	r1, r3
  109cc4:	e3a0000b 	mov	r0, #11
  109cc8:	ebffec90 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109ccc:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109cd0:	e51b3008 	ldr	r3, [fp, #-8]
  109cd4:	e3530000 	cmp	r3, #0
  109cd8:	1a00008a 	bne	109f08 <alt_clk_freq_get+0x1aa8>
        {
            numer = (uint64_t) temp;
  109cdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109ce0:	e1a02003 	mov	r2, r3
  109ce4:	e3a03000 	mov	r3, #0
  109ce8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C0, &temp);
  109cec:	e24b3020 	sub	r3, fp, #32
  109cf0:	e1a01003 	mov	r1, r3
  109cf4:	e3a00037 	mov	r0, #55	; 0x37
  109cf8:	ebffee4d 	bl	105634 <alt_clk_divider_get>
  109cfc:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109d00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109d04:	e1a02003 	mov	r2, r3
  109d08:	e3a03000 	mov	r3, #0
  109d0c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109d10:	ea00007c 	b	109f08 <alt_clk_freq_get+0x1aa8>

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
  109d14:	e24b3020 	sub	r3, fp, #32
  109d18:	e1a01003 	mov	r1, r3
  109d1c:	e3a0000b 	mov	r0, #11
  109d20:	ebffec7a 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109d24:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109d28:	e51b3008 	ldr	r3, [fp, #-8]
  109d2c:	e3530000 	cmp	r3, #0
  109d30:	1a000076 	bne	109f10 <alt_clk_freq_get+0x1ab0>
        {
            numer = (uint64_t) temp;
  109d34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e3a03000 	mov	r3, #0
  109d40:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C1, &temp);
  109d44:	e24b3020 	sub	r3, fp, #32
  109d48:	e1a01003 	mov	r1, r3
  109d4c:	e3a00038 	mov	r0, #56	; 0x38
  109d50:	ebffee37 	bl	105634 <alt_clk_divider_get>
  109d54:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109d58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109d5c:	e1a02003 	mov	r2, r3
  109d60:	e3a03000 	mov	r3, #0
  109d64:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109d68:	ea000068 	b	109f10 <alt_clk_freq_get+0x1ab0>

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
  109d6c:	e24b3020 	sub	r3, fp, #32
  109d70:	e1a01003 	mov	r1, r3
  109d74:	e3a0000b 	mov	r0, #11
  109d78:	ebffec64 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109d7c:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109d80:	e51b3008 	ldr	r3, [fp, #-8]
  109d84:	e3530000 	cmp	r3, #0
  109d88:	1a000062 	bne	109f18 <alt_clk_freq_get+0x1ab8>
        {
            numer = (uint64_t) temp;
  109d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109d90:	e1a02003 	mov	r2, r3
  109d94:	e3a03000 	mov	r3, #0
  109d98:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C2, &temp);
  109d9c:	e24b3020 	sub	r3, fp, #32
  109da0:	e1a01003 	mov	r1, r3
  109da4:	e3a00039 	mov	r0, #57	; 0x39
  109da8:	ebffee21 	bl	105634 <alt_clk_divider_get>
  109dac:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109db4:	e1a02003 	mov	r2, r3
  109db8:	e3a03000 	mov	r3, #0
  109dbc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109dc0:	ea000054 	b	109f18 <alt_clk_freq_get+0x1ab8>

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
  109dc4:	e24b3020 	sub	r3, fp, #32
  109dc8:	e1a01003 	mov	r1, r3
  109dcc:	e3a0000b 	mov	r0, #11
  109dd0:	ebffec4e 	bl	104f10 <alt_clk_pll_vco_freq_get>
  109dd4:	e50b0008 	str	r0, [fp, #-8]
        if (ret == ALT_E_SUCCESS)
  109dd8:	e51b3008 	ldr	r3, [fp, #-8]
  109ddc:	e3530000 	cmp	r3, #0
  109de0:	1a00004e 	bne	109f20 <alt_clk_freq_get+0x1ac0>
        {
            numer = (uint64_t) temp;
  109de4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109de8:	e1a02003 	mov	r2, r3
  109dec:	e3a03000 	mov	r3, #0
  109df0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C5, &temp);
  109df4:	e24b3020 	sub	r3, fp, #32
  109df8:	e1a01003 	mov	r1, r3
  109dfc:	e3a0003c 	mov	r0, #60	; 0x3c
  109e00:	ebffee0b 	bl	105634 <alt_clk_divider_get>
  109e04:	e50b0008 	str	r0, [fp, #-8]
            denom = (uint64_t) temp;
  109e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  109e0c:	e1a02003 	mov	r2, r3
  109e10:	e3a03000 	mov	r3, #0
  109e14:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
        }
        break;
  109e18:	ea000040 	b	109f20 <alt_clk_freq_get+0x1ac0>

    default:
        ret = ALT_E_BAD_ARG;
  109e1c:	e3e03008 	mvn	r3, #8
  109e20:	e50b3008 	str	r3, [fp, #-8]
        break;
  109e24:	ea00003e 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(clk, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109e28:	e1a00000 	nop			; (mov r0, r0)
  109e2c:	ea00003c 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109e30:	e1a00000 	nop			; (mov r0, r0)
  109e34:	ea00003a 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MPU_PERIPH, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e38:	e1a00000 	nop			; (mov r0, r0)
  109e3c:	ea000038 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MPU_L2_RAM, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e40:	e1a00000 	nop			; (mov r0, r0)
  109e44:	ea000036 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109e48:	e1a00000 	nop			; (mov r0, r0)
  109e4c:	ea000034 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e50:	e1a00000 	nop			; (mov r0, r0)
  109e54:	ea000032 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = denom * (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_L3_SP, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e58:	e1a00000 	nop			; (mov r0, r0)
  109e5c:	ea000030 	b	109f24 <alt_clk_freq_get+0x1ac4>
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
                    denom = denom * (uint64_t) temp;
                }
            }
        }
        break;
  109e60:	e1a00000 	nop			; (mov r0, r0)
  109e64:	ea00002e 	b	109f24 <alt_clk_freq_get+0x1ac4>
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
                    denom = denom * (uint64_t) temp;
                }
            }
        }
        break;
  109e68:	e1a00000 	nop			; (mov r0, r0)
  109e6c:	ea00002c 	b	109f24 <alt_clk_freq_get+0x1ac4>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
                denom = (uint64_t) temp;
            }
        }
        break;
  109e70:	e1a00000 	nop			; (mov r0, r0)
  109e74:	ea00002a 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e78:	e1a00000 	nop			; (mov r0, r0)
  109e7c:	ea000028 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = denom * (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e80:	e1a00000 	nop			; (mov r0, r0)
  109e84:	ea000026 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_TRACE, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109e88:	e1a00000 	nop			; (mov r0, r0)
  109e8c:	ea000024 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109e90:	e1a00000 	nop			; (mov r0, r0)
  109e94:	ea000022 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109e98:	e1a00000 	nop			; (mov r0, r0)
  109e9c:	ea000020 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C5, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109ea0:	e1a00000 	nop			; (mov r0, r0)
  109ea4:	ea00001e 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(clk, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109ea8:	e1a00000 	nop			; (mov r0, r0)
  109eac:	ea00001c 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C0, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109eb0:	e1a00000 	nop			; (mov r0, r0)
  109eb4:	ea00001a 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C1, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109eb8:	e1a00000 	nop			; (mov r0, r0)
  109ebc:	ea000018 	b	109f24 <alt_clk_freq_get+0x1ac4>
                denom = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_USB_MP, &temp);
                denom = denom * (uint64_t) temp;
            }
        }
        break;
  109ec0:	e1a00000 	nop			; (mov r0, r0)
  109ec4:	ea000016 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SPI_M, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109ec8:	e1a00000 	nop			; (mov r0, r0)
  109ecc:	ea000014 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_CAN0, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109ed0:	e1a00000 	nop			; (mov r0, r0)
  109ed4:	ea000012 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_CAN1, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109ed8:	e1a00000 	nop			; (mov r0, r0)
  109edc:	ea000010 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_GPIO_DB, &temp);
            denom = denom * (uint64_t) temp;
        }
        break;
  109ee0:	e1a00000 	nop			; (mov r0, r0)
  109ee4:	ea00000e 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C5, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109ee8:	e1a00000 	nop			; (mov r0, r0)
  109eec:	ea00000c 	b	109f24 <alt_clk_freq_get+0x1ac4>
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109ef0:	e1a00000 	nop			; (mov r0, r0)
  109ef4:	ea00000a 	b	109f24 <alt_clk_freq_get+0x1ac4>
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109ef8:	e1a00000 	nop			; (mov r0, r0)
  109efc:	ea000008 	b	109f24 <alt_clk_freq_get+0x1ac4>
        }
        else
        {
            ret = ALT_E_ERROR;
        }
        break;
  109f00:	e1a00000 	nop			; (mov r0, r0)
  109f04:	ea000006 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C0, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109f08:	e1a00000 	nop			; (mov r0, r0)
  109f0c:	ea000004 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C1, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109f10:	e1a00000 	nop			; (mov r0, r0)
  109f14:	ea000002 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C2, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109f18:	e1a00000 	nop			; (mov r0, r0)
  109f1c:	ea000000 	b	109f24 <alt_clk_freq_get+0x1ac4>
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C5, &temp);
            denom = (uint64_t) temp;
        }
        break;
  109f20:	e1a00000 	nop			; (mov r0, r0)
        ret = ALT_E_BAD_ARG;
        break;

    }   /* end of switch-case construct */

    if (ret == ALT_E_SUCCESS)
  109f24:	e51b3008 	ldr	r3, [fp, #-8]
  109f28:	e3530000 	cmp	r3, #0
  109f2c:	1a000017 	bne	109f90 <alt_clk_freq_get+0x1b30>
    {
        /* will not get here if none of above cases match */
        if (denom > 0)
  109f30:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
  109f34:	e1923003 	orrs	r3, r2, r3
  109f38:	0a000012 	beq	109f88 <alt_clk_freq_get+0x1b28>
        {
            numer /= denom;
  109f3c:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
  109f40:	e14b01d4 	ldrd	r0, [fp, #-20]	; 0xffffffec
  109f44:	eb000ad8 	bl	10caac <__aeabi_uldivmod>
  109f48:	e1a02000 	mov	r2, r0
  109f4c:	e1a03001 	mov	r3, r1
  109f50:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
            if (numer <= UINT32_MAX)
  109f54:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
  109f58:	e3e00000 	mvn	r0, #0
  109f5c:	e3a01000 	mov	r1, #0
  109f60:	e1530001 	cmp	r3, r1
  109f64:	01520000 	cmpeq	r2, r0
  109f68:	8a000003 	bhi	109f7c <alt_clk_freq_get+0x1b1c>
            {
                *freq = (uint32_t) numer;
  109f6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  109f70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  109f74:	e5832000 	str	r2, [r3]
  109f78:	ea000004 	b	109f90 <alt_clk_freq_get+0x1b30>
            }
            else
            {
                ret = ALT_E_ERROR;
  109f7c:	e3e03000 	mvn	r3, #0
  109f80:	e50b3008 	str	r3, [fp, #-8]
  109f84:	ea000001 	b	109f90 <alt_clk_freq_get+0x1b30>
            }
        }
        else
        {
            ret = ALT_E_ERROR;
  109f88:	e3e03000 	mvn	r3, #0
  109f8c:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    return ret;
  109f90:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f94:	e1a00003 	mov	r0, r3
  109f98:	e24bd004 	sub	sp, fp, #4
  109f9c:	e8bd8800 	pop	{fp, pc}

00109fa0 <alt_clk_irq_disable>:
/*
// alt_clk_irq_disable() disables one or more of the lock status conditions as
// contributors to the clkmgr_IRQ interrupt signal state.
*/
ALT_STATUS_CODE alt_clk_irq_disable(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
  109fa0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109fa4:	e28db000 	add	fp, sp, #0
  109fa8:	e24dd00c 	sub	sp, sp, #12
  109fac:	e1a03000 	mov	r3, r0
  109fb0:	e54b3005 	strb	r3, [fp, #-5]
    if (!(lock_stat_mask & ALT_CLK_MGR_PLL_LOCK_BITS))
  109fb4:	e55b3005 	ldrb	r3, [fp, #-5]
  109fb8:	e3c3303f 	bic	r3, r3, #63	; 0x3f
  109fbc:	e3530000 	cmp	r3, #0
  109fc0:	1a00000a 	bne	109ff0 <alt_clk_irq_disable+0x50>
    {
        alt_clrbits_word(ALT_CLKMGR_INTREN_ADDR, lock_stat_mask);
  109fc4:	e304300c 	movw	r3, #16396	; 0x400c
  109fc8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  109fcc:	e304200c 	movw	r2, #16396	; 0x400c
  109fd0:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  109fd4:	e5922000 	ldr	r2, [r2]
  109fd8:	e55b1005 	ldrb	r1, [fp, #-5]
  109fdc:	e1e01001 	mvn	r1, r1
  109fe0:	e0022001 	and	r2, r2, r1
  109fe4:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  109fe8:	e3a03000 	mov	r3, #0
  109fec:	ea000000 	b	109ff4 <alt_clk_irq_disable+0x54>
    }
    else
    {
        return ALT_E_BAD_ARG;
  109ff0:	e3e03008 	mvn	r3, #8
    }
}
  109ff4:	e1a00003 	mov	r0, r3
  109ff8:	e24bd000 	sub	sp, fp, #0
  109ffc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a000:	e12fff1e 	bx	lr

0010a004 <alt_clk_irq_enable>:
/*
// alt_clk_irq_enable() enables one or more of the lock status conditions as
// contributors to the clkmgr_IRQ interrupt signal state.
*/
ALT_STATUS_CODE alt_clk_irq_enable(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
  10a004:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a008:	e28db000 	add	fp, sp, #0
  10a00c:	e24dd00c 	sub	sp, sp, #12
  10a010:	e1a03000 	mov	r3, r0
  10a014:	e54b3005 	strb	r3, [fp, #-5]
    if (!(lock_stat_mask & ALT_CLK_MGR_PLL_LOCK_BITS))
  10a018:	e55b3005 	ldrb	r3, [fp, #-5]
  10a01c:	e3c3303f 	bic	r3, r3, #63	; 0x3f
  10a020:	e3530000 	cmp	r3, #0
  10a024:	1a000009 	bne	10a050 <alt_clk_irq_enable+0x4c>
    {
        alt_setbits_word(ALT_CLKMGR_INTREN_ADDR, lock_stat_mask);
  10a028:	e304300c 	movw	r3, #16396	; 0x400c
  10a02c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a030:	e304200c 	movw	r2, #16396	; 0x400c
  10a034:	e34f2fd0 	movt	r2, #65488	; 0xffd0
  10a038:	e5921000 	ldr	r1, [r2]
  10a03c:	e55b2005 	ldrb	r2, [fp, #-5]
  10a040:	e1812002 	orr	r2, r1, r2
  10a044:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  10a048:	e3a03000 	mov	r3, #0
  10a04c:	ea000000 	b	10a054 <alt_clk_irq_enable+0x50>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10a050:	e3e03008 	mvn	r3, #8
    }
}
  10a054:	e1a00003 	mov	r0, r3
  10a058:	e24bd000 	sub	sp, fp, #0
  10a05c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a060:	e12fff1e 	bx	lr

0010a064 <alt_clk_group_cfg_raw_get>:
// alt_clk_group_cfg_raw_get() gets the raw configuration state of the designated
// clock group.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_get(ALT_CLK_GRP_t clk_group,
                                          ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
  10a064:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a068:	e28db000 	add	fp, sp, #0
  10a06c:	e24dd00c 	sub	sp, sp, #12
  10a070:	e1a03000 	mov	r3, r0
  10a074:	e50b100c 	str	r1, [fp, #-12]
  10a078:	e54b3005 	strb	r3, [fp, #-5]
    clk_group_raw_cfg->verid     = alt_read_word(ALT_SYSMGR_SILICONID1_ADDR);
  10a07c:	e3a03902 	mov	r3, #32768	; 0x8000
  10a080:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a084:	e5932000 	ldr	r2, [r3]
  10a088:	e51b300c 	ldr	r3, [fp, #-12]
  10a08c:	e5832000 	str	r2, [r3]
    clk_group_raw_cfg->siliid2   = alt_read_word(ALT_SYSMGR_SILICONID2_ADDR);
  10a090:	e3083004 	movw	r3, #32772	; 0x8004
  10a094:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a098:	e5932000 	ldr	r2, [r3]
  10a09c:	e51b300c 	ldr	r3, [fp, #-12]
  10a0a0:	e5832004 	str	r2, [r3, #4]
    clk_group_raw_cfg->clkgrpsel = clk_group;
  10a0a4:	e51b300c 	ldr	r3, [fp, #-12]
  10a0a8:	e55b2005 	ldrb	r2, [fp, #-5]
  10a0ac:	e5c32008 	strb	r2, [r3, #8]

    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
  10a0b0:	e55b3005 	ldrb	r3, [fp, #-5]
  10a0b4:	e3530000 	cmp	r3, #0
  10a0b8:	1a00004d 	bne	10a1f4 <alt_clk_group_cfg_raw_get+0x190>
    {
        /* Main PLL VCO register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
  10a0bc:	e3043040 	movw	r3, #16448	; 0x4040
  10a0c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a0c4:	e5932000 	ldr	r2, [r3]
  10a0c8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0cc:	e583200c 	str	r2, [r3, #12]

        /* Main PLL Misc register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.misc = alt_read_word(ALT_CLKMGR_MAINPLL_MISC_ADDR);
  10a0d0:	e3043044 	movw	r3, #16452	; 0x4044
  10a0d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a0d8:	e5932000 	ldr	r2, [r3]
  10a0dc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0e0:	e5832010 	str	r2, [r3, #16]

        /* Main PLL C0-C5 Counter registers */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mpuclk = alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR);
  10a0e4:	e30430e0 	movw	r3, #16608	; 0x40e0
  10a0e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a0ec:	e5932000 	ldr	r2, [r3]
  10a0f0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0f4:	e5832014 	str	r2, [r3, #20]
        /* doing these as 32-bit reads and writes avoids unnecessary masking operations */

        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainclk          = alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR);
  10a0f8:	e30430e4 	movw	r3, #16612	; 0x40e4
  10a0fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a100:	e5932000 	ldr	r2, [r3]
  10a104:	e51b300c 	ldr	r3, [fp, #-12]
  10a108:	e5832018 	str	r2, [r3, #24]
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgatclk         = alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR);
  10a10c:	e3043050 	movw	r3, #16464	; 0x4050
  10a110:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a114:	e5932000 	ldr	r2, [r3]
  10a118:	e51b300c 	ldr	r3, [fp, #-12]
  10a11c:	e583201c 	str	r2, [r3, #28]
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainqspiclk      = alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR);
  10a120:	e3043054 	movw	r3, #16468	; 0x4054
  10a124:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a128:	e5932000 	ldr	r2, [r3]
  10a12c:	e51b300c 	ldr	r3, [fp, #-12]
  10a130:	e5832020 	str	r2, [r3, #32]
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainnandsdmmcclk = alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR);
  10a134:	e3043058 	movw	r3, #16472	; 0x4058
  10a138:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a13c:	e5932000 	ldr	r2, [r3]
  10a140:	e51b300c 	ldr	r3, [fp, #-12]
  10a144:	e5832024 	str	r2, [r3, #36]	; 0x24
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.cfgs2fuser0clk   = alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR);
  10a148:	e304305c 	movw	r3, #16476	; 0x405c
  10a14c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a150:	e5932000 	ldr	r2, [r3]
  10a154:	e51b300c 	ldr	r3, [fp, #-12]
  10a158:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Main PLL Enable register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.en = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
  10a15c:	e3043060 	movw	r3, #16480	; 0x4060
  10a160:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a164:	e5932000 	ldr	r2, [r3]
  10a168:	e51b300c 	ldr	r3, [fp, #-12]
  10a16c:	e583202c 	str	r2, [r3, #44]	; 0x2c

        /* Main PLL Maindiv register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.maindiv = alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR);
  10a170:	e3043064 	movw	r3, #16484	; 0x4064
  10a174:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a178:	e5932000 	ldr	r2, [r3]
  10a17c:	e51b300c 	ldr	r3, [fp, #-12]
  10a180:	e5832030 	str	r2, [r3, #48]	; 0x30

        /* Main PLL Debugdiv register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgdiv = alt_read_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR);
  10a184:	e3043068 	movw	r3, #16488	; 0x4068
  10a188:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a18c:	e5932000 	ldr	r2, [r3]
  10a190:	e51b300c 	ldr	r3, [fp, #-12]
  10a194:	e5832034 	str	r2, [r3, #52]	; 0x34

        /* Main PLL Tracediv register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.tracediv = alt_read_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR);
  10a198:	e304306c 	movw	r3, #16492	; 0x406c
  10a19c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a1a0:	e5932000 	ldr	r2, [r3]
  10a1a4:	e51b300c 	ldr	r3, [fp, #-12]
  10a1a8:	e5832038 	str	r2, [r3, #56]	; 0x38

        /* Main PLL L4 Source register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.l4src = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
  10a1ac:	e3043070 	movw	r3, #16496	; 0x4070
  10a1b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a1b4:	e5932000 	ldr	r2, [r3]
  10a1b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a1bc:	e583203c 	str	r2, [r3, #60]	; 0x3c

        /* Main PLL Status register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_MAINPLL_STAT_ADDR);
  10a1c0:	e3043074 	movw	r3, #16500	; 0x4074
  10a1c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a1c8:	e5932000 	ldr	r2, [r3]
  10a1cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a1d0:	e5832040 	str	r2, [r3, #64]	; 0x40
        /* clkgrp.mainpllgrp.stat.outresetack is defined in the ALT_CLKMGR_MAINPLL_STAT_s declaration
        // as a const but alt_indwrite_word() overrides that restriction. */

        /* padding ... */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[0] = 0;
  10a1d4:	e51b300c 	ldr	r3, [fp, #-12]
  10a1d8:	e3a02000 	mov	r2, #0
  10a1dc:	e5832044 	str	r2, [r3, #68]	; 0x44
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[1] = 0;
  10a1e0:	e51b300c 	ldr	r3, [fp, #-12]
  10a1e4:	e3a02000 	mov	r2, #0
  10a1e8:	e5832048 	str	r2, [r3, #72]	; 0x48

        return ALT_E_SUCCESS;
  10a1ec:	e3a03000 	mov	r3, #0
  10a1f0:	ea00007c 	b	10a3e8 <alt_clk_group_cfg_raw_get+0x384>
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
  10a1f4:	e55b3005 	ldrb	r3, [fp, #-5]
  10a1f8:	e3530001 	cmp	r3, #1
  10a1fc:	1a00004b 	bne	10a330 <alt_clk_group_cfg_raw_get+0x2cc>
    {
        /* Peripheral PLL VCO register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
  10a200:	e3043080 	movw	r3, #16512	; 0x4080
  10a204:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a208:	e5932000 	ldr	r2, [r3]
  10a20c:	e51b300c 	ldr	r3, [fp, #-12]
  10a210:	e583200c 	str	r2, [r3, #12]

        /* Peripheral PLL Misc register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.misc = alt_read_word(ALT_CLKMGR_PERPLL_MISC_ADDR);
  10a214:	e3043084 	movw	r3, #16516	; 0x4084
  10a218:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a21c:	e5932000 	ldr	r2, [r3]
  10a220:	e51b300c 	ldr	r3, [fp, #-12]
  10a224:	e5832010 	str	r2, [r3, #16]

        /* Peripheral PLL C0-C5 Counters */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac0clk = alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR);
  10a228:	e3043088 	movw	r3, #16520	; 0x4088
  10a22c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a230:	e5932000 	ldr	r2, [r3]
  10a234:	e51b300c 	ldr	r3, [fp, #-12]
  10a238:	e5832014 	str	r2, [r3, #20]
        /* doing these as 32-bit reads and writes avoids unnecessary masking operations */

        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac1clk        = alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR);
  10a23c:	e304308c 	movw	r3, #16524	; 0x408c
  10a240:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a244:	e5932000 	ldr	r2, [r3]
  10a248:	e51b300c 	ldr	r3, [fp, #-12]
  10a24c:	e5832018 	str	r2, [r3, #24]
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.perqspiclk      = alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR);
  10a250:	e3043090 	movw	r3, #16528	; 0x4090
  10a254:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a258:	e5932000 	ldr	r2, [r3]
  10a25c:	e51b300c 	ldr	r3, [fp, #-12]
  10a260:	e583201c 	str	r2, [r3, #28]
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.pernandsdmmcclk = alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR);
  10a264:	e3043094 	movw	r3, #16532	; 0x4094
  10a268:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a26c:	e5932000 	ldr	r2, [r3]
  10a270:	e51b300c 	ldr	r3, [fp, #-12]
  10a274:	e5832020 	str	r2, [r3, #32]
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.perbaseclk      = alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR);
  10a278:	e3043098 	movw	r3, #16536	; 0x4098
  10a27c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a280:	e5932000 	ldr	r2, [r3]
  10a284:	e51b300c 	ldr	r3, [fp, #-12]
  10a288:	e5832024 	str	r2, [r3, #36]	; 0x24
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.s2fuser1clk     = alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR);
  10a28c:	e304309c 	movw	r3, #16540	; 0x409c
  10a290:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a294:	e5932000 	ldr	r2, [r3]
  10a298:	e51b300c 	ldr	r3, [fp, #-12]
  10a29c:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Peripheral PLL Enable register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.en = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
  10a2a0:	e30430a0 	movw	r3, #16544	; 0x40a0
  10a2a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a2a8:	e5932000 	ldr	r2, [r3]
  10a2ac:	e51b300c 	ldr	r3, [fp, #-12]
  10a2b0:	e583202c 	str	r2, [r3, #44]	; 0x2c

        /* Peripheral PLL Divider register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.div = alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR);
  10a2b4:	e30430a4 	movw	r3, #16548	; 0x40a4
  10a2b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a2bc:	e5932000 	ldr	r2, [r3]
  10a2c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c4:	e5832030 	str	r2, [r3, #48]	; 0x30

        /* Peripheral PLL GPIO Divider register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.gpiodiv = alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR);
  10a2c8:	e30430a8 	movw	r3, #16552	; 0x40a8
  10a2cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a2d0:	e5932000 	ldr	r2, [r3]
  10a2d4:	e51b300c 	ldr	r3, [fp, #-12]
  10a2d8:	e5832034 	str	r2, [r3, #52]	; 0x34

        /* Peripheral PLL Source register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.src = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
  10a2dc:	e30430ac 	movw	r3, #16556	; 0x40ac
  10a2e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a2e4:	e5932000 	ldr	r2, [r3]
  10a2e8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ec:	e5832038 	str	r2, [r3, #56]	; 0x38

        /* Peripheral PLL Status register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_PERPLL_STAT_ADDR);
  10a2f0:	e30430b0 	movw	r3, #16560	; 0x40b0
  10a2f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a2f8:	e5932000 	ldr	r2, [r3]
  10a2fc:	e51b300c 	ldr	r3, [fp, #-12]
  10a300:	e583203c 	str	r2, [r3, #60]	; 0x3c

        /* padding ... */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[0] = 0;
  10a304:	e51b300c 	ldr	r3, [fp, #-12]
  10a308:	e3a02000 	mov	r2, #0
  10a30c:	e5832040 	str	r2, [r3, #64]	; 0x40
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[1] = 0;
  10a310:	e51b300c 	ldr	r3, [fp, #-12]
  10a314:	e3a02000 	mov	r2, #0
  10a318:	e5832044 	str	r2, [r3, #68]	; 0x44
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[2] = 0;
  10a31c:	e51b300c 	ldr	r3, [fp, #-12]
  10a320:	e3a02000 	mov	r2, #0
  10a324:	e5832048 	str	r2, [r3, #72]	; 0x48

        return ALT_E_SUCCESS;
  10a328:	e3a03000 	mov	r3, #0
  10a32c:	ea00002d 	b	10a3e8 <alt_clk_group_cfg_raw_get+0x384>
    }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)
  10a330:	e55b3005 	ldrb	r3, [fp, #-5]
  10a334:	e3530002 	cmp	r3, #2
  10a338:	1a000029 	bne	10a3e4 <alt_clk_group_cfg_raw_get+0x380>
    {
        /* SDRAM PLL VCO register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
  10a33c:	e30430c0 	movw	r3, #16576	; 0x40c0
  10a340:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a344:	e5932000 	ldr	r2, [r3]
  10a348:	e51b300c 	ldr	r3, [fp, #-12]
  10a34c:	e583200c 	str	r2, [r3, #12]

        /* SDRAM PLL Control register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ctrl = alt_read_word(ALT_CLKMGR_SDRPLL_CTL_ADDR);
  10a350:	e30430c4 	movw	r3, #16580	; 0x40c4
  10a354:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a358:	e5932000 	ldr	r2, [r3]
  10a35c:	e51b300c 	ldr	r3, [fp, #-12]
  10a360:	e5832010 	str	r2, [r3, #16]

        /* SDRAM PLL C0-C2 & C5 Counters */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqsclk = alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR);
  10a364:	e30430c8 	movw	r3, #16584	; 0x40c8
  10a368:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a36c:	e5932000 	ldr	r2, [r3]
  10a370:	e51b300c 	ldr	r3, [fp, #-12]
  10a374:	e5832014 	str	r2, [r3, #20]
        /* doing these as 32-bit reads and writes avoids unnecessary masking operations */

        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddr2xdqsclk = alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR);
  10a378:	e30430cc 	movw	r3, #16588	; 0x40cc
  10a37c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a380:	e5932000 	ldr	r2, [r3]
  10a384:	e51b300c 	ldr	r3, [fp, #-12]
  10a388:	e5832018 	str	r2, [r3, #24]
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqclk    = alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR);
  10a38c:	e30430d0 	movw	r3, #16592	; 0x40d0
  10a390:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a394:	e5932000 	ldr	r2, [r3]
  10a398:	e51b300c 	ldr	r3, [fp, #-12]
  10a39c:	e583201c 	str	r2, [r3, #28]
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.s2fuser2clk = alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR);
  10a3a0:	e30430d4 	movw	r3, #16596	; 0x40d4
  10a3a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a3a8:	e5932000 	ldr	r2, [r3]
  10a3ac:	e51b300c 	ldr	r3, [fp, #-12]
  10a3b0:	e5832020 	str	r2, [r3, #32]

        /* SDRAM PLL Enable register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.en = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
  10a3b4:	e30430d8 	movw	r3, #16600	; 0x40d8
  10a3b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a3bc:	e5932000 	ldr	r2, [r3]
  10a3c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a3c4:	e5832024 	str	r2, [r3, #36]	; 0x24

        /* SDRAM PLL Status register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_SDRPLL_STAT_ADDR);
  10a3c8:	e30430dc 	movw	r3, #16604	; 0x40dc
  10a3cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a3d0:	e5932000 	ldr	r2, [r3]
  10a3d4:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d8:	e5832028 	str	r2, [r3, #40]	; 0x28

        return ALT_E_SUCCESS;
  10a3dc:	e3a03000 	mov	r3, #0
  10a3e0:	ea000000 	b	10a3e8 <alt_clk_group_cfg_raw_get+0x384>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10a3e4:	e3e03008 	mvn	r3, #8
    }
}
  10a3e8:	e1a00003 	mov	r0, r3
  10a3ec:	e24bd000 	sub	sp, fp, #0
  10a3f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a3f4:	e12fff1e 	bx	lr

0010a3f8 <alt_clk_group_cfg_raw_set>:

/*
// alt_clk_group_cfg_raw_set() sets the clock group configuration.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_set(const ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
  10a3f8:	e92d4800 	push	{fp, lr}
  10a3fc:	e28db004 	add	fp, sp, #4
  10a400:	e24dd018 	sub	sp, sp, #24
  10a404:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    /* get the PLL ID */
    ALT_CLK_GRP_t clk_group = clk_group_raw_cfg->clkgrpsel;
  10a408:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a40c:	e5d33008 	ldrb	r3, [r3, #8]
  10a410:	e54b300e 	strb	r3, [fp, #-14]
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
  10a414:	e3a03000 	mov	r3, #0
  10a418:	e50b300c 	str	r3, [fp, #-12]
    bool byp = false;
  10a41c:	e3a03000 	mov	r3, #0
  10a420:	e54b300d 	strb	r3, [fp, #-13]

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
  10a424:	e3a03902 	mov	r3, #32768	; 0x8000
  10a428:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a42c:	e5933000 	ldr	r3, [r3]
  10a430:	e1a02823 	lsr	r2, r3, #16
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
  10a434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a438:	e5933000 	ldr	r3, [r3]
  10a43c:	e1a03823 	lsr	r3, r3, #16
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    bool byp = false;

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
  10a440:	e1520003 	cmp	r2, r3
  10a444:	0a000001 	beq	10a450 <alt_clk_group_cfg_raw_set+0x58>
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
    {
        return ALT_E_BAD_VERSION;
  10a448:	e3e0300e 	mvn	r3, #14
  10a44c:	ea0000db 	b	10a7c0 <alt_clk_group_cfg_raw_set+0x3c8>
    }

    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
  10a450:	e55b300e 	ldrb	r3, [fp, #-14]
  10a454:	e3530000 	cmp	r3, #0
  10a458:	1a000002 	bne	10a468 <alt_clk_group_cfg_raw_set+0x70>
  10a45c:	e3a03009 	mov	r3, #9
  10a460:	e54b3005 	strb	r3, [fp, #-5]
  10a464:	ea00000d 	b	10a4a0 <alt_clk_group_cfg_raw_set+0xa8>
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP) { pll = ALT_CLK_PERIPHERAL_PLL; }
  10a468:	e55b300e 	ldrb	r3, [fp, #-14]
  10a46c:	e3530001 	cmp	r3, #1
  10a470:	1a000002 	bne	10a480 <alt_clk_group_cfg_raw_set+0x88>
  10a474:	e3a0300a 	mov	r3, #10
  10a478:	e54b3005 	strb	r3, [fp, #-5]
  10a47c:	ea000007 	b	10a4a0 <alt_clk_group_cfg_raw_set+0xa8>
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)  { pll = ALT_CLK_SDRAM_PLL; }
  10a480:	e55b300e 	ldrb	r3, [fp, #-14]
  10a484:	e3530002 	cmp	r3, #2
  10a488:	1a000002 	bne	10a498 <alt_clk_group_cfg_raw_set+0xa0>
  10a48c:	e3a0300b 	mov	r3, #11
  10a490:	e54b3005 	strb	r3, [fp, #-5]
  10a494:	ea000001 	b	10a4a0 <alt_clk_group_cfg_raw_set+0xa8>
    else
    {
        return ALT_E_ERROR;
  10a498:	e3e03000 	mvn	r3, #0
  10a49c:	ea0000c7 	b	10a7c0 <alt_clk_group_cfg_raw_set+0x3c8>
    }

    /* if the PLL isn't in bypass mode, put it in bypass mode */
    if (alt_clk_pll_is_bypassed(pll) == ALT_E_FALSE)
  10a4a0:	e55b3005 	ldrb	r3, [fp, #-5]
  10a4a4:	e1a00003 	mov	r0, r3
  10a4a8:	ebffdc7b 	bl	10169c <alt_clk_pll_is_bypassed>
  10a4ac:	e1a03000 	mov	r3, r0
  10a4b0:	e3530000 	cmp	r3, #0
  10a4b4:	1a00000b 	bne	10a4e8 <alt_clk_group_cfg_raw_set+0xf0>
    {
        status = alt_clk_pll_bypass_enable(pll, false);
  10a4b8:	e55b3005 	ldrb	r3, [fp, #-5]
  10a4bc:	e3a01000 	mov	r1, #0
  10a4c0:	e1a00003 	mov	r0, r3
  10a4c4:	ebffdb9c 	bl	10133c <alt_clk_pll_bypass_enable>
  10a4c8:	e50b000c 	str	r0, [fp, #-12]
        if (status != ALT_E_SUCCESS)
  10a4cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a4d0:	e3530000 	cmp	r3, #0
  10a4d4:	0a000001 	beq	10a4e0 <alt_clk_group_cfg_raw_set+0xe8>
        {
            return status;
  10a4d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a4dc:	ea0000b7 	b	10a7c0 <alt_clk_group_cfg_raw_set+0x3c8>
        }

        byp = true;
  10a4e0:	e3a03001 	mov	r3, #1
  10a4e4:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* now write the values in the ALT_CLK_GROUP_RAW_CFG_t structure to the registers */
    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
  10a4e8:	e55b300e 	ldrb	r3, [fp, #-14]
  10a4ec:	e3530000 	cmp	r3, #0
  10a4f0:	1a000042 	bne	10a600 <alt_clk_group_cfg_raw_set+0x208>
    {
        /* Main PLL VCO register */
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.vco &
  10a4f4:	e3043040 	movw	r3, #16448	; 0x4040
  10a4f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a4fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a500:	e592200c 	ldr	r2, [r2, #12]
  10a504:	e3c2247f 	bic	r2, r2, #2130706432	; 0x7f000000
  10a508:	e5832000 	str	r2, [r3]
                       ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_OUTRST_CLR_MSK);
        /* the outreset and outresetall bits were probably clear when the
           state was saved, but make sure they're clear now */

        /* Main PLL Misc register */
        alt_write_word(ALT_CLKMGR_MAINPLL_MISC_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.misc);
  10a50c:	e3043044 	movw	r3, #16452	; 0x4044
  10a510:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a514:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a518:	e5922010 	ldr	r2, [r2, #16]
  10a51c:	e5832000 	str	r2, [r3]

        /* Main PLL C0-C5 Counter registers */
        alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,           clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mpuclk);
  10a520:	e3043048 	movw	r3, #16456	; 0x4048
  10a524:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a528:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a52c:	e5922014 	ldr	r2, [r2, #20]
  10a530:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR,          clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainclk);
  10a534:	e304304c 	movw	r3, #16460	; 0x404c
  10a538:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a53c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a540:	e5922018 	ldr	r2, [r2, #24]
  10a544:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR,         clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgatclk);
  10a548:	e3043050 	movw	r3, #16464	; 0x4050
  10a54c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a550:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a554:	e592201c 	ldr	r2, [r2, #28]
  10a558:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,      clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainqspiclk);
  10a55c:	e3043054 	movw	r3, #16468	; 0x4054
  10a560:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a564:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a568:	e5922020 	ldr	r2, [r2, #32]
  10a56c:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainnandsdmmcclk);
  10a570:	e3043058 	movw	r3, #16472	; 0x4058
  10a574:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a578:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a57c:	e5922024 	ldr	r2, [r2, #36]	; 0x24
  10a580:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR,   clk_group_raw_cfg->clkgrp.mainpllgrp.raw.cfgs2fuser0clk);
  10a584:	e304305c 	movw	r3, #16476	; 0x405c
  10a588:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a58c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a590:	e5922028 	ldr	r2, [r2, #40]	; 0x28
  10a594:	e5832000 	str	r2, [r3]

        /* Main PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.en);
  10a598:	e3043060 	movw	r3, #16480	; 0x4060
  10a59c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a5a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a5a4:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
  10a5a8:	e5832000 	str	r2, [r3]

        /* Main PLL Maindiv register */
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.maindiv);
  10a5ac:	e3043064 	movw	r3, #16484	; 0x4064
  10a5b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a5b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a5b8:	e5922030 	ldr	r2, [r2, #48]	; 0x30
  10a5bc:	e5832000 	str	r2, [r3]

        /* Main PLL Debugdiv register */
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgdiv);
  10a5c0:	e3043068 	movw	r3, #16488	; 0x4068
  10a5c4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a5c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a5cc:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10a5d0:	e5832000 	str	r2, [r3]

        /* Main PLL Tracediv register */
        alt_write_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.tracediv);
  10a5d4:	e304306c 	movw	r3, #16492	; 0x406c
  10a5d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a5dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a5e0:	e5922038 	ldr	r2, [r2, #56]	; 0x38
  10a5e4:	e5832000 	str	r2, [r3]

        /* Main PLL L4 Source register */
        alt_write_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.l4src);
  10a5e8:	e3043070 	movw	r3, #16496	; 0x4070
  10a5ec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a5f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a5f4:	e592203c 	ldr	r2, [r2, #60]	; 0x3c
  10a5f8:	e5832000 	str	r2, [r3]
  10a5fc:	ea000067 	b	10a7a0 <alt_clk_group_cfg_raw_set+0x3a8>
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
  10a600:	e55b300e 	ldrb	r3, [fp, #-14]
  10a604:	e3530001 	cmp	r3, #1
  10a608:	1a00003d 	bne	10a704 <alt_clk_group_cfg_raw_set+0x30c>
    {
        /* Peripheral PLL VCO register */
        alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.vco &
  10a60c:	e3043080 	movw	r3, #16512	; 0x4080
  10a610:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a614:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a618:	e592200c 	ldr	r2, [r2, #12]
  10a61c:	e3c2247f 	bic	r2, r2, #2130706432	; 0x7f000000
  10a620:	e5832000 	str	r2, [r3]
                       ALT_CLKMGR_PERPLL_VCO_OUTRST_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_CLR_MSK);
        /* the outreset and outresetall bits were probably clear when the
           state was saved, but make sure they're clear now */

        /* Peripheral PLL Misc register */
        alt_write_word(ALT_CLKMGR_PERPLL_MISC_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.misc);
  10a624:	e3043084 	movw	r3, #16516	; 0x4084
  10a628:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a62c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a630:	e5922010 	ldr	r2, [r2, #16]
  10a634:	e5832000 	str	r2, [r3]

        /* Peripheral PLL C0-C5 Counters */
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR,        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac0clk);
  10a638:	e3043088 	movw	r3, #16520	; 0x4088
  10a63c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a640:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a644:	e5922014 	ldr	r2, [r2, #20]
  10a648:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR,        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac1clk);
  10a64c:	e304308c 	movw	r3, #16524	; 0x408c
  10a650:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a654:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a658:	e5922018 	ldr	r2, [r2, #24]
  10a65c:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,      clk_group_raw_cfg->clkgrp.perpllgrp.raw.perqspiclk);
  10a660:	e3043090 	movw	r3, #16528	; 0x4090
  10a664:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a668:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a66c:	e592201c 	ldr	r2, [r2, #28]
  10a670:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.pernandsdmmcclk);
  10a674:	e3043094 	movw	r3, #16532	; 0x4094
  10a678:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a67c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a680:	e5922020 	ldr	r2, [r2, #32]
  10a684:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR,      clk_group_raw_cfg->clkgrp.perpllgrp.raw.perbaseclk);
  10a688:	e3043098 	movw	r3, #16536	; 0x4098
  10a68c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a694:	e5922024 	ldr	r2, [r2, #36]	; 0x24
  10a698:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR,     clk_group_raw_cfg->clkgrp.perpllgrp.raw.s2fuser1clk);
  10a69c:	e304309c 	movw	r3, #16540	; 0x409c
  10a6a0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a6a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a6a8:	e5922028 	ldr	r2, [r2, #40]	; 0x28
  10a6ac:	e5832000 	str	r2, [r3]

        /* Peripheral PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.en);
  10a6b0:	e30430a0 	movw	r3, #16544	; 0x40a0
  10a6b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a6b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a6bc:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
  10a6c0:	e5832000 	str	r2, [r3]

        /* Peripheral PLL Divider register */
        alt_write_word(ALT_CLKMGR_PERPLL_DIV_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.div);
  10a6c4:	e30430a4 	movw	r3, #16548	; 0x40a4
  10a6c8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a6cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a6d0:	e5922030 	ldr	r2, [r2, #48]	; 0x30
  10a6d4:	e5832000 	str	r2, [r3]

        /* Peripheral PLL GPIO Divider register */
        alt_write_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.gpiodiv);
  10a6d8:	e30430a8 	movw	r3, #16552	; 0x40a8
  10a6dc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a6e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a6e4:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10a6e8:	e5832000 	str	r2, [r3]

        /* Peripheral PLL Source register */
        alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.src);
  10a6ec:	e30430ac 	movw	r3, #16556	; 0x40ac
  10a6f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a6f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a6f8:	e5922038 	ldr	r2, [r2, #56]	; 0x38
  10a6fc:	e5832000 	str	r2, [r3]
  10a700:	ea000026 	b	10a7a0 <alt_clk_group_cfg_raw_set+0x3a8>
    }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)
  10a704:	e55b300e 	ldrb	r3, [fp, #-14]
  10a708:	e3530002 	cmp	r3, #2
  10a70c:	1a000023 	bne	10a7a0 <alt_clk_group_cfg_raw_set+0x3a8>
    {
        /* SDRAM PLL VCO register */
        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.vco &
  10a710:	e30430c0 	movw	r3, #16576	; 0x40c0
  10a714:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a718:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a71c:	e592200c 	ldr	r2, [r2, #12]
  10a720:	e3c2247f 	bic	r2, r2, #2130706432	; 0x7f000000
  10a724:	e5832000 	str	r2, [r3]
                       ALT_CLKMGR_SDRPLL_VCO_OUTRST_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
        /* the outreset and outresetall bits were probably clear when the
           state was saved, but make sure they're clear now */

        /* SDRAM PLL Control register */
        alt_write_word(ALT_CLKMGR_SDRPLL_CTL_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ctrl);
  10a728:	e30430c4 	movw	r3, #16580	; 0x40c4
  10a72c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a730:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a734:	e5922010 	ldr	r2, [r2, #16]
  10a738:	e5832000 	str	r2, [r3]

        /* SDRAM PLL C0-C2 & C5 Counters */
        alt_write_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR,   clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqsclk);
  10a73c:	e30430c8 	movw	r3, #16584	; 0x40c8
  10a740:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a744:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a748:	e5922014 	ldr	r2, [r2, #20]
  10a74c:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddr2xdqsclk);
  10a750:	e30430cc 	movw	r3, #16588	; 0x40cc
  10a754:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a758:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a75c:	e5922018 	ldr	r2, [r2, #24]
  10a760:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR,    clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqclk);
  10a764:	e30430d0 	movw	r3, #16592	; 0x40d0
  10a768:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a76c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a770:	e592201c 	ldr	r2, [r2, #28]
  10a774:	e5832000 	str	r2, [r3]
        alt_write_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.s2fuser2clk);
  10a778:	e30430d4 	movw	r3, #16596	; 0x40d4
  10a77c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a780:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a784:	e5922020 	ldr	r2, [r2, #32]
  10a788:	e5832000 	str	r2, [r3]

        /* SDRAM PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.en);
  10a78c:	e30430d8 	movw	r3, #16600	; 0x40d8
  10a790:	e34f3fd0 	movt	r3, #65488	; 0xffd0
  10a794:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a798:	e5922024 	ldr	r2, [r2, #36]	; 0x24
  10a79c:	e5832000 	str	r2, [r3]
    }

    /* if PLL was not bypassed before, restore that state */
    if (byp)
  10a7a0:	e55b300d 	ldrb	r3, [fp, #-13]
  10a7a4:	e3530000 	cmp	r3, #0
  10a7a8:	0a000003 	beq	10a7bc <alt_clk_group_cfg_raw_set+0x3c4>
    {
        status = alt_clk_pll_bypass_disable(pll);
  10a7ac:	e55b3005 	ldrb	r3, [fp, #-5]
  10a7b0:	e1a00003 	mov	r0, r3
  10a7b4:	ebffd9f1 	bl	100f80 <alt_clk_pll_bypass_disable>
  10a7b8:	e50b000c 	str	r0, [fp, #-12]
    }

    return status;
  10a7bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a7c0:	e1a00003 	mov	r0, r3
  10a7c4:	e24bd004 	sub	sp, fp, #4
  10a7c8:	e8bd8800 	pop	{fp, pc}

0010a7cc <alt_clk_pll_cntr_maxfreq_recalc>:

/*
// alt_clk_pll_cntr_maxfreq_recalc() recalculate the maxmum frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
  10a7cc:	e92d4800 	push	{fp, lr}
  10a7d0:	e28db004 	add	fp, sp, #4
  10a7d4:	e24dd010 	sub	sp, sp, #16
  10a7d8:	e1a03000 	mov	r3, r0
  10a7dc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a7e0:	e54b300d 	strb	r3, [fp, #-13]
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
  10a7e4:	e3e03008 	mvn	r3, #8
  10a7e8:	e50b3008 	str	r3, [fp, #-8]
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
  10a7ec:	e24b200c 	sub	r2, fp, #12
  10a7f0:	e55b300d 	ldrb	r3, [fp, #-13]
  10a7f4:	e1a01002 	mov	r1, r2
  10a7f8:	e1a00003 	mov	r0, r3
  10a7fc:	ebfff717 	bl	108460 <alt_clk_freq_get>
  10a800:	e50b0008 	str	r0, [fp, #-8]

    if (ret == ALT_E_SUCCESS)
  10a804:	e51b3008 	ldr	r3, [fp, #-8]
  10a808:	e3530000 	cmp	r3, #0
  10a80c:	1a0000ca 	bne	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
    {

        switch (clk)
  10a810:	e55b300d 	ldrb	r3, [fp, #-13]
  10a814:	e243300d 	sub	r3, r3, #13
  10a818:	e353002f 	cmp	r3, #47	; 0x2f
  10a81c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  10a820:	ea0000bf 	b	10ab24 <alt_clk_pll_cntr_maxfreq_recalc+0x358>
  10a824:	0010a8e4 	andseq	sl, r0, r4, ror #17
  10a828:	0010a908 	andseq	sl, r0, r8, lsl #18
  10a82c:	0010a92c 	andseq	sl, r0, ip, lsr #18
  10a830:	0010a950 	andseq	sl, r0, r0, asr r9
  10a834:	0010a974 	andseq	sl, r0, r4, ror r9
  10a838:	0010a998 	mulseq	r0, r8, r9
  10a83c:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a840:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a844:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a848:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a84c:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a850:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a854:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a858:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a85c:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a860:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a864:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a868:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a86c:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a870:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a874:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a878:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a87c:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a880:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a884:	0010a9bc 			; <UNDEFINED> instruction: 0x0010a9bc
  10a888:	0010a9e0 	andseq	sl, r0, r0, ror #19
  10a88c:	0010aa04 	andseq	sl, r0, r4, lsl #20
  10a890:	0010aa28 	andseq	sl, r0, r8, lsr #20
  10a894:	0010aa4c 	andseq	sl, r0, ip, asr #20
  10a898:	0010aa70 	andseq	sl, r0, r0, ror sl
  10a89c:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8a0:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8a4:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8a8:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8ac:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8b0:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8b4:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8b8:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8bc:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8c0:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8c4:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8c8:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8cc:	0010aa94 	mulseq	r0, r4, sl
  10a8d0:	0010aab8 			; <UNDEFINED> instruction: 0x0010aab8
  10a8d4:	0010aadc 			; <UNDEFINED> instruction: 0x0010aadc
  10a8d8:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8dc:	0010ab24 	andseq	sl, r0, r4, lsr #22
  10a8e0:	0010ab00 	andseq	sl, r0, r0, lsl #22
        {
            /* Main Clock Group */
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
  10a8e4:	e51b200c 	ldr	r2, [fp, #-12]
  10a8e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a8ec:	e5832000 	str	r2, [r3]
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C0   = %10d\n", (unsigned int)freq);
  10a8f0:	e51b300c 	ldr	r3, [fp, #-12]
  10a8f4:	e1a01003 	mov	r1, r3
  10a8f8:	e3060d20 	movw	r0, #27936	; 0x6d20
  10a8fc:	e3400011 	movt	r0, #17
  10a900:	ebffd861 	bl	100a8c <null_printf>
            break;
  10a904:	ea00008c 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
  10a908:	e51b200c 	ldr	r2, [fp, #-12]
  10a90c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a910:	e5832004 	str	r2, [r3, #4]
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C1   = %10d\n", (unsigned int)freq);
  10a914:	e51b300c 	ldr	r3, [fp, #-12]
  10a918:	e1a01003 	mov	r1, r3
  10a91c:	e3060d4c 	movw	r0, #27980	; 0x6d4c
  10a920:	e3400011 	movt	r0, #17
  10a924:	ebffd858 	bl	100a8c <null_printf>
            break;
  10a928:	ea000083 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
  10a92c:	e51b200c 	ldr	r2, [fp, #-12]
  10a930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a934:	e5832008 	str	r2, [r3, #8]
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C2   = %10d\n", (unsigned int)freq);
  10a938:	e51b300c 	ldr	r3, [fp, #-12]
  10a93c:	e1a01003 	mov	r1, r3
  10a940:	e3060d78 	movw	r0, #28024	; 0x6d78
  10a944:	e3400011 	movt	r0, #17
  10a948:	ebffd84f 	bl	100a8c <null_printf>
            break;
  10a94c:	ea00007a 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
  10a950:	e51b200c 	ldr	r2, [fp, #-12]
  10a954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a958:	e583200c 	str	r2, [r3, #12]
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C3   = %10d\n", (unsigned int)freq);
  10a95c:	e51b300c 	ldr	r3, [fp, #-12]
  10a960:	e1a01003 	mov	r1, r3
  10a964:	e3060da4 	movw	r0, #28068	; 0x6da4
  10a968:	e3400011 	movt	r0, #17
  10a96c:	ebffd846 	bl	100a8c <null_printf>
            break;
  10a970:	ea000071 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
  10a974:	e51b200c 	ldr	r2, [fp, #-12]
  10a978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a97c:	e5832010 	str	r2, [r3, #16]
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C4   = %10d\n", (unsigned int)freq);
  10a980:	e51b300c 	ldr	r3, [fp, #-12]
  10a984:	e1a01003 	mov	r1, r3
  10a988:	e3060dd0 	movw	r0, #28112	; 0x6dd0
  10a98c:	e3400011 	movt	r0, #17
  10a990:	ebffd83d 	bl	100a8c <null_printf>
            break;
  10a994:	ea000068 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_MAIN_PLL_C5:
            maxfreq->MainPLL_C5 = freq;
  10a998:	e51b200c 	ldr	r2, [fp, #-12]
  10a99c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a9a0:	e5832014 	str	r2, [r3, #20]
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C5   = %10d\n", (unsigned int)freq);
  10a9a4:	e51b300c 	ldr	r3, [fp, #-12]
  10a9a8:	e1a01003 	mov	r1, r3
  10a9ac:	e3060dfc 	movw	r0, #28156	; 0x6dfc
  10a9b0:	e3400011 	movt	r0, #17
  10a9b4:	ebffd834 	bl	100a8c <null_printf>
            break;
  10a9b8:	ea00005f 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>

            /* Peripheral Clock Group */
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
  10a9bc:	e51b200c 	ldr	r2, [fp, #-12]
  10a9c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a9c4:	e5832018 	str	r2, [r3, #24]
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C0 = %10d\n", (unsigned int)freq);
  10a9c8:	e51b300c 	ldr	r3, [fp, #-12]
  10a9cc:	e1a01003 	mov	r1, r3
  10a9d0:	e3060e28 	movw	r0, #28200	; 0x6e28
  10a9d4:	e3400011 	movt	r0, #17
  10a9d8:	ebffd82b 	bl	100a8c <null_printf>
            break;
  10a9dc:	ea000056 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
  10a9e0:	e51b200c 	ldr	r2, [fp, #-12]
  10a9e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a9e8:	e583201c 	str	r2, [r3, #28]
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C1 = %10d\n", (unsigned int)freq);
  10a9ec:	e51b300c 	ldr	r3, [fp, #-12]
  10a9f0:	e1a01003 	mov	r1, r3
  10a9f4:	e3060e54 	movw	r0, #28244	; 0x6e54
  10a9f8:	e3400011 	movt	r0, #17
  10a9fc:	ebffd822 	bl	100a8c <null_printf>
            break;
  10aa00:	ea00004d 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
  10aa04:	e51b200c 	ldr	r2, [fp, #-12]
  10aa08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aa0c:	e5832020 	str	r2, [r3, #32]
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C2 = %10d\n", (unsigned int)freq);
  10aa10:	e51b300c 	ldr	r3, [fp, #-12]
  10aa14:	e1a01003 	mov	r1, r3
  10aa18:	e3060e80 	movw	r0, #28288	; 0x6e80
  10aa1c:	e3400011 	movt	r0, #17
  10aa20:	ebffd819 	bl	100a8c <null_printf>
            break;
  10aa24:	ea000044 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
  10aa28:	e51b200c 	ldr	r2, [fp, #-12]
  10aa2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aa30:	e5832024 	str	r2, [r3, #36]	; 0x24
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C3 = %10d\n", (unsigned int)freq);
  10aa34:	e51b300c 	ldr	r3, [fp, #-12]
  10aa38:	e1a01003 	mov	r1, r3
  10aa3c:	e3060eac 	movw	r0, #28332	; 0x6eac
  10aa40:	e3400011 	movt	r0, #17
  10aa44:	ebffd810 	bl	100a8c <null_printf>
            break;
  10aa48:	ea00003b 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
  10aa4c:	e51b200c 	ldr	r2, [fp, #-12]
  10aa50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aa54:	e5832028 	str	r2, [r3, #40]	; 0x28
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C4 = %10d\n", (unsigned int)freq);
  10aa58:	e51b300c 	ldr	r3, [fp, #-12]
  10aa5c:	e1a01003 	mov	r1, r3
  10aa60:	e3060ed8 	movw	r0, #28376	; 0x6ed8
  10aa64:	e3400011 	movt	r0, #17
  10aa68:	ebffd807 	bl	100a8c <null_printf>
            break;
  10aa6c:	ea000032 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_PERIPHERAL_PLL_C5:
            maxfreq->PeriphPLL_C5 = freq;
  10aa70:	e51b200c 	ldr	r2, [fp, #-12]
  10aa74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aa78:	e583202c 	str	r2, [r3, #44]	; 0x2c
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C5 = %10d\n", (unsigned int)freq);
  10aa7c:	e51b300c 	ldr	r3, [fp, #-12]
  10aa80:	e1a01003 	mov	r1, r3
  10aa84:	e3060f04 	movw	r0, #28420	; 0x6f04
  10aa88:	e3400011 	movt	r0, #17
  10aa8c:	ebffd7fe 	bl	100a8c <null_printf>
            break;
  10aa90:	ea000029 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>

            /* SDRAM Clock Group */
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
  10aa94:	e51b200c 	ldr	r2, [fp, #-12]
  10aa98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aa9c:	e5832030 	str	r2, [r3, #48]	; 0x30
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C0  = %10d\n", (unsigned int)freq);
  10aaa0:	e51b300c 	ldr	r3, [fp, #-12]
  10aaa4:	e1a01003 	mov	r1, r3
  10aaa8:	e3060f30 	movw	r0, #28464	; 0x6f30
  10aaac:	e3400011 	movt	r0, #17
  10aab0:	ebffd7f5 	bl	100a8c <null_printf>
            break;
  10aab4:	ea000020 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
  10aab8:	e51b200c 	ldr	r2, [fp, #-12]
  10aabc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aac0:	e5832034 	str	r2, [r3, #52]	; 0x34
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C1  = %10d\n", (unsigned int)freq);
  10aac4:	e51b300c 	ldr	r3, [fp, #-12]
  10aac8:	e1a01003 	mov	r1, r3
  10aacc:	e3060f5c 	movw	r0, #28508	; 0x6f5c
  10aad0:	e3400011 	movt	r0, #17
  10aad4:	ebffd7ec 	bl	100a8c <null_printf>
            break;
  10aad8:	ea000017 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
  10aadc:	e51b200c 	ldr	r2, [fp, #-12]
  10aae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aae4:	e5832038 	str	r2, [r3, #56]	; 0x38
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C2  = %10d\n", (unsigned int)freq);
  10aae8:	e51b300c 	ldr	r3, [fp, #-12]
  10aaec:	e1a01003 	mov	r1, r3
  10aaf0:	e3060f88 	movw	r0, #28552	; 0x6f88
  10aaf4:	e3400011 	movt	r0, #17
  10aaf8:	ebffd7e3 	bl	100a8c <null_printf>
            break;
  10aafc:	ea00000e 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        case ALT_CLK_SDRAM_PLL_C5:
            maxfreq->SDRAMPLL_C5 = freq;
  10ab00:	e51b200c 	ldr	r2, [fp, #-12]
  10ab04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ab08:	e583203c 	str	r2, [r3, #60]	; 0x3c
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C5  = %10d\n", (unsigned int)freq);
  10ab0c:	e51b300c 	ldr	r3, [fp, #-12]
  10ab10:	e1a01003 	mov	r1, r3
  10ab14:	e3060fb4 	movw	r0, #28596	; 0x6fb4
  10ab18:	e3400011 	movt	r0, #17
  10ab1c:	ebffd7da 	bl	100a8c <null_printf>
            break;
  10ab20:	ea000005 	b	10ab3c <alt_clk_pll_cntr_maxfreq_recalc+0x370>
        default:
            ret = ALT_E_BAD_ARG;
  10ab24:	e3e03008 	mvn	r3, #8
  10ab28:	e50b3008 	str	r3, [fp, #-8]
            dprintf("bad max frequency parameter\n");
  10ab2c:	e3060fe0 	movw	r0, #28640	; 0x6fe0
  10ab30:	e3400011 	movt	r0, #17
  10ab34:	ebffd7d4 	bl	100a8c <null_printf>
            break;
  10ab38:	e1a00000 	nop			; (mov r0, r0)
        }   /* end of switch-case construct */
    }

    return ret;
  10ab3c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ab40:	e1a00003 	mov	r0, r3
  10ab44:	e24bd004 	sub	sp, fp, #4
  10ab48:	e8bd8800 	pop	{fp, pc}

0010ab4c <alt_clk_clkmgr_reinit>:
//  alt_clk_clkmgr_init() attempt to fix the pll counter max frequencies, since
//  thses frequencies are not known in advance until preloader programmed clock manager.
*/

ALT_STATUS_CODE alt_clk_clkmgr_reinit(void)
{
  10ab4c:	e92d4800 	push	{fp, lr}
  10ab50:	e28db004 	add	fp, sp, #4
  10ab54:	e24dd008 	sub	sp, sp, #8
    ALT_STATUS_CODE ret = ALT_E_SUCCESS;
  10ab58:	e3a03000 	mov	r3, #0
  10ab5c:	e50b3008 	str	r3, [fp, #-8]
    ALT_STATUS_CODE status ;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C0,&alt_pll_cntr_maxfreq );
  10ab60:	e3071350 	movw	r1, #29520	; 0x7350
  10ab64:	e3401011 	movt	r1, #17
  10ab68:	e3a0000d 	mov	r0, #13
  10ab6c:	ebffff16 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ab70:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ab74:	e51b300c 	ldr	r3, [fp, #-12]
  10ab78:	e3530000 	cmp	r3, #0
  10ab7c:	0a000001 	beq	10ab88 <alt_clk_clkmgr_reinit+0x3c>
  10ab80:	e3e03000 	mvn	r3, #0
  10ab84:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C1,&alt_pll_cntr_maxfreq );
  10ab88:	e3071350 	movw	r1, #29520	; 0x7350
  10ab8c:	e3401011 	movt	r1, #17
  10ab90:	e3a0000e 	mov	r0, #14
  10ab94:	ebffff0c 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ab98:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ab9c:	e51b300c 	ldr	r3, [fp, #-12]
  10aba0:	e3530000 	cmp	r3, #0
  10aba4:	0a000001 	beq	10abb0 <alt_clk_clkmgr_reinit+0x64>
  10aba8:	e3e03000 	mvn	r3, #0
  10abac:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C2,&alt_pll_cntr_maxfreq );
  10abb0:	e3071350 	movw	r1, #29520	; 0x7350
  10abb4:	e3401011 	movt	r1, #17
  10abb8:	e3a0000f 	mov	r0, #15
  10abbc:	ebffff02 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10abc0:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10abc4:	e51b300c 	ldr	r3, [fp, #-12]
  10abc8:	e3530000 	cmp	r3, #0
  10abcc:	0a000001 	beq	10abd8 <alt_clk_clkmgr_reinit+0x8c>
  10abd0:	e3e03000 	mvn	r3, #0
  10abd4:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C3,&alt_pll_cntr_maxfreq );
  10abd8:	e3071350 	movw	r1, #29520	; 0x7350
  10abdc:	e3401011 	movt	r1, #17
  10abe0:	e3a00010 	mov	r0, #16
  10abe4:	ebfffef8 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10abe8:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10abec:	e51b300c 	ldr	r3, [fp, #-12]
  10abf0:	e3530000 	cmp	r3, #0
  10abf4:	0a000001 	beq	10ac00 <alt_clk_clkmgr_reinit+0xb4>
  10abf8:	e3e03000 	mvn	r3, #0
  10abfc:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C4,&alt_pll_cntr_maxfreq );
  10ac00:	e3071350 	movw	r1, #29520	; 0x7350
  10ac04:	e3401011 	movt	r1, #17
  10ac08:	e3a00011 	mov	r0, #17
  10ac0c:	ebfffeee 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ac10:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ac14:	e51b300c 	ldr	r3, [fp, #-12]
  10ac18:	e3530000 	cmp	r3, #0
  10ac1c:	0a000001 	beq	10ac28 <alt_clk_clkmgr_reinit+0xdc>
  10ac20:	e3e03000 	mvn	r3, #0
  10ac24:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C5,&alt_pll_cntr_maxfreq );
  10ac28:	e3071350 	movw	r1, #29520	; 0x7350
  10ac2c:	e3401011 	movt	r1, #17
  10ac30:	e3a00012 	mov	r0, #18
  10ac34:	ebfffee4 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ac38:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ac3c:	e51b300c 	ldr	r3, [fp, #-12]
  10ac40:	e3530000 	cmp	r3, #0
  10ac44:	0a000001 	beq	10ac50 <alt_clk_clkmgr_reinit+0x104>
  10ac48:	e3e03000 	mvn	r3, #0
  10ac4c:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C0,&alt_pll_cntr_maxfreq );
  10ac50:	e3071350 	movw	r1, #29520	; 0x7350
  10ac54:	e3401011 	movt	r1, #17
  10ac58:	e3a00025 	mov	r0, #37	; 0x25
  10ac5c:	ebfffeda 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ac60:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ac64:	e51b300c 	ldr	r3, [fp, #-12]
  10ac68:	e3530000 	cmp	r3, #0
  10ac6c:	0a000001 	beq	10ac78 <alt_clk_clkmgr_reinit+0x12c>
  10ac70:	e3e03000 	mvn	r3, #0
  10ac74:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C1,&alt_pll_cntr_maxfreq );
  10ac78:	e3071350 	movw	r1, #29520	; 0x7350
  10ac7c:	e3401011 	movt	r1, #17
  10ac80:	e3a00026 	mov	r0, #38	; 0x26
  10ac84:	ebfffed0 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ac88:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ac8c:	e51b300c 	ldr	r3, [fp, #-12]
  10ac90:	e3530000 	cmp	r3, #0
  10ac94:	0a000001 	beq	10aca0 <alt_clk_clkmgr_reinit+0x154>
  10ac98:	e3e03000 	mvn	r3, #0
  10ac9c:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C2,&alt_pll_cntr_maxfreq );
  10aca0:	e3071350 	movw	r1, #29520	; 0x7350
  10aca4:	e3401011 	movt	r1, #17
  10aca8:	e3a00027 	mov	r0, #39	; 0x27
  10acac:	ebfffec6 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10acb0:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10acb4:	e51b300c 	ldr	r3, [fp, #-12]
  10acb8:	e3530000 	cmp	r3, #0
  10acbc:	0a000001 	beq	10acc8 <alt_clk_clkmgr_reinit+0x17c>
  10acc0:	e3e03000 	mvn	r3, #0
  10acc4:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C3,&alt_pll_cntr_maxfreq );
  10acc8:	e3071350 	movw	r1, #29520	; 0x7350
  10accc:	e3401011 	movt	r1, #17
  10acd0:	e3a00028 	mov	r0, #40	; 0x28
  10acd4:	ebfffebc 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10acd8:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10acdc:	e51b300c 	ldr	r3, [fp, #-12]
  10ace0:	e3530000 	cmp	r3, #0
  10ace4:	0a000001 	beq	10acf0 <alt_clk_clkmgr_reinit+0x1a4>
  10ace8:	e3e03000 	mvn	r3, #0
  10acec:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C4,&alt_pll_cntr_maxfreq );
  10acf0:	e3071350 	movw	r1, #29520	; 0x7350
  10acf4:	e3401011 	movt	r1, #17
  10acf8:	e3a00029 	mov	r0, #41	; 0x29
  10acfc:	ebfffeb2 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ad00:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ad04:	e51b300c 	ldr	r3, [fp, #-12]
  10ad08:	e3530000 	cmp	r3, #0
  10ad0c:	0a000001 	beq	10ad18 <alt_clk_clkmgr_reinit+0x1cc>
  10ad10:	e3e03000 	mvn	r3, #0
  10ad14:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C5,&alt_pll_cntr_maxfreq );
  10ad18:	e3071350 	movw	r1, #29520	; 0x7350
  10ad1c:	e3401011 	movt	r1, #17
  10ad20:	e3a0002a 	mov	r0, #42	; 0x2a
  10ad24:	ebfffea8 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ad28:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ad2c:	e51b300c 	ldr	r3, [fp, #-12]
  10ad30:	e3530000 	cmp	r3, #0
  10ad34:	0a000001 	beq	10ad40 <alt_clk_clkmgr_reinit+0x1f4>
  10ad38:	e3e03000 	mvn	r3, #0
  10ad3c:	e50b3008 	str	r3, [fp, #-8]


    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C0,&alt_pll_cntr_maxfreq );
  10ad40:	e3071350 	movw	r1, #29520	; 0x7350
  10ad44:	e3401011 	movt	r1, #17
  10ad48:	e3a00037 	mov	r0, #55	; 0x37
  10ad4c:	ebfffe9e 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ad50:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ad54:	e51b300c 	ldr	r3, [fp, #-12]
  10ad58:	e3530000 	cmp	r3, #0
  10ad5c:	0a000001 	beq	10ad68 <alt_clk_clkmgr_reinit+0x21c>
  10ad60:	e3e03000 	mvn	r3, #0
  10ad64:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C1,&alt_pll_cntr_maxfreq );
  10ad68:	e3071350 	movw	r1, #29520	; 0x7350
  10ad6c:	e3401011 	movt	r1, #17
  10ad70:	e3a00038 	mov	r0, #56	; 0x38
  10ad74:	ebfffe94 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ad78:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ad7c:	e51b300c 	ldr	r3, [fp, #-12]
  10ad80:	e3530000 	cmp	r3, #0
  10ad84:	0a000001 	beq	10ad90 <alt_clk_clkmgr_reinit+0x244>
  10ad88:	e3e03000 	mvn	r3, #0
  10ad8c:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C2,&alt_pll_cntr_maxfreq );
  10ad90:	e3071350 	movw	r1, #29520	; 0x7350
  10ad94:	e3401011 	movt	r1, #17
  10ad98:	e3a00039 	mov	r0, #57	; 0x39
  10ad9c:	ebfffe8a 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10ada0:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10ada4:	e51b300c 	ldr	r3, [fp, #-12]
  10ada8:	e3530000 	cmp	r3, #0
  10adac:	0a000001 	beq	10adb8 <alt_clk_clkmgr_reinit+0x26c>
  10adb0:	e3e03000 	mvn	r3, #0
  10adb4:	e50b3008 	str	r3, [fp, #-8]

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C5,&alt_pll_cntr_maxfreq );
  10adb8:	e3071350 	movw	r1, #29520	; 0x7350
  10adbc:	e3401011 	movt	r1, #17
  10adc0:	e3a0003c 	mov	r0, #60	; 0x3c
  10adc4:	ebfffe80 	bl	10a7cc <alt_clk_pll_cntr_maxfreq_recalc>
  10adc8:	e50b000c 	str	r0, [fp, #-12]
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
  10adcc:	e51b300c 	ldr	r3, [fp, #-12]
  10add0:	e3530000 	cmp	r3, #0
  10add4:	0a000001 	beq	10ade0 <alt_clk_clkmgr_reinit+0x294>
  10add8:	e3e03000 	mvn	r3, #0
  10addc:	e50b3008 	str	r3, [fp, #-8]


    return ret;
  10ade0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ade4:	e1a00003 	mov	r0, r3
  10ade8:	e24bd004 	sub	sp, fp, #4
  10adec:	e8bd8800 	pop	{fp, pc}

0010adf0 <alt_clk_clkmgr_uninit>:

/*
// alt_clk_clkmgr_uninit() uninit clock manager.
*/
ALT_STATUS_CODE alt_clk_clkmgr_uninit(void)
{
  10adf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10adf4:	e28db000 	add	fp, sp, #0
  10adf8:	e24dd00c 	sub	sp, sp, #12
    ALT_STATUS_CODE ret = ALT_E_SUCCESS;
  10adfc:	e3a03000 	mov	r3, #0
  10ae00:	e50b3008 	str	r3, [fp, #-8]

    return ret;
  10ae04:	e51b3008 	ldr	r3, [fp, #-8]
} 
  10ae08:	e1a00003 	mov	r0, r3
  10ae0c:	e24bd000 	sub	sp, fp, #0
  10ae10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae14:	e12fff1e 	bx	lr

0010ae18 <null_printf>:
  10ae18:	e92d000f 	push	{r0, r1, r2, r3}
  10ae1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae20:	e28db000 	add	fp, sp, #0
  10ae24:	e3a03000 	mov	r3, #0
  10ae28:	e1a00003 	mov	r0, r3
  10ae2c:	e24bd000 	sub	sp, fp, #0
  10ae30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae34:	e28dd010 	add	sp, sp, #16
  10ae38:	e12fff1e 	bx	lr

0010ae3c <alt_int_fixup_irq_stack>:
/* ARMCC specific helper function to fixup the IRQ stack.
   This is implemented in alt_interrupt_armcc.s. */
extern void alt_int_fixup_irq_stack(uint32_t stack_irq);
#else
static void alt_int_fixup_irq_stack(uint32_t stack_irq)
{
  10ae3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae40:	e28db000 	add	fp, sp, #0
  10ae44:	e24dd00c 	sub	sp, sp, #12
  10ae48:	e50b0008 	str	r0, [fp, #-8]
    __asm(
  10ae4c:	e51b2008 	ldr	r2, [fp, #-8]
  10ae50:	e10f3000 	mrs	r3, CPSR
  10ae54:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
  10ae58:	e1a0d002 	mov	sp, r2
  10ae5c:	e121f003 	msr	CPSR_c, r3
        "msr CPSR_c, #(0x12 | 0x80 | 0x40)\n"
        "mov sp, %0\n"
        "msr CPSR_c, r3\n"
        : : "r" (stack_irq) : "r3"
        );
}
  10ae60:	e1a00000 	nop			; (mov r0, r0)
  10ae64:	e24bd000 	sub	sp, fp, #0
  10ae68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae6c:	e12fff1e 	bx	lr

0010ae70 <get_periphbase>:
static uint32_t alt_int_count_cpu;
/* Number of interrupts in system, rounded up to nearest 32 */
static uint32_t alt_int_count_int;

static __inline uint32_t get_periphbase(void)
{
  10ae70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae74:	e28db000 	add	fp, sp, #0
  10ae78:	e24dd00c 	sub	sp, sp, #12
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MRC p15, 4, %[periphbase], c15, c0, 0" : [periphbase] "=r" (periphbase));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 4, periphbase, c15, c0, 0");
#else
    __asm("MRC p15, 4, %0, c15, c0, 0" : "=r" (periphbase));
  10ae7c:	ee9f3f10 	mrc	15, 4, r3, cr15, cr0, {0}
  10ae80:	e50b3008 	str	r3, [fp, #-8]
#endif

    return periphbase;
  10ae84:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ae88:	e1a00003 	mov	r0, r3
  10ae8c:	e24bd000 	sub	sp, fp, #0
  10ae90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae94:	e12fff1e 	bx	lr

0010ae98 <set_sctlr_vbit>:

#if ALT_INT_PROVISION_VECTOR_SUPPORT
static __inline void set_sctlr_vbit(bool value)
{
  10ae98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae9c:	e28db000 	add	fp, sp, #0
  10aea0:	e24dd014 	sub	sp, sp, #20
  10aea4:	e1a03000 	mov	r3, r0
  10aea8:	e54b300d 	strb	r3, [fp, #-13]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MRC p15, 0, %[sctlr], c1, c0, 0" : [sctlr] "=r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr, c1, c0, 0");
#else
    __asm("MRC p15, 0, %0, c1, c0, 0" : "=r" (sctlr));
  10aeac:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
  10aeb0:	e50b3008 	str	r3, [fp, #-8]
#endif

    if (value)
  10aeb4:	e55b300d 	ldrb	r3, [fp, #-13]
  10aeb8:	e3530000 	cmp	r3, #0
  10aebc:	0a000003 	beq	10aed0 <set_sctlr_vbit+0x38>
    {
        sctlr |= 1 << 13;
  10aec0:	e51b3008 	ldr	r3, [fp, #-8]
  10aec4:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  10aec8:	e50b3008 	str	r3, [fp, #-8]
  10aecc:	ea000002 	b	10aedc <set_sctlr_vbit+0x44>
    }
    else
    {
        sctlr &= ~(1 << 13);
  10aed0:	e51b3008 	ldr	r3, [fp, #-8]
  10aed4:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  10aed8:	e50b3008 	str	r3, [fp, #-8]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr, c1, c0, 0");
#else
    __asm("MCR p15, 0, %0, c1, c0, 0" : : "r" (sctlr));
  10aedc:	e51b3008 	ldr	r3, [fp, #-8]
  10aee0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#endif

}
  10aee4:	e1a00000 	nop			; (mov r0, r0)
  10aee8:	e24bd000 	sub	sp, fp, #0
  10aeec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aef0:	e12fff1e 	bx	lr

0010aef4 <get_current_cpu_num>:
#endif

static __inline uint32_t get_current_cpu_num(void)
{
  10aef4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aef8:	e28db000 	add	fp, sp, #0
  10aefc:	e24dd00c 	sub	sp, sp, #12
#if   defined(__ARMCOMPILER_VERSION)
    __asm ("MRC p15, 0, %[affinity], c0, c0, 5" : [affinity] "=r" (affinity));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, affinity, c0, c0, 5");
#else
    __asm ("MRC p15, 0, %0, c0, c0, 5" : "=r" (affinity));
  10af00:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
  10af04:	e50b3008 	str	r3, [fp, #-8]
#endif

    return affinity & 0xFF;
  10af08:	e51b3008 	ldr	r3, [fp, #-8]
  10af0c:	e6ef3073 	uxtb	r3, r3
}
  10af10:	e1a00003 	mov	r0, r3
  10af14:	e24bd000 	sub	sp, fp, #0
  10af18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10af1c:	e12fff1e 	bx	lr

0010af20 <alt_int_global_init>:

ALT_STATUS_CODE alt_int_global_init()
{
  10af20:	e92d4800 	push	{fp, lr}
  10af24:	e28db004 	add	fp, sp, #4
  10af28:	e24dd018 	sub	sp, sp, #24
    int i;
    /* Cache the distributor and CPU base addresses
     / See: Cortex-A9 MPCore TRM, section 1.5. */
    {
        uint32_t periphbase = get_periphbase();
  10af2c:	ebffffcf 	bl	10ae70 <get_periphbase>
  10af30:	e50b0010 	str	r0, [fp, #-16]
        alt_int_base_dist = periphbase + 0x1000;
  10af34:	e51b3010 	ldr	r3, [fp, #-16]
  10af38:	e2832a01 	add	r2, r3, #4096	; 0x1000
  10af3c:	e3093590 	movw	r3, #38288	; 0x9590
  10af40:	e3403011 	movt	r3, #17
  10af44:	e5832000 	str	r2, [r3]
        alt_int_base_cpu  = periphbase + 0x0100;
  10af48:	e51b3010 	ldr	r3, [fp, #-16]
  10af4c:	e2832c01 	add	r2, r3, #256	; 0x100
  10af50:	e3093594 	movw	r3, #38292	; 0x9594
  10af54:	e3403011 	movt	r3, #17
  10af58:	e5832000 	str	r2, [r3]
    }

    /* Discover CPU and interrupt count
     / See GIC 1.0, section 4.3.2. */
    {
        uint32_t icdictr = alt_read_word(alt_int_base_dist + 0x4);
  10af5c:	e3093590 	movw	r3, #38288	; 0x9590
  10af60:	e3403011 	movt	r3, #17
  10af64:	e5933000 	ldr	r3, [r3]
  10af68:	e2833004 	add	r3, r3, #4
  10af6c:	e5933000 	ldr	r3, [r3]
  10af70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        alt_int_count_cpu = ((icdictr >> 5) & 0x7) + 1;
  10af74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10af78:	e1a032a3 	lsr	r3, r3, #5
  10af7c:	e2033007 	and	r3, r3, #7
  10af80:	e2832001 	add	r2, r3, #1
  10af84:	e3093598 	movw	r3, #38296	; 0x9598
  10af88:	e3403011 	movt	r3, #17
  10af8c:	e5832000 	str	r2, [r3]
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
  10af90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10af94:	e203301f 	and	r3, r3, #31
  10af98:	e2833001 	add	r3, r3, #1
  10af9c:	e1a02283 	lsl	r2, r3, #5
  10afa0:	e309359c 	movw	r3, #38300	; 0x959c
  10afa4:	e3403011 	movt	r3, #17
  10afa8:	e5832000 	str	r2, [r3]
    }

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
  10afac:	e3a03000 	mov	r3, #0
  10afb0:	e50b3008 	str	r3, [fp, #-8]
  10afb4:	ea000014 	b	10b00c <alt_int_global_init+0xec>
    {
        alt_int_dispatch[i].callback = 0;
  10afb8:	e3083d90 	movw	r3, #36240	; 0x8d90
  10afbc:	e3403011 	movt	r3, #17
  10afc0:	e51b2008 	ldr	r2, [fp, #-8]
  10afc4:	e3a01000 	mov	r1, #0
  10afc8:	e7831182 	str	r1, [r3, r2, lsl #3]
        alt_int_dispatch[i].context  = 0;
  10afcc:	e3082d90 	movw	r2, #36240	; 0x8d90
  10afd0:	e3402011 	movt	r2, #17
  10afd4:	e51b3008 	ldr	r3, [fp, #-8]
  10afd8:	e1a03183 	lsl	r3, r3, #3
  10afdc:	e0823003 	add	r3, r2, r3
  10afe0:	e3a02000 	mov	r2, #0
  10afe4:	e5832004 	str	r2, [r3, #4]

        alt_int_flag[i] = 0;
  10afe8:	e3073c90 	movw	r3, #31888	; 0x7c90
  10afec:	e3403011 	movt	r3, #17
  10aff0:	e51b2008 	ldr	r2, [fp, #-8]
  10aff4:	e0833002 	add	r3, r3, r2
  10aff8:	e3a02000 	mov	r2, #0
  10affc:	e5c32000 	strb	r2, [r3]
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    }

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
  10b000:	e51b3008 	ldr	r3, [fp, #-8]
  10b004:	e2833001 	add	r3, r3, #1
  10b008:	e50b3008 	str	r3, [fp, #-8]
  10b00c:	e51b3008 	ldr	r3, [fp, #-8]
  10b010:	e35300ff 	cmp	r3, #255	; 0xff
  10b014:	daffffe7 	ble	10afb8 <alt_int_global_init+0x98>
    }

    /* Some preloaders enable interrupts but does not properly cleanup. This
     / will prevent interrupts from occuring when excution is handed off from
     / the preloader. */
    alt_int_global_disable();
  10b018:	eb000062 	bl	10b1a8 <alt_int_global_disable>

    /* Discover all interrupts that are implemented in hardware.
     / See GIC 1.0, section 3.1.2. */
    for (i = 0; i < (ALT_INT_PROVISION_INT_COUNT / 32); ++i)
  10b01c:	e3a03000 	mov	r3, #0
  10b020:	e50b3008 	str	r3, [fp, #-8]
  10b024:	ea000040 	b	10b12c <alt_int_global_init+0x20c>
    {
        int j;
        uint32_t value;
        /* Set the whole bank to be enabled. */
        alt_write_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t), 0xffffffff); /* icdisern */
  10b028:	e51b3008 	ldr	r3, [fp, #-8]
  10b02c:	e1a02103 	lsl	r2, r3, #2
  10b030:	e3093590 	movw	r3, #38288	; 0x9590
  10b034:	e3403011 	movt	r3, #17
  10b038:	e5933000 	ldr	r3, [r3]
  10b03c:	e0823003 	add	r3, r2, r3
  10b040:	e2833c01 	add	r3, r3, #256	; 0x100
  10b044:	e1a02003 	mov	r2, r3
  10b048:	e3e03000 	mvn	r3, #0
  10b04c:	e5823000 	str	r3, [r2]

        /* Read it back to see which bits stick. */
        value = alt_read_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t)); /* icdisern */
  10b050:	e51b3008 	ldr	r3, [fp, #-8]
  10b054:	e1a02103 	lsl	r2, r3, #2
  10b058:	e3093590 	movw	r3, #38288	; 0x9590
  10b05c:	e3403011 	movt	r3, #17
  10b060:	e5933000 	ldr	r3, [r3]
  10b064:	e0823003 	add	r3, r2, r3
  10b068:	e2833c01 	add	r3, r3, #256	; 0x100
  10b06c:	e5933000 	ldr	r3, [r3]
  10b070:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        for (j = 0; j < 32; ++j)
  10b074:	e3a03000 	mov	r3, #0
  10b078:	e50b300c 	str	r3, [fp, #-12]
  10b07c:	ea00001a 	b	10b0ec <alt_int_global_init+0x1cc>
        {
            if (((1 << j) & value) != 0)
  10b080:	e3a02001 	mov	r2, #1
  10b084:	e51b300c 	ldr	r3, [fp, #-12]
  10b088:	e1a03312 	lsl	r3, r2, r3
  10b08c:	e1a02003 	mov	r2, r3
  10b090:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10b094:	e0033002 	and	r3, r3, r2
  10b098:	e3530000 	cmp	r3, #0
  10b09c:	0a00000f 	beq	10b0e0 <alt_int_global_init+0x1c0>
            {
                alt_int_flag[i * 32 + j] |= INT_FLAG_IMPLEMENTED;
  10b0a0:	e51b3008 	ldr	r3, [fp, #-8]
  10b0a4:	e1a02283 	lsl	r2, r3, #5
  10b0a8:	e51b300c 	ldr	r3, [fp, #-12]
  10b0ac:	e0822003 	add	r2, r2, r3
  10b0b0:	e51b3008 	ldr	r3, [fp, #-8]
  10b0b4:	e1a01283 	lsl	r1, r3, #5
  10b0b8:	e51b300c 	ldr	r3, [fp, #-12]
  10b0bc:	e0811003 	add	r1, r1, r3
  10b0c0:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b0c4:	e3403011 	movt	r3, #17
  10b0c8:	e7d33001 	ldrb	r3, [r3, r1]
  10b0cc:	e3833001 	orr	r3, r3, #1
  10b0d0:	e6ef1073 	uxtb	r1, r3
  10b0d4:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b0d8:	e3403011 	movt	r3, #17
  10b0dc:	e7c31002 	strb	r1, [r3, r2]
        /* Set the whole bank to be enabled. */
        alt_write_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t), 0xffffffff); /* icdisern */

        /* Read it back to see which bits stick. */
        value = alt_read_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t)); /* icdisern */
        for (j = 0; j < 32; ++j)
  10b0e0:	e51b300c 	ldr	r3, [fp, #-12]
  10b0e4:	e2833001 	add	r3, r3, #1
  10b0e8:	e50b300c 	str	r3, [fp, #-12]
  10b0ec:	e51b300c 	ldr	r3, [fp, #-12]
  10b0f0:	e353001f 	cmp	r3, #31
  10b0f4:	daffffe1 	ble	10b080 <alt_int_global_init+0x160>
                alt_int_flag[i * 32 + j] |= INT_FLAG_IMPLEMENTED;
            }
        }

        /* Clear the whole bank to be disabled. */
        alt_write_word(alt_int_base_dist + 0x180 + i * sizeof(uint32_t), 0xffffffff); /* icdicern */
  10b0f8:	e51b3008 	ldr	r3, [fp, #-8]
  10b0fc:	e1a02103 	lsl	r2, r3, #2
  10b100:	e3093590 	movw	r3, #38288	; 0x9590
  10b104:	e3403011 	movt	r3, #17
  10b108:	e5933000 	ldr	r3, [r3]
  10b10c:	e0823003 	add	r3, r2, r3
  10b110:	e2833d06 	add	r3, r3, #384	; 0x180
  10b114:	e1a02003 	mov	r2, r3
  10b118:	e3e03000 	mvn	r3, #0
  10b11c:	e5823000 	str	r3, [r2]
     / the preloader. */
    alt_int_global_disable();

    /* Discover all interrupts that are implemented in hardware.
     / See GIC 1.0, section 3.1.2. */
    for (i = 0; i < (ALT_INT_PROVISION_INT_COUNT / 32); ++i)
  10b120:	e51b3008 	ldr	r3, [fp, #-8]
  10b124:	e2833001 	add	r3, r3, #1
  10b128:	e50b3008 	str	r3, [fp, #-8]
  10b12c:	e51b3008 	ldr	r3, [fp, #-8]
  10b130:	e3530007 	cmp	r3, #7
  10b134:	daffffbb 	ble	10b028 <alt_int_global_init+0x108>

        /* Clear the whole bank to be disabled. */
        alt_write_word(alt_int_base_dist + 0x180 + i * sizeof(uint32_t), 0xffffffff); /* icdicern */
    }

    return ALT_E_SUCCESS;
  10b138:	e3a03000 	mov	r3, #0
}
  10b13c:	e1a00003 	mov	r0, r3
  10b140:	e24bd004 	sub	sp, fp, #4
  10b144:	e8bd8800 	pop	{fp, pc}

0010b148 <alt_int_global_uninit>:

ALT_STATUS_CODE alt_int_global_uninit()
{
  10b148:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b14c:	e28db000 	add	fp, sp, #0
    return ALT_E_SUCCESS;
  10b150:	e3a03000 	mov	r3, #0
}
  10b154:	e1a00003 	mov	r0, r3
  10b158:	e24bd000 	sub	sp, fp, #0
  10b15c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b160:	e12fff1e 	bx	lr

0010b164 <alt_int_global_enable>:

ALT_STATUS_CODE alt_int_global_enable()
{
  10b164:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b168:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
  10b16c:	e3093590 	movw	r3, #38288	; 0x9590
  10b170:	e3403011 	movt	r3, #17
  10b174:	e5933000 	ldr	r3, [r3]
  10b178:	e1a02003 	mov	r2, r3
  10b17c:	e3093590 	movw	r3, #38288	; 0x9590
  10b180:	e3403011 	movt	r3, #17
  10b184:	e5933000 	ldr	r3, [r3]
  10b188:	e5933000 	ldr	r3, [r3]
  10b18c:	e3833001 	orr	r3, r3, #1
  10b190:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10b194:	e3a03000 	mov	r3, #0
}
  10b198:	e1a00003 	mov	r0, r3
  10b19c:	e24bd000 	sub	sp, fp, #0
  10b1a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b1a4:	e12fff1e 	bx	lr

0010b1a8 <alt_int_global_disable>:

ALT_STATUS_CODE alt_int_global_disable()
{
  10b1a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b1ac:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
  10b1b0:	e3093590 	movw	r3, #38288	; 0x9590
  10b1b4:	e3403011 	movt	r3, #17
  10b1b8:	e5933000 	ldr	r3, [r3]
  10b1bc:	e1a02003 	mov	r2, r3
  10b1c0:	e3093590 	movw	r3, #38288	; 0x9590
  10b1c4:	e3403011 	movt	r3, #17
  10b1c8:	e5933000 	ldr	r3, [r3]
  10b1cc:	e5933000 	ldr	r3, [r3]
  10b1d0:	e3c33001 	bic	r3, r3, #1
  10b1d4:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10b1d8:	e3a03000 	mov	r3, #0
}
  10b1dc:	e1a00003 	mov	r0, r3
  10b1e0:	e24bd000 	sub	sp, fp, #0
  10b1e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b1e8:	e12fff1e 	bx	lr

0010b1ec <alt_int_global_enable_ns>:

ALT_STATUS_CODE alt_int_global_enable_ns()
{
  10b1ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b1f0:	e28db000 	add	fp, sp, #0
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x2); /* icddcr */
  10b1f4:	e3093590 	movw	r3, #38288	; 0x9590
  10b1f8:	e3403011 	movt	r3, #17
  10b1fc:	e5933000 	ldr	r3, [r3]
  10b200:	e1a02003 	mov	r2, r3
  10b204:	e3093590 	movw	r3, #38288	; 0x9590
  10b208:	e3403011 	movt	r3, #17
  10b20c:	e5933000 	ldr	r3, [r3]
  10b210:	e5933000 	ldr	r3, [r3]
  10b214:	e3833002 	orr	r3, r3, #2
  10b218:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10b21c:	e3a03000 	mov	r3, #0
}
  10b220:	e1a00003 	mov	r0, r3
  10b224:	e24bd000 	sub	sp, fp, #0
  10b228:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b22c:	e12fff1e 	bx	lr

0010b230 <alt_int_global_disable_ns>:

ALT_STATUS_CODE alt_int_global_disable_ns()
{
  10b230:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b234:	e28db000 	add	fp, sp, #0
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x2);
  10b238:	e3093590 	movw	r3, #38288	; 0x9590
  10b23c:	e3403011 	movt	r3, #17
  10b240:	e5933000 	ldr	r3, [r3]
  10b244:	e1a02003 	mov	r2, r3
  10b248:	e3093590 	movw	r3, #38288	; 0x9590
  10b24c:	e3403011 	movt	r3, #17
  10b250:	e5933000 	ldr	r3, [r3]
  10b254:	e5933000 	ldr	r3, [r3]
  10b258:	e3c33002 	bic	r3, r3, #2
  10b25c:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10b260:	e3a03000 	mov	r3, #0
}
  10b264:	e1a00003 	mov	r0, r3
  10b268:	e24bd000 	sub	sp, fp, #0
  10b26c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b270:	e12fff1e 	bx	lr

0010b274 <alt_int_global_enable_all>:

ALT_STATUS_CODE alt_int_global_enable_all()
{
  10b274:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b278:	e28db000 	add	fp, sp, #0
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x3); /* icddcr */
  10b27c:	e3093590 	movw	r3, #38288	; 0x9590
  10b280:	e3403011 	movt	r3, #17
  10b284:	e5933000 	ldr	r3, [r3]
  10b288:	e1a02003 	mov	r2, r3
  10b28c:	e3093590 	movw	r3, #38288	; 0x9590
  10b290:	e3403011 	movt	r3, #17
  10b294:	e5933000 	ldr	r3, [r3]
  10b298:	e5933000 	ldr	r3, [r3]
  10b29c:	e3833003 	orr	r3, r3, #3
  10b2a0:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10b2a4:	e3a03000 	mov	r3, #0
}
  10b2a8:	e1a00003 	mov	r0, r3
  10b2ac:	e24bd000 	sub	sp, fp, #0
  10b2b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b2b4:	e12fff1e 	bx	lr

0010b2b8 <alt_int_global_disable_all>:

ALT_STATUS_CODE alt_int_global_disable_all()
{
  10b2b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b2bc:	e28db000 	add	fp, sp, #0
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x3); /* icddcr */
  10b2c0:	e3093590 	movw	r3, #38288	; 0x9590
  10b2c4:	e3403011 	movt	r3, #17
  10b2c8:	e5933000 	ldr	r3, [r3]
  10b2cc:	e1a02003 	mov	r2, r3
  10b2d0:	e3093590 	movw	r3, #38288	; 0x9590
  10b2d4:	e3403011 	movt	r3, #17
  10b2d8:	e5933000 	ldr	r3, [r3]
  10b2dc:	e5933000 	ldr	r3, [r3]
  10b2e0:	e3c33003 	bic	r3, r3, #3
  10b2e4:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10b2e8:	e3a03000 	mov	r3, #0
}
  10b2ec:	e1a00003 	mov	r0, r3
  10b2f0:	e24bd000 	sub	sp, fp, #0
  10b2f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b2f8:	e12fff1e 	bx	lr

0010b2fc <alt_int_dist_secure_enable>:

ALT_STATUS_CODE alt_int_dist_secure_enable(ALT_INT_INTERRUPT_t int_id)
{
  10b2fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b300:	e28db000 	add	fp, sp, #0
  10b304:	e24dd014 	sub	sp, sp, #20
  10b308:	e1a03000 	mov	r3, r0
  10b30c:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b310:	e55b200d 	ldrb	r2, [fp, #-13]
  10b314:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b318:	e3403011 	movt	r3, #17
  10b31c:	e7d33002 	ldrb	r3, [r3, r2]
  10b320:	e2033001 	and	r3, r3, #1
  10b324:	e3530000 	cmp	r3, #0
  10b328:	1a000001 	bne	10b334 <alt_int_dist_secure_enable+0x38>
    {
        return ALT_E_BAD_ARG;
  10b32c:	e3e03008 	mvn	r3, #8
  10b330:	ea00001d 	b	10b3ac <alt_int_dist_secure_enable+0xb0>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b334:	e55b300d 	ldrb	r3, [fp, #-13]
  10b338:	e1a032a3 	lsr	r3, r3, #5
  10b33c:	e6ef3073 	uxtb	r3, r3
  10b340:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b344:	e55b300d 	ldrb	r3, [fp, #-13]
  10b348:	e203301f 	and	r3, r3, #31
  10b34c:	e50b300c 	str	r3, [fp, #-12]

        alt_clrbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
  10b350:	e51b3008 	ldr	r3, [fp, #-8]
  10b354:	e1a02103 	lsl	r2, r3, #2
  10b358:	e3093590 	movw	r3, #38288	; 0x9590
  10b35c:	e3403011 	movt	r3, #17
  10b360:	e5933000 	ldr	r3, [r3]
  10b364:	e0823003 	add	r3, r2, r3
  10b368:	e2833080 	add	r3, r3, #128	; 0x80
  10b36c:	e1a00003 	mov	r0, r3
  10b370:	e51b3008 	ldr	r3, [fp, #-8]
  10b374:	e1a02103 	lsl	r2, r3, #2
  10b378:	e3093590 	movw	r3, #38288	; 0x9590
  10b37c:	e3403011 	movt	r3, #17
  10b380:	e5933000 	ldr	r3, [r3]
  10b384:	e0823003 	add	r3, r2, r3
  10b388:	e2833080 	add	r3, r3, #128	; 0x80
  10b38c:	e5933000 	ldr	r3, [r3]
  10b390:	e3a01001 	mov	r1, #1
  10b394:	e51b200c 	ldr	r2, [fp, #-12]
  10b398:	e1a02211 	lsl	r2, r1, r2
  10b39c:	e1e02002 	mvn	r2, r2
  10b3a0:	e0033002 	and	r3, r3, r2
  10b3a4:	e5803000 	str	r3, [r0]

        return ALT_E_SUCCESS;
  10b3a8:	e3a03000 	mov	r3, #0
    }
}
  10b3ac:	e1a00003 	mov	r0, r3
  10b3b0:	e24bd000 	sub	sp, fp, #0
  10b3b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b3b8:	e12fff1e 	bx	lr

0010b3bc <alt_int_dist_secure_disable>:

ALT_STATUS_CODE alt_int_dist_secure_disable(ALT_INT_INTERRUPT_t int_id)
{
  10b3bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b3c0:	e28db000 	add	fp, sp, #0
  10b3c4:	e24dd014 	sub	sp, sp, #20
  10b3c8:	e1a03000 	mov	r3, r0
  10b3cc:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b3d0:	e55b200d 	ldrb	r2, [fp, #-13]
  10b3d4:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b3d8:	e3403011 	movt	r3, #17
  10b3dc:	e7d33002 	ldrb	r3, [r3, r2]
  10b3e0:	e2033001 	and	r3, r3, #1
  10b3e4:	e3530000 	cmp	r3, #0
  10b3e8:	1a000001 	bne	10b3f4 <alt_int_dist_secure_disable+0x38>
    {
        return ALT_E_BAD_ARG;
  10b3ec:	e3e03008 	mvn	r3, #8
  10b3f0:	ea00001c 	b	10b468 <alt_int_dist_secure_disable+0xac>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b3f4:	e55b300d 	ldrb	r3, [fp, #-13]
  10b3f8:	e1a032a3 	lsr	r3, r3, #5
  10b3fc:	e6ef3073 	uxtb	r3, r3
  10b400:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b404:	e55b300d 	ldrb	r3, [fp, #-13]
  10b408:	e203301f 	and	r3, r3, #31
  10b40c:	e50b300c 	str	r3, [fp, #-12]

        alt_setbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
  10b410:	e51b3008 	ldr	r3, [fp, #-8]
  10b414:	e1a02103 	lsl	r2, r3, #2
  10b418:	e3093590 	movw	r3, #38288	; 0x9590
  10b41c:	e3403011 	movt	r3, #17
  10b420:	e5933000 	ldr	r3, [r3]
  10b424:	e0823003 	add	r3, r2, r3
  10b428:	e2833080 	add	r3, r3, #128	; 0x80
  10b42c:	e1a00003 	mov	r0, r3
  10b430:	e51b3008 	ldr	r3, [fp, #-8]
  10b434:	e1a02103 	lsl	r2, r3, #2
  10b438:	e3093590 	movw	r3, #38288	; 0x9590
  10b43c:	e3403011 	movt	r3, #17
  10b440:	e5933000 	ldr	r3, [r3]
  10b444:	e0823003 	add	r3, r2, r3
  10b448:	e2833080 	add	r3, r3, #128	; 0x80
  10b44c:	e5933000 	ldr	r3, [r3]
  10b450:	e3a01001 	mov	r1, #1
  10b454:	e51b200c 	ldr	r2, [fp, #-12]
  10b458:	e1a02211 	lsl	r2, r1, r2
  10b45c:	e1833002 	orr	r3, r3, r2
  10b460:	e5803000 	str	r3, [r0]

        return ALT_E_SUCCESS;
  10b464:	e3a03000 	mov	r3, #0
    }
}
  10b468:	e1a00003 	mov	r0, r3
  10b46c:	e24bd000 	sub	sp, fp, #0
  10b470:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b474:	e12fff1e 	bx	lr

0010b478 <alt_int_dist_is_secure>:

ALT_STATUS_CODE alt_int_dist_is_secure(ALT_INT_INTERRUPT_t int_id)
{
  10b478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b47c:	e28db000 	add	fp, sp, #0
  10b480:	e24dd01c 	sub	sp, sp, #28
  10b484:	e1a03000 	mov	r3, r0
  10b488:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    {
        /* Because interrupts are by default after reset secure, return the
         / default security state. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b48c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  10b490:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b494:	e3403011 	movt	r3, #17
  10b498:	e7d33002 	ldrb	r3, [r3, r2]
  10b49c:	e2033001 	and	r3, r3, #1
  10b4a0:	e3530000 	cmp	r3, #0
  10b4a4:	1a000001 	bne	10b4b0 <alt_int_dist_is_secure+0x38>
    {
        /* Because interrupts are by default after reset secure, return the
         / default security state. */
        return ALT_E_TRUE;
  10b4a8:	e3a03001 	mov	r3, #1
  10b4ac:	ea00001a 	b	10b51c <alt_int_dist_is_secure+0xa4>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b4b0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b4b4:	e1a032a3 	lsr	r3, r3, #5
  10b4b8:	e6ef3073 	uxtb	r3, r3
  10b4bc:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b4c0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b4c4:	e203301f 	and	r3, r3, #31
  10b4c8:	e50b300c 	str	r3, [fp, #-12]

        uint32_t icdisrn = alt_read_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t));
  10b4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10b4d0:	e1a02103 	lsl	r2, r3, #2
  10b4d4:	e3093590 	movw	r3, #38288	; 0x9590
  10b4d8:	e3403011 	movt	r3, #17
  10b4dc:	e5933000 	ldr	r3, [r3]
  10b4e0:	e0823003 	add	r3, r2, r3
  10b4e4:	e2833080 	add	r3, r3, #128	; 0x80
  10b4e8:	e5933000 	ldr	r3, [r3]
  10b4ec:	e50b3010 	str	r3, [fp, #-16]

        if ((icdisrn & (1 << regbitshift)) == 0)
  10b4f0:	e3a02001 	mov	r2, #1
  10b4f4:	e51b300c 	ldr	r3, [fp, #-12]
  10b4f8:	e1a03312 	lsl	r3, r2, r3
  10b4fc:	e1a02003 	mov	r2, r3
  10b500:	e51b3010 	ldr	r3, [fp, #-16]
  10b504:	e0033002 	and	r3, r3, r2
  10b508:	e3530000 	cmp	r3, #0
  10b50c:	1a000001 	bne	10b518 <alt_int_dist_is_secure+0xa0>
        {
            return ALT_E_TRUE;
  10b510:	e3a03001 	mov	r3, #1
  10b514:	ea000000 	b	10b51c <alt_int_dist_is_secure+0xa4>
        }
        else
        {
            return ALT_E_FALSE;
  10b518:	e3a03000 	mov	r3, #0
        }
    }
}
  10b51c:	e1a00003 	mov	r0, r3
  10b520:	e24bd000 	sub	sp, fp, #0
  10b524:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b528:	e12fff1e 	bx	lr

0010b52c <alt_int_dist_enable>:

ALT_STATUS_CODE alt_int_dist_enable(ALT_INT_INTERRUPT_t int_id)
{
  10b52c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b530:	e28db000 	add	fp, sp, #0
  10b534:	e24dd014 	sub	sp, sp, #20
  10b538:	e1a03000 	mov	r3, r0
  10b53c:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b540:	e55b200d 	ldrb	r2, [fp, #-13]
  10b544:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b548:	e3403011 	movt	r3, #17
  10b54c:	e7d33002 	ldrb	r3, [r3, r2]
  10b550:	e2033001 	and	r3, r3, #1
  10b554:	e3530000 	cmp	r3, #0
  10b558:	1a000001 	bne	10b564 <alt_int_dist_enable+0x38>
    {
        return ALT_E_BAD_ARG;
  10b55c:	e3e03008 	mvn	r3, #8
  10b560:	ea000013 	b	10b5b4 <alt_int_dist_enable+0x88>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b564:	e55b300d 	ldrb	r3, [fp, #-13]
  10b568:	e1a032a3 	lsr	r3, r3, #5
  10b56c:	e6ef3073 	uxtb	r3, r3
  10b570:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b574:	e55b300d 	ldrb	r3, [fp, #-13]
  10b578:	e203301f 	and	r3, r3, #31
  10b57c:	e50b300c 	str	r3, [fp, #-12]

        alt_write_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisern */
  10b580:	e51b3008 	ldr	r3, [fp, #-8]
  10b584:	e1a02103 	lsl	r2, r3, #2
  10b588:	e3093590 	movw	r3, #38288	; 0x9590
  10b58c:	e3403011 	movt	r3, #17
  10b590:	e5933000 	ldr	r3, [r3]
  10b594:	e0823003 	add	r3, r2, r3
  10b598:	e2833c01 	add	r3, r3, #256	; 0x100
  10b59c:	e1a01003 	mov	r1, r3
  10b5a0:	e3a02001 	mov	r2, #1
  10b5a4:	e51b300c 	ldr	r3, [fp, #-12]
  10b5a8:	e1a03312 	lsl	r3, r2, r3
  10b5ac:	e5813000 	str	r3, [r1]

        return ALT_E_SUCCESS;
  10b5b0:	e3a03000 	mov	r3, #0
    }
}
  10b5b4:	e1a00003 	mov	r0, r3
  10b5b8:	e24bd000 	sub	sp, fp, #0
  10b5bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b5c0:	e12fff1e 	bx	lr

0010b5c4 <alt_int_dist_disable>:

ALT_STATUS_CODE alt_int_dist_disable(ALT_INT_INTERRUPT_t int_id)
{
  10b5c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b5c8:	e28db000 	add	fp, sp, #0
  10b5cc:	e24dd014 	sub	sp, sp, #20
  10b5d0:	e1a03000 	mov	r3, r0
  10b5d4:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b5d8:	e55b200d 	ldrb	r2, [fp, #-13]
  10b5dc:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b5e0:	e3403011 	movt	r3, #17
  10b5e4:	e7d33002 	ldrb	r3, [r3, r2]
  10b5e8:	e2033001 	and	r3, r3, #1
  10b5ec:	e3530000 	cmp	r3, #0
  10b5f0:	1a000001 	bne	10b5fc <alt_int_dist_disable+0x38>
    {
        return ALT_E_BAD_ARG;
  10b5f4:	e3e03008 	mvn	r3, #8
  10b5f8:	ea000013 	b	10b64c <alt_int_dist_disable+0x88>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b5fc:	e55b300d 	ldrb	r3, [fp, #-13]
  10b600:	e1a032a3 	lsr	r3, r3, #5
  10b604:	e6ef3073 	uxtb	r3, r3
  10b608:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b60c:	e55b300d 	ldrb	r3, [fp, #-13]
  10b610:	e203301f 	and	r3, r3, #31
  10b614:	e50b300c 	str	r3, [fp, #-12]

        alt_write_word(alt_int_base_dist + 0x180 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicern */
  10b618:	e51b3008 	ldr	r3, [fp, #-8]
  10b61c:	e1a02103 	lsl	r2, r3, #2
  10b620:	e3093590 	movw	r3, #38288	; 0x9590
  10b624:	e3403011 	movt	r3, #17
  10b628:	e5933000 	ldr	r3, [r3]
  10b62c:	e0823003 	add	r3, r2, r3
  10b630:	e2833d06 	add	r3, r3, #384	; 0x180
  10b634:	e1a01003 	mov	r1, r3
  10b638:	e3a02001 	mov	r2, #1
  10b63c:	e51b300c 	ldr	r3, [fp, #-12]
  10b640:	e1a03312 	lsl	r3, r2, r3
  10b644:	e5813000 	str	r3, [r1]

        return ALT_E_SUCCESS;
  10b648:	e3a03000 	mov	r3, #0
    }
}
  10b64c:	e1a00003 	mov	r0, r3
  10b650:	e24bd000 	sub	sp, fp, #0
  10b654:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b658:	e12fff1e 	bx	lr

0010b65c <alt_int_dist_is_enabled>:

ALT_STATUS_CODE alt_int_dist_is_enabled(ALT_INT_INTERRUPT_t int_id)
{
  10b65c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b660:	e28db000 	add	fp, sp, #0
  10b664:	e24dd01c 	sub	sp, sp, #28
  10b668:	e1a03000 	mov	r3, r0
  10b66c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC is disabled by default, so report disabled. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b670:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  10b674:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b678:	e3403011 	movt	r3, #17
  10b67c:	e7d33002 	ldrb	r3, [r3, r2]
  10b680:	e2033001 	and	r3, r3, #1
  10b684:	e3530000 	cmp	r3, #0
  10b688:	1a000001 	bne	10b694 <alt_int_dist_is_enabled+0x38>
    {
        /* Interrupts on the GIC is disabled by default, so report disabled. */
        return ALT_E_FALSE;
  10b68c:	e3a03000 	mov	r3, #0
  10b690:	ea00001a 	b	10b700 <alt_int_dist_is_enabled+0xa4>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b694:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b698:	e1a032a3 	lsr	r3, r3, #5
  10b69c:	e6ef3073 	uxtb	r3, r3
  10b6a0:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b6a4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b6a8:	e203301f 	and	r3, r3, #31
  10b6ac:	e50b300c 	str	r3, [fp, #-12]

        uint32_t icdisern = alt_read_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t));
  10b6b0:	e51b3008 	ldr	r3, [fp, #-8]
  10b6b4:	e1a02103 	lsl	r2, r3, #2
  10b6b8:	e3093590 	movw	r3, #38288	; 0x9590
  10b6bc:	e3403011 	movt	r3, #17
  10b6c0:	e5933000 	ldr	r3, [r3]
  10b6c4:	e0823003 	add	r3, r2, r3
  10b6c8:	e2833c01 	add	r3, r3, #256	; 0x100
  10b6cc:	e5933000 	ldr	r3, [r3]
  10b6d0:	e50b3010 	str	r3, [fp, #-16]

        if ((icdisern & (1 << regbitshift)) != 0)
  10b6d4:	e3a02001 	mov	r2, #1
  10b6d8:	e51b300c 	ldr	r3, [fp, #-12]
  10b6dc:	e1a03312 	lsl	r3, r2, r3
  10b6e0:	e1a02003 	mov	r2, r3
  10b6e4:	e51b3010 	ldr	r3, [fp, #-16]
  10b6e8:	e0033002 	and	r3, r3, r2
  10b6ec:	e3530000 	cmp	r3, #0
  10b6f0:	0a000001 	beq	10b6fc <alt_int_dist_is_enabled+0xa0>
        {
            return ALT_E_TRUE;
  10b6f4:	e3a03001 	mov	r3, #1
  10b6f8:	ea000000 	b	10b700 <alt_int_dist_is_enabled+0xa4>
        }
        else
        {
            return ALT_E_FALSE;
  10b6fc:	e3a03000 	mov	r3, #0
        }
    }
}
  10b700:	e1a00003 	mov	r0, r3
  10b704:	e24bd000 	sub	sp, fp, #0
  10b708:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b70c:	e12fff1e 	bx	lr

0010b710 <alt_int_dist_pending_set>:

ALT_STATUS_CODE alt_int_dist_pending_set(ALT_INT_INTERRUPT_t int_id)
{
  10b710:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b714:	e28db000 	add	fp, sp, #0
  10b718:	e24dd014 	sub	sp, sp, #20
  10b71c:	e1a03000 	mov	r3, r0
  10b720:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b724:	e55b200d 	ldrb	r2, [fp, #-13]
  10b728:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b72c:	e3403011 	movt	r3, #17
  10b730:	e7d33002 	ldrb	r3, [r3, r2]
  10b734:	e2033001 	and	r3, r3, #1
  10b738:	e3530000 	cmp	r3, #0
  10b73c:	1a000001 	bne	10b748 <alt_int_dist_pending_set+0x38>
    {
        return ALT_E_BAD_ARG;
  10b740:	e3e03008 	mvn	r3, #8
  10b744:	ea000018 	b	10b7ac <alt_int_dist_pending_set+0x9c>
    }
    else if ((uint32_t)int_id < 16)
  10b748:	e55b300d 	ldrb	r3, [fp, #-13]
  10b74c:	e353000f 	cmp	r3, #15
  10b750:	8a000001 	bhi	10b75c <alt_int_dist_pending_set+0x4c>
    {
        return ALT_E_BAD_ARG;
  10b754:	e3e03008 	mvn	r3, #8
  10b758:	ea000013 	b	10b7ac <alt_int_dist_pending_set+0x9c>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b75c:	e55b300d 	ldrb	r3, [fp, #-13]
  10b760:	e1a032a3 	lsr	r3, r3, #5
  10b764:	e6ef3073 	uxtb	r3, r3
  10b768:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b76c:	e55b300d 	ldrb	r3, [fp, #-13]
  10b770:	e203301f 	and	r3, r3, #31
  10b774:	e50b300c 	str	r3, [fp, #-12]

        alt_write_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisprn */
  10b778:	e51b3008 	ldr	r3, [fp, #-8]
  10b77c:	e1a02103 	lsl	r2, r3, #2
  10b780:	e3093590 	movw	r3, #38288	; 0x9590
  10b784:	e3403011 	movt	r3, #17
  10b788:	e5933000 	ldr	r3, [r3]
  10b78c:	e0823003 	add	r3, r2, r3
  10b790:	e2833c02 	add	r3, r3, #512	; 0x200
  10b794:	e1a01003 	mov	r1, r3
  10b798:	e3a02001 	mov	r2, #1
  10b79c:	e51b300c 	ldr	r3, [fp, #-12]
  10b7a0:	e1a03312 	lsl	r3, r2, r3
  10b7a4:	e5813000 	str	r3, [r1]

        return ALT_E_SUCCESS;
  10b7a8:	e3a03000 	mov	r3, #0
    }
}
  10b7ac:	e1a00003 	mov	r0, r3
  10b7b0:	e24bd000 	sub	sp, fp, #0
  10b7b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b7b8:	e12fff1e 	bx	lr

0010b7bc <alt_int_dist_pending_clear>:

ALT_STATUS_CODE alt_int_dist_pending_clear(ALT_INT_INTERRUPT_t int_id)
{
  10b7bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b7c0:	e28db000 	add	fp, sp, #0
  10b7c4:	e24dd014 	sub	sp, sp, #20
  10b7c8:	e1a03000 	mov	r3, r0
  10b7cc:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b7d0:	e55b200d 	ldrb	r2, [fp, #-13]
  10b7d4:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b7d8:	e3403011 	movt	r3, #17
  10b7dc:	e7d33002 	ldrb	r3, [r3, r2]
  10b7e0:	e2033001 	and	r3, r3, #1
  10b7e4:	e3530000 	cmp	r3, #0
  10b7e8:	1a000001 	bne	10b7f4 <alt_int_dist_pending_clear+0x38>
    {
        return ALT_E_BAD_ARG;
  10b7ec:	e3e03008 	mvn	r3, #8
  10b7f0:	ea000018 	b	10b858 <alt_int_dist_pending_clear+0x9c>
    }
    else if ((uint32_t)int_id < 16)
  10b7f4:	e55b300d 	ldrb	r3, [fp, #-13]
  10b7f8:	e353000f 	cmp	r3, #15
  10b7fc:	8a000001 	bhi	10b808 <alt_int_dist_pending_clear+0x4c>
    {
        return ALT_E_BAD_ARG;
  10b800:	e3e03008 	mvn	r3, #8
  10b804:	ea000013 	b	10b858 <alt_int_dist_pending_clear+0x9c>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b808:	e55b300d 	ldrb	r3, [fp, #-13]
  10b80c:	e1a032a3 	lsr	r3, r3, #5
  10b810:	e6ef3073 	uxtb	r3, r3
  10b814:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b818:	e55b300d 	ldrb	r3, [fp, #-13]
  10b81c:	e203301f 	and	r3, r3, #31
  10b820:	e50b300c 	str	r3, [fp, #-12]

        alt_write_word(alt_int_base_dist + 0x280 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicprn */
  10b824:	e51b3008 	ldr	r3, [fp, #-8]
  10b828:	e1a02103 	lsl	r2, r3, #2
  10b82c:	e3093590 	movw	r3, #38288	; 0x9590
  10b830:	e3403011 	movt	r3, #17
  10b834:	e5933000 	ldr	r3, [r3]
  10b838:	e0823003 	add	r3, r2, r3
  10b83c:	e2833d0a 	add	r3, r3, #640	; 0x280
  10b840:	e1a01003 	mov	r1, r3
  10b844:	e3a02001 	mov	r2, #1
  10b848:	e51b300c 	ldr	r3, [fp, #-12]
  10b84c:	e1a03312 	lsl	r3, r2, r3
  10b850:	e5813000 	str	r3, [r1]

        return ALT_E_SUCCESS;
  10b854:	e3a03000 	mov	r3, #0
    }
}
  10b858:	e1a00003 	mov	r0, r3
  10b85c:	e24bd000 	sub	sp, fp, #0
  10b860:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b864:	e12fff1e 	bx	lr

0010b868 <alt_int_dist_is_pending>:

ALT_STATUS_CODE alt_int_dist_is_pending(ALT_INT_INTERRUPT_t int_id)
{
  10b868:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b86c:	e28db000 	add	fp, sp, #0
  10b870:	e24dd01c 	sub	sp, sp, #28
  10b874:	e1a03000 	mov	r3, r0
  10b878:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC is not pending by default, so report false. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b87c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  10b880:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b884:	e3403011 	movt	r3, #17
  10b888:	e7d33002 	ldrb	r3, [r3, r2]
  10b88c:	e2033001 	and	r3, r3, #1
  10b890:	e3530000 	cmp	r3, #0
  10b894:	1a000001 	bne	10b8a0 <alt_int_dist_is_pending+0x38>
    {
        /* Interrupts on the GIC is not pending by default, so report false. */
        return ALT_E_FALSE;
  10b898:	e3a03000 	mov	r3, #0
  10b89c:	ea00001a 	b	10b90c <alt_int_dist_is_pending+0xa4>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b8a0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b8a4:	e1a032a3 	lsr	r3, r3, #5
  10b8a8:	e6ef3073 	uxtb	r3, r3
  10b8ac:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b8b0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b8b4:	e203301f 	and	r3, r3, #31
  10b8b8:	e50b300c 	str	r3, [fp, #-12]

        uint32_t icdisprn = alt_read_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t));
  10b8bc:	e51b3008 	ldr	r3, [fp, #-8]
  10b8c0:	e1a02103 	lsl	r2, r3, #2
  10b8c4:	e3093590 	movw	r3, #38288	; 0x9590
  10b8c8:	e3403011 	movt	r3, #17
  10b8cc:	e5933000 	ldr	r3, [r3]
  10b8d0:	e0823003 	add	r3, r2, r3
  10b8d4:	e2833c02 	add	r3, r3, #512	; 0x200
  10b8d8:	e5933000 	ldr	r3, [r3]
  10b8dc:	e50b3010 	str	r3, [fp, #-16]

        if ((icdisprn & (1 << regbitshift)) != 0)
  10b8e0:	e3a02001 	mov	r2, #1
  10b8e4:	e51b300c 	ldr	r3, [fp, #-12]
  10b8e8:	e1a03312 	lsl	r3, r2, r3
  10b8ec:	e1a02003 	mov	r2, r3
  10b8f0:	e51b3010 	ldr	r3, [fp, #-16]
  10b8f4:	e0033002 	and	r3, r3, r2
  10b8f8:	e3530000 	cmp	r3, #0
  10b8fc:	0a000001 	beq	10b908 <alt_int_dist_is_pending+0xa0>
        {
            return ALT_E_TRUE;
  10b900:	e3a03001 	mov	r3, #1
  10b904:	ea000000 	b	10b90c <alt_int_dist_is_pending+0xa4>
        }
        else
        {
            return ALT_E_FALSE;
  10b908:	e3a03000 	mov	r3, #0
        }
    }
}
  10b90c:	e1a00003 	mov	r0, r3
  10b910:	e24bd000 	sub	sp, fp, #0
  10b914:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b918:	e12fff1e 	bx	lr

0010b91c <alt_int_dist_is_active>:

ALT_STATUS_CODE alt_int_dist_is_active(ALT_INT_INTERRUPT_t int_id)
{
  10b91c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b920:	e28db000 	add	fp, sp, #0
  10b924:	e24dd01c 	sub	sp, sp, #28
  10b928:	e1a03000 	mov	r3, r0
  10b92c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC is not active by default, so report false. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b930:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  10b934:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b938:	e3403011 	movt	r3, #17
  10b93c:	e7d33002 	ldrb	r3, [r3, r2]
  10b940:	e2033001 	and	r3, r3, #1
  10b944:	e3530000 	cmp	r3, #0
  10b948:	1a000001 	bne	10b954 <alt_int_dist_is_active+0x38>
    {
        /* Interrupts on the GIC is not active by default, so report false. */
        return ALT_E_FALSE;
  10b94c:	e3a03000 	mov	r3, #0
  10b950:	ea00001a 	b	10b9c0 <alt_int_dist_is_active+0xa4>
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
  10b954:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b958:	e1a032a3 	lsr	r3, r3, #5
  10b95c:	e6ef3073 	uxtb	r3, r3
  10b960:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = int_id & 0x1F;
  10b964:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10b968:	e203301f 	and	r3, r3, #31
  10b96c:	e50b300c 	str	r3, [fp, #-12]

        uint32_t icdabrn = alt_read_word(alt_int_base_dist + 0x300 + regoffset * sizeof(uint32_t));
  10b970:	e51b3008 	ldr	r3, [fp, #-8]
  10b974:	e1a02103 	lsl	r2, r3, #2
  10b978:	e3093590 	movw	r3, #38288	; 0x9590
  10b97c:	e3403011 	movt	r3, #17
  10b980:	e5933000 	ldr	r3, [r3]
  10b984:	e0823003 	add	r3, r2, r3
  10b988:	e2833c03 	add	r3, r3, #768	; 0x300
  10b98c:	e5933000 	ldr	r3, [r3]
  10b990:	e50b3010 	str	r3, [fp, #-16]

        if ((icdabrn & (1 << regbitshift)) != 0)
  10b994:	e3a02001 	mov	r2, #1
  10b998:	e51b300c 	ldr	r3, [fp, #-12]
  10b99c:	e1a03312 	lsl	r3, r2, r3
  10b9a0:	e1a02003 	mov	r2, r3
  10b9a4:	e51b3010 	ldr	r3, [fp, #-16]
  10b9a8:	e0033002 	and	r3, r3, r2
  10b9ac:	e3530000 	cmp	r3, #0
  10b9b0:	0a000001 	beq	10b9bc <alt_int_dist_is_active+0xa0>
        {
            return ALT_E_TRUE;
  10b9b4:	e3a03001 	mov	r3, #1
  10b9b8:	ea000000 	b	10b9c0 <alt_int_dist_is_active+0xa4>
        }
        else
        {
            return ALT_E_FALSE;
  10b9bc:	e3a03000 	mov	r3, #0
        }
    }
}
  10b9c0:	e1a00003 	mov	r0, r3
  10b9c4:	e24bd000 	sub	sp, fp, #0
  10b9c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b9cc:	e12fff1e 	bx	lr

0010b9d0 <alt_int_dist_priority_get>:

ALT_STATUS_CODE alt_int_dist_priority_get(ALT_INT_INTERRUPT_t int_id,
                                          uint32_t * priority)
{
  10b9d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b9d4:	e28db000 	add	fp, sp, #0
  10b9d8:	e24dd014 	sub	sp, sp, #20
  10b9dc:	e1a03000 	mov	r3, r0
  10b9e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10b9e4:	e54b300d 	strb	r3, [fp, #-13]
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC have a default priority of 0. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10b9e8:	e55b200d 	ldrb	r2, [fp, #-13]
  10b9ec:	e3073c90 	movw	r3, #31888	; 0x7c90
  10b9f0:	e3403011 	movt	r3, #17
  10b9f4:	e7d33002 	ldrb	r3, [r3, r2]
  10b9f8:	e2033001 	and	r3, r3, #1
  10b9fc:	e3530000 	cmp	r3, #0
  10ba00:	1a000004 	bne	10ba18 <alt_int_dist_priority_get+0x48>
    {
        /* Interrupts on the GIC have a default priority of 0. */
        *priority = 0;
  10ba04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ba08:	e3a02000 	mov	r2, #0
  10ba0c:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  10ba10:	e3a03000 	mov	r3, #0
  10ba14:	ea00000d 	b	10ba50 <alt_int_dist_priority_get+0x80>
    }
    else
    {
        uint32_t regoffset = int_id;
  10ba18:	e55b300d 	ldrb	r3, [fp, #-13]
  10ba1c:	e50b3008 	str	r3, [fp, #-8]

        uint8_t icdiprn = alt_read_byte(alt_int_base_dist + 0x400 + regoffset * sizeof(uint8_t));
  10ba20:	e3093590 	movw	r3, #38288	; 0x9590
  10ba24:	e3403011 	movt	r3, #17
  10ba28:	e5932000 	ldr	r2, [r3]
  10ba2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ba30:	e0823003 	add	r3, r2, r3
  10ba34:	e2833b01 	add	r3, r3, #1024	; 0x400
  10ba38:	e5d33000 	ldrb	r3, [r3]
  10ba3c:	e54b3009 	strb	r3, [fp, #-9]

        *priority = icdiprn;
  10ba40:	e55b2009 	ldrb	r2, [fp, #-9]
  10ba44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ba48:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  10ba4c:	e3a03000 	mov	r3, #0
    }
}
  10ba50:	e1a00003 	mov	r0, r3
  10ba54:	e24bd000 	sub	sp, fp, #0
  10ba58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ba5c:	e12fff1e 	bx	lr

0010ba60 <alt_int_dist_priority_set>:

ALT_STATUS_CODE alt_int_dist_priority_set(ALT_INT_INTERRUPT_t int_id, 
                                          uint32_t priority)
{
  10ba60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ba64:	e28db000 	add	fp, sp, #0
  10ba68:	e24dd014 	sub	sp, sp, #20
  10ba6c:	e1a03000 	mov	r3, r0
  10ba70:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ba74:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10ba78:	e55b200d 	ldrb	r2, [fp, #-13]
  10ba7c:	e3073c90 	movw	r3, #31888	; 0x7c90
  10ba80:	e3403011 	movt	r3, #17
  10ba84:	e7d33002 	ldrb	r3, [r3, r2]
  10ba88:	e2033001 	and	r3, r3, #1
  10ba8c:	e3530000 	cmp	r3, #0
  10ba90:	1a000001 	bne	10ba9c <alt_int_dist_priority_set+0x3c>
    {
        return ALT_E_BAD_ARG;
  10ba94:	e3e03008 	mvn	r3, #8
  10ba98:	ea000010 	b	10bae0 <alt_int_dist_priority_set+0x80>
    }
    else if (priority < 256)
  10ba9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10baa0:	e35300ff 	cmp	r3, #255	; 0xff
  10baa4:	8a00000c 	bhi	10badc <alt_int_dist_priority_set+0x7c>
    {
        uint32_t regoffset = int_id;
  10baa8:	e55b300d 	ldrb	r3, [fp, #-13]
  10baac:	e50b3008 	str	r3, [fp, #-8]

        alt_write_byte(alt_int_base_dist + 0x400 + regoffset * sizeof(uint8_t), (uint8_t)priority); /* icdiprn */
  10bab0:	e3093590 	movw	r3, #38288	; 0x9590
  10bab4:	e3403011 	movt	r3, #17
  10bab8:	e5932000 	ldr	r2, [r3]
  10babc:	e51b3008 	ldr	r3, [fp, #-8]
  10bac0:	e0823003 	add	r3, r2, r3
  10bac4:	e2833b01 	add	r3, r3, #1024	; 0x400
  10bac8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10bacc:	e6ef2072 	uxtb	r2, r2
  10bad0:	e5c32000 	strb	r2, [r3]

        return ALT_E_SUCCESS;
  10bad4:	e3a03000 	mov	r3, #0
  10bad8:	ea000000 	b	10bae0 <alt_int_dist_priority_set+0x80>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10badc:	e3e03008 	mvn	r3, #8
    }
}
  10bae0:	e1a00003 	mov	r0, r3
  10bae4:	e24bd000 	sub	sp, fp, #0
  10bae8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10baec:	e12fff1e 	bx	lr

0010baf0 <alt_int_dist_target_get>:

ALT_STATUS_CODE alt_int_dist_target_get(ALT_INT_INTERRUPT_t int_id,
                                        alt_int_cpu_target_t * target)
{
  10baf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10baf4:	e28db000 	add	fp, sp, #0
  10baf8:	e24dd014 	sub	sp, sp, #20
  10bafc:	e1a03000 	mov	r3, r0
  10bb00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10bb04:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10bb08:	e55b200d 	ldrb	r2, [fp, #-13]
  10bb0c:	e3073c90 	movw	r3, #31888	; 0x7c90
  10bb10:	e3403011 	movt	r3, #17
  10bb14:	e7d33002 	ldrb	r3, [r3, r2]
  10bb18:	e2033001 	and	r3, r3, #1
  10bb1c:	e3530000 	cmp	r3, #0
  10bb20:	1a000004 	bne	10bb38 <alt_int_dist_target_get+0x48>
    {
        *target = 0;
  10bb24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10bb28:	e3a02000 	mov	r2, #0
  10bb2c:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  10bb30:	e3a03000 	mov	r3, #0
  10bb34:	ea00000d 	b	10bb70 <alt_int_dist_target_get+0x80>
    }
    else
    {
        uint32_t regoffset = int_id;
  10bb38:	e55b300d 	ldrb	r3, [fp, #-13]
  10bb3c:	e50b3008 	str	r3, [fp, #-8]

        uint8_t icdiptr = alt_read_byte(alt_int_base_dist + 0x800 + regoffset * sizeof(uint8_t));
  10bb40:	e3093590 	movw	r3, #38288	; 0x9590
  10bb44:	e3403011 	movt	r3, #17
  10bb48:	e5932000 	ldr	r2, [r3]
  10bb4c:	e51b3008 	ldr	r3, [fp, #-8]
  10bb50:	e0823003 	add	r3, r2, r3
  10bb54:	e2833b02 	add	r3, r3, #2048	; 0x800
  10bb58:	e5d33000 	ldrb	r3, [r3]
  10bb5c:	e54b3009 	strb	r3, [fp, #-9]
        
        *target = icdiptr;
  10bb60:	e55b2009 	ldrb	r2, [fp, #-9]
  10bb64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10bb68:	e5832000 	str	r2, [r3]
        return ALT_E_SUCCESS;
  10bb6c:	e3a03000 	mov	r3, #0
    }
}
  10bb70:	e1a00003 	mov	r0, r3
  10bb74:	e24bd000 	sub	sp, fp, #0
  10bb78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10bb7c:	e12fff1e 	bx	lr

0010bb80 <alt_int_dist_target_set>:

ALT_STATUS_CODE alt_int_dist_target_set(ALT_INT_INTERRUPT_t int_id,
                                        alt_int_cpu_target_t target)
{
  10bb80:	e92d4800 	push	{fp, lr}
  10bb84:	e28db004 	add	fp, sp, #4
  10bb88:	e24dd010 	sub	sp, sp, #16
  10bb8c:	e1a03000 	mov	r3, r0
  10bb90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10bb94:	e54b300d 	strb	r3, [fp, #-13]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10bb98:	e55b200d 	ldrb	r2, [fp, #-13]
  10bb9c:	e3073c90 	movw	r3, #31888	; 0x7c90
  10bba0:	e3403011 	movt	r3, #17
  10bba4:	e7d33002 	ldrb	r3, [r3, r2]
  10bba8:	e2033001 	and	r3, r3, #1
  10bbac:	e3530000 	cmp	r3, #0
  10bbb0:	1a000001 	bne	10bbbc <alt_int_dist_target_set+0x3c>
    {
        return ALT_E_BAD_ARG;
  10bbb4:	e3e03008 	mvn	r3, #8
  10bbb8:	ea000025 	b	10bc54 <alt_int_dist_target_set+0xd4>
    }
    else if (target >= (1 << alt_int_count_cpu))
  10bbbc:	e3093598 	movw	r3, #38296	; 0x9598
  10bbc0:	e3403011 	movt	r3, #17
  10bbc4:	e5933000 	ldr	r3, [r3]
  10bbc8:	e3a02001 	mov	r2, #1
  10bbcc:	e1a03312 	lsl	r3, r2, r3
  10bbd0:	e1a02003 	mov	r2, r3
  10bbd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10bbd8:	e1520003 	cmp	r2, r3
  10bbdc:	8a00000b 	bhi	10bc10 <alt_int_dist_target_set+0x90>
    {
        if (target == (1 << get_current_cpu_num()))
  10bbe0:	ebfffcc3 	bl	10aef4 <get_current_cpu_num>
  10bbe4:	e1a02000 	mov	r2, r0
  10bbe8:	e3a03001 	mov	r3, #1
  10bbec:	e1a03213 	lsl	r3, r3, r2
  10bbf0:	e1a02003 	mov	r2, r3
  10bbf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10bbf8:	e1520003 	cmp	r2, r3
  10bbfc:	1a000001 	bne	10bc08 <alt_int_dist_target_set+0x88>
        {
            return ALT_E_SUCCESS;
  10bc00:	e3a03000 	mov	r3, #0
  10bc04:	ea000012 	b	10bc54 <alt_int_dist_target_set+0xd4>
        }
        return ALT_E_BAD_ARG;
  10bc08:	e3e03008 	mvn	r3, #8
  10bc0c:	ea000010 	b	10bc54 <alt_int_dist_target_set+0xd4>
    }
    else if (int_id < 32)
  10bc10:	e55b300d 	ldrb	r3, [fp, #-13]
  10bc14:	e353001f 	cmp	r3, #31
  10bc18:	8a000001 	bhi	10bc24 <alt_int_dist_target_set+0xa4>
    {
        return ALT_E_BAD_ARG;
  10bc1c:	e3e03008 	mvn	r3, #8
  10bc20:	ea00000b 	b	10bc54 <alt_int_dist_target_set+0xd4>
    }
    else
    {
        uint32_t regoffset = int_id;
  10bc24:	e55b300d 	ldrb	r3, [fp, #-13]
  10bc28:	e50b3008 	str	r3, [fp, #-8]

        alt_write_byte(alt_int_base_dist + 0x800 + regoffset * sizeof(uint8_t), target); /* icdiptr */
  10bc2c:	e3093590 	movw	r3, #38288	; 0x9590
  10bc30:	e3403011 	movt	r3, #17
  10bc34:	e5932000 	ldr	r2, [r3]
  10bc38:	e51b3008 	ldr	r3, [fp, #-8]
  10bc3c:	e0823003 	add	r3, r2, r3
  10bc40:	e2833b02 	add	r3, r3, #2048	; 0x800
  10bc44:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10bc48:	e6ef2072 	uxtb	r2, r2
  10bc4c:	e5c32000 	strb	r2, [r3]

        return ALT_E_SUCCESS;
  10bc50:	e3a03000 	mov	r3, #0
    }
}
  10bc54:	e1a00003 	mov	r0, r3
  10bc58:	e24bd004 	sub	sp, fp, #4
  10bc5c:	e8bd8800 	pop	{fp, pc}

0010bc60 <alt_int_dist_trigger_get>:

ALT_STATUS_CODE alt_int_dist_trigger_get(ALT_INT_INTERRUPT_t int_id,
                                         ALT_INT_TRIGGER_t * trigger)
{
  10bc60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10bc64:	e28db000 	add	fp, sp, #0
  10bc68:	e24dd01c 	sub	sp, sp, #28
  10bc6c:	e1a03000 	mov	r3, r0
  10bc70:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10bc74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10bc78:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  10bc7c:	e3073c90 	movw	r3, #31888	; 0x7c90
  10bc80:	e3403011 	movt	r3, #17
  10bc84:	e7d33002 	ldrb	r3, [r3, r2]
  10bc88:	e2033001 	and	r3, r3, #1
  10bc8c:	e3530000 	cmp	r3, #0
  10bc90:	1a000004 	bne	10bca8 <alt_int_dist_trigger_get+0x48>
    {
        *trigger = ALT_INT_TRIGGER_NA;
  10bc94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bc98:	e3a02004 	mov	r2, #4
  10bc9c:	e5c32000 	strb	r2, [r3]
        return ALT_E_SUCCESS;
  10bca0:	e3a03000 	mov	r3, #0
  10bca4:	ea000029 	b	10bd50 <alt_int_dist_trigger_get+0xf0>
    }
    else if (int_id < 16)
  10bca8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10bcac:	e353000f 	cmp	r3, #15
  10bcb0:	8a000004 	bhi	10bcc8 <alt_int_dist_trigger_get+0x68>
    {
        *trigger = ALT_INT_TRIGGER_SOFTWARE;
  10bcb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bcb8:	e3a02002 	mov	r2, #2
  10bcbc:	e5c32000 	strb	r2, [r3]
        return ALT_E_SUCCESS;
  10bcc0:	e3a03000 	mov	r3, #0
  10bcc4:	ea000021 	b	10bd50 <alt_int_dist_trigger_get+0xf0>
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
  10bcc8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10bccc:	e1a03223 	lsr	r3, r3, #4
  10bcd0:	e6ef3073 	uxtb	r3, r3
  10bcd4:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
  10bcd8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10bcdc:	e203300f 	and	r3, r3, #15
  10bce0:	e1a03083 	lsl	r3, r3, #1
  10bce4:	e2833001 	add	r3, r3, #1
  10bce8:	e50b300c 	str	r3, [fp, #-12]

        uint32_t icdicfrn = alt_read_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t));
  10bcec:	e51b3008 	ldr	r3, [fp, #-8]
  10bcf0:	e1a02103 	lsl	r2, r3, #2
  10bcf4:	e3093590 	movw	r3, #38288	; 0x9590
  10bcf8:	e3403011 	movt	r3, #17
  10bcfc:	e5933000 	ldr	r3, [r3]
  10bd00:	e0823003 	add	r3, r2, r3
  10bd04:	e2833b03 	add	r3, r3, #3072	; 0xc00
  10bd08:	e5933000 	ldr	r3, [r3]
  10bd0c:	e50b3010 	str	r3, [fp, #-16]

        if ((icdicfrn & (1 << regbitshift)) == 0)
  10bd10:	e3a02001 	mov	r2, #1
  10bd14:	e51b300c 	ldr	r3, [fp, #-12]
  10bd18:	e1a03312 	lsl	r3, r2, r3
  10bd1c:	e1a02003 	mov	r2, r3
  10bd20:	e51b3010 	ldr	r3, [fp, #-16]
  10bd24:	e0033002 	and	r3, r3, r2
  10bd28:	e3530000 	cmp	r3, #0
  10bd2c:	1a000003 	bne	10bd40 <alt_int_dist_trigger_get+0xe0>
        {
            *trigger = ALT_INT_TRIGGER_LEVEL;
  10bd30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd34:	e3a02001 	mov	r2, #1
  10bd38:	e5c32000 	strb	r2, [r3]
  10bd3c:	ea000002 	b	10bd4c <alt_int_dist_trigger_get+0xec>
        }
        else
        {
            *trigger = ALT_INT_TRIGGER_EDGE;
  10bd40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd44:	e3a02000 	mov	r2, #0
  10bd48:	e5c32000 	strb	r2, [r3]
        }

        return ALT_E_SUCCESS;
  10bd4c:	e3a03000 	mov	r3, #0
    }
}
  10bd50:	e1a00003 	mov	r0, r3
  10bd54:	e24bd000 	sub	sp, fp, #0
  10bd58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10bd5c:	e12fff1e 	bx	lr

0010bd60 <alt_int_dist_trigger_set>:

ALT_STATUS_CODE alt_int_dist_trigger_set(ALT_INT_INTERRUPT_t int_id,
                                         ALT_INT_TRIGGER_t trigger_type)
{
  10bd60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10bd64:	e28db000 	add	fp, sp, #0
  10bd68:	e24dd014 	sub	sp, sp, #20
  10bd6c:	e1a03000 	mov	r3, r0
  10bd70:	e1a02001 	mov	r2, r1
  10bd74:	e54b300d 	strb	r3, [fp, #-13]
  10bd78:	e1a03002 	mov	r3, r2
  10bd7c:	e54b300e 	strb	r3, [fp, #-14]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
  10bd80:	e55b200d 	ldrb	r2, [fp, #-13]
  10bd84:	e3073c90 	movw	r3, #31888	; 0x7c90
  10bd88:	e3403011 	movt	r3, #17
  10bd8c:	e7d33002 	ldrb	r3, [r3, r2]
  10bd90:	e2033001 	and	r3, r3, #1
  10bd94:	e3530000 	cmp	r3, #0
  10bd98:	1a000001 	bne	10bda4 <alt_int_dist_trigger_set+0x44>
    {
        return ALT_E_BAD_ARG;
  10bd9c:	e3e03008 	mvn	r3, #8
  10bda0:	ea000088 	b	10bfc8 <alt_int_dist_trigger_set+0x268>
    }
    else if (int_id < 16)
  10bda4:	e55b300d 	ldrb	r3, [fp, #-13]
  10bda8:	e353000f 	cmp	r3, #15
  10bdac:	8a000009 	bhi	10bdd8 <alt_int_dist_trigger_set+0x78>
    {
        if (   (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
  10bdb0:	e55b300e 	ldrb	r3, [fp, #-14]
  10bdb4:	e3530003 	cmp	r3, #3
  10bdb8:	0a000002 	beq	10bdc8 <alt_int_dist_trigger_set+0x68>
            || (trigger_type == ALT_INT_TRIGGER_SOFTWARE))
  10bdbc:	e55b300e 	ldrb	r3, [fp, #-14]
  10bdc0:	e3530002 	cmp	r3, #2
  10bdc4:	1a000001 	bne	10bdd0 <alt_int_dist_trigger_set+0x70>
        {
            return ALT_E_SUCCESS;
  10bdc8:	e3a03000 	mov	r3, #0
  10bdcc:	ea00007d 	b	10bfc8 <alt_int_dist_trigger_set+0x268>
        }
        else
        {
            return ALT_E_BAD_ARG;
  10bdd0:	e3e03008 	mvn	r3, #8
  10bdd4:	ea00007b 	b	10bfc8 <alt_int_dist_trigger_set+0x268>
        }
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
  10bdd8:	e55b300d 	ldrb	r3, [fp, #-13]
  10bddc:	e1a03223 	lsr	r3, r3, #4
  10bde0:	e6ef3073 	uxtb	r3, r3
  10bde4:	e50b3008 	str	r3, [fp, #-8]
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
  10bde8:	e55b300d 	ldrb	r3, [fp, #-13]
  10bdec:	e203300f 	and	r3, r3, #15
  10bdf0:	e1a03083 	lsl	r3, r3, #1
  10bdf4:	e2833001 	add	r3, r3, #1
  10bdf8:	e50b300c 	str	r3, [fp, #-12]

        if (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
  10bdfc:	e55b300e 	ldrb	r3, [fp, #-14]
  10be00:	e3530003 	cmp	r3, #3
  10be04:	1a00003a 	bne	10bef4 <alt_int_dist_trigger_set+0x194>
        {
#if defined(soc_cv_av)
            if      (int_id <=  31) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* PPI */
  10be08:	e55b300d 	ldrb	r3, [fp, #-13]
  10be0c:	e353001f 	cmp	r3, #31
  10be10:	8a000002 	bhi	10be20 <alt_int_dist_trigger_set+0xc0>
  10be14:	e3a03000 	mov	r3, #0
  10be18:	e54b300e 	strb	r3, [fp, #-14]
  10be1c:	ea000034 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  40) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* CPU0_PARITYFAIL */
  10be20:	e55b300d 	ldrb	r3, [fp, #-13]
  10be24:	e3530028 	cmp	r3, #40	; 0x28
  10be28:	8a000002 	bhi	10be38 <alt_int_dist_trigger_set+0xd8>
  10be2c:	e3a03000 	mov	r3, #0
  10be30:	e54b300e 	strb	r3, [fp, #-14]
  10be34:	ea00002e 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  47) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* CPU0_DEFLAGS */
  10be38:	e55b300d 	ldrb	r3, [fp, #-13]
  10be3c:	e353002f 	cmp	r3, #47	; 0x2f
  10be40:	8a000002 	bhi	10be50 <alt_int_dist_trigger_set+0xf0>
  10be44:	e3a03001 	mov	r3, #1
  10be48:	e54b300e 	strb	r3, [fp, #-14]
  10be4c:	ea000028 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  56) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* CPU1_PARITYFAIL */
  10be50:	e55b300d 	ldrb	r3, [fp, #-13]
  10be54:	e3530038 	cmp	r3, #56	; 0x38
  10be58:	8a000002 	bhi	10be68 <alt_int_dist_trigger_set+0x108>
  10be5c:	e3a03000 	mov	r3, #0
  10be60:	e54b300e 	strb	r3, [fp, #-14]
  10be64:	ea000022 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  63) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* CPU1_DEFLAGS */
  10be68:	e55b300d 	ldrb	r3, [fp, #-13]
  10be6c:	e353003f 	cmp	r3, #63	; 0x3f
  10be70:	8a000002 	bhi	10be80 <alt_int_dist_trigger_set+0x120>
  10be74:	e3a03001 	mov	r3, #1
  10be78:	e54b300e 	strb	r3, [fp, #-14]
  10be7c:	ea00001c 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  66) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* SCU */
  10be80:	e55b300d 	ldrb	r3, [fp, #-13]
  10be84:	e3530042 	cmp	r3, #66	; 0x42
  10be88:	8a000002 	bhi	10be98 <alt_int_dist_trigger_set+0x138>
  10be8c:	e3a03000 	mov	r3, #0
  10be90:	e54b300e 	strb	r3, [fp, #-14]
  10be94:	ea000016 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  69) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* L2_ECC */
  10be98:	e55b300d 	ldrb	r3, [fp, #-13]
  10be9c:	e3530045 	cmp	r3, #69	; 0x45
  10bea0:	8a000002 	bhi	10beb0 <alt_int_dist_trigger_set+0x150>
  10bea4:	e3a03000 	mov	r3, #0
  10bea8:	e54b300e 	strb	r3, [fp, #-14]
  10beac:	ea000010 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  70) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* L2 (other) */
  10beb0:	e55b300d 	ldrb	r3, [fp, #-13]
  10beb4:	e3530046 	cmp	r3, #70	; 0x46
  10beb8:	8a000002 	bhi	10bec8 <alt_int_dist_trigger_set+0x168>
  10bebc:	e3a03001 	mov	r3, #1
  10bec0:	e54b300e 	strb	r3, [fp, #-14]
  10bec4:	ea00000a 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <=  71) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* DDR */
  10bec8:	e55b300d 	ldrb	r3, [fp, #-13]
  10becc:	e3530047 	cmp	r3, #71	; 0x47
  10bed0:	8a000002 	bhi	10bee0 <alt_int_dist_trigger_set+0x180>
  10bed4:	e3a03001 	mov	r3, #1
  10bed8:	e54b300e 	strb	r3, [fp, #-14]
  10bedc:	ea000004 	b	10bef4 <alt_int_dist_trigger_set+0x194>
            else if (int_id <= 135) { /* do nothing */                      } /* FPGA !!! */
  10bee0:	e55b300d 	ldrb	r3, [fp, #-13]
  10bee4:	e3530087 	cmp	r3, #135	; 0x87
  10bee8:	9a000001 	bls	10bef4 <alt_int_dist_trigger_set+0x194>
            else                    { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* everything else */
  10beec:	e3a03001 	mov	r3, #1
  10bef0:	e54b300e 	strb	r3, [fp, #-14]
#else
#error Unknown SoCFPGA device.
#endif
        }

        switch (trigger_type)
  10bef4:	e55b300e 	ldrb	r3, [fp, #-14]
  10bef8:	e3530000 	cmp	r3, #0
  10befc:	0a000018 	beq	10bf64 <alt_int_dist_trigger_set+0x204>
  10bf00:	e3530001 	cmp	r3, #1
  10bf04:	1a00002c 	bne	10bfbc <alt_int_dist_trigger_set+0x25c>
        {
        case ALT_INT_TRIGGER_LEVEL:
            alt_clrbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
  10bf08:	e51b3008 	ldr	r3, [fp, #-8]
  10bf0c:	e1a02103 	lsl	r2, r3, #2
  10bf10:	e3093590 	movw	r3, #38288	; 0x9590
  10bf14:	e3403011 	movt	r3, #17
  10bf18:	e5933000 	ldr	r3, [r3]
  10bf1c:	e0823003 	add	r3, r2, r3
  10bf20:	e2833b03 	add	r3, r3, #3072	; 0xc00
  10bf24:	e1a00003 	mov	r0, r3
  10bf28:	e51b3008 	ldr	r3, [fp, #-8]
  10bf2c:	e1a02103 	lsl	r2, r3, #2
  10bf30:	e3093590 	movw	r3, #38288	; 0x9590
  10bf34:	e3403011 	movt	r3, #17
  10bf38:	e5933000 	ldr	r3, [r3]
  10bf3c:	e0823003 	add	r3, r2, r3
  10bf40:	e2833b03 	add	r3, r3, #3072	; 0xc00
  10bf44:	e5933000 	ldr	r3, [r3]
  10bf48:	e3a01001 	mov	r1, #1
  10bf4c:	e51b200c 	ldr	r2, [fp, #-12]
  10bf50:	e1a02211 	lsl	r2, r1, r2
  10bf54:	e1e02002 	mvn	r2, r2
  10bf58:	e0033002 	and	r3, r3, r2
  10bf5c:	e5803000 	str	r3, [r0]
            break;
  10bf60:	ea000017 	b	10bfc4 <alt_int_dist_trigger_set+0x264>
        case ALT_INT_TRIGGER_EDGE:
            alt_setbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
  10bf64:	e51b3008 	ldr	r3, [fp, #-8]
  10bf68:	e1a02103 	lsl	r2, r3, #2
  10bf6c:	e3093590 	movw	r3, #38288	; 0x9590
  10bf70:	e3403011 	movt	r3, #17
  10bf74:	e5933000 	ldr	r3, [r3]
  10bf78:	e0823003 	add	r3, r2, r3
  10bf7c:	e2833b03 	add	r3, r3, #3072	; 0xc00
  10bf80:	e1a00003 	mov	r0, r3
  10bf84:	e51b3008 	ldr	r3, [fp, #-8]
  10bf88:	e1a02103 	lsl	r2, r3, #2
  10bf8c:	e3093590 	movw	r3, #38288	; 0x9590
  10bf90:	e3403011 	movt	r3, #17
  10bf94:	e5933000 	ldr	r3, [r3]
  10bf98:	e0823003 	add	r3, r2, r3
  10bf9c:	e2833b03 	add	r3, r3, #3072	; 0xc00
  10bfa0:	e5933000 	ldr	r3, [r3]
  10bfa4:	e3a01001 	mov	r1, #1
  10bfa8:	e51b200c 	ldr	r2, [fp, #-12]
  10bfac:	e1a02211 	lsl	r2, r1, r2
  10bfb0:	e1833002 	orr	r3, r3, r2
  10bfb4:	e5803000 	str	r3, [r0]
            break;
  10bfb8:	ea000001 	b	10bfc4 <alt_int_dist_trigger_set+0x264>
        default:
            return ALT_E_BAD_ARG;
  10bfbc:	e3e03008 	mvn	r3, #8
  10bfc0:	ea000000 	b	10bfc8 <alt_int_dist_trigger_set+0x268>
        }

        return ALT_E_SUCCESS;
  10bfc4:	e3a03000 	mov	r3, #0
    }
}
  10bfc8:	e1a00003 	mov	r0, r3
  10bfcc:	e24bd000 	sub	sp, fp, #0
  10bfd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10bfd4:	e12fff1e 	bx	lr

0010bfd8 <alt_int_sgi_trigger>:

ALT_STATUS_CODE alt_int_sgi_trigger(ALT_INT_INTERRUPT_t int_id,
                                    ALT_INT_SGI_TARGET_t target_filter,
                                    alt_int_cpu_target_t target_list,
                                    bool secure_only)
{
  10bfd8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10bfdc:	e28db000 	add	fp, sp, #0
  10bfe0:	e24dd014 	sub	sp, sp, #20
  10bfe4:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  10bfe8:	e1a02003 	mov	r2, r3
  10bfec:	e1a03000 	mov	r3, r0
  10bff0:	e54b300d 	strb	r3, [fp, #-13]
  10bff4:	e1a03001 	mov	r3, r1
  10bff8:	e54b300e 	strb	r3, [fp, #-14]
  10bffc:	e1a03002 	mov	r3, r2
  10c000:	e54b300f 	strb	r3, [fp, #-15]
    /* See GIC 1.0, section 4.3.13. */

    if (target_list >= (1 << alt_int_count_cpu))
  10c004:	e3093598 	movw	r3, #38296	; 0x9598
  10c008:	e3403011 	movt	r3, #17
  10c00c:	e5933000 	ldr	r3, [r3]
  10c010:	e3a02001 	mov	r2, #1
  10c014:	e1a03312 	lsl	r3, r2, r3
  10c018:	e1a02003 	mov	r2, r3
  10c01c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c020:	e1520003 	cmp	r2, r3
  10c024:	8a000001 	bhi	10c030 <alt_int_sgi_trigger+0x58>
    {
        return ALT_E_BAD_ARG;
  10c028:	e3e03008 	mvn	r3, #8
  10c02c:	ea00002e 	b	10c0ec <alt_int_sgi_trigger+0x114>
    }
    else if ((uint32_t)int_id < 16)
  10c030:	e55b300d 	ldrb	r3, [fp, #-13]
  10c034:	e353000f 	cmp	r3, #15
  10c038:	8a00002a 	bhi	10c0e8 <alt_int_sgi_trigger+0x110>
    {
        uint32_t filterbits;
        uint32_t sattmask = 0;
  10c03c:	e3a03000 	mov	r3, #0
  10c040:	e50b300c 	str	r3, [fp, #-12]

        switch (target_filter)
  10c044:	e55b300e 	ldrb	r3, [fp, #-14]
  10c048:	e3530001 	cmp	r3, #1
  10c04c:	0a000006 	beq	10c06c <alt_int_sgi_trigger+0x94>
  10c050:	e3530002 	cmp	r3, #2
  10c054:	0a000007 	beq	10c078 <alt_int_sgi_trigger+0xa0>
  10c058:	e3530000 	cmp	r3, #0
  10c05c:	1a000008 	bne	10c084 <alt_int_sgi_trigger+0xac>
        {
        case ALT_INT_SGI_TARGET_LIST:
            filterbits = 0x0 << 24;
  10c060:	e3a03000 	mov	r3, #0
  10c064:	e50b3008 	str	r3, [fp, #-8]
            break;
  10c068:	ea000007 	b	10c08c <alt_int_sgi_trigger+0xb4>
        case ALT_INT_SGI_TARGET_ALL_EXCL_SENDER:
            filterbits = 0x1 << 24;
  10c06c:	e3a03401 	mov	r3, #16777216	; 0x1000000
  10c070:	e50b3008 	str	r3, [fp, #-8]
            break;
  10c074:	ea000004 	b	10c08c <alt_int_sgi_trigger+0xb4>
        case ALT_INT_SGI_TARGET_SENDER_ONLY:
            filterbits = 0x2 << 24;
  10c078:	e3a03402 	mov	r3, #33554432	; 0x2000000
  10c07c:	e50b3008 	str	r3, [fp, #-8]
            break;
  10c080:	ea000001 	b	10c08c <alt_int_sgi_trigger+0xb4>
        default:
            return ALT_E_BAD_ARG;
  10c084:	e3e03008 	mvn	r3, #8
  10c088:	ea000017 	b	10c0ec <alt_int_sgi_trigger+0x114>
        }

        if (!secure_only)
  10c08c:	e55b300f 	ldrb	r3, [fp, #-15]
  10c090:	e2233001 	eor	r3, r3, #1
  10c094:	e6ef3073 	uxtb	r3, r3
  10c098:	e3530000 	cmp	r3, #0
  10c09c:	0a000001 	beq	10c0a8 <alt_int_sgi_trigger+0xd0>
        {
            sattmask = 1 << 15;
  10c0a0:	e3a03902 	mov	r3, #32768	; 0x8000
  10c0a4:	e50b300c 	str	r3, [fp, #-12]
        }

        alt_write_word(alt_int_base_dist + 0xF00, int_id | sattmask | (target_list << 16) | filterbits); /* icdsgir */
  10c0a8:	e3093590 	movw	r3, #38288	; 0x9590
  10c0ac:	e3403011 	movt	r3, #17
  10c0b0:	e5933000 	ldr	r3, [r3]
  10c0b4:	e2833c0f 	add	r3, r3, #3840	; 0xf00
  10c0b8:	e1a01003 	mov	r1, r3
  10c0bc:	e55b200d 	ldrb	r2, [fp, #-13]
  10c0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10c0c4:	e1822003 	orr	r2, r2, r3
  10c0c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c0cc:	e1a03803 	lsl	r3, r3, #16
  10c0d0:	e1822003 	orr	r2, r2, r3
  10c0d4:	e51b3008 	ldr	r3, [fp, #-8]
  10c0d8:	e1823003 	orr	r3, r2, r3
  10c0dc:	e5813000 	str	r3, [r1]

        return ALT_E_SUCCESS;
  10c0e0:	e3a03000 	mov	r3, #0
  10c0e4:	ea000000 	b	10c0ec <alt_int_sgi_trigger+0x114>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10c0e8:	e3e03008 	mvn	r3, #8
    }
}
  10c0ec:	e1a00003 	mov	r0, r3
  10c0f0:	e24bd000 	sub	sp, fp, #0
  10c0f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c0f8:	e12fff1e 	bx	lr

0010c0fc <alt_int_cpu_init>:

ALT_STATUS_CODE alt_int_cpu_init()
{
  10c0fc:	e92d4800 	push	{fp, lr}
  10c100:	e28db004 	add	fp, sp, #4
  10c104:	e24dd010 	sub	sp, sp, #16
    uint32_t cpu_num = get_current_cpu_num();
  10c108:	ebfffb79 	bl	10aef4 <get_current_cpu_num>
  10c10c:	e50b0008 	str	r0, [fp, #-8]
    uint32_t stack_irq; 
    ALT_STATUS_CODE status;

    if (cpu_num >= ALT_INT_PROVISION_CPU_COUNT)
  10c110:	e51b3008 	ldr	r3, [fp, #-8]
  10c114:	e3530000 	cmp	r3, #0
  10c118:	0a000001 	beq	10c124 <alt_int_cpu_init+0x28>
    {
        return ALT_E_ERROR;
  10c11c:	e3e03000 	mvn	r3, #0
  10c120:	ea000020 	b	10c1a8 <alt_int_cpu_init+0xac>

#if ALT_INT_PROVISION_STACK_SUPPORT

    /* The ARM stack lowers in address as it is being used. 16 is the alignment
     / of the block. */
    stack_irq = (uint32_t) &alt_int_stack_irq_block[cpu_num][sizeof(alt_int_stack_irq_block[0]) - 16];
  10c124:	e51b3008 	ldr	r3, [fp, #-8]
  10c128:	e1a03603 	lsl	r3, r3, #12
  10c12c:	e2832eff 	add	r2, r3, #4080	; 0xff0
  10c130:	e3073d90 	movw	r3, #32144	; 0x7d90
  10c134:	e3403011 	movt	r3, #17
  10c138:	e0823003 	add	r3, r2, r3
  10c13c:	e50b300c 	str	r3, [fp, #-12]

    alt_int_fixup_irq_stack(stack_irq);
  10c140:	e51b000c 	ldr	r0, [fp, #-12]
  10c144:	ebfffb3c 	bl	10ae3c <alt_int_fixup_irq_stack>
     / set SCTLR.V to always be 0. */

    /* For SCTLR.V information, See ARMv7, section B4.1.130.
     / For VBAR information, See ARMv7, section B4.1.156. */

    set_sctlr_vbit(false);
  10c148:	e3a00000 	mov	r0, #0
  10c14c:	ebfffb51 	bl	10ae98 <set_sctlr_vbit>
    extern char alt_interrupt_vector;
    uint32_t vector_table = (uint32_t)&alt_interrupt_vector;
    __asm("MCR p15, 0, vector_table, c12, c0, 0");
#else
    extern char __cs3_interrupt_vector;
    uint32_t vector_table = (uint32_t)&__cs3_interrupt_vector;
  10c150:	e3003000 	movw	r3, #0
  10c154:	e3403010 	movt	r3, #16
  10c158:	e50b3010 	str	r3, [fp, #-16]
    __asm("MCR p15, 0, %0,           c12, c0, 0" : : "r" (vector_table));
  10c15c:	e51b3010 	ldr	r3, [fp, #-16]
  10c160:	ee0c3f10 	mcr	15, 0, r3, cr12, cr0, {0}
    
    /* Setup the priority mask and binary point defaults.
     / This will allow all interrupts to have sufficient priority to be
     / forwarded to the CPUs. */

    status = alt_int_cpu_priority_mask_set(0xff);
  10c164:	e3a000ff 	mov	r0, #255	; 0xff
  10c168:	eb0000f6 	bl	10c548 <alt_int_cpu_priority_mask_set>
  10c16c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (status != ALT_E_SUCCESS)
  10c170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c174:	e3530000 	cmp	r3, #0
  10c178:	0a000001 	beq	10c184 <alt_int_cpu_init+0x88>
    {
        return status;
  10c17c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c180:	ea000008 	b	10c1a8 <alt_int_cpu_init+0xac>
    }
    status = alt_int_cpu_binary_point_set(0);
  10c184:	e3a00000 	mov	r0, #0
  10c188:	eb000111 	bl	10c5d4 <alt_int_cpu_binary_point_set>
  10c18c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (status != ALT_E_SUCCESS)
  10c190:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c194:	e3530000 	cmp	r3, #0
  10c198:	0a000001 	beq	10c1a4 <alt_int_cpu_init+0xa8>
    {
        return status;
  10c19c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c1a0:	ea000000 	b	10c1a8 <alt_int_cpu_init+0xac>
    }

    return ALT_E_SUCCESS;
  10c1a4:	e3a03000 	mov	r3, #0
}
  10c1a8:	e1a00003 	mov	r0, r3
  10c1ac:	e24bd004 	sub	sp, fp, #4
  10c1b0:	e8bd8800 	pop	{fp, pc}

0010c1b4 <alt_int_cpu_uninit>:

ALT_STATUS_CODE alt_int_cpu_uninit()
{
  10c1b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c1b8:	e28db000 	add	fp, sp, #0
    return ALT_E_SUCCESS;
  10c1bc:	e3a03000 	mov	r3, #0
}
  10c1c0:	e1a00003 	mov	r0, r3
  10c1c4:	e24bd000 	sub	sp, fp, #0
  10c1c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c1cc:	e12fff1e 	bx	lr

0010c1d0 <alt_int_cpu_enable>:

ALT_STATUS_CODE alt_int_cpu_enable()
{
  10c1d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c1d4:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x1); /* iccicr */
  10c1d8:	e3093594 	movw	r3, #38292	; 0x9594
  10c1dc:	e3403011 	movt	r3, #17
  10c1e0:	e5933000 	ldr	r3, [r3]
  10c1e4:	e1a02003 	mov	r2, r3
  10c1e8:	e3093594 	movw	r3, #38292	; 0x9594
  10c1ec:	e3403011 	movt	r3, #17
  10c1f0:	e5933000 	ldr	r3, [r3]
  10c1f4:	e5933000 	ldr	r3, [r3]
  10c1f8:	e3833001 	orr	r3, r3, #1
  10c1fc:	e5823000 	str	r3, [r2]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("CPSIE i");
#elif defined(__ARMCC_VERSION)
    __enable_irq();
#else
    __asm("CPSIE i");
  10c200:	f1080080 	cpsie	i
#endif

    return ALT_E_SUCCESS;
  10c204:	e3a03000 	mov	r3, #0
}
  10c208:	e1a00003 	mov	r0, r3
  10c20c:	e24bd000 	sub	sp, fp, #0
  10c210:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c214:	e12fff1e 	bx	lr

0010c218 <alt_int_cpu_disable>:

ALT_STATUS_CODE alt_int_cpu_disable()
{
  10c218:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c21c:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x1); /* iccicr */
  10c220:	e3093594 	movw	r3, #38292	; 0x9594
  10c224:	e3403011 	movt	r3, #17
  10c228:	e5933000 	ldr	r3, [r3]
  10c22c:	e1a02003 	mov	r2, r3
  10c230:	e3093594 	movw	r3, #38292	; 0x9594
  10c234:	e3403011 	movt	r3, #17
  10c238:	e5933000 	ldr	r3, [r3]
  10c23c:	e5933000 	ldr	r3, [r3]
  10c240:	e3c33001 	bic	r3, r3, #1
  10c244:	e5823000 	str	r3, [r2]
#if   defined(__ARMCOMPILER_VERSION)
    __asm("CPSID i");
#elif defined(__ARMCC_VERSION)
    __disable_irq();
#else
    __asm("CPSID i");
  10c248:	f10c0080 	cpsid	i
#endif

    return ALT_E_SUCCESS;
  10c24c:	e3a03000 	mov	r3, #0
}
  10c250:	e1a00003 	mov	r0, r3
  10c254:	e24bd000 	sub	sp, fp, #0
  10c258:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c25c:	e12fff1e 	bx	lr

0010c260 <alt_int_cpu_enable_ns>:

ALT_STATUS_CODE alt_int_cpu_enable_ns()
{
  10c260:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c264:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x2); /* iccicr */
  10c268:	e3093594 	movw	r3, #38292	; 0x9594
  10c26c:	e3403011 	movt	r3, #17
  10c270:	e5933000 	ldr	r3, [r3]
  10c274:	e1a02003 	mov	r2, r3
  10c278:	e3093594 	movw	r3, #38292	; 0x9594
  10c27c:	e3403011 	movt	r3, #17
  10c280:	e5933000 	ldr	r3, [r3]
  10c284:	e5933000 	ldr	r3, [r3]
  10c288:	e3833002 	orr	r3, r3, #2
  10c28c:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10c290:	e3a03000 	mov	r3, #0
}
  10c294:	e1a00003 	mov	r0, r3
  10c298:	e24bd000 	sub	sp, fp, #0
  10c29c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c2a0:	e12fff1e 	bx	lr

0010c2a4 <alt_int_cpu_disable_ns>:

ALT_STATUS_CODE alt_int_cpu_disable_ns()
{
  10c2a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c2a8:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x2); /* iccicr */
  10c2ac:	e3093594 	movw	r3, #38292	; 0x9594
  10c2b0:	e3403011 	movt	r3, #17
  10c2b4:	e5933000 	ldr	r3, [r3]
  10c2b8:	e1a02003 	mov	r2, r3
  10c2bc:	e3093594 	movw	r3, #38292	; 0x9594
  10c2c0:	e3403011 	movt	r3, #17
  10c2c4:	e5933000 	ldr	r3, [r3]
  10c2c8:	e5933000 	ldr	r3, [r3]
  10c2cc:	e3c33002 	bic	r3, r3, #2
  10c2d0:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10c2d4:	e3a03000 	mov	r3, #0
}
  10c2d8:	e1a00003 	mov	r0, r3
  10c2dc:	e24bd000 	sub	sp, fp, #0
  10c2e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c2e4:	e12fff1e 	bx	lr

0010c2e8 <alt_int_cpu_enable_all>:

ALT_STATUS_CODE alt_int_cpu_enable_all()
{
  10c2e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c2ec:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x3); /* iccicr */
  10c2f0:	e3093594 	movw	r3, #38292	; 0x9594
  10c2f4:	e3403011 	movt	r3, #17
  10c2f8:	e5933000 	ldr	r3, [r3]
  10c2fc:	e1a02003 	mov	r2, r3
  10c300:	e3093594 	movw	r3, #38292	; 0x9594
  10c304:	e3403011 	movt	r3, #17
  10c308:	e5933000 	ldr	r3, [r3]
  10c30c:	e5933000 	ldr	r3, [r3]
  10c310:	e3833003 	orr	r3, r3, #3
  10c314:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10c318:	e3a03000 	mov	r3, #0
}
  10c31c:	e1a00003 	mov	r0, r3
  10c320:	e24bd000 	sub	sp, fp, #0
  10c324:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c328:	e12fff1e 	bx	lr

0010c32c <alt_int_cpu_disable_all>:

ALT_STATUS_CODE alt_int_cpu_disable_all()
{
  10c32c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c330:	e28db000 	add	fp, sp, #0
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x3); /* iccicr */
  10c334:	e3093594 	movw	r3, #38292	; 0x9594
  10c338:	e3403011 	movt	r3, #17
  10c33c:	e5933000 	ldr	r3, [r3]
  10c340:	e1a02003 	mov	r2, r3
  10c344:	e3093594 	movw	r3, #38292	; 0x9594
  10c348:	e3403011 	movt	r3, #17
  10c34c:	e5933000 	ldr	r3, [r3]
  10c350:	e5933000 	ldr	r3, [r3]
  10c354:	e3c33003 	bic	r3, r3, #3
  10c358:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10c35c:	e3a03000 	mov	r3, #0
}
  10c360:	e1a00003 	mov	r0, r3
  10c364:	e24bd000 	sub	sp, fp, #0
  10c368:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c36c:	e12fff1e 	bx	lr

0010c370 <alt_int_cpu_config_get>:

ALT_STATUS_CODE alt_int_cpu_config_get(bool* use_secure_binary_point,
                                       bool* use_FIQ_for_secure_interrupts,
                                       bool* allow_secure_ack_all_interrupts)
{
  10c370:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c374:	e28db000 	add	fp, sp, #0
  10c378:	e24dd01c 	sub	sp, sp, #28
  10c37c:	e50b0010 	str	r0, [fp, #-16]
  10c380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    /* See GIC 1.0, section 4.4.1. */

    uint32_t iccicr = alt_read_word(alt_int_base_cpu + 0x0);
  10c388:	e3093594 	movw	r3, #38292	; 0x9594
  10c38c:	e3403011 	movt	r3, #17
  10c390:	e5933000 	ldr	r3, [r3]
  10c394:	e5933000 	ldr	r3, [r3]
  10c398:	e50b3008 	str	r3, [fp, #-8]

    if (use_secure_binary_point)
  10c39c:	e51b3010 	ldr	r3, [fp, #-16]
  10c3a0:	e3530000 	cmp	r3, #0
  10c3a4:	0a000007 	beq	10c3c8 <alt_int_cpu_config_get+0x58>
    {
        *use_secure_binary_point = (iccicr & (1 << 4)) != 0;
  10c3a8:	e51b3008 	ldr	r3, [fp, #-8]
  10c3ac:	e2033010 	and	r3, r3, #16
  10c3b0:	e3530000 	cmp	r3, #0
  10c3b4:	13a03001 	movne	r3, #1
  10c3b8:	03a03000 	moveq	r3, #0
  10c3bc:	e6ef2073 	uxtb	r2, r3
  10c3c0:	e51b3010 	ldr	r3, [fp, #-16]
  10c3c4:	e5c32000 	strb	r2, [r3]
    }
    if (use_FIQ_for_secure_interrupts)
  10c3c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c3cc:	e3530000 	cmp	r3, #0
  10c3d0:	0a000007 	beq	10c3f4 <alt_int_cpu_config_get+0x84>
    {
        *use_FIQ_for_secure_interrupts = (iccicr & (1 << 3)) != 0;
  10c3d4:	e51b3008 	ldr	r3, [fp, #-8]
  10c3d8:	e2033008 	and	r3, r3, #8
  10c3dc:	e3530000 	cmp	r3, #0
  10c3e0:	13a03001 	movne	r3, #1
  10c3e4:	03a03000 	moveq	r3, #0
  10c3e8:	e6ef2073 	uxtb	r2, r3
  10c3ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c3f0:	e5c32000 	strb	r2, [r3]
    }
    if (allow_secure_ack_all_interrupts)
  10c3f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c3f8:	e3530000 	cmp	r3, #0
  10c3fc:	0a000007 	beq	10c420 <alt_int_cpu_config_get+0xb0>
    {
        *allow_secure_ack_all_interrupts = (iccicr & (1 << 2)) != 0;
  10c400:	e51b3008 	ldr	r3, [fp, #-8]
  10c404:	e2033004 	and	r3, r3, #4
  10c408:	e3530000 	cmp	r3, #0
  10c40c:	13a03001 	movne	r3, #1
  10c410:	03a03000 	moveq	r3, #0
  10c414:	e6ef2073 	uxtb	r2, r3
  10c418:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c41c:	e5c32000 	strb	r2, [r3]
    }

    return ALT_E_SUCCESS;
  10c420:	e3a03000 	mov	r3, #0
}
  10c424:	e1a00003 	mov	r0, r3
  10c428:	e24bd000 	sub	sp, fp, #0
  10c42c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c430:	e12fff1e 	bx	lr

0010c434 <alt_int_cpu_config_set>:

ALT_STATUS_CODE alt_int_cpu_config_set(bool use_secure_binary_point,
                                       bool use_FIQ_for_secure_interrupts,
                                       bool allow_secure_ack_all_interrupts)
{
  10c434:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c438:	e28db000 	add	fp, sp, #0
  10c43c:	e24dd014 	sub	sp, sp, #20
  10c440:	e1a03000 	mov	r3, r0
  10c444:	e54b300d 	strb	r3, [fp, #-13]
  10c448:	e1a03001 	mov	r3, r1
  10c44c:	e54b300e 	strb	r3, [fp, #-14]
  10c450:	e1a03002 	mov	r3, r2
  10c454:	e54b300f 	strb	r3, [fp, #-15]
    /* See GIC 1.0, section 4.4.1. */

    uint32_t iccicr = alt_read_word(alt_int_base_cpu + 0x0);
  10c458:	e3093594 	movw	r3, #38292	; 0x9594
  10c45c:	e3403011 	movt	r3, #17
  10c460:	e5933000 	ldr	r3, [r3]
  10c464:	e5933000 	ldr	r3, [r3]
  10c468:	e50b3008 	str	r3, [fp, #-8]

    if (use_secure_binary_point)
  10c46c:	e55b300d 	ldrb	r3, [fp, #-13]
  10c470:	e3530000 	cmp	r3, #0
  10c474:	0a000003 	beq	10c488 <alt_int_cpu_config_set+0x54>
    {
        iccicr |= 1 << 4;
  10c478:	e51b3008 	ldr	r3, [fp, #-8]
  10c47c:	e3833010 	orr	r3, r3, #16
  10c480:	e50b3008 	str	r3, [fp, #-8]
  10c484:	ea000002 	b	10c494 <alt_int_cpu_config_set+0x60>
    }
    else
    {
        iccicr &= ~(1 << 4);
  10c488:	e51b3008 	ldr	r3, [fp, #-8]
  10c48c:	e3c33010 	bic	r3, r3, #16
  10c490:	e50b3008 	str	r3, [fp, #-8]
    }

    if (use_FIQ_for_secure_interrupts)
  10c494:	e55b300e 	ldrb	r3, [fp, #-14]
  10c498:	e3530000 	cmp	r3, #0
  10c49c:	0a000003 	beq	10c4b0 <alt_int_cpu_config_set+0x7c>
    {
        iccicr |= 1 << 3;
  10c4a0:	e51b3008 	ldr	r3, [fp, #-8]
  10c4a4:	e3833008 	orr	r3, r3, #8
  10c4a8:	e50b3008 	str	r3, [fp, #-8]
  10c4ac:	ea000002 	b	10c4bc <alt_int_cpu_config_set+0x88>
    }
    else
    {
        iccicr &= ~(1 << 3);
  10c4b0:	e51b3008 	ldr	r3, [fp, #-8]
  10c4b4:	e3c33008 	bic	r3, r3, #8
  10c4b8:	e50b3008 	str	r3, [fp, #-8]
    }

    if (allow_secure_ack_all_interrupts)
  10c4bc:	e55b300f 	ldrb	r3, [fp, #-15]
  10c4c0:	e3530000 	cmp	r3, #0
  10c4c4:	0a000003 	beq	10c4d8 <alt_int_cpu_config_set+0xa4>
    {
        iccicr |= 1 << 2;
  10c4c8:	e51b3008 	ldr	r3, [fp, #-8]
  10c4cc:	e3833004 	orr	r3, r3, #4
  10c4d0:	e50b3008 	str	r3, [fp, #-8]
  10c4d4:	ea000002 	b	10c4e4 <alt_int_cpu_config_set+0xb0>
    }
    else
    {
        iccicr &= ~(1 << 2);
  10c4d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c4dc:	e3c33004 	bic	r3, r3, #4
  10c4e0:	e50b3008 	str	r3, [fp, #-8]
    }

    alt_write_word(alt_int_base_cpu + 0x0, iccicr);
  10c4e4:	e3093594 	movw	r3, #38292	; 0x9594
  10c4e8:	e3403011 	movt	r3, #17
  10c4ec:	e5933000 	ldr	r3, [r3]
  10c4f0:	e1a02003 	mov	r2, r3
  10c4f4:	e51b3008 	ldr	r3, [fp, #-8]
  10c4f8:	e5823000 	str	r3, [r2]

    return ALT_E_SUCCESS;
  10c4fc:	e3a03000 	mov	r3, #0
}
  10c500:	e1a00003 	mov	r0, r3
  10c504:	e24bd000 	sub	sp, fp, #0
  10c508:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c50c:	e12fff1e 	bx	lr

0010c510 <alt_int_cpu_priority_mask_get>:

uint32_t alt_int_cpu_priority_mask_get()
{
  10c510:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c514:	e28db000 	add	fp, sp, #0
  10c518:	e24dd00c 	sub	sp, sp, #12
    /* See GIC 1.0, section 4.4.2. */

    uint32_t iccpmr = alt_read_word(alt_int_base_cpu + 0x4);
  10c51c:	e3093594 	movw	r3, #38292	; 0x9594
  10c520:	e3403011 	movt	r3, #17
  10c524:	e5933000 	ldr	r3, [r3]
  10c528:	e2833004 	add	r3, r3, #4
  10c52c:	e5933000 	ldr	r3, [r3]
  10c530:	e50b3008 	str	r3, [fp, #-8]

    return iccpmr;
  10c534:	e51b3008 	ldr	r3, [fp, #-8]
}
  10c538:	e1a00003 	mov	r0, r3
  10c53c:	e24bd000 	sub	sp, fp, #0
  10c540:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c544:	e12fff1e 	bx	lr

0010c548 <alt_int_cpu_priority_mask_set>:

ALT_STATUS_CODE alt_int_cpu_priority_mask_set(uint32_t priority_mask)
{
  10c548:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c54c:	e28db000 	add	fp, sp, #0
  10c550:	e24dd00c 	sub	sp, sp, #12
  10c554:	e50b0008 	str	r0, [fp, #-8]
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
  10c558:	e51b3008 	ldr	r3, [fp, #-8]
  10c55c:	e35300ff 	cmp	r3, #255	; 0xff
  10c560:	8a000008 	bhi	10c588 <alt_int_cpu_priority_mask_set+0x40>
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
  10c564:	e3093594 	movw	r3, #38292	; 0x9594
  10c568:	e3403011 	movt	r3, #17
  10c56c:	e5933000 	ldr	r3, [r3]
  10c570:	e2833004 	add	r3, r3, #4
  10c574:	e1a02003 	mov	r2, r3
  10c578:	e51b3008 	ldr	r3, [fp, #-8]
  10c57c:	e5823000 	str	r3, [r2]

        return ALT_E_SUCCESS;
  10c580:	e3a03000 	mov	r3, #0
  10c584:	ea000000 	b	10c58c <alt_int_cpu_priority_mask_set+0x44>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10c588:	e3e03008 	mvn	r3, #8
    }
}
  10c58c:	e1a00003 	mov	r0, r3
  10c590:	e24bd000 	sub	sp, fp, #0
  10c594:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c598:	e12fff1e 	bx	lr

0010c59c <alt_int_cpu_binary_point_get>:

uint32_t alt_int_cpu_binary_point_get()
{
  10c59c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c5a0:	e28db000 	add	fp, sp, #0
  10c5a4:	e24dd00c 	sub	sp, sp, #12
    /* See GIC 1.0, section 4.4.3. */

    uint32_t iccbpr = alt_read_word(alt_int_base_cpu + 0x8);
  10c5a8:	e3093594 	movw	r3, #38292	; 0x9594
  10c5ac:	e3403011 	movt	r3, #17
  10c5b0:	e5933000 	ldr	r3, [r3]
  10c5b4:	e2833008 	add	r3, r3, #8
  10c5b8:	e5933000 	ldr	r3, [r3]
  10c5bc:	e50b3008 	str	r3, [fp, #-8]

    return iccbpr;
  10c5c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10c5c4:	e1a00003 	mov	r0, r3
  10c5c8:	e24bd000 	sub	sp, fp, #0
  10c5cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c5d0:	e12fff1e 	bx	lr

0010c5d4 <alt_int_cpu_binary_point_set>:

ALT_STATUS_CODE alt_int_cpu_binary_point_set(uint32_t binary_point)
{
  10c5d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c5d8:	e28db000 	add	fp, sp, #0
  10c5dc:	e24dd00c 	sub	sp, sp, #12
  10c5e0:	e50b0008 	str	r0, [fp, #-8]
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
  10c5e4:	e51b3008 	ldr	r3, [fp, #-8]
  10c5e8:	e3530007 	cmp	r3, #7
  10c5ec:	8a000008 	bhi	10c614 <alt_int_cpu_binary_point_set+0x40>
    {
        alt_write_word(alt_int_base_cpu + 0x8, binary_point); /* iccbpr */
  10c5f0:	e3093594 	movw	r3, #38292	; 0x9594
  10c5f4:	e3403011 	movt	r3, #17
  10c5f8:	e5933000 	ldr	r3, [r3]
  10c5fc:	e2833008 	add	r3, r3, #8
  10c600:	e1a02003 	mov	r2, r3
  10c604:	e51b3008 	ldr	r3, [fp, #-8]
  10c608:	e5823000 	str	r3, [r2]

        return ALT_E_SUCCESS;
  10c60c:	e3a03000 	mov	r3, #0
  10c610:	ea000000 	b	10c618 <alt_int_cpu_binary_point_set+0x44>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10c614:	e3e03008 	mvn	r3, #8
    }
}
  10c618:	e1a00003 	mov	r0, r3
  10c61c:	e24bd000 	sub	sp, fp, #0
  10c620:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c624:	e12fff1e 	bx	lr

0010c628 <alt_int_cpu_binary_point_get_ns>:

uint32_t alt_int_cpu_binary_point_get_ns()
{
  10c628:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c62c:	e28db000 	add	fp, sp, #0
  10c630:	e24dd00c 	sub	sp, sp, #12
    /* See GIC 1.0, section 4.4.7. */

    uint32_t iccabpr = alt_read_word(alt_int_base_cpu + 0x1C);
  10c634:	e3093594 	movw	r3, #38292	; 0x9594
  10c638:	e3403011 	movt	r3, #17
  10c63c:	e5933000 	ldr	r3, [r3]
  10c640:	e283301c 	add	r3, r3, #28
  10c644:	e5933000 	ldr	r3, [r3]
  10c648:	e50b3008 	str	r3, [fp, #-8]

    return iccabpr;
  10c64c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10c650:	e1a00003 	mov	r0, r3
  10c654:	e24bd000 	sub	sp, fp, #0
  10c658:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c65c:	e12fff1e 	bx	lr

0010c660 <alt_int_cpu_binary_point_set_ns>:

ALT_STATUS_CODE alt_int_cpu_binary_point_set_ns(uint32_t binary_point)
{
  10c660:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c664:	e28db000 	add	fp, sp, #0
  10c668:	e24dd00c 	sub	sp, sp, #12
  10c66c:	e50b0008 	str	r0, [fp, #-8]
    /* See GIC 1.0, section 4.4.7. */

    if (binary_point < 8)
  10c670:	e51b3008 	ldr	r3, [fp, #-8]
  10c674:	e3530007 	cmp	r3, #7
  10c678:	8a000008 	bhi	10c6a0 <alt_int_cpu_binary_point_set_ns+0x40>
    {
        alt_write_word(alt_int_base_cpu + 0x1C, binary_point); /* iccabpr */
  10c67c:	e3093594 	movw	r3, #38292	; 0x9594
  10c680:	e3403011 	movt	r3, #17
  10c684:	e5933000 	ldr	r3, [r3]
  10c688:	e283301c 	add	r3, r3, #28
  10c68c:	e1a02003 	mov	r2, r3
  10c690:	e51b3008 	ldr	r3, [fp, #-8]
  10c694:	e5823000 	str	r3, [r2]

        return ALT_E_SUCCESS;
  10c698:	e3a03000 	mov	r3, #0
  10c69c:	ea000000 	b	10c6a4 <alt_int_cpu_binary_point_set_ns+0x44>
    }
    else
    {
        return ALT_E_BAD_ARG;
  10c6a0:	e3e03008 	mvn	r3, #8
    }
}
  10c6a4:	e1a00003 	mov	r0, r3
  10c6a8:	e24bd000 	sub	sp, fp, #0
  10c6ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c6b0:	e12fff1e 	bx	lr

0010c6b4 <alt_int_isr_register>:

ALT_STATUS_CODE alt_int_isr_register(ALT_INT_INTERRUPT_t int_id,
                                     alt_int_callback_t callback,
                                     void * context)
{
  10c6b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c6b8:	e28db000 	add	fp, sp, #0
  10c6bc:	e24dd014 	sub	sp, sp, #20
  10c6c0:	e1a03000 	mov	r3, r0
  10c6c4:	e50b100c 	str	r1, [fp, #-12]
  10c6c8:	e50b2010 	str	r2, [fp, #-16]
  10c6cc:	e54b3005 	strb	r3, [fp, #-5]
    if ((uint32_t)int_id < ALT_INT_PROVISION_INT_COUNT)
    {
        alt_int_dispatch[int_id].callback = callback;
  10c6d0:	e55b2005 	ldrb	r2, [fp, #-5]
  10c6d4:	e3083d90 	movw	r3, #36240	; 0x8d90
  10c6d8:	e3403011 	movt	r3, #17
  10c6dc:	e51b100c 	ldr	r1, [fp, #-12]
  10c6e0:	e7831182 	str	r1, [r3, r2, lsl #3]
        alt_int_dispatch[int_id].context  = context;
  10c6e4:	e55b3005 	ldrb	r3, [fp, #-5]
  10c6e8:	e3082d90 	movw	r2, #36240	; 0x8d90
  10c6ec:	e3402011 	movt	r2, #17
  10c6f0:	e1a03183 	lsl	r3, r3, #3
  10c6f4:	e0823003 	add	r3, r2, r3
  10c6f8:	e51b2010 	ldr	r2, [fp, #-16]
  10c6fc:	e5832004 	str	r2, [r3, #4]

        return ALT_E_SUCCESS;
  10c700:	e3a03000 	mov	r3, #0
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
  10c704:	e1a00003 	mov	r0, r3
  10c708:	e24bd000 	sub	sp, fp, #0
  10c70c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c710:	e12fff1e 	bx	lr

0010c714 <alt_int_isr_unregister>:

ALT_STATUS_CODE alt_int_isr_unregister(ALT_INT_INTERRUPT_t int_id)
{
  10c714:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c718:	e28db000 	add	fp, sp, #0
  10c71c:	e24dd00c 	sub	sp, sp, #12
  10c720:	e1a03000 	mov	r3, r0
  10c724:	e54b3005 	strb	r3, [fp, #-5]
    if ((uint32_t)int_id < ALT_INT_PROVISION_INT_COUNT)
    {
        alt_int_dispatch[int_id].callback = 0;
  10c728:	e55b2005 	ldrb	r2, [fp, #-5]
  10c72c:	e3083d90 	movw	r3, #36240	; 0x8d90
  10c730:	e3403011 	movt	r3, #17
  10c734:	e3a01000 	mov	r1, #0
  10c738:	e7831182 	str	r1, [r3, r2, lsl #3]
        alt_int_dispatch[int_id].context  = 0;
  10c73c:	e55b3005 	ldrb	r3, [fp, #-5]
  10c740:	e3082d90 	movw	r2, #36240	; 0x8d90
  10c744:	e3402011 	movt	r2, #17
  10c748:	e1a03183 	lsl	r3, r3, #3
  10c74c:	e0823003 	add	r3, r2, r3
  10c750:	e3a02000 	mov	r2, #0
  10c754:	e5832004 	str	r2, [r3, #4]

        return ALT_E_SUCCESS;
  10c758:	e3a03000 	mov	r3, #0
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
  10c75c:	e1a00003 	mov	r0, r3
  10c760:	e24bd000 	sub	sp, fp, #0
  10c764:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c768:	e12fff1e 	bx	lr

0010c76c <alt_int_util_cpu_count>:

uint32_t alt_int_util_cpu_count(void)
{
  10c76c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c770:	e28db000 	add	fp, sp, #0
    return alt_int_count_cpu;
  10c774:	e3093598 	movw	r3, #38296	; 0x9598
  10c778:	e3403011 	movt	r3, #17
  10c77c:	e5933000 	ldr	r3, [r3]
}
  10c780:	e1a00003 	mov	r0, r3
  10c784:	e24bd000 	sub	sp, fp, #0
  10c788:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c78c:	e12fff1e 	bx	lr

0010c790 <alt_int_util_int_count>:

uint32_t alt_int_util_int_count(void)
{
  10c790:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10c794:	e28db000 	add	fp, sp, #0
    return alt_int_count_int;
  10c798:	e309359c 	movw	r3, #38300	; 0x959c
  10c79c:	e3403011 	movt	r3, #17
  10c7a0:	e5933000 	ldr	r3, [r3]
}
  10c7a4:	e1a00003 	mov	r0, r3
  10c7a8:	e24bd000 	sub	sp, fp, #0
  10c7ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10c7b0:	e12fff1e 	bx	lr

0010c7b4 <alt_int_util_cpu_current>:

alt_int_cpu_target_t alt_int_util_cpu_current(void)
{
  10c7b4:	e92d4800 	push	{fp, lr}
  10c7b8:	e28db004 	add	fp, sp, #4
    return 1 << get_current_cpu_num();
  10c7bc:	ebfff9cc 	bl	10aef4 <get_current_cpu_num>
  10c7c0:	e1a02000 	mov	r2, r0
  10c7c4:	e3a03001 	mov	r3, #1
  10c7c8:	e1a03213 	lsl	r3, r3, r2
}
  10c7cc:	e1a00003 	mov	r0, r3
  10c7d0:	e8bd8800 	pop	{fp, pc}

0010c7d4 <__cs3_isr_irq>:
#else /* #if ALT_INT_PROVISION_VECTOR_SUPPORT */

void alt_int_handler_irq(void)

#endif /* #if ALT_INT_PROVISION_VECTOR_SUPPORT */
{
  10c7d4:	e24ee004 	sub	lr, lr, #4
  10c7d8:	e92d581f 	push	{r0, r1, r2, r3, r4, fp, ip, lr}
  10c7dc:	e28db01c 	add	fp, sp, #28
  10c7e0:	e24dd008 	sub	sp, sp, #8
    /* See GIC 1.0, sections 4.4.4, 4.4.5. */

    uint32_t icciar = alt_read_word(alt_int_base_cpu + 0xC);
  10c7e4:	e3093594 	movw	r3, #38292	; 0x9594
  10c7e8:	e3403011 	movt	r3, #17
  10c7ec:	e5933000 	ldr	r3, [r3]
  10c7f0:	e283300c 	add	r3, r3, #12
  10c7f4:	e5933000 	ldr	r3, [r3]
  10c7f8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

    uint32_t ackintid = ALT_INT_ICCIAR_ACKINTID_GET(icciar);
  10c7fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c800:	e7e93053 	ubfx	r3, r3, #0, #10
  10c804:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

    if (ackintid < ALT_INT_PROVISION_INT_COUNT)
  10c808:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c80c:	e35300ff 	cmp	r3, #255	; 0xff
  10c810:	8a000013 	bhi	10c864 <__cs3_isr_irq+0x90>
    {
        if (alt_int_dispatch[ackintid].callback)
  10c814:	e3083d90 	movw	r3, #36240	; 0x8d90
  10c818:	e3403011 	movt	r3, #17
  10c81c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10c820:	e7933182 	ldr	r3, [r3, r2, lsl #3]
  10c824:	e3530000 	cmp	r3, #0
  10c828:	0a000011 	beq	10c874 <__cs3_isr_irq+0xa0>
        {
            alt_int_dispatch[ackintid].callback(icciar, alt_int_dispatch[ackintid].context);
  10c82c:	e3083d90 	movw	r3, #36240	; 0x8d90
  10c830:	e3403011 	movt	r3, #17
  10c834:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10c838:	e7934182 	ldr	r4, [r3, r2, lsl #3]
  10c83c:	e3082d90 	movw	r2, #36240	; 0x8d90
  10c840:	e3402011 	movt	r2, #17
  10c844:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c848:	e1a03183 	lsl	r3, r3, #3
  10c84c:	e0823003 	add	r3, r2, r3
  10c850:	e5933004 	ldr	r3, [r3, #4]
  10c854:	e1a01003 	mov	r1, r3
  10c858:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c85c:	e12fff34 	blx	r4
  10c860:	ea000003 	b	10c874 <__cs3_isr_irq+0xa0>
        }
    }
    else
    {
        /* Report error. */
        dprintf("INT[ISR]: Unhandled interrupt ID = 0x%" PRIx32 ".\n", ackintid);
  10c864:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10c868:	e3070000 	movw	r0, #28672	; 0x7000
  10c86c:	e3400011 	movt	r0, #17
  10c870:	ebfff968 	bl	10ae18 <null_printf>
    }

    alt_write_word(alt_int_base_cpu + 0x10, icciar); /* icceoir */
  10c874:	e3093594 	movw	r3, #38292	; 0x9594
  10c878:	e3403011 	movt	r3, #17
  10c87c:	e5933000 	ldr	r3, [r3]
  10c880:	e2833010 	add	r3, r3, #16
  10c884:	e1a02003 	mov	r2, r3
  10c888:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c88c:	e5823000 	str	r3, [r2]
}
  10c890:	e1a00000 	nop			; (mov r0, r0)
  10c894:	e24bd01c 	sub	sp, fp, #28
  10c898:	e8fd981f 	ldm	sp!, {r0, r1, r2, r3, r4, fp, ip, pc}^

0010c89c <__aeabi_uidiv>:
  10c89c:	e2512001 	subs	r2, r1, #1
  10c8a0:	012fff1e 	bxeq	lr
  10c8a4:	3a000074 	bcc	10ca7c <__aeabi_uidiv+0x1e0>
  10c8a8:	e1500001 	cmp	r0, r1
  10c8ac:	9a00006b 	bls	10ca60 <__aeabi_uidiv+0x1c4>
  10c8b0:	e1110002 	tst	r1, r2
  10c8b4:	0a00006c 	beq	10ca6c <__aeabi_uidiv+0x1d0>
  10c8b8:	e16f3f10 	clz	r3, r0
  10c8bc:	e16f2f11 	clz	r2, r1
  10c8c0:	e0423003 	sub	r3, r2, r3
  10c8c4:	e273301f 	rsbs	r3, r3, #31
  10c8c8:	10833083 	addne	r3, r3, r3, lsl #1
  10c8cc:	e3a02000 	mov	r2, #0
  10c8d0:	108ff103 	addne	pc, pc, r3, lsl #2
  10c8d4:	e320f000 	nop	{0}
  10c8d8:	e1500f81 	cmp	r0, r1, lsl #31
  10c8dc:	e0a22002 	adc	r2, r2, r2
  10c8e0:	20400f81 	subcs	r0, r0, r1, lsl #31
  10c8e4:	e1500f01 	cmp	r0, r1, lsl #30
  10c8e8:	e0a22002 	adc	r2, r2, r2
  10c8ec:	20400f01 	subcs	r0, r0, r1, lsl #30
  10c8f0:	e1500e81 	cmp	r0, r1, lsl #29
  10c8f4:	e0a22002 	adc	r2, r2, r2
  10c8f8:	20400e81 	subcs	r0, r0, r1, lsl #29
  10c8fc:	e1500e01 	cmp	r0, r1, lsl #28
  10c900:	e0a22002 	adc	r2, r2, r2
  10c904:	20400e01 	subcs	r0, r0, r1, lsl #28
  10c908:	e1500d81 	cmp	r0, r1, lsl #27
  10c90c:	e0a22002 	adc	r2, r2, r2
  10c910:	20400d81 	subcs	r0, r0, r1, lsl #27
  10c914:	e1500d01 	cmp	r0, r1, lsl #26
  10c918:	e0a22002 	adc	r2, r2, r2
  10c91c:	20400d01 	subcs	r0, r0, r1, lsl #26
  10c920:	e1500c81 	cmp	r0, r1, lsl #25
  10c924:	e0a22002 	adc	r2, r2, r2
  10c928:	20400c81 	subcs	r0, r0, r1, lsl #25
  10c92c:	e1500c01 	cmp	r0, r1, lsl #24
  10c930:	e0a22002 	adc	r2, r2, r2
  10c934:	20400c01 	subcs	r0, r0, r1, lsl #24
  10c938:	e1500b81 	cmp	r0, r1, lsl #23
  10c93c:	e0a22002 	adc	r2, r2, r2
  10c940:	20400b81 	subcs	r0, r0, r1, lsl #23
  10c944:	e1500b01 	cmp	r0, r1, lsl #22
  10c948:	e0a22002 	adc	r2, r2, r2
  10c94c:	20400b01 	subcs	r0, r0, r1, lsl #22
  10c950:	e1500a81 	cmp	r0, r1, lsl #21
  10c954:	e0a22002 	adc	r2, r2, r2
  10c958:	20400a81 	subcs	r0, r0, r1, lsl #21
  10c95c:	e1500a01 	cmp	r0, r1, lsl #20
  10c960:	e0a22002 	adc	r2, r2, r2
  10c964:	20400a01 	subcs	r0, r0, r1, lsl #20
  10c968:	e1500981 	cmp	r0, r1, lsl #19
  10c96c:	e0a22002 	adc	r2, r2, r2
  10c970:	20400981 	subcs	r0, r0, r1, lsl #19
  10c974:	e1500901 	cmp	r0, r1, lsl #18
  10c978:	e0a22002 	adc	r2, r2, r2
  10c97c:	20400901 	subcs	r0, r0, r1, lsl #18
  10c980:	e1500881 	cmp	r0, r1, lsl #17
  10c984:	e0a22002 	adc	r2, r2, r2
  10c988:	20400881 	subcs	r0, r0, r1, lsl #17
  10c98c:	e1500801 	cmp	r0, r1, lsl #16
  10c990:	e0a22002 	adc	r2, r2, r2
  10c994:	20400801 	subcs	r0, r0, r1, lsl #16
  10c998:	e1500781 	cmp	r0, r1, lsl #15
  10c99c:	e0a22002 	adc	r2, r2, r2
  10c9a0:	20400781 	subcs	r0, r0, r1, lsl #15
  10c9a4:	e1500701 	cmp	r0, r1, lsl #14
  10c9a8:	e0a22002 	adc	r2, r2, r2
  10c9ac:	20400701 	subcs	r0, r0, r1, lsl #14
  10c9b0:	e1500681 	cmp	r0, r1, lsl #13
  10c9b4:	e0a22002 	adc	r2, r2, r2
  10c9b8:	20400681 	subcs	r0, r0, r1, lsl #13
  10c9bc:	e1500601 	cmp	r0, r1, lsl #12
  10c9c0:	e0a22002 	adc	r2, r2, r2
  10c9c4:	20400601 	subcs	r0, r0, r1, lsl #12
  10c9c8:	e1500581 	cmp	r0, r1, lsl #11
  10c9cc:	e0a22002 	adc	r2, r2, r2
  10c9d0:	20400581 	subcs	r0, r0, r1, lsl #11
  10c9d4:	e1500501 	cmp	r0, r1, lsl #10
  10c9d8:	e0a22002 	adc	r2, r2, r2
  10c9dc:	20400501 	subcs	r0, r0, r1, lsl #10
  10c9e0:	e1500481 	cmp	r0, r1, lsl #9
  10c9e4:	e0a22002 	adc	r2, r2, r2
  10c9e8:	20400481 	subcs	r0, r0, r1, lsl #9
  10c9ec:	e1500401 	cmp	r0, r1, lsl #8
  10c9f0:	e0a22002 	adc	r2, r2, r2
  10c9f4:	20400401 	subcs	r0, r0, r1, lsl #8
  10c9f8:	e1500381 	cmp	r0, r1, lsl #7
  10c9fc:	e0a22002 	adc	r2, r2, r2
  10ca00:	20400381 	subcs	r0, r0, r1, lsl #7
  10ca04:	e1500301 	cmp	r0, r1, lsl #6
  10ca08:	e0a22002 	adc	r2, r2, r2
  10ca0c:	20400301 	subcs	r0, r0, r1, lsl #6
  10ca10:	e1500281 	cmp	r0, r1, lsl #5
  10ca14:	e0a22002 	adc	r2, r2, r2
  10ca18:	20400281 	subcs	r0, r0, r1, lsl #5
  10ca1c:	e1500201 	cmp	r0, r1, lsl #4
  10ca20:	e0a22002 	adc	r2, r2, r2
  10ca24:	20400201 	subcs	r0, r0, r1, lsl #4
  10ca28:	e1500181 	cmp	r0, r1, lsl #3
  10ca2c:	e0a22002 	adc	r2, r2, r2
  10ca30:	20400181 	subcs	r0, r0, r1, lsl #3
  10ca34:	e1500101 	cmp	r0, r1, lsl #2
  10ca38:	e0a22002 	adc	r2, r2, r2
  10ca3c:	20400101 	subcs	r0, r0, r1, lsl #2
  10ca40:	e1500081 	cmp	r0, r1, lsl #1
  10ca44:	e0a22002 	adc	r2, r2, r2
  10ca48:	20400081 	subcs	r0, r0, r1, lsl #1
  10ca4c:	e1500001 	cmp	r0, r1
  10ca50:	e0a22002 	adc	r2, r2, r2
  10ca54:	20400001 	subcs	r0, r0, r1
  10ca58:	e1a00002 	mov	r0, r2
  10ca5c:	e12fff1e 	bx	lr
  10ca60:	03a00001 	moveq	r0, #1
  10ca64:	13a00000 	movne	r0, #0
  10ca68:	e12fff1e 	bx	lr
  10ca6c:	e16f2f11 	clz	r2, r1
  10ca70:	e262201f 	rsb	r2, r2, #31
  10ca74:	e1a00230 	lsr	r0, r0, r2
  10ca78:	e12fff1e 	bx	lr
  10ca7c:	e3500000 	cmp	r0, #0
  10ca80:	13e00000 	mvnne	r0, #0
  10ca84:	ea000007 	b	10caa8 <__aeabi_idiv0>

0010ca88 <__aeabi_uidivmod>:
  10ca88:	e3510000 	cmp	r1, #0
  10ca8c:	0afffffa 	beq	10ca7c <__aeabi_uidiv+0x1e0>
  10ca90:	e92d4003 	push	{r0, r1, lr}
  10ca94:	ebffff80 	bl	10c89c <__aeabi_uidiv>
  10ca98:	e8bd4006 	pop	{r1, r2, lr}
  10ca9c:	e0030092 	mul	r3, r2, r0
  10caa0:	e0411003 	sub	r1, r1, r3
  10caa4:	e12fff1e 	bx	lr

0010caa8 <__aeabi_idiv0>:
  10caa8:	e12fff1e 	bx	lr

0010caac <__aeabi_uldivmod>:
  10caac:	e3530000 	cmp	r3, #0
  10cab0:	03520000 	cmpeq	r2, #0
  10cab4:	1a000004 	bne	10cacc <__aeabi_uldivmod+0x20>
  10cab8:	e3510000 	cmp	r1, #0
  10cabc:	03500000 	cmpeq	r0, #0
  10cac0:	13e01000 	mvnne	r1, #0
  10cac4:	13e00000 	mvnne	r0, #0
  10cac8:	eafffff6 	b	10caa8 <__aeabi_idiv0>
  10cacc:	e24dd008 	sub	sp, sp, #8
  10cad0:	e92d6000 	push	{sp, lr}
  10cad4:	eb000003 	bl	10cae8 <__udivmoddi4>
  10cad8:	e59de004 	ldr	lr, [sp, #4]
  10cadc:	e28dd008 	add	sp, sp, #8
  10cae0:	e8bd000c 	pop	{r2, r3}
  10cae4:	e12fff1e 	bx	lr

0010cae8 <__udivmoddi4>:
  10cae8:	e1510003 	cmp	r1, r3
  10caec:	e92d4030 	push	{r4, r5, lr}
  10caf0:	01500002 	cmpeq	r0, r2
  10caf4:	e59de00c 	ldr	lr, [sp, #12]
  10caf8:	3a000032 	bcc	10cbc8 <__udivmoddi4+0xe0>
  10cafc:	e3530000 	cmp	r3, #0
  10cb00:	ec432b30 	vmov	d16, r2, r3
  10cb04:	016fcf12 	clzeq	ip, r2
  10cb08:	116f4f13 	clzne	r4, r3
  10cb0c:	028c4020 	addeq	r4, ip, #32
  10cb10:	e3510000 	cmp	r1, #0
  10cb14:	016fcf10 	clzeq	ip, r0
  10cb18:	116fcf11 	clzne	ip, r1
  10cb1c:	028cc020 	addeq	ip, ip, #32
  10cb20:	e06cc004 	rsb	ip, ip, r4
  10cb24:	ee01cb90 	vmov.32	d17[0], ip
  10cb28:	f37104a0 	vshl.u64	d16, d16, d17
  10cb2c:	ec532b30 	vmov	r2, r3, d16
  10cb30:	e1510003 	cmp	r1, r3
  10cb34:	01500002 	cmpeq	r0, r2
  10cb38:	2a000027 	bcs	10cbdc <__udivmoddi4+0xf4>
  10cb3c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
  10cb40:	e35c0000 	cmp	ip, #0
  10cb44:	0a000020 	beq	10cbcc <__udivmoddi4+0xe4>
  10cb48:	e1b050a3 	lsrs	r5, r3, #1
  10cb4c:	e1a04062 	rrx	r4, r2
  10cb50:	e1a0300c 	mov	r3, ip
  10cb54:	ea000007 	b	10cb78 <__udivmoddi4+0x90>
  10cb58:	e0500004 	subs	r0, r0, r4
  10cb5c:	e0c11005 	sbc	r1, r1, r5
  10cb60:	e0900000 	adds	r0, r0, r0
  10cb64:	e0a11001 	adc	r1, r1, r1
  10cb68:	e2900001 	adds	r0, r0, #1
  10cb6c:	e2a11000 	adc	r1, r1, #0
  10cb70:	e2533001 	subs	r3, r3, #1
  10cb74:	0a000006 	beq	10cb94 <__udivmoddi4+0xac>
  10cb78:	e1510005 	cmp	r1, r5
  10cb7c:	01500004 	cmpeq	r0, r4
  10cb80:	2afffff4 	bcs	10cb58 <__udivmoddi4+0x70>
  10cb84:	e0900000 	adds	r0, r0, r0
  10cb88:	e0a11001 	adc	r1, r1, r1
  10cb8c:	e2533001 	subs	r3, r3, #1
  10cb90:	1afffff8 	bne	10cb78 <__udivmoddi4+0x90>
  10cb94:	ec410b31 	vmov	d17, r0, r1
  10cb98:	e1a00c30 	lsr	r0, r0, ip
  10cb9c:	e26c3020 	rsb	r3, ip, #32
  10cba0:	ee02cb90 	vmov.32	d18[0], ip
  10cba4:	e1800311 	orr	r0, r0, r1, lsl r3
  10cba8:	e24c2020 	sub	r2, ip, #32
  10cbac:	f27008a1 	vadd.i64	d16, d16, d17
  10cbb0:	e1800231 	orr	r0, r0, r1, lsr r2
  10cbb4:	e1a01c31 	lsr	r1, r1, ip
  10cbb8:	ec410b31 	vmov	d17, r0, r1
  10cbbc:	f37214a1 	vshl.u64	d17, d17, d18
  10cbc0:	f37008a1 	vsub.i64	d16, d16, d17
  10cbc4:	ea000000 	b	10cbcc <__udivmoddi4+0xe4>
  10cbc8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
  10cbcc:	e35e0000 	cmp	lr, #0
  10cbd0:	11ce00f0 	strdne	r0, [lr]
  10cbd4:	ec510b30 	vmov	r0, r1, d16
  10cbd8:	e8bd8030 	pop	{r4, r5, pc}
  10cbdc:	eddf0b05 	vldr	d16, [pc, #20]	; 10cbf8 <__udivmoddi4+0x110>
  10cbe0:	e0500002 	subs	r0, r0, r2
  10cbe4:	e0c11003 	sbc	r1, r1, r3
  10cbe8:	ee01cb90 	vmov.32	d17[0], ip
  10cbec:	f37104a0 	vshl.u64	d16, d16, d17
  10cbf0:	eaffffd2 	b	10cb40 <__udivmoddi4+0x58>
  10cbf4:	e320f000 	nop	{0}
  10cbf8:	00000001 	andeq	r0, r0, r1
  10cbfc:	00000000 	andeq	r0, r0, r0

0010cc00 <atexit>:
  10cc00:	e3a03000 	mov	r3, #0
  10cc04:	e1a01000 	mov	r1, r0
  10cc08:	e1a02003 	mov	r2, r3
  10cc0c:	e1a00003 	mov	r0, r3
  10cc10:	ea000a35 	b	10f4ec <__register_exitproc>

0010cc14 <exit>:
  10cc14:	e92d4010 	push	{r4, lr}
  10cc18:	e3a01000 	mov	r1, #0
  10cc1c:	e1a04000 	mov	r4, r0
  10cc20:	eb000a73 	bl	10f5f4 <__call_exitprocs>
  10cc24:	e3073390 	movw	r3, #29584	; 0x7390
  10cc28:	e3403011 	movt	r3, #17
  10cc2c:	e5930000 	ldr	r0, [r3]
  10cc30:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
  10cc34:	e3530000 	cmp	r3, #0
  10cc38:	0a000000 	beq	10cc40 <exit+0x2c>
  10cc3c:	e12fff33 	blx	r3
  10cc40:	e1a00004 	mov	r0, r4
  10cc44:	eb00263b 	bl	116538 <_exit>

0010cc48 <_printf_r>:
  10cc48:	e92d000e 	push	{r1, r2, r3}
  10cc4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  10cc50:	e24dd008 	sub	sp, sp, #8
  10cc54:	e28dc010 	add	ip, sp, #16
  10cc58:	e1a0300c 	mov	r3, ip
  10cc5c:	e59d200c 	ldr	r2, [sp, #12]
  10cc60:	e5901008 	ldr	r1, [r0, #8]
  10cc64:	e58dc004 	str	ip, [sp, #4]
  10cc68:	eb0000bc 	bl	10cf60 <_vfprintf_r>
  10cc6c:	e28dd008 	add	sp, sp, #8
  10cc70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  10cc74:	e28dd00c 	add	sp, sp, #12
  10cc78:	e12fff1e 	bx	lr

0010cc7c <printf>:
  10cc7c:	e92d000f 	push	{r0, r1, r2, r3}
  10cc80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  10cc84:	e24dd00c 	sub	sp, sp, #12
  10cc88:	eb0013e1 	bl	111c14 <__getreent>
  10cc8c:	e28dc014 	add	ip, sp, #20
  10cc90:	e5901008 	ldr	r1, [r0, #8]
  10cc94:	e59d2010 	ldr	r2, [sp, #16]
  10cc98:	e1a0300c 	mov	r3, ip
  10cc9c:	e58dc004 	str	ip, [sp, #4]
  10cca0:	eb0000ae 	bl	10cf60 <_vfprintf_r>
  10cca4:	e28dd00c 	add	sp, sp, #12
  10cca8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  10ccac:	e28dd010 	add	sp, sp, #16
  10ccb0:	e12fff1e 	bx	lr

0010ccb4 <_puts_r>:
  10ccb4:	e92d4030 	push	{r4, r5, lr}
  10ccb8:	e1a05000 	mov	r5, r0
  10ccbc:	e24dd024 	sub	sp, sp, #36	; 0x24
  10ccc0:	e1a00001 	mov	r0, r1
  10ccc4:	e1a04001 	mov	r4, r1
  10ccc8:	fa00005c 	blx	10ce40 <strlen>
  10cccc:	e3073030 	movw	r3, #28720	; 0x7030
  10ccd0:	e3550000 	cmp	r5, #0
  10ccd4:	e280e001 	add	lr, r0, #1
  10ccd8:	e3403011 	movt	r3, #17
  10ccdc:	e3a0c001 	mov	ip, #1
  10cce0:	e28d1010 	add	r1, sp, #16
  10cce4:	e3a02002 	mov	r2, #2
  10cce8:	e58d4010 	str	r4, [sp, #16]
  10ccec:	e58d0014 	str	r0, [sp, #20]
  10ccf0:	e58de00c 	str	lr, [sp, #12]
  10ccf4:	e58d3018 	str	r3, [sp, #24]
  10ccf8:	e58dc01c 	str	ip, [sp, #28]
  10ccfc:	e98d0006 	stmib	sp, {r1, r2}
  10cd00:	0a000002 	beq	10cd10 <_puts_r+0x5c>
  10cd04:	e5953038 	ldr	r3, [r5, #56]	; 0x38
  10cd08:	e3530000 	cmp	r3, #0
  10cd0c:	0a000022 	beq	10cd9c <_puts_r+0xe8>
  10cd10:	e5954008 	ldr	r4, [r5, #8]
  10cd14:	e5943064 	ldr	r3, [r4, #100]	; 0x64
  10cd18:	e3130001 	tst	r3, #1
  10cd1c:	e1d430bc 	ldrh	r3, [r4, #12]
  10cd20:	e6ff2073 	uxth	r2, r3
  10cd24:	1a000001 	bne	10cd30 <_puts_r+0x7c>
  10cd28:	e3120c02 	tst	r2, #512	; 0x200
  10cd2c:	0a00001d 	beq	10cda8 <_puts_r+0xf4>
  10cd30:	e3120a02 	tst	r2, #8192	; 0x2000
  10cd34:	e1a00005 	mov	r0, r5
  10cd38:	05942064 	ldreq	r2, [r4, #100]	; 0x64
  10cd3c:	03833a02 	orreq	r3, r3, #8192	; 0x2000
  10cd40:	01c430bc 	strheq	r3, [r4, #12]
  10cd44:	e1a01004 	mov	r1, r4
  10cd48:	03c23a02 	biceq	r3, r2, #8192	; 0x2000
  10cd4c:	e28d2004 	add	r2, sp, #4
  10cd50:	05843064 	streq	r3, [r4, #100]	; 0x64
  10cd54:	eb001247 	bl	111678 <__sfvwrite_r>
  10cd58:	e5943064 	ldr	r3, [r4, #100]	; 0x64
  10cd5c:	e3500000 	cmp	r0, #0
  10cd60:	03a0500a 	moveq	r5, #10
  10cd64:	13e05000 	mvnne	r5, #0
  10cd68:	e3130001 	tst	r3, #1
  10cd6c:	1a000002 	bne	10cd7c <_puts_r+0xc8>
  10cd70:	e1d430bc 	ldrh	r3, [r4, #12]
  10cd74:	e3130c02 	tst	r3, #512	; 0x200
  10cd78:	0a000002 	beq	10cd88 <_puts_r+0xd4>
  10cd7c:	e1a00005 	mov	r0, r5
  10cd80:	e28dd024 	add	sp, sp, #36	; 0x24
  10cd84:	e8bd8030 	pop	{r4, r5, pc}
  10cd88:	e2840058 	add	r0, r4, #88	; 0x58
  10cd8c:	eb00258f 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10cd90:	e1a00005 	mov	r0, r5
  10cd94:	e28dd024 	add	sp, sp, #36	; 0x24
  10cd98:	e8bd8030 	pop	{r4, r5, pc}
  10cd9c:	e1a00005 	mov	r0, r5
  10cda0:	eb00109e 	bl	111020 <__sinit>
  10cda4:	eaffffd9 	b	10cd10 <_puts_r+0x5c>
  10cda8:	e2840058 	add	r0, r4, #88	; 0x58
  10cdac:	eb002589 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  10cdb0:	e1d430bc 	ldrh	r3, [r4, #12]
  10cdb4:	e6ff2073 	uxth	r2, r3
  10cdb8:	eaffffdc 	b	10cd30 <_puts_r+0x7c>

0010cdbc <puts>:
  10cdbc:	e92d4010 	push	{r4, lr}
  10cdc0:	e1a04000 	mov	r4, r0
  10cdc4:	eb001392 	bl	111c14 <__getreent>
  10cdc8:	e1a01004 	mov	r1, r4
  10cdcc:	e8bd4010 	pop	{r4, lr}
  10cdd0:	eaffffb7 	b	10ccb4 <_puts_r>

0010cdd4 <srand>:
  10cdd4:	e92d4010 	push	{r4, lr}
  10cdd8:	e1a04000 	mov	r4, r0
  10cddc:	eb00138c 	bl	111c14 <__getreent>
  10cde0:	e3a03000 	mov	r3, #0
  10cde4:	e58040a8 	str	r4, [r0, #168]	; 0xa8
  10cde8:	e58030ac 	str	r3, [r0, #172]	; 0xac
  10cdec:	e8bd8010 	pop	{r4, pc}

0010cdf0 <rand>:
  10cdf0:	e92d4010 	push	{r4, lr}
  10cdf4:	eb001386 	bl	111c14 <__getreent>
  10cdf8:	e30f342d 	movw	r3, #62509	; 0xf42d
  10cdfc:	e307ef2d 	movw	lr, #32557	; 0x7f2d
  10ce00:	e59020a8 	ldr	r2, [r0, #168]	; 0xa8
  10ce04:	e3453851 	movt	r3, #22609	; 0x5851
  10ce08:	e590c0ac 	ldr	ip, [r0, #172]	; 0xac
  10ce0c:	e344ec95 	movt	lr, #19605	; 0x4c95
  10ce10:	e0010293 	mul	r1, r3, r2
  10ce14:	e0832e92 	umull	r2, r3, r2, lr
  10ce18:	e0211c9e 	mla	r1, lr, ip, r1
  10ce1c:	e2922001 	adds	r2, r2, #1
  10ce20:	e0813003 	add	r3, r1, r3
  10ce24:	e2a33000 	adc	r3, r3, #0
  10ce28:	e1c02af8 	strd	r2, [r0, #168]	; 0xa8
  10ce2c:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
  10ce30:	e8bd8010 	pop	{r4, pc}
	...

0010ce40 <strlen>:
  10ce40:	f890 f000 	pld	[r0]
  10ce44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  10ce48:	f020 0107 	bic.w	r1, r0, #7
  10ce4c:	f06f 0c00 	mvn.w	ip, #0
  10ce50:	f010 0407 	ands.w	r4, r0, #7
  10ce54:	f891 f020 	pld	[r1, #32]
  10ce58:	f040 8049 	bne.w	10ceee <strlen+0xae>
  10ce5c:	f04f 0400 	mov.w	r4, #0
  10ce60:	f06f 0007 	mvn.w	r0, #7
  10ce64:	e9d1 2300 	ldrd	r2, r3, [r1]
  10ce68:	f891 f040 	pld	[r1, #64]	; 0x40
  10ce6c:	f100 0008 	add.w	r0, r0, #8
  10ce70:	fa82 f24c 	uadd8	r2, r2, ip
  10ce74:	faa4 f28c 	sel	r2, r4, ip
  10ce78:	fa83 f34c 	uadd8	r3, r3, ip
  10ce7c:	faa2 f38c 	sel	r3, r2, ip
  10ce80:	bb4b      	cbnz	r3, 10ced6 <strlen+0x96>
  10ce82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  10ce86:	fa82 f24c 	uadd8	r2, r2, ip
  10ce8a:	f100 0008 	add.w	r0, r0, #8
  10ce8e:	faa4 f28c 	sel	r2, r4, ip
  10ce92:	fa83 f34c 	uadd8	r3, r3, ip
  10ce96:	faa2 f38c 	sel	r3, r2, ip
  10ce9a:	b9e3      	cbnz	r3, 10ced6 <strlen+0x96>
  10ce9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  10cea0:	fa82 f24c 	uadd8	r2, r2, ip
  10cea4:	f100 0008 	add.w	r0, r0, #8
  10cea8:	faa4 f28c 	sel	r2, r4, ip
  10ceac:	fa83 f34c 	uadd8	r3, r3, ip
  10ceb0:	faa2 f38c 	sel	r3, r2, ip
  10ceb4:	b97b      	cbnz	r3, 10ced6 <strlen+0x96>
  10ceb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  10ceba:	f101 0120 	add.w	r1, r1, #32
  10cebe:	fa82 f24c 	uadd8	r2, r2, ip
  10cec2:	f100 0008 	add.w	r0, r0, #8
  10cec6:	faa4 f28c 	sel	r2, r4, ip
  10ceca:	fa83 f34c 	uadd8	r3, r3, ip
  10cece:	faa2 f38c 	sel	r3, r2, ip
  10ced2:	2b00      	cmp	r3, #0
  10ced4:	d0c6      	beq.n	10ce64 <strlen+0x24>
  10ced6:	2a00      	cmp	r2, #0
  10ced8:	bf04      	itt	eq
  10ceda:	3004      	addeq	r0, #4
  10cedc:	461a      	moveq	r2, r3
  10cede:	ba12      	rev	r2, r2
  10cee0:	fab2 f282 	clz	r2, r2
  10cee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  10cee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  10ceec:	4770      	bx	lr
  10ceee:	e9d1 2300 	ldrd	r2, r3, [r1]
  10cef2:	f004 0503 	and.w	r5, r4, #3
  10cef6:	f1c4 0000 	rsb	r0, r4, #0
  10cefa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  10cefe:	f014 0f04 	tst.w	r4, #4
  10cf02:	f891 f040 	pld	[r1, #64]	; 0x40
  10cf06:	fa0c f505 	lsl.w	r5, ip, r5
  10cf0a:	ea62 0205 	orn	r2, r2, r5
  10cf0e:	bf1c      	itt	ne
  10cf10:	ea63 0305 	ornne	r3, r3, r5
  10cf14:	4662      	movne	r2, ip
  10cf16:	f04f 0400 	mov.w	r4, #0
  10cf1a:	e7a9      	b.n	10ce70 <strlen+0x30>

0010cf1c <time>:
  10cf1c:	e92d4010 	push	{r4, lr}
  10cf20:	e24dd008 	sub	sp, sp, #8
  10cf24:	e1a04000 	mov	r4, r0
  10cf28:	eb001339 	bl	111c14 <__getreent>
  10cf2c:	e3a02000 	mov	r2, #0
  10cf30:	e1a0100d 	mov	r1, sp
  10cf34:	eb00133a 	bl	111c24 <_gettimeofday_r>
  10cf38:	e3500000 	cmp	r0, #0
  10cf3c:	ba000004 	blt	10cf54 <time+0x38>
  10cf40:	e59d0000 	ldr	r0, [sp]
  10cf44:	e3540000 	cmp	r4, #0
  10cf48:	15840000 	strne	r0, [r4]
  10cf4c:	e28dd008 	add	sp, sp, #8
  10cf50:	e8bd8010 	pop	{r4, pc}
  10cf54:	e3e00000 	mvn	r0, #0
  10cf58:	eafffffb 	b	10cf4c <time+0x30>
  10cf5c:	00000000 	andeq	r0, r0, r0

0010cf60 <_vfprintf_r>:
  10cf60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10cf64:	e1a04003 	mov	r4, r3
  10cf68:	ed2d8b04 	vpush	{d8-d9}
  10cf6c:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  10cf70:	e1a08001 	mov	r8, r1
  10cf74:	e1a06002 	mov	r6, r2
  10cf78:	e1a0b000 	mov	fp, r0
  10cf7c:	eb001362 	bl	111d0c <_localeconv_r>
  10cf80:	e5903000 	ldr	r3, [r0]
  10cf84:	e58d403c 	str	r4, [sp, #60]	; 0x3c
  10cf88:	e1a00003 	mov	r0, r3
  10cf8c:	e58d3058 	str	r3, [sp, #88]	; 0x58
  10cf90:	faffffaa 	blx	10ce40 <strlen>
  10cf94:	e35b0000 	cmp	fp, #0
  10cf98:	e58d005c 	str	r0, [sp, #92]	; 0x5c
  10cf9c:	0a000002 	beq	10cfac <_vfprintf_r+0x4c>
  10cfa0:	e59b3038 	ldr	r3, [fp, #56]	; 0x38
  10cfa4:	e3530000 	cmp	r3, #0
  10cfa8:	0a0000d9 	beq	10d314 <_vfprintf_r+0x3b4>
  10cfac:	e5983064 	ldr	r3, [r8, #100]	; 0x64
  10cfb0:	e3130001 	tst	r3, #1
  10cfb4:	e1d830bc 	ldrh	r3, [r8, #12]
  10cfb8:	e6ff1073 	uxth	r1, r3
  10cfbc:	1a000001 	bne	10cfc8 <_vfprintf_r+0x68>
  10cfc0:	e3110c02 	tst	r1, #512	; 0x200
  10cfc4:	0a0000e9 	beq	10d370 <_vfprintf_r+0x410>
  10cfc8:	e3110a02 	tst	r1, #8192	; 0x2000
  10cfcc:	1a000005 	bne	10cfe8 <_vfprintf_r+0x88>
  10cfd0:	e5982064 	ldr	r2, [r8, #100]	; 0x64
  10cfd4:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  10cfd8:	e6ff1073 	uxth	r1, r3
  10cfdc:	e1c830bc 	strh	r3, [r8, #12]
  10cfe0:	e3c23a02 	bic	r3, r2, #8192	; 0x2000
  10cfe4:	e5883064 	str	r3, [r8, #100]	; 0x64
  10cfe8:	e3110008 	tst	r1, #8
  10cfec:	0a00009c 	beq	10d264 <_vfprintf_r+0x304>
  10cff0:	e5983010 	ldr	r3, [r8, #16]
  10cff4:	e3530000 	cmp	r3, #0
  10cff8:	0a000099 	beq	10d264 <_vfprintf_r+0x304>
  10cffc:	e201301a 	and	r3, r1, #26
  10d000:	e353000a 	cmp	r3, #10
  10d004:	0a0000c5 	beq	10d320 <_vfprintf_r+0x3c0>
  10d008:	ed9f8be6 	vldr	d8, [pc, #920]	; 10d3a8 <_vfprintf_r+0x448>
  10d00c:	e28da0c8 	add	sl, sp, #200	; 0xc8
  10d010:	e3071034 	movw	r1, #28724	; 0x7034
  10d014:	e3060667 	movw	r0, #26215	; 0x6667
  10d018:	e58db02c 	str	fp, [sp, #44]	; 0x2c
  10d01c:	e1a0900a 	mov	r9, sl
  10d020:	e1a0b008 	mov	fp, r8
  10d024:	e3a03000 	mov	r3, #0
  10d028:	e3401011 	movt	r1, #17
  10d02c:	e3460666 	movt	r0, #26214	; 0x6666
  10d030:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10d034:	e58d3068 	str	r3, [sp, #104]	; 0x68
  10d038:	e58d3030 	str	r3, [sp, #48]	; 0x30
  10d03c:	e58d1054 	str	r1, [sp, #84]	; 0x54
  10d040:	e58d006c 	str	r0, [sp, #108]	; 0x6c
  10d044:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10d048:	e58d3098 	str	r3, [sp, #152]	; 0x98
  10d04c:	e58da094 	str	sl, [sp, #148]	; 0x94
  10d050:	e5d63000 	ldrb	r3, [r6]
  10d054:	e1a04006 	mov	r4, r6
  10d058:	e3530000 	cmp	r3, #0
  10d05c:	13530025 	cmpne	r3, #37	; 0x25
  10d060:	0a000013 	beq	10d0b4 <_vfprintf_r+0x154>
  10d064:	e5f43001 	ldrb	r3, [r4, #1]!
  10d068:	e3530000 	cmp	r3, #0
  10d06c:	13530025 	cmpne	r3, #37	; 0x25
  10d070:	1afffffb 	bne	10d064 <_vfprintf_r+0x104>
  10d074:	e0545006 	subs	r5, r4, r6
  10d078:	0a00000d 	beq	10d0b4 <_vfprintf_r+0x154>
  10d07c:	e59d3098 	ldr	r3, [sp, #152]	; 0x98
  10d080:	e59d209c 	ldr	r2, [sp, #156]	; 0x9c
  10d084:	e5896000 	str	r6, [r9]
  10d088:	e2833001 	add	r3, r3, #1
  10d08c:	e5895004 	str	r5, [r9, #4]
  10d090:	e3530007 	cmp	r3, #7
  10d094:	e0822005 	add	r2, r2, r5
  10d098:	e58d3098 	str	r3, [sp, #152]	; 0x98
  10d09c:	d2899008 	addle	r9, r9, #8
  10d0a0:	e58d209c 	str	r2, [sp, #156]	; 0x9c
  10d0a4:	ca00007f 	bgt	10d2a8 <_vfprintf_r+0x348>
  10d0a8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  10d0ac:	e0833005 	add	r3, r3, r5
  10d0b0:	e58d3030 	str	r3, [sp, #48]	; 0x30
  10d0b4:	e5d43000 	ldrb	r3, [r4]
  10d0b8:	e3530000 	cmp	r3, #0
  10d0bc:	0a000713 	beq	10ed10 <_vfprintf_r+0x1db0>
  10d0c0:	e3a03000 	mov	r3, #0
  10d0c4:	e2846001 	add	r6, r4, #1
  10d0c8:	e1a02003 	mov	r2, r3
  10d0cc:	e5cd3077 	strb	r3, [sp, #119]	; 0x77
  10d0d0:	e1a01003 	mov	r1, r3
  10d0d4:	e58d3034 	str	r3, [sp, #52]	; 0x34
  10d0d8:	e58d301c 	str	r3, [sp, #28]
  10d0dc:	e5d43001 	ldrb	r3, [r4, #1]
  10d0e0:	e3e00000 	mvn	r0, #0
  10d0e4:	e58d0028 	str	r0, [sp, #40]	; 0x28
  10d0e8:	e2866001 	add	r6, r6, #1
  10d0ec:	e1a07003 	mov	r7, r3
  10d0f0:	e2473020 	sub	r3, r7, #32
  10d0f4:	e3530058 	cmp	r3, #88	; 0x58
  10d0f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  10d0fc:	ea0002d6 	b	10dc5c <_vfprintf_r+0xcfc>
  10d100:	0010da20 	andseq	sp, r0, r0, lsr #20
  10d104:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d108:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d10c:	0010d934 	andseq	sp, r0, r4, lsr r9
  10d110:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d114:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d118:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d11c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d120:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d124:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d128:	0010d948 	andseq	sp, r0, r8, asr #18
  10d12c:	0010d728 	andseq	sp, r0, r8, lsr #14
  10d130:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d134:	0010d394 	mulseq	r0, r4, r3
  10d138:	0010d8d4 			; <UNDEFINED> instruction: 0x0010d8d4
  10d13c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d140:	0010d920 	andseq	sp, r0, r0, lsr #18
  10d144:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d148:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d14c:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d150:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d154:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d158:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d15c:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d160:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d164:	0010d96c 	andseq	sp, r0, ip, ror #18
  10d168:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d16c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d170:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d174:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d178:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d17c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d180:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d184:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d188:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d18c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d190:	0010d998 	mulseq	r0, r8, r9
  10d194:	0010d670 	andseq	sp, r0, r0, ror r6
  10d198:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d19c:	0010d670 	andseq	sp, r0, r0, ror r6
  10d1a0:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1a4:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1a8:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1ac:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1b0:	0010d714 	andseq	sp, r0, r4, lsl r7
  10d1b4:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1b8:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1bc:	0010d738 	andseq	sp, r0, r8, lsr r7
  10d1c0:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1c4:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1c8:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1cc:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1d0:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1d4:	0010d80c 	andseq	sp, r0, ip, lsl #16
  10d1d8:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1dc:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1e0:	0010d894 	mulseq	r0, r4, r8
  10d1e4:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1e8:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1ec:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1f0:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1f4:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1f8:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d1fc:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d200:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d204:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d208:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d20c:	0010da34 	andseq	sp, r0, r4, lsr sl
  10d210:	0010da74 	andseq	sp, r0, r4, ror sl
  10d214:	0010d670 	andseq	sp, r0, r0, ror r6
  10d218:	0010d670 	andseq	sp, r0, r0, ror r6
  10d21c:	0010d670 	andseq	sp, r0, r0, ror r6
  10d220:	0010dabc 			; <UNDEFINED> instruction: 0x0010dabc
  10d224:	0010da74 	andseq	sp, r0, r4, ror sl
  10d228:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d22c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d230:	0010dad0 			; <UNDEFINED> instruction: 0x0010dad0
  10d234:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d238:	0010dafc 			; <UNDEFINED> instruction: 0x0010dafc
  10d23c:	0010db34 	andseq	sp, r0, r4, lsr fp
  10d240:	0010dbcc 	andseq	sp, r0, ip, asr #23
  10d244:	0010dc48 	andseq	sp, r0, r8, asr #24
  10d248:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d24c:	0010d588 	andseq	sp, r0, r8, lsl #11
  10d250:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d254:	0010d5f4 			; <UNDEFINED> instruction: 0x0010d5f4
  10d258:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d25c:	0010dc5c 	andseq	sp, r0, ip, asr ip
  10d260:	0010d3b4 			; <UNDEFINED> instruction: 0x0010d3b4
  10d264:	e1a01008 	mov	r1, r8
  10d268:	e1a0000b 	mov	r0, fp
  10d26c:	eb00084a 	bl	10f39c <__swsetup_r>
  10d270:	e3500000 	cmp	r0, #0
  10d274:	0a00003b 	beq	10d368 <_vfprintf_r+0x408>
  10d278:	e5983064 	ldr	r3, [r8, #100]	; 0x64
  10d27c:	e3130001 	tst	r3, #1
  10d280:	1a000004 	bne	10d298 <_vfprintf_r+0x338>
  10d284:	e1d830bc 	ldrh	r3, [r8, #12]
  10d288:	e3130c02 	tst	r3, #512	; 0x200
  10d28c:	1a000001 	bne	10d298 <_vfprintf_r+0x338>
  10d290:	e2880058 	add	r0, r8, #88	; 0x58
  10d294:	eb00244d 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10d298:	e3e00000 	mvn	r0, #0
  10d29c:	e28ddf43 	add	sp, sp, #268	; 0x10c
  10d2a0:	ecbd8b04 	vpop	{d8-d9}
  10d2a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10d2a8:	e28d2094 	add	r2, sp, #148	; 0x94
  10d2ac:	e1a0100b 	mov	r1, fp
  10d2b0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10d2b4:	eb001c31 	bl	114380 <__sprint_r>
  10d2b8:	e3500000 	cmp	r0, #0
  10d2bc:	1a000007 	bne	10d2e0 <_vfprintf_r+0x380>
  10d2c0:	e1a0900a 	mov	r9, sl
  10d2c4:	eaffff77 	b	10d0a8 <_vfprintf_r+0x148>
  10d2c8:	e28d2094 	add	r2, sp, #148	; 0x94
  10d2cc:	e1a0100b 	mov	r1, fp
  10d2d0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10d2d4:	eb001c29 	bl	114380 <__sprint_r>
  10d2d8:	e3500000 	cmp	r0, #0
  10d2dc:	0a000322 	beq	10df6c <_vfprintf_r+0x100c>
  10d2e0:	e1a0800b 	mov	r8, fp
  10d2e4:	e5983064 	ldr	r3, [r8, #100]	; 0x64
  10d2e8:	e3130001 	tst	r3, #1
  10d2ec:	e1d830bc 	ldrh	r3, [r8, #12]
  10d2f0:	1a000001 	bne	10d2fc <_vfprintf_r+0x39c>
  10d2f4:	e3130c02 	tst	r3, #512	; 0x200
  10d2f8:	0a000472 	beq	10e4c8 <_vfprintf_r+0x1568>
  10d2fc:	e3130040 	tst	r3, #64	; 0x40
  10d300:	1affffe4 	bne	10d298 <_vfprintf_r+0x338>
  10d304:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
  10d308:	e28ddf43 	add	sp, sp, #268	; 0x10c
  10d30c:	ecbd8b04 	vpop	{d8-d9}
  10d310:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10d314:	e1a0000b 	mov	r0, fp
  10d318:	eb000f40 	bl	111020 <__sinit>
  10d31c:	eaffff22 	b	10cfac <_vfprintf_r+0x4c>
  10d320:	e1d830fe 	ldrsh	r3, [r8, #14]
  10d324:	e3530000 	cmp	r3, #0
  10d328:	baffff36 	blt	10d008 <_vfprintf_r+0xa8>
  10d32c:	e5983064 	ldr	r3, [r8, #100]	; 0x64
  10d330:	e3130001 	tst	r3, #1
  10d334:	1a000003 	bne	10d348 <_vfprintf_r+0x3e8>
  10d338:	e3110c02 	tst	r1, #512	; 0x200
  10d33c:	1a000001 	bne	10d348 <_vfprintf_r+0x3e8>
  10d340:	e2880058 	add	r0, r8, #88	; 0x58
  10d344:	eb002421 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10d348:	e1a03004 	mov	r3, r4
  10d34c:	e1a02006 	mov	r2, r6
  10d350:	e1a01008 	mov	r1, r8
  10d354:	e1a0000b 	mov	r0, fp
  10d358:	eb0007dc 	bl	10f2d0 <__sbprintf>
  10d35c:	e28ddf43 	add	sp, sp, #268	; 0x10c
  10d360:	ecbd8b04 	vpop	{d8-d9}
  10d364:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10d368:	e1d810bc 	ldrh	r1, [r8, #12]
  10d36c:	eaffff22 	b	10cffc <_vfprintf_r+0x9c>
  10d370:	e2880058 	add	r0, r8, #88	; 0x58
  10d374:	eb002417 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  10d378:	e1d830bc 	ldrh	r3, [r8, #12]
  10d37c:	e6ff1073 	uxth	r1, r3
  10d380:	eaffff10 	b	10cfc8 <_vfprintf_r+0x68>
  10d384:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  10d388:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  10d38c:	e2600000 	rsb	r0, r0, #0
  10d390:	e58d0034 	str	r0, [sp, #52]	; 0x34
  10d394:	e59d301c 	ldr	r3, [sp, #28]
  10d398:	e3833004 	orr	r3, r3, #4
  10d39c:	e58d301c 	str	r3, [sp, #28]
  10d3a0:	e5d63000 	ldrb	r3, [r6]
  10d3a4:	eaffff4f 	b	10d0e8 <_vfprintf_r+0x188>
	...
  10d3b0:	00117044 	andseq	r7, r1, r4, asr #32
  10d3b4:	e59d301c 	ldr	r3, [sp, #28]
  10d3b8:	e3520000 	cmp	r2, #0
  10d3bc:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d3c0:	e3070078 	movw	r0, #28792	; 0x7078
  10d3c4:	e3400011 	movt	r0, #17
  10d3c8:	e3130020 	tst	r3, #32
  10d3cc:	0a000137 	beq	10d8b0 <_vfprintf_r+0x950>
  10d3d0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d3d4:	e2838007 	add	r8, r3, #7
  10d3d8:	e3c83007 	bic	r3, r8, #7
  10d3dc:	e2832008 	add	r2, r3, #8
  10d3e0:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10d3e4:	e1c320d0 	ldrd	r2, [r3]
  10d3e8:	e59d101c 	ldr	r1, [sp, #28]
  10d3ec:	e2111001 	ands	r1, r1, #1
  10d3f0:	0a000413 	beq	10e444 <_vfprintf_r+0x14e4>
  10d3f4:	e1921003 	orrs	r1, r2, r3
  10d3f8:	0a0004eb 	beq	10e7ac <_vfprintf_r+0x184c>
  10d3fc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  10d400:	e3a0c030 	mov	ip, #48	; 0x30
  10d404:	e5cd7079 	strb	r7, [sp, #121]	; 0x79
  10d408:	e5cdc078 	strb	ip, [sp, #120]	; 0x78
  10d40c:	e3510000 	cmp	r1, #0
  10d410:	e3a01000 	mov	r1, #0
  10d414:	e5cd1077 	strb	r1, [sp, #119]	; 0x77
  10d418:	e59d101c 	ldr	r1, [sp, #28]
  10d41c:	a3c11080 	bicge	r1, r1, #128	; 0x80
  10d420:	e3811002 	orr	r1, r1, #2
  10d424:	e58d101c 	str	r1, [sp, #28]
  10d428:	e1a0100a 	mov	r1, sl
  10d42c:	e202c00f 	and	ip, r2, #15
  10d430:	e1a02222 	lsr	r2, r2, #4
  10d434:	e7d0c00c 	ldrb	ip, [r0, ip]
  10d438:	e1822e03 	orr	r2, r2, r3, lsl #28
  10d43c:	e1a03223 	lsr	r3, r3, #4
  10d440:	e192e003 	orrs	lr, r2, r3
  10d444:	e561c001 	strb	ip, [r1, #-1]!
  10d448:	1afffff7 	bne	10d42c <_vfprintf_r+0x4cc>
  10d44c:	e3a05000 	mov	r5, #0
  10d450:	e061300a 	rsb	r3, r1, sl
  10d454:	e58d1048 	str	r1, [sp, #72]	; 0x48
  10d458:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10d45c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  10d460:	e3a01000 	mov	r1, #0
  10d464:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10d468:	e58d104c 	str	r1, [sp, #76]	; 0x4c
  10d46c:	e1530002 	cmp	r3, r2
  10d470:	b1a03002 	movlt	r3, r2
  10d474:	e58d3020 	str	r3, [sp, #32]
  10d478:	e3550000 	cmp	r5, #0
  10d47c:	0a000002 	beq	10d48c <_vfprintf_r+0x52c>
  10d480:	e59d3020 	ldr	r3, [sp, #32]
  10d484:	e2833001 	add	r3, r3, #1
  10d488:	e58d3020 	str	r3, [sp, #32]
  10d48c:	e59d301c 	ldr	r3, [sp, #28]
  10d490:	e2133002 	ands	r3, r3, #2
  10d494:	e58d3040 	str	r3, [sp, #64]	; 0x40
  10d498:	159d3020 	ldrne	r3, [sp, #32]
  10d49c:	12833002 	addne	r3, r3, #2
  10d4a0:	158d3020 	strne	r3, [sp, #32]
  10d4a4:	e59d301c 	ldr	r3, [sp, #28]
  10d4a8:	e2133084 	ands	r3, r3, #132	; 0x84
  10d4ac:	e58d3044 	str	r3, [sp, #68]	; 0x44
  10d4b0:	1a0001fe 	bne	10dcb0 <_vfprintf_r+0xd50>
  10d4b4:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  10d4b8:	e59d2020 	ldr	r2, [sp, #32]
  10d4bc:	e0624003 	rsb	r4, r2, r3
  10d4c0:	e3540000 	cmp	r4, #0
  10d4c4:	da0001f9 	ble	10dcb0 <_vfprintf_r+0xd50>
  10d4c8:	e3540010 	cmp	r4, #16
  10d4cc:	da00064b 	ble	10ee00 <_vfprintf_r+0x1ea0>
  10d4d0:	e3075034 	movw	r5, #28724	; 0x7034
  10d4d4:	e58d6060 	str	r6, [sp, #96]	; 0x60
  10d4d8:	e3405011 	movt	r5, #17
  10d4dc:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
  10d4e0:	e58d5064 	str	r5, [sp, #100]	; 0x64
  10d4e4:	e3a08010 	mov	r8, #16
  10d4e8:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10d4ec:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
  10d4f0:	e59d6054 	ldr	r6, [sp, #84]	; 0x54
  10d4f4:	ea000002 	b	10d504 <_vfprintf_r+0x5a4>
  10d4f8:	e2444010 	sub	r4, r4, #16
  10d4fc:	e3540010 	cmp	r4, #16
  10d500:	da000013 	ble	10d554 <_vfprintf_r+0x5f4>
  10d504:	e2822001 	add	r2, r2, #1
  10d508:	e2811010 	add	r1, r1, #16
  10d50c:	e3520007 	cmp	r2, #7
  10d510:	e8890140 	stm	r9, {r6, r8}
  10d514:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10d518:	d2899008 	addle	r9, r9, #8
  10d51c:	e58d109c 	str	r1, [sp, #156]	; 0x9c
  10d520:	dafffff4 	ble	10d4f8 <_vfprintf_r+0x598>
  10d524:	e28d2094 	add	r2, sp, #148	; 0x94
  10d528:	e1a0100b 	mov	r1, fp
  10d52c:	e1a00005 	mov	r0, r5
  10d530:	e1a0900a 	mov	r9, sl
  10d534:	eb001b91 	bl	114380 <__sprint_r>
  10d538:	e3500000 	cmp	r0, #0
  10d53c:	1affff67 	bne	10d2e0 <_vfprintf_r+0x380>
  10d540:	e2444010 	sub	r4, r4, #16
  10d544:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
  10d548:	e3540010 	cmp	r4, #16
  10d54c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10d550:	caffffeb 	bgt	10d504 <_vfprintf_r+0x5a4>
  10d554:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
  10d558:	e59d5064 	ldr	r5, [sp, #100]	; 0x64
  10d55c:	e2822001 	add	r2, r2, #1
  10d560:	e0843001 	add	r3, r4, r1
  10d564:	e3520007 	cmp	r2, #7
  10d568:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10d56c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10d570:	e5895000 	str	r5, [r9]
  10d574:	e5894004 	str	r4, [r9, #4]
  10d578:	ca0001c4 	bgt	10dc90 <_vfprintf_r+0xd30>
  10d57c:	e2899008 	add	r9, r9, #8
  10d580:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10d584:	ea0001ca 	b	10dcb4 <_vfprintf_r+0xd54>
  10d588:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d58c:	e3a04000 	mov	r4, #0
  10d590:	e5cd4077 	strb	r4, [sp, #119]	; 0x77
  10d594:	e5932000 	ldr	r2, [r3]
  10d598:	e2838004 	add	r8, r3, #4
  10d59c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10d5a0:	e1520004 	cmp	r2, r4
  10d5a4:	e58d2048 	str	r2, [sp, #72]	; 0x48
  10d5a8:	0a00064f 	beq	10eeec <_vfprintf_r+0x1f8c>
  10d5ac:	e3530000 	cmp	r3, #0
  10d5b0:	ba00060c 	blt	10ede8 <_vfprintf_r+0x1e88>
  10d5b4:	e1a02003 	mov	r2, r3
  10d5b8:	e1a01004 	mov	r1, r4
  10d5bc:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10d5c0:	eb001431 	bl	11268c <memchr>
  10d5c4:	e3500000 	cmp	r0, #0
  10d5c8:	0a000690 	beq	10f010 <_vfprintf_r+0x20b0>
  10d5cc:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
  10d5d0:	e58d4028 	str	r4, [sp, #40]	; 0x28
  10d5d4:	e0633000 	rsb	r3, r3, r0
  10d5d8:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10d5dc:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10d5e0:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10d5e4:	e58d404c 	str	r4, [sp, #76]	; 0x4c
  10d5e8:	e58d3020 	str	r3, [sp, #32]
  10d5ec:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10d5f0:	eaffffa0 	b	10d478 <_vfprintf_r+0x518>
  10d5f4:	e3520000 	cmp	r2, #0
  10d5f8:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d5fc:	e59d101c 	ldr	r1, [sp, #28]
  10d600:	e2113020 	ands	r3, r1, #32
  10d604:	0a000088 	beq	10d82c <_vfprintf_r+0x8cc>
  10d608:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d60c:	e3a05000 	mov	r5, #0
  10d610:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  10d614:	e5cd5077 	strb	r5, [sp, #119]	; 0x77
  10d618:	e2838007 	add	r8, r3, #7
  10d61c:	e3c83007 	bic	r3, r8, #7
  10d620:	e3500000 	cmp	r0, #0
  10d624:	e2832008 	add	r2, r3, #8
  10d628:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10d62c:	e1c320d0 	ldrd	r2, [r3]
  10d630:	e1cd22f0 	strd	r2, [sp, #32]
  10d634:	ba000358 	blt	10e39c <_vfprintf_r+0x143c>
  10d638:	e1823003 	orr	r3, r2, r3
  10d63c:	e3c12080 	bic	r2, r1, #128	; 0x80
  10d640:	e1530005 	cmp	r3, r5
  10d644:	01500005 	cmpeq	r0, r5
  10d648:	e58d201c 	str	r2, [sp, #28]
  10d64c:	13a03001 	movne	r3, #1
  10d650:	03a03000 	moveq	r3, #0
  10d654:	1a000350 	bne	10e39c <_vfprintf_r+0x143c>
  10d658:	e1a05003 	mov	r5, r3
  10d65c:	e3a03000 	mov	r3, #0
  10d660:	e58da048 	str	sl, [sp, #72]	; 0x48
  10d664:	e58d3028 	str	r3, [sp, #40]	; 0x28
  10d668:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10d66c:	eaffff7a 	b	10d45c <_vfprintf_r+0x4fc>
  10d670:	e59d301c 	ldr	r3, [sp, #28]
  10d674:	e3520000 	cmp	r2, #0
  10d678:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d67c:	e3130008 	tst	r3, #8
  10d680:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d684:	e2838007 	add	r8, r3, #7
  10d688:	13c83007 	bicne	r3, r8, #7
  10d68c:	03c88007 	biceq	r8, r8, #7
  10d690:	1d938b00 	vldrne	d8, [r3]
  10d694:	12832008 	addne	r2, r3, #8
  10d698:	0d988b00 	vldreq	d8, [r8]
  10d69c:	02883008 	addeq	r3, r8, #8
  10d6a0:	158d203c 	strne	r2, [sp, #60]	; 0x3c
  10d6a4:	058d303c 	streq	r3, [sp, #60]	; 0x3c
  10d6a8:	ec510b18 	vmov	r0, r1, d8
  10d6ac:	eb0019f3 	bl	113e80 <__fpclassifyd>
  10d6b0:	e3500001 	cmp	r0, #1
  10d6b4:	1a000446 	bne	10e7d4 <_vfprintf_r+0x1874>
  10d6b8:	eeb58bc0 	vcmpe.f64	d8, #0.0
  10d6bc:	e3072058 	movw	r2, #28760	; 0x7058
  10d6c0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10d6c4:	e3402011 	movt	r2, #17
  10d6c8:	43a0302d 	movmi	r3, #45	; 0x2d
  10d6cc:	e59dc01c 	ldr	ip, [sp, #28]
  10d6d0:	41a05003 	movmi	r5, r3
  10d6d4:	45cd3077 	strbmi	r3, [sp, #119]	; 0x77
  10d6d8:	e3073054 	movw	r3, #28756	; 0x7054
  10d6dc:	55dd5077 	ldrbpl	r5, [sp, #119]	; 0x77
  10d6e0:	e3403011 	movt	r3, #17
  10d6e4:	e3570047 	cmp	r7, #71	; 0x47
  10d6e8:	e3a01003 	mov	r1, #3
  10d6ec:	e3a00000 	mov	r0, #0
  10d6f0:	e3ccc080 	bic	ip, ip, #128	; 0x80
  10d6f4:	d1a02003 	movle	r2, r3
  10d6f8:	e58d1020 	str	r1, [sp, #32]
  10d6fc:	e58d0028 	str	r0, [sp, #40]	; 0x28
  10d700:	e58dc01c 	str	ip, [sp, #28]
  10d704:	e58d2048 	str	r2, [sp, #72]	; 0x48
  10d708:	e58d1038 	str	r1, [sp, #56]	; 0x38
  10d70c:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  10d710:	eaffff58 	b	10d478 <_vfprintf_r+0x518>
  10d714:	e59d301c 	ldr	r3, [sp, #28]
  10d718:	e3833008 	orr	r3, r3, #8
  10d71c:	e58d301c 	str	r3, [sp, #28]
  10d720:	e5d63000 	ldrb	r3, [r6]
  10d724:	eafffe6f 	b	10d0e8 <_vfprintf_r+0x188>
  10d728:	e5d63000 	ldrb	r3, [r6]
  10d72c:	e3a02001 	mov	r2, #1
  10d730:	e3a0102b 	mov	r1, #43	; 0x2b
  10d734:	eafffe6b 	b	10d0e8 <_vfprintf_r+0x188>
  10d738:	e59d301c 	ldr	r3, [sp, #28]
  10d73c:	e3520000 	cmp	r2, #0
  10d740:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d744:	e3833010 	orr	r3, r3, #16
  10d748:	e58d301c 	str	r3, [sp, #28]
  10d74c:	e59d001c 	ldr	r0, [sp, #28]
  10d750:	e2103020 	ands	r3, r0, #32
  10d754:	0a0000fb 	beq	10db48 <_vfprintf_r+0xbe8>
  10d758:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d75c:	e3a01000 	mov	r1, #0
  10d760:	e5cd1077 	strb	r1, [sp, #119]	; 0x77
  10d764:	e2838007 	add	r8, r3, #7
  10d768:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10d76c:	e3530000 	cmp	r3, #0
  10d770:	e3c83007 	bic	r3, r8, #7
  10d774:	e2832008 	add	r2, r3, #8
  10d778:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10d77c:	e1c320d0 	ldrd	r2, [r3]
  10d780:	ba000006 	blt	10d7a0 <_vfprintf_r+0x840>
  10d784:	13a01001 	movne	r1, #1
  10d788:	e192c003 	orrs	ip, r2, r3
  10d78c:	13811001 	orrne	r1, r1, #1
  10d790:	e3c00080 	bic	r0, r0, #128	; 0x80
  10d794:	e3510000 	cmp	r1, #0
  10d798:	e58d001c 	str	r0, [sp, #28]
  10d79c:	0a0000fd 	beq	10db98 <_vfprintf_r+0xc38>
  10d7a0:	e1a0000a 	mov	r0, sl
  10d7a4:	e2021007 	and	r1, r2, #7
  10d7a8:	e1a021a2 	lsr	r2, r2, #3
  10d7ac:	e2811030 	add	r1, r1, #48	; 0x30
  10d7b0:	e1822e83 	orr	r2, r2, r3, lsl #29
  10d7b4:	e1a031a3 	lsr	r3, r3, #3
  10d7b8:	e5601001 	strb	r1, [r0, #-1]!
  10d7bc:	e192c003 	orrs	ip, r2, r3
  10d7c0:	1afffff7 	bne	10d7a4 <_vfprintf_r+0x844>
  10d7c4:	e59d501c 	ldr	r5, [sp, #28]
  10d7c8:	e3510030 	cmp	r1, #48	; 0x30
  10d7cc:	03a05000 	moveq	r5, #0
  10d7d0:	12055001 	andne	r5, r5, #1
  10d7d4:	e3550000 	cmp	r5, #0
  10d7d8:	0060300a 	rsbeq	r3, r0, sl
  10d7dc:	058d0048 	streq	r0, [sp, #72]	; 0x48
  10d7e0:	058d3038 	streq	r3, [sp, #56]	; 0x38
  10d7e4:	0affff1c 	beq	10d45c <_vfprintf_r+0x4fc>
  10d7e8:	e2403001 	sub	r3, r0, #1
  10d7ec:	e3a05000 	mov	r5, #0
  10d7f0:	e1a02003 	mov	r2, r3
  10d7f4:	e58d3048 	str	r3, [sp, #72]	; 0x48
  10d7f8:	e062200a 	rsb	r2, r2, sl
  10d7fc:	e3a03030 	mov	r3, #48	; 0x30
  10d800:	e58d2038 	str	r2, [sp, #56]	; 0x38
  10d804:	e5403001 	strb	r3, [r0, #-1]
  10d808:	eaffff13 	b	10d45c <_vfprintf_r+0x4fc>
  10d80c:	e59d301c 	ldr	r3, [sp, #28]
  10d810:	e3520000 	cmp	r2, #0
  10d814:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d818:	e3833010 	orr	r3, r3, #16
  10d81c:	e58d301c 	str	r3, [sp, #28]
  10d820:	e59d101c 	ldr	r1, [sp, #28]
  10d824:	e2113020 	ands	r3, r1, #32
  10d828:	1affff76 	bne	10d608 <_vfprintf_r+0x6a8>
  10d82c:	e59d101c 	ldr	r1, [sp, #28]
  10d830:	e2112010 	ands	r2, r1, #16
  10d834:	0a000453 	beq	10e988 <_vfprintf_r+0x1a28>
  10d838:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
  10d83c:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10d840:	e5cd3077 	strb	r3, [sp, #119]	; 0x77
  10d844:	e5902000 	ldr	r2, [r0]
  10d848:	e2808004 	add	r8, r0, #4
  10d84c:	e35c0000 	cmp	ip, #0
  10d850:	ee802b90 	vdup.32	d16, r2
  10d854:	f3e000b0 	vshr.u64	d16, d16, #32
  10d858:	edcd0b08 	vstr	d16, [sp, #32]
  10d85c:	ba0004e3 	blt	10ebf0 <_vfprintf_r+0x1c90>
  10d860:	e59d2020 	ldr	r2, [sp, #32]
  10d864:	13a05001 	movne	r5, #1
  10d868:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
  10d86c:	03a05000 	moveq	r5, #0
  10d870:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10d874:	e1922000 	orrs	r2, r2, r0
  10d878:	e3c12080 	bic	r2, r1, #128	; 0x80
  10d87c:	13855001 	orrne	r5, r5, #1
  10d880:	e58d201c 	str	r2, [sp, #28]
  10d884:	e3550000 	cmp	r5, #0
  10d888:	0affff73 	beq	10d65c <_vfprintf_r+0x6fc>
  10d88c:	e1a05003 	mov	r5, r3
  10d890:	ea0002c1 	b	10e39c <_vfprintf_r+0x143c>
  10d894:	e59d301c 	ldr	r3, [sp, #28]
  10d898:	e3520000 	cmp	r2, #0
  10d89c:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d8a0:	e3070064 	movw	r0, #28772	; 0x7064
  10d8a4:	e3400011 	movt	r0, #17
  10d8a8:	e3130020 	tst	r3, #32
  10d8ac:	1afffec7 	bne	10d3d0 <_vfprintf_r+0x470>
  10d8b0:	e59d301c 	ldr	r3, [sp, #28]
  10d8b4:	e3130010 	tst	r3, #16
  10d8b8:	0a000429 	beq	10e964 <_vfprintf_r+0x1a04>
  10d8bc:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d8c0:	e5932000 	ldr	r2, [r3]
  10d8c4:	e2833004 	add	r3, r3, #4
  10d8c8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  10d8cc:	e3a03000 	mov	r3, #0
  10d8d0:	eafffec4 	b	10d3e8 <_vfprintf_r+0x488>
  10d8d4:	e5d67000 	ldrb	r7, [r6]
  10d8d8:	e2860001 	add	r0, r6, #1
  10d8dc:	e357002a 	cmp	r7, #42	; 0x2a
  10d8e0:	0a000660 	beq	10f268 <_vfprintf_r+0x2308>
  10d8e4:	e247c030 	sub	ip, r7, #48	; 0x30
  10d8e8:	e1a06000 	mov	r6, r0
  10d8ec:	e35c0009 	cmp	ip, #9
  10d8f0:	e3a03000 	mov	r3, #0
  10d8f4:	8a000007 	bhi	10d918 <_vfprintf_r+0x9b8>
  10d8f8:	e1a00183 	lsl	r0, r3, #3
  10d8fc:	e4d67001 	ldrb	r7, [r6], #1
  10d900:	e0803083 	add	r3, r0, r3, lsl #1
  10d904:	e083300c 	add	r3, r3, ip
  10d908:	e247c030 	sub	ip, r7, #48	; 0x30
  10d90c:	e35c0009 	cmp	ip, #9
  10d910:	9afffff8 	bls	10d8f8 <_vfprintf_r+0x998>
  10d914:	e1833fc3 	orr	r3, r3, r3, asr #31
  10d918:	e58d3028 	str	r3, [sp, #40]	; 0x28
  10d91c:	eafffdf3 	b	10d0f0 <_vfprintf_r+0x190>
  10d920:	e59d301c 	ldr	r3, [sp, #28]
  10d924:	e3833080 	orr	r3, r3, #128	; 0x80
  10d928:	e58d301c 	str	r3, [sp, #28]
  10d92c:	e5d63000 	ldrb	r3, [r6]
  10d930:	eafffdec 	b	10d0e8 <_vfprintf_r+0x188>
  10d934:	e59d301c 	ldr	r3, [sp, #28]
  10d938:	e3833001 	orr	r3, r3, #1
  10d93c:	e58d301c 	str	r3, [sp, #28]
  10d940:	e5d63000 	ldrb	r3, [r6]
  10d944:	eafffde7 	b	10d0e8 <_vfprintf_r+0x188>
  10d948:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d94c:	e5930000 	ldr	r0, [r3]
  10d950:	e2833004 	add	r3, r3, #4
  10d954:	e3500000 	cmp	r0, #0
  10d958:	e58d0034 	str	r0, [sp, #52]	; 0x34
  10d95c:	bafffe88 	blt	10d384 <_vfprintf_r+0x424>
  10d960:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  10d964:	e5d63000 	ldrb	r3, [r6]
  10d968:	eafffdde 	b	10d0e8 <_vfprintf_r+0x188>
  10d96c:	e247c030 	sub	ip, r7, #48	; 0x30
  10d970:	e3a03000 	mov	r3, #0
  10d974:	e1a00183 	lsl	r0, r3, #3
  10d978:	e4d67001 	ldrb	r7, [r6], #1
  10d97c:	e0803083 	add	r3, r0, r3, lsl #1
  10d980:	e08c3003 	add	r3, ip, r3
  10d984:	e247c030 	sub	ip, r7, #48	; 0x30
  10d988:	e35c0009 	cmp	ip, #9
  10d98c:	9afffff8 	bls	10d974 <_vfprintf_r+0xa14>
  10d990:	e58d3034 	str	r3, [sp, #52]	; 0x34
  10d994:	eafffdd5 	b	10d0f0 <_vfprintf_r+0x190>
  10d998:	e59d301c 	ldr	r3, [sp, #28]
  10d99c:	e3520000 	cmp	r2, #0
  10d9a0:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10d9a4:	e3833010 	orr	r3, r3, #16
  10d9a8:	e58d301c 	str	r3, [sp, #28]
  10d9ac:	e59d301c 	ldr	r3, [sp, #28]
  10d9b0:	e3130020 	tst	r3, #32
  10d9b4:	0a000033 	beq	10da88 <_vfprintf_r+0xb28>
  10d9b8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10d9bc:	e2838007 	add	r8, r3, #7
  10d9c0:	e3c88007 	bic	r8, r8, #7
  10d9c4:	e1c820d0 	ldrd	r2, [r8]
  10d9c8:	e2881008 	add	r1, r8, #8
  10d9cc:	e58d103c 	str	r1, [sp, #60]	; 0x3c
  10d9d0:	e1cd22f0 	strd	r2, [sp, #32]
  10d9d4:	e3520000 	cmp	r2, #0
  10d9d8:	e2d33000 	sbcs	r3, r3, #0
  10d9dc:	ba000366 	blt	10e77c <_vfprintf_r+0x181c>
  10d9e0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10d9e4:	e3530000 	cmp	r3, #0
  10d9e8:	ba00026a 	blt	10e398 <_vfprintf_r+0x1438>
  10d9ec:	e1cd02d0 	ldrd	r0, [sp, #32]
  10d9f0:	13a03001 	movne	r3, #1
  10d9f4:	03a03000 	moveq	r3, #0
  10d9f8:	e1a02000 	mov	r2, r0
  10d9fc:	e1922001 	orrs	r2, r2, r1
  10da00:	e59d201c 	ldr	r2, [sp, #28]
  10da04:	13833001 	orrne	r3, r3, #1
  10da08:	e3530000 	cmp	r3, #0
  10da0c:	e3c22080 	bic	r2, r2, #128	; 0x80
  10da10:	e58d201c 	str	r2, [sp, #28]
  10da14:	1a00025f 	bne	10e398 <_vfprintf_r+0x1438>
  10da18:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10da1c:	eaffff0e 	b	10d65c <_vfprintf_r+0x6fc>
  10da20:	e3510000 	cmp	r1, #0
  10da24:	e5d63000 	ldrb	r3, [r6]
  10da28:	03a02001 	moveq	r2, #1
  10da2c:	03a01020 	moveq	r1, #32
  10da30:	eafffdac 	b	10d0e8 <_vfprintf_r+0x188>
  10da34:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
  10da38:	e3a00001 	mov	r0, #1
  10da3c:	e3a02000 	mov	r2, #0
  10da40:	e58d0020 	str	r0, [sp, #32]
  10da44:	e5cd2077 	strb	r2, [sp, #119]	; 0x77
  10da48:	e5913000 	ldr	r3, [r1]
  10da4c:	e2811004 	add	r1, r1, #4
  10da50:	e58d103c 	str	r1, [sp, #60]	; 0x3c
  10da54:	e58d0038 	str	r0, [sp, #56]	; 0x38
  10da58:	e5cd30a0 	strb	r3, [sp, #160]	; 0xa0
  10da5c:	e28d30a0 	add	r3, sp, #160	; 0xa0
  10da60:	e58d3048 	str	r3, [sp, #72]	; 0x48
  10da64:	e3a05000 	mov	r5, #0
  10da68:	e58d5028 	str	r5, [sp, #40]	; 0x28
  10da6c:	e58d504c 	str	r5, [sp, #76]	; 0x4c
  10da70:	eafffe85 	b	10d48c <_vfprintf_r+0x52c>
  10da74:	e59d301c 	ldr	r3, [sp, #28]
  10da78:	e3520000 	cmp	r2, #0
  10da7c:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10da80:	e3130020 	tst	r3, #32
  10da84:	1affffcb 	bne	10d9b8 <_vfprintf_r+0xa58>
  10da88:	e59d301c 	ldr	r3, [sp, #28]
  10da8c:	e3130010 	tst	r3, #16
  10da90:	1a000279 	bne	10e47c <_vfprintf_r+0x151c>
  10da94:	e59d301c 	ldr	r3, [sp, #28]
  10da98:	e3130040 	tst	r3, #64	; 0x40
  10da9c:	0a000276 	beq	10e47c <_vfprintf_r+0x151c>
  10daa0:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
  10daa4:	e1d120f0 	ldrsh	r2, [r1]
  10daa8:	e2811004 	add	r1, r1, #4
  10daac:	e58d103c 	str	r1, [sp, #60]	; 0x3c
  10dab0:	e1a03fc2 	asr	r3, r2, #31
  10dab4:	e1cd22f0 	strd	r2, [sp, #32]
  10dab8:	eaffffc5 	b	10d9d4 <_vfprintf_r+0xa74>
  10dabc:	e59d301c 	ldr	r3, [sp, #28]
  10dac0:	e3833040 	orr	r3, r3, #64	; 0x40
  10dac4:	e58d301c 	str	r3, [sp, #28]
  10dac8:	e5d63000 	ldrb	r3, [r6]
  10dacc:	eafffd85 	b	10d0e8 <_vfprintf_r+0x188>
  10dad0:	e5d63000 	ldrb	r3, [r6]
  10dad4:	e353006c 	cmp	r3, #108	; 0x6c
  10dad8:	059d301c 	ldreq	r3, [sp, #28]
  10dadc:	159d001c 	ldrne	r0, [sp, #28]
  10dae0:	03833020 	orreq	r3, r3, #32
  10dae4:	13800010 	orrne	r0, r0, #16
  10dae8:	058d301c 	streq	r3, [sp, #28]
  10daec:	158d001c 	strne	r0, [sp, #28]
  10daf0:	05d63001 	ldrbeq	r3, [r6, #1]
  10daf4:	02866001 	addeq	r6, r6, #1
  10daf8:	eafffd7a 	b	10d0e8 <_vfprintf_r+0x188>
  10dafc:	e59d301c 	ldr	r3, [sp, #28]
  10db00:	e3520000 	cmp	r2, #0
  10db04:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10db08:	e3130020 	tst	r3, #32
  10db0c:	0a0003cc 	beq	10ea44 <_vfprintf_r+0x1ae4>
  10db10:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  10db14:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  10db18:	ee801b90 	vdup.32	d16, r1
  10db1c:	e2822004 	add	r2, r2, #4
  10db20:	e5123004 	ldr	r3, [r2, #-4]
  10db24:	f2e000b0 	vshr.s64	d16, d16, #32
  10db28:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10db2c:	edc30b00 	vstr	d16, [r3]
  10db30:	eafffd46 	b	10d050 <_vfprintf_r+0xf0>
  10db34:	e59d001c 	ldr	r0, [sp, #28]
  10db38:	e3520000 	cmp	r2, #0
  10db3c:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10db40:	e2103020 	ands	r3, r0, #32
  10db44:	1affff03 	bne	10d758 <_vfprintf_r+0x7f8>
  10db48:	e59d001c 	ldr	r0, [sp, #28]
  10db4c:	e2102010 	ands	r2, r0, #16
  10db50:	0a0003a5 	beq	10e9ec <_vfprintf_r+0x1a8c>
  10db54:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10db58:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
  10db5c:	e5cd3077 	strb	r3, [sp, #119]	; 0x77
  10db60:	e3a03000 	mov	r3, #0
  10db64:	e35c0000 	cmp	ip, #0
  10db68:	e5912000 	ldr	r2, [r1]
  10db6c:	e2818004 	add	r8, r1, #4
  10db70:	ba00041c 	blt	10ebe8 <_vfprintf_r+0x1c88>
  10db74:	13a01001 	movne	r1, #1
  10db78:	03a01000 	moveq	r1, #0
  10db7c:	e192c003 	orrs	ip, r2, r3
  10db80:	e3c00080 	bic	r0, r0, #128	; 0x80
  10db84:	13811001 	orrne	r1, r1, #1
  10db88:	e58d001c 	str	r0, [sp, #28]
  10db8c:	e3510000 	cmp	r1, #0
  10db90:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10db94:	1affff01 	bne	10d7a0 <_vfprintf_r+0x840>
  10db98:	e59d301c 	ldr	r3, [sp, #28]
  10db9c:	e2135001 	ands	r5, r3, #1
  10dba0:	058da048 	streq	sl, [sp, #72]	; 0x48
  10dba4:	058d5038 	streq	r5, [sp, #56]	; 0x38
  10dba8:	0afffe2b 	beq	10d45c <_vfprintf_r+0x4fc>
  10dbac:	e28d3f42 	add	r3, sp, #264	; 0x108
  10dbb0:	e3a02030 	mov	r2, #48	; 0x30
  10dbb4:	e5632041 	strb	r2, [r3, #-65]!	; 0xffffffbf
  10dbb8:	e063200a 	rsb	r2, r3, sl
  10dbbc:	e3a05000 	mov	r5, #0
  10dbc0:	e58d2038 	str	r2, [sp, #56]	; 0x38
  10dbc4:	e58d3048 	str	r3, [sp, #72]	; 0x48
  10dbc8:	eafffe23 	b	10d45c <_vfprintf_r+0x4fc>
  10dbcc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  10dbd0:	e3a00030 	mov	r0, #48	; 0x30
  10dbd4:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10dbd8:	e3a0c078 	mov	ip, #120	; 0x78
  10dbdc:	e5cd0078 	strb	r0, [sp, #120]	; 0x78
  10dbe0:	e3510000 	cmp	r1, #0
  10dbe4:	e3a01000 	mov	r1, #0
  10dbe8:	e5932000 	ldr	r2, [r3]
  10dbec:	e2838004 	add	r8, r3, #4
  10dbf0:	e5cdc079 	strb	ip, [sp, #121]	; 0x79
  10dbf4:	e3a03000 	mov	r3, #0
  10dbf8:	e5cd1077 	strb	r1, [sp, #119]	; 0x77
  10dbfc:	ba00044b 	blt	10ed30 <_vfprintf_r+0x1dd0>
  10dc00:	e59d001c 	ldr	r0, [sp, #28]
  10dc04:	e1821003 	orr	r1, r2, r3
  10dc08:	e59de028 	ldr	lr, [sp, #40]	; 0x28
  10dc0c:	e3c00080 	bic	r0, r0, #128	; 0x80
  10dc10:	e3510000 	cmp	r1, #0
  10dc14:	035e0000 	cmpeq	lr, #0
  10dc18:	e3801002 	orr	r1, r0, #2
  10dc1c:	13a05001 	movne	r5, #1
  10dc20:	03a05000 	moveq	r5, #0
  10dc24:	e58d101c 	str	r1, [sp, #28]
  10dc28:	01a0700c 	moveq	r7, ip
  10dc2c:	058d803c 	streq	r8, [sp, #60]	; 0x3c
  10dc30:	0afffe89 	beq	10d65c <_vfprintf_r+0x6fc>
  10dc34:	e3070078 	movw	r0, #28792	; 0x7078
  10dc38:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10dc3c:	e1a0700c 	mov	r7, ip
  10dc40:	e3400011 	movt	r0, #17
  10dc44:	eafffdf7 	b	10d428 <_vfprintf_r+0x4c8>
  10dc48:	e59d301c 	ldr	r3, [sp, #28]
  10dc4c:	e3833020 	orr	r3, r3, #32
  10dc50:	e58d301c 	str	r3, [sp, #28]
  10dc54:	e5d63000 	ldrb	r3, [r6]
  10dc58:	eafffd22 	b	10d0e8 <_vfprintf_r+0x188>
  10dc5c:	e3520000 	cmp	r2, #0
  10dc60:	15cd1077 	strbne	r1, [sp, #119]	; 0x77
  10dc64:	e3570000 	cmp	r7, #0
  10dc68:	0a000428 	beq	10ed10 <_vfprintf_r+0x1db0>
  10dc6c:	e3a03000 	mov	r3, #0
  10dc70:	e3a02001 	mov	r2, #1
  10dc74:	e5cd3077 	strb	r3, [sp, #119]	; 0x77
  10dc78:	e28d30a0 	add	r3, sp, #160	; 0xa0
  10dc7c:	e58d2020 	str	r2, [sp, #32]
  10dc80:	e5cd70a0 	strb	r7, [sp, #160]	; 0xa0
  10dc84:	e58d2038 	str	r2, [sp, #56]	; 0x38
  10dc88:	e58d3048 	str	r3, [sp, #72]	; 0x48
  10dc8c:	eaffff74 	b	10da64 <_vfprintf_r+0xb04>
  10dc90:	e28d2094 	add	r2, sp, #148	; 0x94
  10dc94:	e1a0100b 	mov	r1, fp
  10dc98:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10dc9c:	eb0019b7 	bl	114380 <__sprint_r>
  10dca0:	e3500000 	cmp	r0, #0
  10dca4:	1afffd8d 	bne	10d2e0 <_vfprintf_r+0x380>
  10dca8:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10dcac:	e1a0900a 	mov	r9, sl
  10dcb0:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10dcb4:	e3550000 	cmp	r5, #0
  10dcb8:	0a00000b 	beq	10dcec <_vfprintf_r+0xd8c>
  10dcbc:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10dcc0:	e28d1077 	add	r1, sp, #119	; 0x77
  10dcc4:	e5891000 	str	r1, [r9]
  10dcc8:	e3a01001 	mov	r1, #1
  10dccc:	e2833001 	add	r3, r3, #1
  10dcd0:	e5891004 	str	r1, [r9, #4]
  10dcd4:	e0822001 	add	r2, r2, r1
  10dcd8:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10dcdc:	e3520007 	cmp	r2, #7
  10dce0:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10dce4:	d2899008 	addle	r9, r9, #8
  10dce8:	ca000160 	bgt	10e270 <_vfprintf_r+0x1310>
  10dcec:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
  10dcf0:	e3520000 	cmp	r2, #0
  10dcf4:	0a00000b 	beq	10dd28 <_vfprintf_r+0xdc8>
  10dcf8:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10dcfc:	e28d1078 	add	r1, sp, #120	; 0x78
  10dd00:	e5891000 	str	r1, [r9]
  10dd04:	e2833002 	add	r3, r3, #2
  10dd08:	e3a01002 	mov	r1, #2
  10dd0c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10dd10:	e2822001 	add	r2, r2, #1
  10dd14:	e5891004 	str	r1, [r9, #4]
  10dd18:	e3520007 	cmp	r2, #7
  10dd1c:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10dd20:	d2899008 	addle	r9, r9, #8
  10dd24:	ca00015a 	bgt	10e294 <_vfprintf_r+0x1334>
  10dd28:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  10dd2c:	e3520080 	cmp	r2, #128	; 0x80
  10dd30:	0a0000d6 	beq	10e090 <_vfprintf_r+0x1130>
  10dd34:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10dd38:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  10dd3c:	e0614002 	rsb	r4, r1, r2
  10dd40:	e3540000 	cmp	r4, #0
  10dd44:	da000035 	ble	10de20 <_vfprintf_r+0xec0>
  10dd48:	e3540010 	cmp	r4, #16
  10dd4c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10dd50:	d51f59a8 	ldrle	r5, [pc, #-2472]	; 10d3b0 <_vfprintf_r+0x450>
  10dd54:	da000020 	ble	10dddc <_vfprintf_r+0xe7c>
  10dd58:	e51f59b0 	ldr	r5, [pc, #-2480]	; 10d3b0 <_vfprintf_r+0x450>
  10dd5c:	e3a08010 	mov	r8, #16
  10dd60:	e58d6028 	str	r6, [sp, #40]	; 0x28
  10dd64:	e1a01003 	mov	r1, r3
  10dd68:	e1a06005 	mov	r6, r5
  10dd6c:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
  10dd70:	ea000002 	b	10dd80 <_vfprintf_r+0xe20>
  10dd74:	e2444010 	sub	r4, r4, #16
  10dd78:	e3540010 	cmp	r4, #16
  10dd7c:	da000013 	ble	10ddd0 <_vfprintf_r+0xe70>
  10dd80:	e2822001 	add	r2, r2, #1
  10dd84:	e2811010 	add	r1, r1, #16
  10dd88:	e3520007 	cmp	r2, #7
  10dd8c:	e8890140 	stm	r9, {r6, r8}
  10dd90:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10dd94:	d2899008 	addle	r9, r9, #8
  10dd98:	e58d109c 	str	r1, [sp, #156]	; 0x9c
  10dd9c:	dafffff4 	ble	10dd74 <_vfprintf_r+0xe14>
  10dda0:	e28d2094 	add	r2, sp, #148	; 0x94
  10dda4:	e1a0100b 	mov	r1, fp
  10dda8:	e1a00005 	mov	r0, r5
  10ddac:	e1a0900a 	mov	r9, sl
  10ddb0:	eb001972 	bl	114380 <__sprint_r>
  10ddb4:	e3500000 	cmp	r0, #0
  10ddb8:	1afffd48 	bne	10d2e0 <_vfprintf_r+0x380>
  10ddbc:	e2444010 	sub	r4, r4, #16
  10ddc0:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
  10ddc4:	e3540010 	cmp	r4, #16
  10ddc8:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10ddcc:	caffffeb 	bgt	10dd80 <_vfprintf_r+0xe20>
  10ddd0:	e1a05006 	mov	r5, r6
  10ddd4:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
  10ddd8:	e1a03001 	mov	r3, r1
  10dddc:	e2822001 	add	r2, r2, #1
  10dde0:	e0833004 	add	r3, r3, r4
  10dde4:	e3520007 	cmp	r2, #7
  10dde8:	e5895000 	str	r5, [r9]
  10ddec:	e5894004 	str	r4, [r9, #4]
  10ddf0:	d2899008 	addle	r9, r9, #8
  10ddf4:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10ddf8:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10ddfc:	da000007 	ble	10de20 <_vfprintf_r+0xec0>
  10de00:	e28d2094 	add	r2, sp, #148	; 0x94
  10de04:	e1a0100b 	mov	r1, fp
  10de08:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10de0c:	eb00195b 	bl	114380 <__sprint_r>
  10de10:	e3500000 	cmp	r0, #0
  10de14:	1afffd31 	bne	10d2e0 <_vfprintf_r+0x380>
  10de18:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10de1c:	e1a0900a 	mov	r9, sl
  10de20:	e59d201c 	ldr	r2, [sp, #28]
  10de24:	e3120c01 	tst	r2, #256	; 0x100
  10de28:	1a000053 	bne	10df7c <_vfprintf_r+0x101c>
  10de2c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10de30:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  10de34:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10de38:	e2822001 	add	r2, r2, #1
  10de3c:	e3520007 	cmp	r2, #7
  10de40:	e0833001 	add	r3, r3, r1
  10de44:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10de48:	e5890000 	str	r0, [r9]
  10de4c:	e5891004 	str	r1, [r9, #4]
  10de50:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10de54:	ca0000fc 	bgt	10e24c <_vfprintf_r+0x12ec>
  10de58:	e2899008 	add	r9, r9, #8
  10de5c:	e59d201c 	ldr	r2, [sp, #28]
  10de60:	e3120004 	tst	r2, #4
  10de64:	0a000037 	beq	10df48 <_vfprintf_r+0xfe8>
  10de68:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
  10de6c:	e59d1020 	ldr	r1, [sp, #32]
  10de70:	e0614002 	rsb	r4, r1, r2
  10de74:	e3540000 	cmp	r4, #0
  10de78:	da000032 	ble	10df48 <_vfprintf_r+0xfe8>
  10de7c:	e3540010 	cmp	r4, #16
  10de80:	da000423 	ble	10ef14 <_vfprintf_r+0x1fb4>
  10de84:	e3075034 	movw	r5, #28724	; 0x7034
  10de88:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10de8c:	e3405011 	movt	r5, #17
  10de90:	e3a07010 	mov	r7, #16
  10de94:	e58d501c 	str	r5, [sp, #28]
  10de98:	e1a01003 	mov	r1, r3
  10de9c:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10dea0:	e59d5054 	ldr	r5, [sp, #84]	; 0x54
  10dea4:	ea000002 	b	10deb4 <_vfprintf_r+0xf54>
  10dea8:	e2444010 	sub	r4, r4, #16
  10deac:	e3540010 	cmp	r4, #16
  10deb0:	da000013 	ble	10df04 <_vfprintf_r+0xfa4>
  10deb4:	e2822001 	add	r2, r2, #1
  10deb8:	e2811010 	add	r1, r1, #16
  10debc:	e3520007 	cmp	r2, #7
  10dec0:	e88900a0 	stm	r9, {r5, r7}
  10dec4:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10dec8:	d2899008 	addle	r9, r9, #8
  10decc:	e58d109c 	str	r1, [sp, #156]	; 0x9c
  10ded0:	dafffff4 	ble	10dea8 <_vfprintf_r+0xf48>
  10ded4:	e28d2094 	add	r2, sp, #148	; 0x94
  10ded8:	e1a0100b 	mov	r1, fp
  10dedc:	e1a00008 	mov	r0, r8
  10dee0:	e1a0900a 	mov	r9, sl
  10dee4:	eb001925 	bl	114380 <__sprint_r>
  10dee8:	e3500000 	cmp	r0, #0
  10deec:	1afffcfb 	bne	10d2e0 <_vfprintf_r+0x380>
  10def0:	e2444010 	sub	r4, r4, #16
  10def4:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
  10def8:	e3540010 	cmp	r4, #16
  10defc:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10df00:	caffffeb 	bgt	10deb4 <_vfprintf_r+0xf54>
  10df04:	e59d501c 	ldr	r5, [sp, #28]
  10df08:	e1a03001 	mov	r3, r1
  10df0c:	e2822001 	add	r2, r2, #1
  10df10:	e0833004 	add	r3, r3, r4
  10df14:	e3520007 	cmp	r2, #7
  10df18:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10df1c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10df20:	e5895000 	str	r5, [r9]
  10df24:	e5894004 	str	r4, [r9, #4]
  10df28:	da000006 	ble	10df48 <_vfprintf_r+0xfe8>
  10df2c:	e28d2094 	add	r2, sp, #148	; 0x94
  10df30:	e1a0100b 	mov	r1, fp
  10df34:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10df38:	eb001910 	bl	114380 <__sprint_r>
  10df3c:	e3500000 	cmp	r0, #0
  10df40:	1afffce6 	bne	10d2e0 <_vfprintf_r+0x380>
  10df44:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10df48:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  10df4c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
  10df50:	e59d0020 	ldr	r0, [sp, #32]
  10df54:	e1510000 	cmp	r1, r0
  10df58:	a0822001 	addge	r2, r2, r1
  10df5c:	b0822000 	addlt	r2, r2, r0
  10df60:	e3530000 	cmp	r3, #0
  10df64:	e58d2030 	str	r2, [sp, #48]	; 0x30
  10df68:	1afffcd6 	bne	10d2c8 <_vfprintf_r+0x368>
  10df6c:	e3a03000 	mov	r3, #0
  10df70:	e1a0900a 	mov	r9, sl
  10df74:	e58d3098 	str	r3, [sp, #152]	; 0x98
  10df78:	eafffc34 	b	10d050 <_vfprintf_r+0xf0>
  10df7c:	e3570065 	cmp	r7, #101	; 0x65
  10df80:	da00007e 	ble	10e180 <_vfprintf_r+0x1220>
  10df84:	eeb58b40 	vcmp.f64	d8, #0.0
  10df88:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10df8c:	1a0000c9 	bne	10e2b8 <_vfprintf_r+0x1358>
  10df90:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10df94:	e3071094 	movw	r1, #28820	; 0x7094
  10df98:	e3401011 	movt	r1, #17
  10df9c:	e2833001 	add	r3, r3, #1
  10dfa0:	e5891000 	str	r1, [r9]
  10dfa4:	e3a01001 	mov	r1, #1
  10dfa8:	e2822001 	add	r2, r2, #1
  10dfac:	e5891004 	str	r1, [r9, #4]
  10dfb0:	e3520007 	cmp	r2, #7
  10dfb4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10dfb8:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10dfbc:	d2899008 	addle	r9, r9, #8
  10dfc0:	ca00030c 	bgt	10ebf8 <_vfprintf_r+0x1c98>
  10dfc4:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
  10dfc8:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10dfcc:	e1510002 	cmp	r1, r2
  10dfd0:	ca000002 	bgt	10dfe0 <_vfprintf_r+0x1080>
  10dfd4:	e59d201c 	ldr	r2, [sp, #28]
  10dfd8:	e3120001 	tst	r2, #1
  10dfdc:	0affff9e 	beq	10de5c <_vfprintf_r+0xefc>
  10dfe0:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10dfe4:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
  10dfe8:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
  10dfec:	e2822001 	add	r2, r2, #1
  10dff0:	e3520007 	cmp	r2, #7
  10dff4:	e0833001 	add	r3, r3, r1
  10dff8:	e5890000 	str	r0, [r9]
  10dffc:	e5891004 	str	r1, [r9, #4]
  10e000:	d2899008 	addle	r9, r9, #8
  10e004:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e008:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e00c:	ca00034f 	bgt	10ed50 <_vfprintf_r+0x1df0>
  10e010:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10e014:	e2424001 	sub	r4, r2, #1
  10e018:	e3540000 	cmp	r4, #0
  10e01c:	daffff8e 	ble	10de5c <_vfprintf_r+0xefc>
  10e020:	e3540010 	cmp	r4, #16
  10e024:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e028:	da00011c 	ble	10e4a0 <_vfprintf_r+0x1540>
  10e02c:	e3a07010 	mov	r7, #16
  10e030:	e51f5c88 	ldr	r5, [pc, #-3208]	; 10d3b0 <_vfprintf_r+0x450>
  10e034:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10e038:	ea000002 	b	10e048 <_vfprintf_r+0x10e8>
  10e03c:	e2444010 	sub	r4, r4, #16
  10e040:	e3540010 	cmp	r4, #16
  10e044:	da000116 	ble	10e4a4 <_vfprintf_r+0x1544>
  10e048:	e2822001 	add	r2, r2, #1
  10e04c:	e2833010 	add	r3, r3, #16
  10e050:	e3520007 	cmp	r2, #7
  10e054:	e88900a0 	stm	r9, {r5, r7}
  10e058:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e05c:	d2899008 	addle	r9, r9, #8
  10e060:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e064:	dafffff4 	ble	10e03c <_vfprintf_r+0x10dc>
  10e068:	e28d2094 	add	r2, sp, #148	; 0x94
  10e06c:	e1a0100b 	mov	r1, fp
  10e070:	e1a00008 	mov	r0, r8
  10e074:	e1a0900a 	mov	r9, sl
  10e078:	eb0018c0 	bl	114380 <__sprint_r>
  10e07c:	e3500000 	cmp	r0, #0
  10e080:	1afffc96 	bne	10d2e0 <_vfprintf_r+0x380>
  10e084:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e088:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e08c:	eaffffea 	b	10e03c <_vfprintf_r+0x10dc>
  10e090:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
  10e094:	e59d1020 	ldr	r1, [sp, #32]
  10e098:	e0614002 	rsb	r4, r1, r2
  10e09c:	e3540000 	cmp	r4, #0
  10e0a0:	daffff23 	ble	10dd34 <_vfprintf_r+0xdd4>
  10e0a4:	e3540010 	cmp	r4, #16
  10e0a8:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e0ac:	d51f5d04 	ldrle	r5, [pc, #-3332]	; 10d3b0 <_vfprintf_r+0x450>
  10e0b0:	da000020 	ble	10e138 <_vfprintf_r+0x11d8>
  10e0b4:	e51f5d0c 	ldr	r5, [pc, #-3340]	; 10d3b0 <_vfprintf_r+0x450>
  10e0b8:	e3a08010 	mov	r8, #16
  10e0bc:	e58d6040 	str	r6, [sp, #64]	; 0x40
  10e0c0:	e1a01003 	mov	r1, r3
  10e0c4:	e1a06005 	mov	r6, r5
  10e0c8:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
  10e0cc:	ea000002 	b	10e0dc <_vfprintf_r+0x117c>
  10e0d0:	e2444010 	sub	r4, r4, #16
  10e0d4:	e3540010 	cmp	r4, #16
  10e0d8:	da000013 	ble	10e12c <_vfprintf_r+0x11cc>
  10e0dc:	e2822001 	add	r2, r2, #1
  10e0e0:	e2811010 	add	r1, r1, #16
  10e0e4:	e3520007 	cmp	r2, #7
  10e0e8:	e8890140 	stm	r9, {r6, r8}
  10e0ec:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e0f0:	d2899008 	addle	r9, r9, #8
  10e0f4:	e58d109c 	str	r1, [sp, #156]	; 0x9c
  10e0f8:	dafffff4 	ble	10e0d0 <_vfprintf_r+0x1170>
  10e0fc:	e28d2094 	add	r2, sp, #148	; 0x94
  10e100:	e1a0100b 	mov	r1, fp
  10e104:	e1a00005 	mov	r0, r5
  10e108:	e1a0900a 	mov	r9, sl
  10e10c:	eb00189b 	bl	114380 <__sprint_r>
  10e110:	e3500000 	cmp	r0, #0
  10e114:	1afffc71 	bne	10d2e0 <_vfprintf_r+0x380>
  10e118:	e2444010 	sub	r4, r4, #16
  10e11c:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
  10e120:	e3540010 	cmp	r4, #16
  10e124:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e128:	caffffeb 	bgt	10e0dc <_vfprintf_r+0x117c>
  10e12c:	e1a05006 	mov	r5, r6
  10e130:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
  10e134:	e1a03001 	mov	r3, r1
  10e138:	e2822001 	add	r2, r2, #1
  10e13c:	e0833004 	add	r3, r3, r4
  10e140:	e3520007 	cmp	r2, #7
  10e144:	e5895000 	str	r5, [r9]
  10e148:	e5894004 	str	r4, [r9, #4]
  10e14c:	d2899008 	addle	r9, r9, #8
  10e150:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e154:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e158:	dafffef5 	ble	10dd34 <_vfprintf_r+0xdd4>
  10e15c:	e28d2094 	add	r2, sp, #148	; 0x94
  10e160:	e1a0100b 	mov	r1, fp
  10e164:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e168:	eb001884 	bl	114380 <__sprint_r>
  10e16c:	e3500000 	cmp	r0, #0
  10e170:	1afffc5a 	bne	10d2e0 <_vfprintf_r+0x380>
  10e174:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e178:	e1a0900a 	mov	r9, sl
  10e17c:	eafffeec 	b	10dd34 <_vfprintf_r+0xdd4>
  10e180:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10e184:	e3520001 	cmp	r2, #1
  10e188:	da00012b 	ble	10e63c <_vfprintf_r+0x16dc>
  10e18c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e190:	e3a01001 	mov	r1, #1
  10e194:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10e198:	e2833001 	add	r3, r3, #1
  10e19c:	e5891004 	str	r1, [r9, #4]
  10e1a0:	e0822001 	add	r2, r2, r1
  10e1a4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e1a8:	e3520007 	cmp	r2, #7
  10e1ac:	e5890000 	str	r0, [r9]
  10e1b0:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e1b4:	d2899008 	addle	r9, r9, #8
  10e1b8:	ca00014a 	bgt	10e6e8 <_vfprintf_r+0x1788>
  10e1bc:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
  10e1c0:	e2822001 	add	r2, r2, #1
  10e1c4:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
  10e1c8:	e3520007 	cmp	r2, #7
  10e1cc:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e1d0:	e0813003 	add	r3, r1, r3
  10e1d4:	e8890003 	stm	r9, {r0, r1}
  10e1d8:	d2899008 	addle	r9, r9, #8
  10e1dc:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e1e0:	ca000136 	bgt	10e6c0 <_vfprintf_r+0x1760>
  10e1e4:	eeb58b40 	vcmp.f64	d8, #0.0
  10e1e8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10e1ec:	0a000075 	beq	10e3c8 <_vfprintf_r+0x1468>
  10e1f0:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10e1f4:	e2822001 	add	r2, r2, #1
  10e1f8:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10e1fc:	e3520007 	cmp	r2, #7
  10e200:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e204:	e2411001 	sub	r1, r1, #1
  10e208:	e2800001 	add	r0, r0, #1
  10e20c:	e0833001 	add	r3, r3, r1
  10e210:	e5890000 	str	r0, [r9]
  10e214:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e218:	e5891004 	str	r1, [r9, #4]
  10e21c:	ca000114 	bgt	10e674 <_vfprintf_r+0x1714>
  10e220:	e2899008 	add	r9, r9, #8
  10e224:	e59d0068 	ldr	r0, [sp, #104]	; 0x68
  10e228:	e2822001 	add	r2, r2, #1
  10e22c:	e3520007 	cmp	r2, #7
  10e230:	e28d1084 	add	r1, sp, #132	; 0x84
  10e234:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e238:	e0833000 	add	r3, r3, r0
  10e23c:	e1a02000 	mov	r2, r0
  10e240:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e244:	e8890006 	stm	r9, {r1, r2}
  10e248:	daffff02 	ble	10de58 <_vfprintf_r+0xef8>
  10e24c:	e28d2094 	add	r2, sp, #148	; 0x94
  10e250:	e1a0100b 	mov	r1, fp
  10e254:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e258:	eb001848 	bl	114380 <__sprint_r>
  10e25c:	e3500000 	cmp	r0, #0
  10e260:	1afffc1e 	bne	10d2e0 <_vfprintf_r+0x380>
  10e264:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e268:	e1a0900a 	mov	r9, sl
  10e26c:	eafffefa 	b	10de5c <_vfprintf_r+0xefc>
  10e270:	e28d2094 	add	r2, sp, #148	; 0x94
  10e274:	e1a0100b 	mov	r1, fp
  10e278:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e27c:	eb00183f 	bl	114380 <__sprint_r>
  10e280:	e3500000 	cmp	r0, #0
  10e284:	1afffc15 	bne	10d2e0 <_vfprintf_r+0x380>
  10e288:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e28c:	e1a0900a 	mov	r9, sl
  10e290:	eafffe95 	b	10dcec <_vfprintf_r+0xd8c>
  10e294:	e28d2094 	add	r2, sp, #148	; 0x94
  10e298:	e1a0100b 	mov	r1, fp
  10e29c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e2a0:	eb001836 	bl	114380 <__sprint_r>
  10e2a4:	e3500000 	cmp	r0, #0
  10e2a8:	1afffc0c 	bne	10d2e0 <_vfprintf_r+0x380>
  10e2ac:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e2b0:	e1a0900a 	mov	r9, sl
  10e2b4:	eafffe9b 	b	10dd28 <_vfprintf_r+0xdc8>
  10e2b8:	e59d407c 	ldr	r4, [sp, #124]	; 0x7c
  10e2bc:	e3540000 	cmp	r4, #0
  10e2c0:	da000255 	ble	10ec1c <_vfprintf_r+0x1cbc>
  10e2c4:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
  10e2c8:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10e2cc:	e1520001 	cmp	r2, r1
  10e2d0:	b1a04002 	movlt	r4, r2
  10e2d4:	a1a04001 	movge	r4, r1
  10e2d8:	e3540000 	cmp	r4, #0
  10e2dc:	da00000a 	ble	10e30c <_vfprintf_r+0x13ac>
  10e2e0:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e2e4:	e0833004 	add	r3, r3, r4
  10e2e8:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
  10e2ec:	e5894004 	str	r4, [r9, #4]
  10e2f0:	e2822001 	add	r2, r2, #1
  10e2f4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e2f8:	e3520007 	cmp	r2, #7
  10e2fc:	e5891000 	str	r1, [r9]
  10e300:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e304:	d2899008 	addle	r9, r9, #8
  10e308:	ca0002c1 	bgt	10ee14 <_vfprintf_r+0x1eb4>
  10e30c:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
  10e310:	e3540000 	cmp	r4, #0
  10e314:	a0642002 	rsbge	r2, r4, r2
  10e318:	e3520000 	cmp	r2, #0
  10e31c:	e1a04002 	mov	r4, r2
  10e320:	da00007d 	ble	10e51c <_vfprintf_r+0x15bc>
  10e324:	e3540010 	cmp	r4, #16
  10e328:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e32c:	d51f5f84 	ldrle	r5, [pc, #-3972]	; 10d3b0 <_vfprintf_r+0x450>
  10e330:	da000068 	ble	10e4d8 <_vfprintf_r+0x1578>
  10e334:	e3a07010 	mov	r7, #16
  10e338:	e51f5f90 	ldr	r5, [pc, #-3984]	; 10d3b0 <_vfprintf_r+0x450>
  10e33c:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10e340:	ea000002 	b	10e350 <_vfprintf_r+0x13f0>
  10e344:	e2444010 	sub	r4, r4, #16
  10e348:	e3540010 	cmp	r4, #16
  10e34c:	da000061 	ble	10e4d8 <_vfprintf_r+0x1578>
  10e350:	e2822001 	add	r2, r2, #1
  10e354:	e2833010 	add	r3, r3, #16
  10e358:	e3520007 	cmp	r2, #7
  10e35c:	e88900a0 	stm	r9, {r5, r7}
  10e360:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e364:	d2899008 	addle	r9, r9, #8
  10e368:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e36c:	dafffff4 	ble	10e344 <_vfprintf_r+0x13e4>
  10e370:	e28d2094 	add	r2, sp, #148	; 0x94
  10e374:	e1a0100b 	mov	r1, fp
  10e378:	e1a00008 	mov	r0, r8
  10e37c:	e1a0900a 	mov	r9, sl
  10e380:	eb0017fe 	bl	114380 <__sprint_r>
  10e384:	e3500000 	cmp	r0, #0
  10e388:	1afffbd4 	bne	10d2e0 <_vfprintf_r+0x380>
  10e38c:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e390:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e394:	eaffffea 	b	10e344 <_vfprintf_r+0x13e4>
  10e398:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10e39c:	e1cd22d0 	ldrd	r2, [sp, #32]
  10e3a0:	e3530000 	cmp	r3, #0
  10e3a4:	03520009 	cmpeq	r2, #9
  10e3a8:	8a0000d8 	bhi	10e710 <_vfprintf_r+0x17b0>
  10e3ac:	e28d3f42 	add	r3, sp, #264	; 0x108
  10e3b0:	e2822030 	add	r2, r2, #48	; 0x30
  10e3b4:	e5632041 	strb	r2, [r3, #-65]!	; 0xffffffbf
  10e3b8:	e063200a 	rsb	r2, r3, sl
  10e3bc:	e58d2038 	str	r2, [sp, #56]	; 0x38
  10e3c0:	e58d3048 	str	r3, [sp, #72]	; 0x48
  10e3c4:	eafffc24 	b	10d45c <_vfprintf_r+0x4fc>
  10e3c8:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10e3cc:	e2414001 	sub	r4, r1, #1
  10e3d0:	e3540000 	cmp	r4, #0
  10e3d4:	daffff92 	ble	10e224 <_vfprintf_r+0x12c4>
  10e3d8:	e3540010 	cmp	r4, #16
  10e3dc:	e59f5ec0 	ldr	r5, [pc, #3776]	; 10f2a4 <_vfprintf_r+0x2344>
  10e3e0:	da0000ad 	ble	10e69c <_vfprintf_r+0x173c>
  10e3e4:	e3a07010 	mov	r7, #16
  10e3e8:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10e3ec:	ea000002 	b	10e3fc <_vfprintf_r+0x149c>
  10e3f0:	e2444010 	sub	r4, r4, #16
  10e3f4:	e3540010 	cmp	r4, #16
  10e3f8:	da0000a7 	ble	10e69c <_vfprintf_r+0x173c>
  10e3fc:	e2822001 	add	r2, r2, #1
  10e400:	e2833010 	add	r3, r3, #16
  10e404:	e3520007 	cmp	r2, #7
  10e408:	e88900a0 	stm	r9, {r5, r7}
  10e40c:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e410:	d2899008 	addle	r9, r9, #8
  10e414:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e418:	dafffff4 	ble	10e3f0 <_vfprintf_r+0x1490>
  10e41c:	e28d2094 	add	r2, sp, #148	; 0x94
  10e420:	e1a0100b 	mov	r1, fp
  10e424:	e1a00008 	mov	r0, r8
  10e428:	e1a0900a 	mov	r9, sl
  10e42c:	eb0017d3 	bl	114380 <__sprint_r>
  10e430:	e3500000 	cmp	r0, #0
  10e434:	1afffba9 	bne	10d2e0 <_vfprintf_r+0x380>
  10e438:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e43c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e440:	eaffffea 	b	10e3f0 <_vfprintf_r+0x1490>
  10e444:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10e448:	e5cd1077 	strb	r1, [sp, #119]	; 0x77
  10e44c:	e35c0000 	cmp	ip, #0
  10e450:	bafffbf4 	blt	10d428 <_vfprintf_r+0x4c8>
  10e454:	13a05001 	movne	r5, #1
  10e458:	03a05000 	moveq	r5, #0
  10e45c:	e1921003 	orrs	r1, r2, r3
  10e460:	e59d101c 	ldr	r1, [sp, #28]
  10e464:	13855001 	orrne	r5, r5, #1
  10e468:	e3550000 	cmp	r5, #0
  10e46c:	e3c11080 	bic	r1, r1, #128	; 0x80
  10e470:	e58d101c 	str	r1, [sp, #28]
  10e474:	1afffbeb 	bne	10d428 <_vfprintf_r+0x4c8>
  10e478:	eafffc77 	b	10d65c <_vfprintf_r+0x6fc>
  10e47c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  10e480:	e5923000 	ldr	r3, [r2]
  10e484:	e2822004 	add	r2, r2, #4
  10e488:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10e48c:	ee803b90 	vdup.32	d16, r3
  10e490:	f2e000b0 	vshr.s64	d16, d16, #32
  10e494:	edcd0b08 	vstr	d16, [sp, #32]
  10e498:	ec532b30 	vmov	r2, r3, d16
  10e49c:	eafffd4c 	b	10d9d4 <_vfprintf_r+0xa74>
  10e4a0:	e59f5dfc 	ldr	r5, [pc, #3580]	; 10f2a4 <_vfprintf_r+0x2344>
  10e4a4:	e2822001 	add	r2, r2, #1
  10e4a8:	e0833004 	add	r3, r3, r4
  10e4ac:	e3520007 	cmp	r2, #7
  10e4b0:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e4b4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e4b8:	e5895000 	str	r5, [r9]
  10e4bc:	e5894004 	str	r4, [r9, #4]
  10e4c0:	dafffe64 	ble	10de58 <_vfprintf_r+0xef8>
  10e4c4:	eaffff60 	b	10e24c <_vfprintf_r+0x12ec>
  10e4c8:	e2880058 	add	r0, r8, #88	; 0x58
  10e4cc:	eb001fbf 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10e4d0:	e1d830bc 	ldrh	r3, [r8, #12]
  10e4d4:	eafffb88 	b	10d2fc <_vfprintf_r+0x39c>
  10e4d8:	e2822001 	add	r2, r2, #1
  10e4dc:	e0833004 	add	r3, r3, r4
  10e4e0:	e3520007 	cmp	r2, #7
  10e4e4:	e5895000 	str	r5, [r9]
  10e4e8:	e5894004 	str	r4, [r9, #4]
  10e4ec:	d2899008 	addle	r9, r9, #8
  10e4f0:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e4f4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e4f8:	da000007 	ble	10e51c <_vfprintf_r+0x15bc>
  10e4fc:	e28d2094 	add	r2, sp, #148	; 0x94
  10e500:	e1a0100b 	mov	r1, fp
  10e504:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e508:	eb00179c 	bl	114380 <__sprint_r>
  10e50c:	e3500000 	cmp	r0, #0
  10e510:	1afffb72 	bne	10d2e0 <_vfprintf_r+0x380>
  10e514:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e518:	e1a0900a 	mov	r9, sl
  10e51c:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
  10e520:	e59d004c 	ldr	r0, [sp, #76]	; 0x4c
  10e524:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
  10e528:	e0817000 	add	r7, r1, r0
  10e52c:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10e530:	e1510002 	cmp	r1, r2
  10e534:	da00014f 	ble	10ea78 <_vfprintf_r+0x1b18>
  10e538:	e59d1098 	ldr	r1, [sp, #152]	; 0x98
  10e53c:	e59d005c 	ldr	r0, [sp, #92]	; 0x5c
  10e540:	e59dc058 	ldr	ip, [sp, #88]	; 0x58
  10e544:	e2811001 	add	r1, r1, #1
  10e548:	e3510007 	cmp	r1, #7
  10e54c:	e0833000 	add	r3, r3, r0
  10e550:	e589c000 	str	ip, [r9]
  10e554:	e5890004 	str	r0, [r9, #4]
  10e558:	d2899008 	addle	r9, r9, #8
  10e55c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e560:	e58d1098 	str	r1, [sp, #152]	; 0x98
  10e564:	ca000195 	bgt	10ebc0 <_vfprintf_r+0x1c60>
  10e568:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10e56c:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10e570:	e0622001 	rsb	r2, r2, r1
  10e574:	e0804001 	add	r4, r0, r1
  10e578:	e0674004 	rsb	r4, r7, r4
  10e57c:	e1540002 	cmp	r4, r2
  10e580:	b1a05004 	movlt	r5, r4
  10e584:	a1a05002 	movge	r5, r2
  10e588:	e3550000 	cmp	r5, #0
  10e58c:	da000009 	ble	10e5b8 <_vfprintf_r+0x1658>
  10e590:	e59d1098 	ldr	r1, [sp, #152]	; 0x98
  10e594:	e0833005 	add	r3, r3, r5
  10e598:	e5897000 	str	r7, [r9]
  10e59c:	e5895004 	str	r5, [r9, #4]
  10e5a0:	e2811001 	add	r1, r1, #1
  10e5a4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e5a8:	e3510007 	cmp	r1, #7
  10e5ac:	e58d1098 	str	r1, [sp, #152]	; 0x98
  10e5b0:	d2899008 	addle	r9, r9, #8
  10e5b4:	ca000175 	bgt	10eb90 <_vfprintf_r+0x1c30>
  10e5b8:	e3550000 	cmp	r5, #0
  10e5bc:	a0654002 	rsbge	r4, r5, r2
  10e5c0:	b1a04002 	movlt	r4, r2
  10e5c4:	e3540000 	cmp	r4, #0
  10e5c8:	dafffe23 	ble	10de5c <_vfprintf_r+0xefc>
  10e5cc:	e3540010 	cmp	r4, #16
  10e5d0:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e5d4:	daffffb1 	ble	10e4a0 <_vfprintf_r+0x1540>
  10e5d8:	e3a07010 	mov	r7, #16
  10e5dc:	e59f5cc0 	ldr	r5, [pc, #3264]	; 10f2a4 <_vfprintf_r+0x2344>
  10e5e0:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10e5e4:	ea000002 	b	10e5f4 <_vfprintf_r+0x1694>
  10e5e8:	e2444010 	sub	r4, r4, #16
  10e5ec:	e3540010 	cmp	r4, #16
  10e5f0:	daffffab 	ble	10e4a4 <_vfprintf_r+0x1544>
  10e5f4:	e2822001 	add	r2, r2, #1
  10e5f8:	e2833010 	add	r3, r3, #16
  10e5fc:	e3520007 	cmp	r2, #7
  10e600:	e88900a0 	stm	r9, {r5, r7}
  10e604:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e608:	d2899008 	addle	r9, r9, #8
  10e60c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e610:	dafffff4 	ble	10e5e8 <_vfprintf_r+0x1688>
  10e614:	e28d2094 	add	r2, sp, #148	; 0x94
  10e618:	e1a0100b 	mov	r1, fp
  10e61c:	e1a00008 	mov	r0, r8
  10e620:	e1a0900a 	mov	r9, sl
  10e624:	eb001755 	bl	114380 <__sprint_r>
  10e628:	e3500000 	cmp	r0, #0
  10e62c:	1afffb2b 	bne	10d2e0 <_vfprintf_r+0x380>
  10e630:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e634:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e638:	eaffffea 	b	10e5e8 <_vfprintf_r+0x1688>
  10e63c:	e59d201c 	ldr	r2, [sp, #28]
  10e640:	e3120001 	tst	r2, #1
  10e644:	1afffed0 	bne	10e18c <_vfprintf_r+0x122c>
  10e648:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e64c:	e3a01001 	mov	r1, #1
  10e650:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10e654:	e2833001 	add	r3, r3, #1
  10e658:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e65c:	e0822001 	add	r2, r2, r1
  10e660:	e5891004 	str	r1, [r9, #4]
  10e664:	e3520007 	cmp	r2, #7
  10e668:	e5890000 	str	r0, [r9]
  10e66c:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e670:	dafffeea 	ble	10e220 <_vfprintf_r+0x12c0>
  10e674:	e28d2094 	add	r2, sp, #148	; 0x94
  10e678:	e1a0100b 	mov	r1, fp
  10e67c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e680:	eb00173e 	bl	114380 <__sprint_r>
  10e684:	e3500000 	cmp	r0, #0
  10e688:	1afffb14 	bne	10d2e0 <_vfprintf_r+0x380>
  10e68c:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e690:	e1a0900a 	mov	r9, sl
  10e694:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e698:	eafffee1 	b	10e224 <_vfprintf_r+0x12c4>
  10e69c:	e2822001 	add	r2, r2, #1
  10e6a0:	e0833004 	add	r3, r3, r4
  10e6a4:	e3520007 	cmp	r2, #7
  10e6a8:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10e6ac:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10e6b0:	e5895000 	str	r5, [r9]
  10e6b4:	e5894004 	str	r4, [r9, #4]
  10e6b8:	dafffed8 	ble	10e220 <_vfprintf_r+0x12c0>
  10e6bc:	eaffffec 	b	10e674 <_vfprintf_r+0x1714>
  10e6c0:	e28d2094 	add	r2, sp, #148	; 0x94
  10e6c4:	e1a0100b 	mov	r1, fp
  10e6c8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e6cc:	eb00172b 	bl	114380 <__sprint_r>
  10e6d0:	e3500000 	cmp	r0, #0
  10e6d4:	1afffb01 	bne	10d2e0 <_vfprintf_r+0x380>
  10e6d8:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e6dc:	e1a0900a 	mov	r9, sl
  10e6e0:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e6e4:	eafffebe 	b	10e1e4 <_vfprintf_r+0x1284>
  10e6e8:	e28d2094 	add	r2, sp, #148	; 0x94
  10e6ec:	e1a0100b 	mov	r1, fp
  10e6f0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e6f4:	eb001721 	bl	114380 <__sprint_r>
  10e6f8:	e3500000 	cmp	r0, #0
  10e6fc:	1afffaf7 	bne	10d2e0 <_vfprintf_r+0x380>
  10e700:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10e704:	e1a0900a 	mov	r9, sl
  10e708:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10e70c:	eafffeaa 	b	10e1bc <_vfprintf_r+0x125c>
  10e710:	e1a08005 	mov	r8, r5
  10e714:	e1cd42d0 	ldrd	r4, [sp, #32]
  10e718:	e58d7038 	str	r7, [sp, #56]	; 0x38
  10e71c:	e1a0700a 	mov	r7, sl
  10e720:	e1a00004 	mov	r0, r4
  10e724:	e1a01005 	mov	r1, r5
  10e728:	e3a0200a 	mov	r2, #10
  10e72c:	e3a03000 	mov	r3, #0
  10e730:	ebfff8dd 	bl	10caac <__aeabi_uldivmod>
  10e734:	e2822030 	add	r2, r2, #48	; 0x30
  10e738:	e1a00004 	mov	r0, r4
  10e73c:	e1a01005 	mov	r1, r5
  10e740:	e5672001 	strb	r2, [r7, #-1]!
  10e744:	e3a03000 	mov	r3, #0
  10e748:	e3a0200a 	mov	r2, #10
  10e74c:	ebfff8d6 	bl	10caac <__aeabi_uldivmod>
  10e750:	e1a04000 	mov	r4, r0
  10e754:	e1a05001 	mov	r5, r1
  10e758:	e1943005 	orrs	r3, r4, r5
  10e75c:	1affffef 	bne	10e720 <_vfprintf_r+0x17c0>
  10e760:	e1a03007 	mov	r3, r7
  10e764:	e58d7048 	str	r7, [sp, #72]	; 0x48
  10e768:	e063300a 	rsb	r3, r3, sl
  10e76c:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  10e770:	e1a05008 	mov	r5, r8
  10e774:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10e778:	eafffb37 	b	10d45c <_vfprintf_r+0x4fc>
  10e77c:	e1cd22d0 	ldrd	r2, [sp, #32]
  10e780:	e3a0502d 	mov	r5, #45	; 0x2d
  10e784:	e5cd5077 	strb	r5, [sp, #119]	; 0x77
  10e788:	e2722000 	rsbs	r2, r2, #0
  10e78c:	e2e33000 	rsc	r3, r3, #0
  10e790:	e1cd22f0 	strd	r2, [sp, #32]
  10e794:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10e798:	e3530000 	cmp	r3, #0
  10e79c:	a59d301c 	ldrge	r3, [sp, #28]
  10e7a0:	a3c33080 	bicge	r3, r3, #128	; 0x80
  10e7a4:	a58d301c 	strge	r3, [sp, #28]
  10e7a8:	eafffefb 	b	10e39c <_vfprintf_r+0x143c>
  10e7ac:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
  10e7b0:	e3a01000 	mov	r1, #0
  10e7b4:	e5cd1077 	strb	r1, [sp, #119]	; 0x77
  10e7b8:	e3550000 	cmp	r5, #0
  10e7bc:	bafffb19 	blt	10d428 <_vfprintf_r+0x4c8>
  10e7c0:	e59d101c 	ldr	r1, [sp, #28]
  10e7c4:	e3c11080 	bic	r1, r1, #128	; 0x80
  10e7c8:	e58d101c 	str	r1, [sp, #28]
  10e7cc:	1afffb15 	bne	10d428 <_vfprintf_r+0x4c8>
  10e7d0:	eafffba1 	b	10d65c <_vfprintf_r+0x6fc>
  10e7d4:	ec510b18 	vmov	r0, r1, d8
  10e7d8:	eb0015a8 	bl	113e80 <__fpclassifyd>
  10e7dc:	e3500000 	cmp	r0, #0
  10e7e0:	0a0000c1 	beq	10eaec <_vfprintf_r+0x1b8c>
  10e7e4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10e7e8:	e3c75020 	bic	r5, r7, #32
  10e7ec:	e3730001 	cmn	r3, #1
  10e7f0:	03a03006 	moveq	r3, #6
  10e7f4:	058d3028 	streq	r3, [sp, #40]	; 0x28
  10e7f8:	0a00018e 	beq	10ee38 <_vfprintf_r+0x1ed8>
  10e7fc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10e800:	e3550047 	cmp	r5, #71	; 0x47
  10e804:	03530000 	cmpeq	r3, #0
  10e808:	1a00018a 	bne	10ee38 <_vfprintf_r+0x1ed8>
  10e80c:	e59d201c 	ldr	r2, [sp, #28]
  10e810:	ee183a90 	vmov	r3, s17
  10e814:	e3530000 	cmp	r3, #0
  10e818:	e3822c01 	orr	r2, r2, #256	; 0x100
  10e81c:	e58d2040 	str	r2, [sp, #64]	; 0x40
  10e820:	ba0001bf 	blt	10ef24 <_vfprintf_r+0x1fc4>
  10e824:	eeb09b48 	vmov.f64	d9, d8
  10e828:	e3a05047 	mov	r5, #71	; 0x47
  10e82c:	e3a08000 	mov	r8, #0
  10e830:	e3a03001 	mov	r3, #1
  10e834:	e58d3028 	str	r3, [sp, #40]	; 0x28
  10e838:	e28d207c 	add	r2, sp, #124	; 0x7c
  10e83c:	e3a03002 	mov	r3, #2
  10e840:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10e844:	e28d008c 	add	r0, sp, #140	; 0x8c
  10e848:	e28d1080 	add	r1, sp, #128	; 0x80
  10e84c:	e58d0010 	str	r0, [sp, #16]
  10e850:	e58d2008 	str	r2, [sp, #8]
  10e854:	e58d3000 	str	r3, [sp]
  10e858:	e58dc004 	str	ip, [sp, #4]
  10e85c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10e860:	e58d100c 	str	r1, [sp, #12]
  10e864:	ec532b19 	vmov	r2, r3, d9
  10e868:	eb000439 	bl	10f954 <_dtoa_r>
  10e86c:	e3550047 	cmp	r5, #71	; 0x47
  10e870:	e58d0048 	str	r0, [sp, #72]	; 0x48
  10e874:	1a000288 	bne	10f29c <_vfprintf_r+0x233c>
  10e878:	e59d301c 	ldr	r3, [sp, #28]
  10e87c:	e3130001 	tst	r3, #1
  10e880:	0a000249 	beq	10f1ac <_vfprintf_r+0x224c>
  10e884:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
  10e888:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10e88c:	e0834002 	add	r4, r3, r2
  10e890:	eeb59b40 	vcmp.f64	d9, #0.0
  10e894:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10e898:	01a03004 	moveq	r3, r4
  10e89c:	0a000009 	beq	10e8c8 <_vfprintf_r+0x1968>
  10e8a0:	e59d308c 	ldr	r3, [sp, #140]	; 0x8c
  10e8a4:	e1540003 	cmp	r4, r3
  10e8a8:	9a000006 	bls	10e8c8 <_vfprintf_r+0x1968>
  10e8ac:	e3a01030 	mov	r1, #48	; 0x30
  10e8b0:	e2832001 	add	r2, r3, #1
  10e8b4:	e58d208c 	str	r2, [sp, #140]	; 0x8c
  10e8b8:	e5c31000 	strb	r1, [r3]
  10e8bc:	e59d308c 	ldr	r3, [sp, #140]	; 0x8c
  10e8c0:	e1540003 	cmp	r4, r3
  10e8c4:	8afffff9 	bhi	10e8b0 <_vfprintf_r+0x1950>
  10e8c8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
  10e8cc:	e3550047 	cmp	r5, #71	; 0x47
  10e8d0:	e0623003 	rsb	r3, r2, r3
  10e8d4:	e58d3050 	str	r3, [sp, #80]	; 0x50
  10e8d8:	e59d307c 	ldr	r3, [sp, #124]	; 0x7c
  10e8dc:	1a0001b0 	bne	10efa4 <_vfprintf_r+0x2044>
  10e8e0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10e8e4:	e3730003 	cmn	r3, #3
  10e8e8:	a3a04000 	movge	r4, #0
  10e8ec:	b3a04001 	movlt	r4, #1
  10e8f0:	e1530002 	cmp	r3, r2
  10e8f4:	c3844001 	orrgt	r4, r4, #1
  10e8f8:	e3540000 	cmp	r4, #0
  10e8fc:	12477002 	subne	r7, r7, #2
  10e900:	1a0001d2 	bne	10f050 <_vfprintf_r+0x20f0>
  10e904:	e58d304c 	str	r3, [sp, #76]	; 0x4c
  10e908:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10e90c:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  10e910:	e1520003 	cmp	r2, r3
  10e914:	ca0001f8 	bgt	10f0fc <_vfprintf_r+0x219c>
  10e918:	e59d201c 	ldr	r2, [sp, #28]
  10e91c:	e3120001 	tst	r2, #1
  10e920:	159d304c 	ldrne	r3, [sp, #76]	; 0x4c
  10e924:	01a02003 	moveq	r2, r3
  10e928:	01c33fc3 	biceq	r3, r3, r3, asr #31
  10e92c:	03a07067 	moveq	r7, #103	; 0x67
  10e930:	13a07067 	movne	r7, #103	; 0x67
  10e934:	058d2038 	streq	r2, [sp, #56]	; 0x38
  10e938:	12833001 	addne	r3, r3, #1
  10e93c:	158d3038 	strne	r3, [sp, #56]	; 0x38
  10e940:	11c33fc3 	bicne	r3, r3, r3, asr #31
  10e944:	e3580000 	cmp	r8, #0
  10e948:	1a00018e 	bne	10ef88 <_vfprintf_r+0x2028>
  10e94c:	e58d3020 	str	r3, [sp, #32]
  10e950:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  10e954:	e58d8028 	str	r8, [sp, #40]	; 0x28
  10e958:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10e95c:	e58d301c 	str	r3, [sp, #28]
  10e960:	eafffac4 	b	10d478 <_vfprintf_r+0x518>
  10e964:	e59d301c 	ldr	r3, [sp, #28]
  10e968:	e3130040 	tst	r3, #64	; 0x40
  10e96c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10e970:	11d320b0 	ldrhne	r2, [r3]
  10e974:	e2833004 	add	r3, r3, #4
  10e978:	05132004 	ldreq	r2, [r3, #-4]
  10e97c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  10e980:	e3a03000 	mov	r3, #0
  10e984:	eafffa97 	b	10d3e8 <_vfprintf_r+0x488>
  10e988:	e59d101c 	ldr	r1, [sp, #28]
  10e98c:	e2115040 	ands	r5, r1, #64	; 0x40
  10e990:	0a000066 	beq	10eb30 <_vfprintf_r+0x1bd0>
  10e994:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10e998:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  10e99c:	e5cd2077 	strb	r2, [sp, #119]	; 0x77
  10e9a0:	e1d350b0 	ldrh	r5, [r3]
  10e9a4:	e2838004 	add	r8, r3, #4
  10e9a8:	e3500000 	cmp	r0, #0
  10e9ac:	ee805b90 	vdup.32	d16, r5
  10e9b0:	f3e000b0 	vshr.u64	d16, d16, #32
  10e9b4:	edcd0b08 	vstr	d16, [sp, #32]
  10e9b8:	ba0001d9 	blt	10f124 <_vfprintf_r+0x21c4>
  10e9bc:	13a03001 	movne	r3, #1
  10e9c0:	03a03000 	moveq	r3, #0
  10e9c4:	e3550000 	cmp	r5, #0
  10e9c8:	01a05003 	moveq	r5, r3
  10e9cc:	13835001 	orrne	r5, r3, #1
  10e9d0:	e3c11080 	bic	r1, r1, #128	; 0x80
  10e9d4:	e3550000 	cmp	r5, #0
  10e9d8:	e58d101c 	str	r1, [sp, #28]
  10e9dc:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10e9e0:	0afffb1d 	beq	10d65c <_vfprintf_r+0x6fc>
  10e9e4:	e1a05002 	mov	r5, r2
  10e9e8:	eafffe6b 	b	10e39c <_vfprintf_r+0x143c>
  10e9ec:	e59dc01c 	ldr	ip, [sp, #28]
  10e9f0:	e21c3040 	ands	r3, ip, #64	; 0x40
  10e9f4:	0a00002a 	beq	10eaa4 <_vfprintf_r+0x1b44>
  10e9f8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10e9fc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  10ea00:	e5cd2077 	strb	r2, [sp, #119]	; 0x77
  10ea04:	e1d300b0 	ldrh	r0, [r3]
  10ea08:	e2838004 	add	r8, r3, #4
  10ea0c:	e3510000 	cmp	r1, #0
  10ea10:	e3a03000 	mov	r3, #0
  10ea14:	e1a02000 	mov	r2, r0
  10ea18:	ba000072 	blt	10ebe8 <_vfprintf_r+0x1c88>
  10ea1c:	13a01001 	movne	r1, #1
  10ea20:	03a01000 	moveq	r1, #0
  10ea24:	e3500000 	cmp	r0, #0
  10ea28:	13811001 	orrne	r1, r1, #1
  10ea2c:	e3ccc080 	bic	ip, ip, #128	; 0x80
  10ea30:	e3510000 	cmp	r1, #0
  10ea34:	e58dc01c 	str	ip, [sp, #28]
  10ea38:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10ea3c:	1afffb57 	bne	10d7a0 <_vfprintf_r+0x840>
  10ea40:	eafffc54 	b	10db98 <_vfprintf_r+0xc38>
  10ea44:	e59d301c 	ldr	r3, [sp, #28]
  10ea48:	e3130010 	tst	r3, #16
  10ea4c:	1a00000d 	bne	10ea88 <_vfprintf_r+0x1b28>
  10ea50:	e59d301c 	ldr	r3, [sp, #28]
  10ea54:	e3130040 	tst	r3, #64	; 0x40
  10ea58:	0a00000a 	beq	10ea88 <_vfprintf_r+0x1b28>
  10ea5c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  10ea60:	e5923000 	ldr	r3, [r2]
  10ea64:	e2822004 	add	r2, r2, #4
  10ea68:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10ea6c:	e1dd23b0 	ldrh	r2, [sp, #48]	; 0x30
  10ea70:	e1c320b0 	strh	r2, [r3]
  10ea74:	eafff975 	b	10d050 <_vfprintf_r+0xf0>
  10ea78:	e59d101c 	ldr	r1, [sp, #28]
  10ea7c:	e3110001 	tst	r1, #1
  10ea80:	0afffeb8 	beq	10e568 <_vfprintf_r+0x1608>
  10ea84:	eafffeab 	b	10e538 <_vfprintf_r+0x15d8>
  10ea88:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  10ea8c:	e5923000 	ldr	r3, [r2]
  10ea90:	e2822004 	add	r2, r2, #4
  10ea94:	e58d203c 	str	r2, [sp, #60]	; 0x3c
  10ea98:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  10ea9c:	e5832000 	str	r2, [r3]
  10eaa0:	eafff96a 	b	10d050 <_vfprintf_r+0xf0>
  10eaa4:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  10eaa8:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
  10eaac:	e5cd3077 	strb	r3, [sp, #119]	; 0x77
  10eab0:	e3a03000 	mov	r3, #0
  10eab4:	e3500000 	cmp	r0, #0
  10eab8:	e5912000 	ldr	r2, [r1]
  10eabc:	e2818004 	add	r8, r1, #4
  10eac0:	ba000048 	blt	10ebe8 <_vfprintf_r+0x1c88>
  10eac4:	e59d001c 	ldr	r0, [sp, #28]
  10eac8:	e1821003 	orr	r1, r2, r3
  10eacc:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10ead0:	e3c00080 	bic	r0, r0, #128	; 0x80
  10ead4:	e58d001c 	str	r0, [sp, #28]
  10ead8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  10eadc:	e3510000 	cmp	r1, #0
  10eae0:	03500000 	cmpeq	r0, #0
  10eae4:	0afffc2b 	beq	10db98 <_vfprintf_r+0xc38>
  10eae8:	eafffb2c 	b	10d7a0 <_vfprintf_r+0x840>
  10eaec:	e59dc01c 	ldr	ip, [sp, #28]
  10eaf0:	e307305c 	movw	r3, #28764	; 0x705c
  10eaf4:	e3072060 	movw	r2, #28768	; 0x7060
  10eaf8:	e3403011 	movt	r3, #17
  10eafc:	e3570047 	cmp	r7, #71	; 0x47
  10eb00:	e3402011 	movt	r2, #17
  10eb04:	e3a01003 	mov	r1, #3
  10eb08:	e3ccc080 	bic	ip, ip, #128	; 0x80
  10eb0c:	d1a02003 	movle	r2, r3
  10eb10:	e58d0028 	str	r0, [sp, #40]	; 0x28
  10eb14:	e58d1020 	str	r1, [sp, #32]
  10eb18:	e58dc01c 	str	ip, [sp, #28]
  10eb1c:	e58d2048 	str	r2, [sp, #72]	; 0x48
  10eb20:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  10eb24:	e58d1038 	str	r1, [sp, #56]	; 0x38
  10eb28:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10eb2c:	eafffa51 	b	10d478 <_vfprintf_r+0x518>
  10eb30:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  10eb34:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  10eb38:	e5cd5077 	strb	r5, [sp, #119]	; 0x77
  10eb3c:	e5923000 	ldr	r3, [r2]
  10eb40:	e2828004 	add	r8, r2, #4
  10eb44:	e3510000 	cmp	r1, #0
  10eb48:	b58d803c 	strlt	r8, [sp, #60]	; 0x3c
  10eb4c:	ee803b90 	vdup.32	d16, r3
  10eb50:	f3e000b0 	vshr.u64	d16, d16, #32
  10eb54:	edcd0b08 	vstr	d16, [sp, #32]
  10eb58:	bafffe0f 	blt	10e39c <_vfprintf_r+0x143c>
  10eb5c:	e1cd22d0 	ldrd	r2, [sp, #32]
  10eb60:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10eb64:	e1823003 	orr	r3, r2, r3
  10eb68:	e59d201c 	ldr	r2, [sp, #28]
  10eb6c:	e3c22080 	bic	r2, r2, #128	; 0x80
  10eb70:	e58d201c 	str	r2, [sp, #28]
  10eb74:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10eb78:	e3530000 	cmp	r3, #0
  10eb7c:	03520000 	cmpeq	r2, #0
  10eb80:	13a03001 	movne	r3, #1
  10eb84:	03a03000 	moveq	r3, #0
  10eb88:	1afffe03 	bne	10e39c <_vfprintf_r+0x143c>
  10eb8c:	eafffab1 	b	10d658 <_vfprintf_r+0x6f8>
  10eb90:	e28d2094 	add	r2, sp, #148	; 0x94
  10eb94:	e1a0100b 	mov	r1, fp
  10eb98:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10eb9c:	eb0015f7 	bl	114380 <__sprint_r>
  10eba0:	e3500000 	cmp	r0, #0
  10eba4:	1afff9cd 	bne	10d2e0 <_vfprintf_r+0x380>
  10eba8:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
  10ebac:	e1a0900a 	mov	r9, sl
  10ebb0:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10ebb4:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ebb8:	e0622001 	rsb	r2, r2, r1
  10ebbc:	eafffe7d 	b	10e5b8 <_vfprintf_r+0x1658>
  10ebc0:	e28d2094 	add	r2, sp, #148	; 0x94
  10ebc4:	e1a0100b 	mov	r1, fp
  10ebc8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10ebcc:	eb0015eb 	bl	114380 <__sprint_r>
  10ebd0:	e3500000 	cmp	r0, #0
  10ebd4:	1afff9c1 	bne	10d2e0 <_vfprintf_r+0x380>
  10ebd8:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
  10ebdc:	e1a0900a 	mov	r9, sl
  10ebe0:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ebe4:	eafffe5f 	b	10e568 <_vfprintf_r+0x1608>
  10ebe8:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10ebec:	eafffaeb 	b	10d7a0 <_vfprintf_r+0x840>
  10ebf0:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10ebf4:	eafffb24 	b	10d88c <_vfprintf_r+0x92c>
  10ebf8:	e28d2094 	add	r2, sp, #148	; 0x94
  10ebfc:	e1a0100b 	mov	r1, fp
  10ec00:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10ec04:	eb0015dd 	bl	114380 <__sprint_r>
  10ec08:	e3500000 	cmp	r0, #0
  10ec0c:	1afff9b3 	bne	10d2e0 <_vfprintf_r+0x380>
  10ec10:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ec14:	e1a0900a 	mov	r9, sl
  10ec18:	eafffce9 	b	10dfc4 <_vfprintf_r+0x1064>
  10ec1c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10ec20:	e3071094 	movw	r1, #28820	; 0x7094
  10ec24:	e3401011 	movt	r1, #17
  10ec28:	e2833001 	add	r3, r3, #1
  10ec2c:	e5891000 	str	r1, [r9]
  10ec30:	e3a01001 	mov	r1, #1
  10ec34:	e2822001 	add	r2, r2, #1
  10ec38:	e5891004 	str	r1, [r9, #4]
  10ec3c:	e3520007 	cmp	r2, #7
  10ec40:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10ec44:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10ec48:	d2899008 	addle	r9, r9, #8
  10ec4c:	ca0000e5 	bgt	10efe8 <_vfprintf_r+0x2088>
  10ec50:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10ec54:	e1922004 	orrs	r2, r2, r4
  10ec58:	1a000002 	bne	10ec68 <_vfprintf_r+0x1d08>
  10ec5c:	e59d201c 	ldr	r2, [sp, #28]
  10ec60:	e3120001 	tst	r2, #1
  10ec64:	0afffc7c 	beq	10de5c <_vfprintf_r+0xefc>
  10ec68:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10ec6c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
  10ec70:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
  10ec74:	e2822001 	add	r2, r2, #1
  10ec78:	e3520007 	cmp	r2, #7
  10ec7c:	e0813003 	add	r3, r1, r3
  10ec80:	e5890000 	str	r0, [r9]
  10ec84:	e5891004 	str	r1, [r9, #4]
  10ec88:	d2899008 	addle	r9, r9, #8
  10ec8c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10ec90:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10ec94:	ca00010d 	bgt	10f0d0 <_vfprintf_r+0x2170>
  10ec98:	e2644000 	rsb	r4, r4, #0
  10ec9c:	e3540000 	cmp	r4, #0
  10eca0:	da000045 	ble	10edbc <_vfprintf_r+0x1e5c>
  10eca4:	e3540010 	cmp	r4, #16
  10eca8:	e59f55f4 	ldr	r5, [pc, #1524]	; 10f2a4 <_vfprintf_r+0x2344>
  10ecac:	da000030 	ble	10ed74 <_vfprintf_r+0x1e14>
  10ecb0:	e3a07010 	mov	r7, #16
  10ecb4:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  10ecb8:	ea000002 	b	10ecc8 <_vfprintf_r+0x1d68>
  10ecbc:	e2444010 	sub	r4, r4, #16
  10ecc0:	e3540010 	cmp	r4, #16
  10ecc4:	da00002a 	ble	10ed74 <_vfprintf_r+0x1e14>
  10ecc8:	e2822001 	add	r2, r2, #1
  10eccc:	e2833010 	add	r3, r3, #16
  10ecd0:	e3520007 	cmp	r2, #7
  10ecd4:	e88900a0 	stm	r9, {r5, r7}
  10ecd8:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10ecdc:	d2899008 	addle	r9, r9, #8
  10ece0:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10ece4:	dafffff4 	ble	10ecbc <_vfprintf_r+0x1d5c>
  10ece8:	e28d2094 	add	r2, sp, #148	; 0x94
  10ecec:	e1a0100b 	mov	r1, fp
  10ecf0:	e1a00008 	mov	r0, r8
  10ecf4:	e1a0900a 	mov	r9, sl
  10ecf8:	eb0015a0 	bl	114380 <__sprint_r>
  10ecfc:	e3500000 	cmp	r0, #0
  10ed00:	1afff976 	bne	10d2e0 <_vfprintf_r+0x380>
  10ed04:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ed08:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10ed0c:	eaffffea 	b	10ecbc <_vfprintf_r+0x1d5c>
  10ed10:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ed14:	e1a0800b 	mov	r8, fp
  10ed18:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  10ed1c:	e3530000 	cmp	r3, #0
  10ed20:	1a0000c3 	bne	10f034 <_vfprintf_r+0x20d4>
  10ed24:	e3a03000 	mov	r3, #0
  10ed28:	e58d3098 	str	r3, [sp, #152]	; 0x98
  10ed2c:	eafff96c 	b	10d2e4 <_vfprintf_r+0x384>
  10ed30:	e59d101c 	ldr	r1, [sp, #28]
  10ed34:	e3070078 	movw	r0, #28792	; 0x7078
  10ed38:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10ed3c:	e1a0700c 	mov	r7, ip
  10ed40:	e3400011 	movt	r0, #17
  10ed44:	e3811002 	orr	r1, r1, #2
  10ed48:	e58d101c 	str	r1, [sp, #28]
  10ed4c:	eafff9b5 	b	10d428 <_vfprintf_r+0x4c8>
  10ed50:	e28d2094 	add	r2, sp, #148	; 0x94
  10ed54:	e1a0100b 	mov	r1, fp
  10ed58:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10ed5c:	eb001587 	bl	114380 <__sprint_r>
  10ed60:	e3500000 	cmp	r0, #0
  10ed64:	1afff95d 	bne	10d2e0 <_vfprintf_r+0x380>
  10ed68:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ed6c:	e1a0900a 	mov	r9, sl
  10ed70:	eafffca6 	b	10e010 <_vfprintf_r+0x10b0>
  10ed74:	e2822001 	add	r2, r2, #1
  10ed78:	e0833004 	add	r3, r3, r4
  10ed7c:	e3520007 	cmp	r2, #7
  10ed80:	e5895000 	str	r5, [r9]
  10ed84:	e5894004 	str	r4, [r9, #4]
  10ed88:	d2899008 	addle	r9, r9, #8
  10ed8c:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10ed90:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10ed94:	da000008 	ble	10edbc <_vfprintf_r+0x1e5c>
  10ed98:	e28d2094 	add	r2, sp, #148	; 0x94
  10ed9c:	e1a0100b 	mov	r1, fp
  10eda0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10eda4:	eb001575 	bl	114380 <__sprint_r>
  10eda8:	e3500000 	cmp	r0, #0
  10edac:	1afff94b 	bne	10d2e0 <_vfprintf_r+0x380>
  10edb0:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10edb4:	e1a0900a 	mov	r9, sl
  10edb8:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10edbc:	e2822001 	add	r2, r2, #1
  10edc0:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
  10edc4:	e3520007 	cmp	r2, #7
  10edc8:	e58d2098 	str	r2, [sp, #152]	; 0x98
  10edcc:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
  10edd0:	e0813003 	add	r3, r1, r3
  10edd4:	e5891004 	str	r1, [r9, #4]
  10edd8:	e58d309c 	str	r3, [sp, #156]	; 0x9c
  10eddc:	e5892000 	str	r2, [r9]
  10ede0:	dafffc1c 	ble	10de58 <_vfprintf_r+0xef8>
  10ede4:	eafffd18 	b	10e24c <_vfprintf_r+0x12ec>
  10ede8:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
  10edec:	e58d4028 	str	r4, [sp, #40]	; 0x28
  10edf0:	fafff812 	blx	10ce40 <strlen>
  10edf4:	e1a03000 	mov	r3, r0
  10edf8:	e58d0038 	str	r0, [sp, #56]	; 0x38
  10edfc:	eafff9f6 	b	10d5dc <_vfprintf_r+0x67c>
  10ee00:	e3075034 	movw	r5, #28724	; 0x7034
  10ee04:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
  10ee08:	e3405011 	movt	r5, #17
  10ee0c:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10ee10:	eafff9d1 	b	10d55c <_vfprintf_r+0x5fc>
  10ee14:	e28d2094 	add	r2, sp, #148	; 0x94
  10ee18:	e1a0100b 	mov	r1, fp
  10ee1c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10ee20:	eb001556 	bl	114380 <__sprint_r>
  10ee24:	e3500000 	cmp	r0, #0
  10ee28:	1afff92c 	bne	10d2e0 <_vfprintf_r+0x380>
  10ee2c:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10ee30:	e1a0900a 	mov	r9, sl
  10ee34:	eafffd34 	b	10e30c <_vfprintf_r+0x13ac>
  10ee38:	e59d201c 	ldr	r2, [sp, #28]
  10ee3c:	ee183a90 	vmov	r3, s17
  10ee40:	e3530000 	cmp	r3, #0
  10ee44:	e3822c01 	orr	r2, r2, #256	; 0x100
  10ee48:	e58d2040 	str	r2, [sp, #64]	; 0x40
  10ee4c:	ba000037 	blt	10ef30 <_vfprintf_r+0x1fd0>
  10ee50:	e3550046 	cmp	r5, #70	; 0x46
  10ee54:	13a08000 	movne	r8, #0
  10ee58:	1eb09b48 	vmovne.f64	d9, d8
  10ee5c:	1a000037 	bne	10ef40 <_vfprintf_r+0x1fe0>
  10ee60:	e28d207c 	add	r2, sp, #124	; 0x7c
  10ee64:	e3a03003 	mov	r3, #3
  10ee68:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10ee6c:	e28d008c 	add	r0, sp, #140	; 0x8c
  10ee70:	e28d1080 	add	r1, sp, #128	; 0x80
  10ee74:	e3a08000 	mov	r8, #0
  10ee78:	eeb09b48 	vmov.f64	d9, d8
  10ee7c:	e58d0010 	str	r0, [sp, #16]
  10ee80:	e58d2008 	str	r2, [sp, #8]
  10ee84:	e58d3000 	str	r3, [sp]
  10ee88:	e58dc004 	str	ip, [sp, #4]
  10ee8c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10ee90:	e58d100c 	str	r1, [sp, #12]
  10ee94:	ec532b18 	vmov	r2, r3, d8
  10ee98:	eb0002ad 	bl	10f954 <_dtoa_r>
  10ee9c:	e58d0048 	str	r0, [sp, #72]	; 0x48
  10eea0:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
  10eea4:	eeb59b40 	vcmp.f64	d9, #0.0
  10eea8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10eeac:	e5d32000 	ldrb	r2, [r3]
  10eeb0:	13a03001 	movne	r3, #1
  10eeb4:	03a03000 	moveq	r3, #0
  10eeb8:	e3520030 	cmp	r2, #48	; 0x30
  10eebc:	13a03000 	movne	r3, #0
  10eec0:	02033001 	andeq	r3, r3, #1
  10eec4:	e3530000 	cmp	r3, #0
  10eec8:	0a0000b9 	beq	10f1b4 <_vfprintf_r+0x2254>
  10eecc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10eed0:	e2633001 	rsb	r3, r3, #1
  10eed4:	e58d307c 	str	r3, [sp, #124]	; 0x7c
  10eed8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10eedc:	e0834002 	add	r4, r3, r2
  10eee0:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
  10eee4:	e0834004 	add	r4, r3, r4
  10eee8:	eafffe68 	b	10e890 <_vfprintf_r+0x1930>
  10eeec:	e3530006 	cmp	r3, #6
  10eef0:	e307208c 	movw	r2, #28812	; 0x708c
  10eef4:	23a03006 	movcs	r3, #6
  10eef8:	e3402011 	movt	r2, #17
  10eefc:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10ef00:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10ef04:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10ef08:	e58d3020 	str	r3, [sp, #32]
  10ef0c:	e58d2048 	str	r2, [sp, #72]	; 0x48
  10ef10:	eafffad3 	b	10da64 <_vfprintf_r+0xb04>
  10ef14:	e3075034 	movw	r5, #28724	; 0x7034
  10ef18:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10ef1c:	e3405011 	movt	r5, #17
  10ef20:	eafffbf9 	b	10df0c <_vfprintf_r+0xfac>
  10ef24:	e3a05047 	mov	r5, #71	; 0x47
  10ef28:	e3a03001 	mov	r3, #1
  10ef2c:	e58d3028 	str	r3, [sp, #40]	; 0x28
  10ef30:	e3550046 	cmp	r5, #70	; 0x46
  10ef34:	eeb19b48 	vneg.f64	d9, d8
  10ef38:	0a00009f 	beq	10f1bc <_vfprintf_r+0x225c>
  10ef3c:	e3a0802d 	mov	r8, #45	; 0x2d
  10ef40:	e3550045 	cmp	r5, #69	; 0x45
  10ef44:	1afffe3b 	bne	10e838 <_vfprintf_r+0x18d8>
  10ef48:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10ef4c:	e28d207c 	add	r2, sp, #124	; 0x7c
  10ef50:	e28d008c 	add	r0, sp, #140	; 0x8c
  10ef54:	e28d1080 	add	r1, sp, #128	; 0x80
  10ef58:	e58d0010 	str	r0, [sp, #16]
  10ef5c:	e2834001 	add	r4, r3, #1
  10ef60:	e3a03002 	mov	r3, #2
  10ef64:	e58d2008 	str	r2, [sp, #8]
  10ef68:	e58d3000 	str	r3, [sp]
  10ef6c:	e58d4004 	str	r4, [sp, #4]
  10ef70:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10ef74:	e58d100c 	str	r1, [sp, #12]
  10ef78:	ec532b19 	vmov	r2, r3, d9
  10ef7c:	eb000274 	bl	10f954 <_dtoa_r>
  10ef80:	e58d0048 	str	r0, [sp, #72]	; 0x48
  10ef84:	eaffffd5 	b	10eee0 <_vfprintf_r+0x1f80>
  10ef88:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
  10ef8c:	e3a0502d 	mov	r5, #45	; 0x2d
  10ef90:	e5cd5077 	strb	r5, [sp, #119]	; 0x77
  10ef94:	e58d201c 	str	r2, [sp, #28]
  10ef98:	e3a02000 	mov	r2, #0
  10ef9c:	e58d2028 	str	r2, [sp, #40]	; 0x28
  10efa0:	eafff937 	b	10d484 <_vfprintf_r+0x524>
  10efa4:	e3570065 	cmp	r7, #101	; 0x65
  10efa8:	da000028 	ble	10f050 <_vfprintf_r+0x20f0>
  10efac:	e3570066 	cmp	r7, #102	; 0x66
  10efb0:	e58d304c 	str	r3, [sp, #76]	; 0x4c
  10efb4:	1afffe53 	bne	10e908 <_vfprintf_r+0x19a8>
  10efb8:	e3530000 	cmp	r3, #0
  10efbc:	da000095 	ble	10f218 <_vfprintf_r+0x22b8>
  10efc0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10efc4:	e3520000 	cmp	r2, #0
  10efc8:	1a00008b 	bne	10f1fc <_vfprintf_r+0x229c>
  10efcc:	e59d201c 	ldr	r2, [sp, #28]
  10efd0:	e3120001 	tst	r2, #1
  10efd4:	1a000088 	bne	10f1fc <_vfprintf_r+0x229c>
  10efd8:	e1a02003 	mov	r2, r3
  10efdc:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10efe0:	e58d2038 	str	r2, [sp, #56]	; 0x38
  10efe4:	eafffe56 	b	10e944 <_vfprintf_r+0x19e4>
  10efe8:	e28d2094 	add	r2, sp, #148	; 0x94
  10efec:	e1a0100b 	mov	r1, fp
  10eff0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10eff4:	eb0014e1 	bl	114380 <__sprint_r>
  10eff8:	e3500000 	cmp	r0, #0
  10effc:	1afff8b7 	bne	10d2e0 <_vfprintf_r+0x380>
  10f000:	e59d407c 	ldr	r4, [sp, #124]	; 0x7c
  10f004:	e1a0900a 	mov	r9, sl
  10f008:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10f00c:	eaffff0f 	b	10ec50 <_vfprintf_r+0x1cf0>
  10f010:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10f014:	e5dd5077 	ldrb	r5, [sp, #119]	; 0x77
  10f018:	e58d0028 	str	r0, [sp, #40]	; 0x28
  10f01c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10f020:	e1c32fc3 	bic	r2, r3, r3, asr #31
  10f024:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10f028:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  10f02c:	e58d2020 	str	r2, [sp, #32]
  10f030:	eafff910 	b	10d478 <_vfprintf_r+0x518>
  10f034:	e1a0000b 	mov	r0, fp
  10f038:	e28d2094 	add	r2, sp, #148	; 0x94
  10f03c:	e1a01008 	mov	r1, r8
  10f040:	eb0014ce 	bl	114380 <__sprint_r>
  10f044:	e3500000 	cmp	r0, #0
  10f048:	0affff35 	beq	10ed24 <_vfprintf_r+0x1dc4>
  10f04c:	eafff8a4 	b	10d2e4 <_vfprintf_r+0x384>
  10f050:	e2433001 	sub	r3, r3, #1
  10f054:	e5cd7084 	strb	r7, [sp, #132]	; 0x84
  10f058:	e3530000 	cmp	r3, #0
  10f05c:	e58d307c 	str	r3, [sp, #124]	; 0x7c
  10f060:	b2633000 	rsblt	r3, r3, #0
  10f064:	b3a0202d 	movlt	r2, #45	; 0x2d
  10f068:	a3a0202b 	movge	r2, #43	; 0x2b
  10f06c:	e3530009 	cmp	r3, #9
  10f070:	e5cd2085 	strb	r2, [sp, #133]	; 0x85
  10f074:	ca00002c 	bgt	10f12c <_vfprintf_r+0x21cc>
  10f078:	e28dc088 	add	ip, sp, #136	; 0x88
  10f07c:	e2833030 	add	r3, r3, #48	; 0x30
  10f080:	e3a02030 	mov	r2, #48	; 0x30
  10f084:	e5cd3087 	strb	r3, [sp, #135]	; 0x87
  10f088:	e5cd2086 	strb	r2, [sp, #134]	; 0x86
  10f08c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
  10f090:	e28d3084 	add	r3, sp, #132	; 0x84
  10f094:	e063300c 	rsb	r3, r3, ip
  10f098:	e1a01003 	mov	r1, r3
  10f09c:	e58d3068 	str	r3, [sp, #104]	; 0x68
  10f0a0:	e3520001 	cmp	r2, #1
  10f0a4:	e1a03002 	mov	r3, r2
  10f0a8:	e0833001 	add	r3, r3, r1
  10f0ac:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10f0b0:	da000065 	ble	10f24c <_vfprintf_r+0x22ec>
  10f0b4:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  10f0b8:	e3a02000 	mov	r2, #0
  10f0bc:	e58d204c 	str	r2, [sp, #76]	; 0x4c
  10f0c0:	e2833001 	add	r3, r3, #1
  10f0c4:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10f0c8:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10f0cc:	eafffe1c 	b	10e944 <_vfprintf_r+0x19e4>
  10f0d0:	e28d2094 	add	r2, sp, #148	; 0x94
  10f0d4:	e1a0100b 	mov	r1, fp
  10f0d8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10f0dc:	eb0014a7 	bl	114380 <__sprint_r>
  10f0e0:	e3500000 	cmp	r0, #0
  10f0e4:	1afff87d 	bne	10d2e0 <_vfprintf_r+0x380>
  10f0e8:	e59d407c 	ldr	r4, [sp, #124]	; 0x7c
  10f0ec:	e1a0900a 	mov	r9, sl
  10f0f0:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
  10f0f4:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
  10f0f8:	eafffee6 	b	10ec98 <_vfprintf_r+0x1d38>
  10f0fc:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  10f100:	e3530000 	cmp	r3, #0
  10f104:	d2637002 	rsble	r7, r3, #2
  10f108:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
  10f10c:	c3a07001 	movgt	r7, #1
  10f110:	e0873003 	add	r3, r7, r3
  10f114:	e3a07067 	mov	r7, #103	; 0x67
  10f118:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10f11c:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10f120:	eafffe07 	b	10e944 <_vfprintf_r+0x19e4>
  10f124:	e58d803c 	str	r8, [sp, #60]	; 0x3c
  10f128:	eafffe2d 	b	10e9e4 <_vfprintf_r+0x1a84>
  10f12c:	e59d406c 	ldr	r4, [sp, #108]	; 0x6c
  10f130:	e28de093 	add	lr, sp, #147	; 0x93
  10f134:	e1a0c00e 	mov	ip, lr
  10f138:	e0c10493 	smull	r0, r1, r3, r4
  10f13c:	e1a02fc3 	asr	r2, r3, #31
  10f140:	e0621141 	rsb	r1, r2, r1, asr #2
  10f144:	e1a02181 	lsl	r2, r1, #3
  10f148:	e3510009 	cmp	r1, #9
  10f14c:	e0822081 	add	r2, r2, r1, lsl #1
  10f150:	e0622003 	rsb	r2, r2, r3
  10f154:	e1a03001 	mov	r3, r1
  10f158:	e2822030 	add	r2, r2, #48	; 0x30
  10f15c:	e56c2001 	strb	r2, [ip, #-1]!
  10f160:	cafffff4 	bgt	10f138 <_vfprintf_r+0x21d8>
  10f164:	e2813030 	add	r3, r1, #48	; 0x30
  10f168:	e1a0100c 	mov	r1, ip
  10f16c:	e6ef2073 	uxtb	r2, r3
  10f170:	e5612001 	strb	r2, [r1, #-1]!
  10f174:	e15e0001 	cmp	lr, r1
  10f178:	9a000045 	bls	10f294 <_vfprintf_r+0x2334>
  10f17c:	e1a0300c 	mov	r3, ip
  10f180:	e28d1086 	add	r1, sp, #134	; 0x86
  10f184:	ea000000 	b	10f18c <_vfprintf_r+0x222c>
  10f188:	e4d32001 	ldrb	r2, [r3], #1
  10f18c:	e153000e 	cmp	r3, lr
  10f190:	e4c12001 	strb	r2, [r1], #1
  10f194:	1afffffb 	bne	10f188 <_vfprintf_r+0x2228>
  10f198:	e2833001 	add	r3, r3, #1
  10f19c:	e06cc003 	rsb	ip, ip, r3
  10f1a0:	e28d3086 	add	r3, sp, #134	; 0x86
  10f1a4:	e083c00c 	add	ip, r3, ip
  10f1a8:	eaffffb7 	b	10f08c <_vfprintf_r+0x212c>
  10f1ac:	e59d308c 	ldr	r3, [sp, #140]	; 0x8c
  10f1b0:	eafffdc4 	b	10e8c8 <_vfprintf_r+0x1968>
  10f1b4:	e59d307c 	ldr	r3, [sp, #124]	; 0x7c
  10f1b8:	eaffff46 	b	10eed8 <_vfprintf_r+0x1f78>
  10f1bc:	e28d207c 	add	r2, sp, #124	; 0x7c
  10f1c0:	e3a03003 	mov	r3, #3
  10f1c4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
  10f1c8:	e28d008c 	add	r0, sp, #140	; 0x8c
  10f1cc:	e28d1080 	add	r1, sp, #128	; 0x80
  10f1d0:	e58d0010 	str	r0, [sp, #16]
  10f1d4:	e58d2008 	str	r2, [sp, #8]
  10f1d8:	e3a0802d 	mov	r8, #45	; 0x2d
  10f1dc:	e58d3000 	str	r3, [sp]
  10f1e0:	e58dc004 	str	ip, [sp, #4]
  10f1e4:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  10f1e8:	e58d100c 	str	r1, [sp, #12]
  10f1ec:	ec532b19 	vmov	r2, r3, d9
  10f1f0:	eb0001d7 	bl	10f954 <_dtoa_r>
  10f1f4:	e58d0048 	str	r0, [sp, #72]	; 0x48
  10f1f8:	eaffff28 	b	10eea0 <_vfprintf_r+0x1f40>
  10f1fc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10f200:	e2834001 	add	r4, r3, #1
  10f204:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  10f208:	e0833004 	add	r3, r3, r4
  10f20c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10f210:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10f214:	eafffdca 	b	10e944 <_vfprintf_r+0x19e4>
  10f218:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10f21c:	e3530000 	cmp	r3, #0
  10f220:	1a000004 	bne	10f238 <_vfprintf_r+0x22d8>
  10f224:	e59d301c 	ldr	r3, [sp, #28]
  10f228:	e3130001 	tst	r3, #1
  10f22c:	03a03001 	moveq	r3, #1
  10f230:	058d3038 	streq	r3, [sp, #56]	; 0x38
  10f234:	0afffdc2 	beq	10e944 <_vfprintf_r+0x19e4>
  10f238:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  10f23c:	e2833002 	add	r3, r3, #2
  10f240:	e58d3038 	str	r3, [sp, #56]	; 0x38
  10f244:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10f248:	eafffdbd 	b	10e944 <_vfprintf_r+0x19e4>
  10f24c:	e59d301c 	ldr	r3, [sp, #28]
  10f250:	e2133001 	ands	r3, r3, #1
  10f254:	1affff96 	bne	10f0b4 <_vfprintf_r+0x2154>
  10f258:	e58d304c 	str	r3, [sp, #76]	; 0x4c
  10f25c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  10f260:	e1c33fc3 	bic	r3, r3, r3, asr #31
  10f264:	eafffdb6 	b	10e944 <_vfprintf_r+0x19e4>
  10f268:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  10f26c:	e593c000 	ldr	ip, [r3]
  10f270:	e1a0e00c 	mov	lr, ip
  10f274:	e58dc028 	str	ip, [sp, #40]	; 0x28
  10f278:	e35e0000 	cmp	lr, #0
  10f27c:	e283c004 	add	ip, r3, #4
  10f280:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
  10f284:	e5d63001 	ldrb	r3, [r6, #1]
  10f288:	e1a06000 	mov	r6, r0
  10f28c:	aafff795 	bge	10d0e8 <_vfprintf_r+0x188>
  10f290:	eafff792 	b	10d0e0 <_vfprintf_r+0x180>
  10f294:	e28dc086 	add	ip, sp, #134	; 0x86
  10f298:	eaffff7b 	b	10f08c <_vfprintf_r+0x212c>
  10f29c:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
  10f2a0:	eaffff0e 	b	10eee0 <_vfprintf_r+0x1f80>
  10f2a4:	00117044 	andseq	r7, r1, r4, asr #32

0010f2a8 <vfprintf>:
  10f2a8:	e92d4070 	push	{r4, r5, r6, lr}
  10f2ac:	e1a05001 	mov	r5, r1
  10f2b0:	e1a06002 	mov	r6, r2
  10f2b4:	e1a04000 	mov	r4, r0
  10f2b8:	eb000a55 	bl	111c14 <__getreent>
  10f2bc:	e1a03006 	mov	r3, r6
  10f2c0:	e1a02005 	mov	r2, r5
  10f2c4:	e1a01004 	mov	r1, r4
  10f2c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  10f2cc:	eafff723 	b	10cf60 <_vfprintf_r>

0010f2d0 <__sbprintf>:
  10f2d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10f2d4:	e1a04001 	mov	r4, r1
  10f2d8:	e1d110bc 	ldrh	r1, [r1, #12]
  10f2dc:	e1a07000 	mov	r7, r0
  10f2e0:	e1a08003 	mov	r8, r3
  10f2e4:	e1a06002 	mov	r6, r2
  10f2e8:	e1d4c0be 	ldrh	ip, [r4, #14]
  10f2ec:	e24dde46 	sub	sp, sp, #1120	; 0x460
  10f2f0:	e5940064 	ldr	r0, [r4, #100]	; 0x64
  10f2f4:	e24dd008 	sub	sp, sp, #8
  10f2f8:	e594301c 	ldr	r3, [r4, #28]
  10f2fc:	e3c11002 	bic	r1, r1, #2
  10f300:	e5942024 	ldr	r2, [r4, #36]	; 0x24
  10f304:	e1cd10bc 	strh	r1, [sp, #12]
  10f308:	e3a01b01 	mov	r1, #1024	; 0x400
  10f30c:	e1cdc0be 	strh	ip, [sp, #14]
  10f310:	e28dc068 	add	ip, sp, #104	; 0x68
  10f314:	e58d0064 	str	r0, [sp, #100]	; 0x64
  10f318:	e28d0058 	add	r0, sp, #88	; 0x58
  10f31c:	e58d301c 	str	r3, [sp, #28]
  10f320:	e3a03000 	mov	r3, #0
  10f324:	e58d2024 	str	r2, [sp, #36]	; 0x24
  10f328:	e58dc000 	str	ip, [sp]
  10f32c:	e58dc010 	str	ip, [sp, #16]
  10f330:	e58d1008 	str	r1, [sp, #8]
  10f334:	e58d1014 	str	r1, [sp, #20]
  10f338:	e58d3018 	str	r3, [sp, #24]
  10f33c:	eb001c1f 	bl	1163c0 <__generic_gxx_recursive_mutex_init_function>
  10f340:	e1a02006 	mov	r2, r6
  10f344:	e1a03008 	mov	r3, r8
  10f348:	e1a0100d 	mov	r1, sp
  10f34c:	e1a00007 	mov	r0, r7
  10f350:	ebfff702 	bl	10cf60 <_vfprintf_r>
  10f354:	e2506000 	subs	r6, r0, #0
  10f358:	ba000004 	blt	10f370 <__sbprintf+0xa0>
  10f35c:	e1a0100d 	mov	r1, sp
  10f360:	e1a00007 	mov	r0, r7
  10f364:	eb0006aa 	bl	110e14 <_fflush_r>
  10f368:	e3500000 	cmp	r0, #0
  10f36c:	13e06000 	mvnne	r6, #0
  10f370:	e1dd30bc 	ldrh	r3, [sp, #12]
  10f374:	e28d0058 	add	r0, sp, #88	; 0x58
  10f378:	e3130040 	tst	r3, #64	; 0x40
  10f37c:	11d430bc 	ldrhne	r3, [r4, #12]
  10f380:	13833040 	orrne	r3, r3, #64	; 0x40
  10f384:	11c430bc 	strhne	r3, [r4, #12]
  10f388:	eb001c0e 	bl	1163c8 <__generic_gxx_recursive_mutex_destroy>
  10f38c:	e1a00006 	mov	r0, r6
  10f390:	e28dde46 	add	sp, sp, #1120	; 0x460
  10f394:	e28dd008 	add	sp, sp, #8
  10f398:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0010f39c <__swsetup_r>:
  10f39c:	e92d4070 	push	{r4, r5, r6, lr}
  10f3a0:	e1a05000 	mov	r5, r0
  10f3a4:	e1a04001 	mov	r4, r1
  10f3a8:	eb000a19 	bl	111c14 <__getreent>
  10f3ac:	e2503000 	subs	r3, r0, #0
  10f3b0:	0a000002 	beq	10f3c0 <__swsetup_r+0x24>
  10f3b4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f3b8:	e3530000 	cmp	r3, #0
  10f3bc:	0a00002f 	beq	10f480 <__swsetup_r+0xe4>
  10f3c0:	e1d420bc 	ldrh	r2, [r4, #12]
  10f3c4:	e6ff3072 	uxth	r3, r2
  10f3c8:	e3130008 	tst	r3, #8
  10f3cc:	0a00000b 	beq	10f400 <__swsetup_r+0x64>
  10f3d0:	e5940010 	ldr	r0, [r4, #16]
  10f3d4:	e3500000 	cmp	r0, #0
  10f3d8:	0a000012 	beq	10f428 <__swsetup_r+0x8c>
  10f3dc:	e2132001 	ands	r2, r3, #1
  10f3e0:	1a000019 	bne	10f44c <__swsetup_r+0xb0>
  10f3e4:	e3130002 	tst	r3, #2
  10f3e8:	05942014 	ldreq	r2, [r4, #20]
  10f3ec:	e3500000 	cmp	r0, #0
  10f3f0:	e5842008 	str	r2, [r4, #8]
  10f3f4:	0a00001b 	beq	10f468 <__swsetup_r+0xcc>
  10f3f8:	e3a00000 	mov	r0, #0
  10f3fc:	e8bd8070 	pop	{r4, r5, r6, pc}
  10f400:	e3130010 	tst	r3, #16
  10f404:	0a000032 	beq	10f4d4 <__swsetup_r+0x138>
  10f408:	e3130004 	tst	r3, #4
  10f40c:	1a00001d 	bne	10f488 <__swsetup_r+0xec>
  10f410:	e5940010 	ldr	r0, [r4, #16]
  10f414:	e3500000 	cmp	r0, #0
  10f418:	e3822008 	orr	r2, r2, #8
  10f41c:	e6ff3072 	uxth	r3, r2
  10f420:	e1c420bc 	strh	r2, [r4, #12]
  10f424:	1affffec 	bne	10f3dc <__swsetup_r+0x40>
  10f428:	e2032d0a 	and	r2, r3, #640	; 0x280
  10f42c:	e3520c02 	cmp	r2, #512	; 0x200
  10f430:	0affffe9 	beq	10f3dc <__swsetup_r+0x40>
  10f434:	e1a00005 	mov	r0, r5
  10f438:	e1a01004 	mov	r1, r4
  10f43c:	eb000a42 	bl	111d4c <__smakebuf_r>
  10f440:	e1d430bc 	ldrh	r3, [r4, #12]
  10f444:	e5940010 	ldr	r0, [r4, #16]
  10f448:	eaffffe3 	b	10f3dc <__swsetup_r+0x40>
  10f44c:	e5943014 	ldr	r3, [r4, #20]
  10f450:	e3500000 	cmp	r0, #0
  10f454:	e3a02000 	mov	r2, #0
  10f458:	e5842008 	str	r2, [r4, #8]
  10f45c:	e2633000 	rsb	r3, r3, #0
  10f460:	e5843018 	str	r3, [r4, #24]
  10f464:	1affffe3 	bne	10f3f8 <__swsetup_r+0x5c>
  10f468:	e1d430bc 	ldrh	r3, [r4, #12]
  10f46c:	e3130080 	tst	r3, #128	; 0x80
  10f470:	13833040 	orrne	r3, r3, #64	; 0x40
  10f474:	13e00000 	mvnne	r0, #0
  10f478:	11c430bc 	strhne	r3, [r4, #12]
  10f47c:	e8bd8070 	pop	{r4, r5, r6, pc}
  10f480:	eb0006e6 	bl	111020 <__sinit>
  10f484:	eaffffcd 	b	10f3c0 <__swsetup_r+0x24>
  10f488:	e5941030 	ldr	r1, [r4, #48]	; 0x30
  10f48c:	e3510000 	cmp	r1, #0
  10f490:	0a000007 	beq	10f4b4 <__swsetup_r+0x118>
  10f494:	e2843040 	add	r3, r4, #64	; 0x40
  10f498:	e1510003 	cmp	r1, r3
  10f49c:	0a000002 	beq	10f4ac <__swsetup_r+0x110>
  10f4a0:	e1a00005 	mov	r0, r5
  10f4a4:	eb0007bb 	bl	111398 <_free_r>
  10f4a8:	e1d420bc 	ldrh	r2, [r4, #12]
  10f4ac:	e3a03000 	mov	r3, #0
  10f4b0:	e5843030 	str	r3, [r4, #48]	; 0x30
  10f4b4:	e3c22024 	bic	r2, r2, #36	; 0x24
  10f4b8:	e5940010 	ldr	r0, [r4, #16]
  10f4bc:	e1a02802 	lsl	r2, r2, #16
  10f4c0:	e3a03000 	mov	r3, #0
  10f4c4:	e5843004 	str	r3, [r4, #4]
  10f4c8:	e1a02822 	lsr	r2, r2, #16
  10f4cc:	e5840000 	str	r0, [r4]
  10f4d0:	eaffffcf 	b	10f414 <__swsetup_r+0x78>
  10f4d4:	e3822040 	orr	r2, r2, #64	; 0x40
  10f4d8:	e3a03009 	mov	r3, #9
  10f4dc:	e5853000 	str	r3, [r5]
  10f4e0:	e3e00000 	mvn	r0, #0
  10f4e4:	e1c420bc 	strh	r2, [r4, #12]
  10f4e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0010f4ec <__register_exitproc>:
  10f4ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10f4f0:	e1a05000 	mov	r5, r0
  10f4f4:	e3074390 	movw	r4, #29584	; 0x7390
  10f4f8:	e30905a0 	movw	r0, #38304	; 0x95a0
  10f4fc:	e3404011 	movt	r4, #17
  10f500:	e3400011 	movt	r0, #17
  10f504:	e1a08002 	mov	r8, r2
  10f508:	e1a07003 	mov	r7, r3
  10f50c:	e1a06001 	mov	r6, r1
  10f510:	eb001bb0 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  10f514:	e5942000 	ldr	r2, [r4]
  10f518:	e5923148 	ldr	r3, [r2, #328]	; 0x148
  10f51c:	e3530000 	cmp	r3, #0
  10f520:	02823f53 	addeq	r3, r2, #332	; 0x14c
  10f524:	05823148 	streq	r3, [r2, #328]	; 0x148
  10f528:	e5932004 	ldr	r2, [r3, #4]
  10f52c:	e352001f 	cmp	r2, #31
  10f530:	d282c001 	addle	ip, r2, #1
  10f534:	da000011 	ble	10f580 <__register_exitproc+0x94>
  10f538:	e3003000 	movw	r3, #0
  10f53c:	e3403000 	movt	r3, #0
  10f540:	e3530000 	cmp	r3, #0
  10f544:	0a000023 	beq	10f5d8 <__register_exitproc+0xec>
  10f548:	e3a00e19 	mov	r0, #400	; 0x190
  10f54c:	e320f000 	nop	{0}
  10f550:	e2503000 	subs	r3, r0, #0
  10f554:	0a000021 	beq	10f5e0 <__register_exitproc+0xf4>
  10f558:	e5940000 	ldr	r0, [r4]
  10f55c:	e3a01000 	mov	r1, #0
  10f560:	e1a02001 	mov	r2, r1
  10f564:	e3a0c001 	mov	ip, #1
  10f568:	e5831004 	str	r1, [r3, #4]
  10f56c:	e590e148 	ldr	lr, [r0, #328]	; 0x148
  10f570:	e583e000 	str	lr, [r3]
  10f574:	e5803148 	str	r3, [r0, #328]	; 0x148
  10f578:	e5831188 	str	r1, [r3, #392]	; 0x188
  10f57c:	e583118c 	str	r1, [r3, #396]	; 0x18c
  10f580:	e3550000 	cmp	r5, #0
  10f584:	0a00000b 	beq	10f5b8 <__register_exitproc+0xcc>
  10f588:	e0831102 	add	r1, r3, r2, lsl #2
  10f58c:	e3a00001 	mov	r0, #1
  10f590:	e1a00210 	lsl	r0, r0, r2
  10f594:	e3550002 	cmp	r5, #2
  10f598:	e5818088 	str	r8, [r1, #136]	; 0x88
  10f59c:	e593e188 	ldr	lr, [r3, #392]	; 0x188
  10f5a0:	e18ee000 	orr	lr, lr, r0
  10f5a4:	e583e188 	str	lr, [r3, #392]	; 0x188
  10f5a8:	e5817108 	str	r7, [r1, #264]	; 0x108
  10f5ac:	0593118c 	ldreq	r1, [r3, #396]	; 0x18c
  10f5b0:	01810000 	orreq	r0, r1, r0
  10f5b4:	0583018c 	streq	r0, [r3, #396]	; 0x18c
  10f5b8:	e2822002 	add	r2, r2, #2
  10f5bc:	e30905a0 	movw	r0, #38304	; 0x95a0
  10f5c0:	e583c004 	str	ip, [r3, #4]
  10f5c4:	e3400011 	movt	r0, #17
  10f5c8:	e7836102 	str	r6, [r3, r2, lsl #2]
  10f5cc:	eb001b7f 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10f5d0:	e3a00000 	mov	r0, #0
  10f5d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  10f5d8:	e3e00000 	mvn	r0, #0
  10f5dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  10f5e0:	e30905a0 	movw	r0, #38304	; 0x95a0
  10f5e4:	e3400011 	movt	r0, #17
  10f5e8:	eb001b78 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10f5ec:	e3e00000 	mvn	r0, #0
  10f5f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0010f5f4 <__call_exitprocs>:
  10f5f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10f5f8:	e24dd014 	sub	sp, sp, #20
  10f5fc:	e3073390 	movw	r3, #29584	; 0x7390
  10f600:	e3002000 	movw	r2, #0
  10f604:	e3403011 	movt	r3, #17
  10f608:	e3402000 	movt	r2, #0
  10f60c:	e58d0004 	str	r0, [sp, #4]
  10f610:	e30905a0 	movw	r0, #38304	; 0x95a0
  10f614:	e3400011 	movt	r0, #17
  10f618:	e58d300c 	str	r3, [sp, #12]
  10f61c:	e58d2008 	str	r2, [sp, #8]
  10f620:	e3a0a001 	mov	sl, #1
  10f624:	e1a06001 	mov	r6, r1
  10f628:	eb001b6a 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  10f62c:	e59d300c 	ldr	r3, [sp, #12]
  10f630:	e593b000 	ldr	fp, [r3]
  10f634:	e5bb7148 	ldr	r7, [fp, #328]!	; 0x148
  10f638:	e3570000 	cmp	r7, #0
  10f63c:	0a00003b 	beq	10f730 <__call_exitprocs+0x13c>
  10f640:	e5974004 	ldr	r4, [r7, #4]
  10f644:	e2545001 	subs	r5, r4, #1
  10f648:	52844001 	addpl	r4, r4, #1
  10f64c:	53a09000 	movpl	r9, #0
  10f650:	50874104 	addpl	r4, r7, r4, lsl #2
  10f654:	5a000007 	bpl	10f678 <__call_exitprocs+0x84>
  10f658:	ea000025 	b	10f6f4 <__call_exitprocs+0x100>
  10f65c:	e5943100 	ldr	r3, [r4, #256]	; 0x100
  10f660:	e1560003 	cmp	r6, r3
  10f664:	0a000005 	beq	10f680 <__call_exitprocs+0x8c>
  10f668:	e2455001 	sub	r5, r5, #1
  10f66c:	e2444004 	sub	r4, r4, #4
  10f670:	e3750001 	cmn	r5, #1
  10f674:	0a00001e 	beq	10f6f4 <__call_exitprocs+0x100>
  10f678:	e3560000 	cmp	r6, #0
  10f67c:	1afffff6 	bne	10f65c <__call_exitprocs+0x68>
  10f680:	e5973004 	ldr	r3, [r7, #4]
  10f684:	e5942000 	ldr	r2, [r4]
  10f688:	e2433001 	sub	r3, r3, #1
  10f68c:	e1530005 	cmp	r3, r5
  10f690:	05875004 	streq	r5, [r7, #4]
  10f694:	15849000 	strne	r9, [r4]
  10f698:	e3520000 	cmp	r2, #0
  10f69c:	0afffff1 	beq	10f668 <__call_exitprocs+0x74>
  10f6a0:	e5971188 	ldr	r1, [r7, #392]	; 0x188
  10f6a4:	e1a0351a 	lsl	r3, sl, r5
  10f6a8:	e5978004 	ldr	r8, [r7, #4]
  10f6ac:	e1130001 	tst	r3, r1
  10f6b0:	0a000023 	beq	10f744 <__call_exitprocs+0x150>
  10f6b4:	e597118c 	ldr	r1, [r7, #396]	; 0x18c
  10f6b8:	e1130001 	tst	r3, r1
  10f6bc:	1a000022 	bne	10f74c <__call_exitprocs+0x158>
  10f6c0:	e5941080 	ldr	r1, [r4, #128]	; 0x80
  10f6c4:	e59d0004 	ldr	r0, [sp, #4]
  10f6c8:	e12fff32 	blx	r2
  10f6cc:	e5973004 	ldr	r3, [r7, #4]
  10f6d0:	e1530008 	cmp	r3, r8
  10f6d4:	1affffd4 	bne	10f62c <__call_exitprocs+0x38>
  10f6d8:	e59b3000 	ldr	r3, [fp]
  10f6dc:	e1530007 	cmp	r3, r7
  10f6e0:	1affffd1 	bne	10f62c <__call_exitprocs+0x38>
  10f6e4:	e2455001 	sub	r5, r5, #1
  10f6e8:	e2444004 	sub	r4, r4, #4
  10f6ec:	e3750001 	cmn	r5, #1
  10f6f0:	1affffe0 	bne	10f678 <__call_exitprocs+0x84>
  10f6f4:	e59d3008 	ldr	r3, [sp, #8]
  10f6f8:	e3530000 	cmp	r3, #0
  10f6fc:	0a00000b 	beq	10f730 <__call_exitprocs+0x13c>
  10f700:	e5973004 	ldr	r3, [r7, #4]
  10f704:	e3530000 	cmp	r3, #0
  10f708:	e5973000 	ldr	r3, [r7]
  10f70c:	1a000011 	bne	10f758 <__call_exitprocs+0x164>
  10f710:	e3530000 	cmp	r3, #0
  10f714:	0a00000f 	beq	10f758 <__call_exitprocs+0x164>
  10f718:	e1a00007 	mov	r0, r7
  10f71c:	e58b3000 	str	r3, [fp]
  10f720:	e320f000 	nop	{0}
  10f724:	e59b7000 	ldr	r7, [fp]
  10f728:	e3570000 	cmp	r7, #0
  10f72c:	1affffc3 	bne	10f640 <__call_exitprocs+0x4c>
  10f730:	e30905a0 	movw	r0, #38304	; 0x95a0
  10f734:	e3400011 	movt	r0, #17
  10f738:	e28dd014 	add	sp, sp, #20
  10f73c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10f740:	ea001b22 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>
  10f744:	e12fff32 	blx	r2
  10f748:	eaffffdf 	b	10f6cc <__call_exitprocs+0xd8>
  10f74c:	e5940080 	ldr	r0, [r4, #128]	; 0x80
  10f750:	e12fff32 	blx	r2
  10f754:	eaffffdc 	b	10f6cc <__call_exitprocs+0xd8>
  10f758:	e1a0b007 	mov	fp, r7
  10f75c:	e1a07003 	mov	r7, r3
  10f760:	eaffffb4 	b	10f638 <__call_exitprocs+0x44>

0010f764 <__init___atexit_lock>:
  10f764:	e30905a0 	movw	r0, #38304	; 0x95a0
  10f768:	e3400011 	movt	r0, #17
  10f76c:	ea001b13 	b	1163c0 <__generic_gxx_recursive_mutex_init_function>

0010f770 <register_fini>:
  10f770:	e307323c 	movw	r3, #29244	; 0x723c
  10f774:	e3403011 	movt	r3, #17
  10f778:	e3530000 	cmp	r3, #0
  10f77c:	012fff1e 	bxeq	lr
  10f780:	e3010260 	movw	r0, #4704	; 0x1260
  10f784:	e3400011 	movt	r0, #17
  10f788:	eafff51c 	b	10cc00 <atexit>
  10f78c:	00000000 	andeq	r0, r0, r0

0010f790 <quorem>:
  10f790:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10f794:	e24dd00c 	sub	sp, sp, #12
  10f798:	e5903010 	ldr	r3, [r0, #16]
  10f79c:	e5915010 	ldr	r5, [r1, #16]
  10f7a0:	e1550003 	cmp	r5, r3
  10f7a4:	c3a00000 	movgt	r0, #0
  10f7a8:	ca000067 	bgt	10f94c <quorem+0x1bc>
  10f7ac:	e2455001 	sub	r5, r5, #1
  10f7b0:	e2814014 	add	r4, r1, #20
  10f7b4:	e58d1000 	str	r1, [sp]
  10f7b8:	e2809014 	add	r9, r0, #20
  10f7bc:	e7941105 	ldr	r1, [r4, r5, lsl #2]
  10f7c0:	e1a0a105 	lsl	sl, r5, #2
  10f7c4:	e1a08000 	mov	r8, r0
  10f7c8:	e7990105 	ldr	r0, [r9, r5, lsl #2]
  10f7cc:	e084700a 	add	r7, r4, sl
  10f7d0:	e2811001 	add	r1, r1, #1
  10f7d4:	ebfff430 	bl	10c89c <__aeabi_uidiv>
  10f7d8:	e2506000 	subs	r6, r0, #0
  10f7dc:	e089300a 	add	r3, r9, sl
  10f7e0:	e58d3004 	str	r3, [sp, #4]
  10f7e4:	0a00002c 	beq	10f89c <quorem+0x10c>
  10f7e8:	e3a0b000 	mov	fp, #0
  10f7ec:	e1a0e004 	mov	lr, r4
  10f7f0:	e1a0300b 	mov	r3, fp
  10f7f4:	e1a0c009 	mov	ip, r9
  10f7f8:	e49e1004 	ldr	r1, [lr], #4
  10f7fc:	e59c0000 	ldr	r0, [ip]
  10f800:	e157000e 	cmp	r7, lr
  10f804:	e6ff2071 	uxth	r2, r1
  10f808:	e1a01821 	lsr	r1, r1, #16
  10f80c:	e022b296 	mla	r2, r6, r2, fp
  10f810:	e1a0b822 	lsr	fp, r2, #16
  10f814:	e6ff2072 	uxth	r2, r2
  10f818:	e02bb196 	mla	fp, r6, r1, fp
  10f81c:	e0623003 	rsb	r3, r2, r3
  10f820:	e6f33070 	uxtah	r3, r3, r0
  10f824:	e6ff207b 	uxth	r2, fp
  10f828:	e1a0b82b 	lsr	fp, fp, #16
  10f82c:	e6ff1073 	uxth	r1, r3
  10f830:	e0620820 	rsb	r0, r2, r0, lsr #16
  10f834:	e0803843 	add	r3, r0, r3, asr #16
  10f838:	e1811803 	orr	r1, r1, r3, lsl #16
  10f83c:	e1a03843 	asr	r3, r3, #16
  10f840:	e48c1004 	str	r1, [ip], #4
  10f844:	2affffeb 	bcs	10f7f8 <quorem+0x68>
  10f848:	e799300a 	ldr	r3, [r9, sl]
  10f84c:	e3530000 	cmp	r3, #0
  10f850:	1a000011 	bne	10f89c <quorem+0x10c>
  10f854:	e59d2004 	ldr	r2, [sp, #4]
  10f858:	e2423004 	sub	r3, r2, #4
  10f85c:	e1590003 	cmp	r9, r3
  10f860:	2a00000c 	bcs	10f898 <quorem+0x108>
  10f864:	e5123004 	ldr	r3, [r2, #-4]
  10f868:	e3530000 	cmp	r3, #0
  10f86c:	1a000009 	bne	10f898 <quorem+0x108>
  10f870:	e2423008 	sub	r3, r2, #8
  10f874:	ea000002 	b	10f884 <quorem+0xf4>
  10f878:	e5922000 	ldr	r2, [r2]
  10f87c:	e3520000 	cmp	r2, #0
  10f880:	1a000004 	bne	10f898 <quorem+0x108>
  10f884:	e1590003 	cmp	r9, r3
  10f888:	e1a02003 	mov	r2, r3
  10f88c:	e2455001 	sub	r5, r5, #1
  10f890:	e2433004 	sub	r3, r3, #4
  10f894:	3afffff7 	bcc	10f878 <quorem+0xe8>
  10f898:	e5885010 	str	r5, [r8, #16]
  10f89c:	e59d1000 	ldr	r1, [sp]
  10f8a0:	e1a00008 	mov	r0, r8
  10f8a4:	eb000e5c 	bl	11321c <__mcmp>
  10f8a8:	e3500000 	cmp	r0, #0
  10f8ac:	ba000025 	blt	10f948 <quorem+0x1b8>
  10f8b0:	e2866001 	add	r6, r6, #1
  10f8b4:	e1a0c009 	mov	ip, r9
  10f8b8:	e3a03000 	mov	r3, #0
  10f8bc:	e4940004 	ldr	r0, [r4], #4
  10f8c0:	e59c1000 	ldr	r1, [ip]
  10f8c4:	e1570004 	cmp	r7, r4
  10f8c8:	e6ff2070 	uxth	r2, r0
  10f8cc:	e1a00820 	lsr	r0, r0, #16
  10f8d0:	e0622003 	rsb	r2, r2, r3
  10f8d4:	e0603821 	rsb	r3, r0, r1, lsr #16
  10f8d8:	e6f22071 	uxtah	r2, r2, r1
  10f8dc:	e0833842 	add	r3, r3, r2, asr #16
  10f8e0:	e6ff2072 	uxth	r2, r2
  10f8e4:	e1821803 	orr	r1, r2, r3, lsl #16
  10f8e8:	e1a03843 	asr	r3, r3, #16
  10f8ec:	e48c1004 	str	r1, [ip], #4
  10f8f0:	2afffff1 	bcs	10f8bc <quorem+0x12c>
  10f8f4:	e7992105 	ldr	r2, [r9, r5, lsl #2]
  10f8f8:	e0893105 	add	r3, r9, r5, lsl #2
  10f8fc:	e3520000 	cmp	r2, #0
  10f900:	1a000010 	bne	10f948 <quorem+0x1b8>
  10f904:	e2432004 	sub	r2, r3, #4
  10f908:	e1590002 	cmp	r9, r2
  10f90c:	2a00000c 	bcs	10f944 <quorem+0x1b4>
  10f910:	e5132004 	ldr	r2, [r3, #-4]
  10f914:	e3520000 	cmp	r2, #0
  10f918:	1a000009 	bne	10f944 <quorem+0x1b4>
  10f91c:	e2433008 	sub	r3, r3, #8
  10f920:	ea000002 	b	10f930 <quorem+0x1a0>
  10f924:	e5922000 	ldr	r2, [r2]
  10f928:	e3520000 	cmp	r2, #0
  10f92c:	1a000004 	bne	10f944 <quorem+0x1b4>
  10f930:	e1590003 	cmp	r9, r3
  10f934:	e1a02003 	mov	r2, r3
  10f938:	e2455001 	sub	r5, r5, #1
  10f93c:	e2433004 	sub	r3, r3, #4
  10f940:	3afffff7 	bcc	10f924 <quorem+0x194>
  10f944:	e5885010 	str	r5, [r8, #16]
  10f948:	e1a00006 	mov	r0, r6
  10f94c:	e28dd00c 	add	sp, sp, #12
  10f950:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0010f954 <_dtoa_r>:
  10f954:	e590c040 	ldr	ip, [r0, #64]	; 0x40
  10f958:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10f95c:	e1a04000 	mov	r4, r0
  10f960:	ed2d8b02 	vpush	{d8}
  10f964:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  10f968:	e35c0000 	cmp	ip, #0
  10f96c:	e1a0a002 	mov	sl, r2
  10f970:	e1a0b003 	mov	fp, r3
  10f974:	e59d6074 	ldr	r6, [sp, #116]	; 0x74
  10f978:	0a000008 	beq	10f9a0 <_dtoa_r+0x4c>
  10f97c:	e5902044 	ldr	r2, [r0, #68]	; 0x44
  10f980:	e3a03001 	mov	r3, #1
  10f984:	e1a0100c 	mov	r1, ip
  10f988:	e58c2004 	str	r2, [ip, #4]
  10f98c:	e1a03213 	lsl	r3, r3, r2
  10f990:	e58c3008 	str	r3, [ip, #8]
  10f994:	eb000c74 	bl	112b6c <_Bfree>
  10f998:	e3a03000 	mov	r3, #0
  10f99c:	e5843040 	str	r3, [r4, #64]	; 0x40
  10f9a0:	e35b0000 	cmp	fp, #0
  10f9a4:	e1a0500b 	mov	r5, fp
  10f9a8:	b3a03001 	movlt	r3, #1
  10f9ac:	a3a03000 	movge	r3, #0
  10f9b0:	b5863000 	strlt	r3, [r6]
  10f9b4:	b3cb5102 	biclt	r5, fp, #-2147483648	; 0x80000000
  10f9b8:	a5863000 	strge	r3, [r6]
  10f9bc:	e3a03000 	mov	r3, #0
  10f9c0:	e1a02003 	mov	r2, r3
  10f9c4:	e3473ff0 	movt	r3, #32752	; 0x7ff0
  10f9c8:	e3472ff0 	movt	r2, #32752	; 0x7ff0
  10f9cc:	e0033005 	and	r3, r3, r5
  10f9d0:	b1a0b005 	movlt	fp, r5
  10f9d4:	e1530002 	cmp	r3, r2
  10f9d8:	0a000010 	beq	10fa20 <_dtoa_r+0xcc>
  10f9dc:	ec4bab18 	vmov	d8, sl, fp
  10f9e0:	eeb58b40 	vcmp.f64	d8, #0.0
  10f9e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10f9e8:	1a000020 	bne	10fa70 <_dtoa_r+0x11c>
  10f9ec:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
  10f9f0:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  10f9f4:	e3530000 	cmp	r3, #0
  10f9f8:	e3a03001 	mov	r3, #1
  10f9fc:	e5823000 	str	r3, [r2]
  10fa00:	0a00008f 	beq	10fc44 <_dtoa_r+0x2f0>
  10fa04:	e59f83b4 	ldr	r8, [pc, #948]	; 10fdc0 <_dtoa_r+0x46c>
  10fa08:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
  10fa0c:	e2480001 	sub	r0, r8, #1
  10fa10:	e5838000 	str	r8, [r3]
  10fa14:	e28dd03c 	add	sp, sp, #60	; 0x3c
  10fa18:	ecbd8b02 	vpop	{d8}
  10fa1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10fa20:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  10fa24:	e35a0000 	cmp	sl, #0
  10fa28:	e302370f 	movw	r3, #9999	; 0x270f
  10fa2c:	130780a4 	movwne	r8, #28836	; 0x70a4
  10fa30:	13408011 	movtne	r8, #17
  10fa34:	e5823000 	str	r3, [r2]
  10fa38:	0a00006d 	beq	10fbf4 <_dtoa_r+0x2a0>
  10fa3c:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
  10fa40:	e3530000 	cmp	r3, #0
  10fa44:	0a000276 	beq	110424 <_dtoa_r+0xad0>
  10fa48:	e5d83003 	ldrb	r3, [r8, #3]
  10fa4c:	e1a00008 	mov	r0, r8
  10fa50:	e59d2078 	ldr	r2, [sp, #120]	; 0x78
  10fa54:	e3530000 	cmp	r3, #0
  10fa58:	12883008 	addne	r3, r8, #8
  10fa5c:	02883003 	addeq	r3, r8, #3
  10fa60:	e5823000 	str	r3, [r2]
  10fa64:	e28dd03c 	add	sp, sp, #60	; 0x3c
  10fa68:	ecbd8b02 	vpop	{d8}
  10fa6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  10fa70:	e28d2030 	add	r2, sp, #48	; 0x30
  10fa74:	e28d3034 	add	r3, sp, #52	; 0x34
  10fa78:	e58d2004 	str	r2, [sp, #4]
  10fa7c:	e1a00004 	mov	r0, r4
  10fa80:	e58d3000 	str	r3, [sp]
  10fa84:	e1a0200a 	mov	r2, sl
  10fa88:	e1a0300b 	mov	r3, fp
  10fa8c:	eb000eb0 	bl	113554 <__d2b>
  10fa90:	e1b09a25 	lsrs	r9, r5, #20
  10fa94:	e1a07000 	mov	r7, r0
  10fa98:	1a00005e 	bne	10fc18 <_dtoa_r+0x2c4>
  10fa9c:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  10faa0:	e3a00001 	mov	r0, #1
  10faa4:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
  10faa8:	e58d0014 	str	r0, [sp, #20]
  10faac:	e0891001 	add	r1, r9, r1
  10fab0:	e2813e43 	add	r3, r1, #1072	; 0x430
  10fab4:	e2833002 	add	r3, r3, #2
  10fab8:	e3530020 	cmp	r3, #32
  10fabc:	c2633040 	rsbgt	r3, r3, #64	; 0x40
  10fac0:	c2812e41 	addgt	r2, r1, #1040	; 0x410
  10fac4:	c1a05315 	lslgt	r5, r5, r3
  10fac8:	d2633020 	rsble	r3, r3, #32
  10facc:	c2822002 	addgt	r2, r2, #2
  10fad0:	d1a0331a 	lslle	r3, sl, r3
  10fad4:	c185323a 	orrgt	r3, r5, sl, lsr r2
  10fad8:	e2411001 	sub	r1, r1, #1
  10fadc:	ee073a90 	vmov	s15, r3
  10fae0:	eef80b67 	vcvt.f64.u32	d16, s15
  10fae4:	ec532b30 	vmov	r2, r3, d16
  10fae8:	e243361f 	sub	r3, r3, #32505856	; 0x1f00000
  10faec:	ec432b30 	vmov	d16, r2, r3
  10faf0:	eef71b08 	vmov.f64	d17, #120	; 0x3fc00000  1.5
  10faf4:	eddf3bab 	vldr	d19, [pc, #684]	; 10fda8 <_dtoa_r+0x454>
  10faf8:	ee701be1 	vsub.f64	d17, d16, d17
  10fafc:	eddf0bab 	vldr	d16, [pc, #684]	; 10fdb0 <_dtoa_r+0x45c>
  10fb00:	ee071a90 	vmov	s15, r1
  10fb04:	eddf2bab 	vldr	d18, [pc, #684]	; 10fdb8 <_dtoa_r+0x464>
  10fb08:	ee410ba3 	vmla.f64	d16, d17, d19
  10fb0c:	eef81be7 	vcvt.f64.s32	d17, s15
  10fb10:	ee410ba2 	vmla.f64	d16, d17, d18
  10fb14:	eefd7be0 	vcvt.s32.f64	s15, d16
  10fb18:	eef50bc0 	vcmpe.f64	d16, #0.0
  10fb1c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10fb20:	edcd7a02 	vstr	s15, [sp, #8]
  10fb24:	4a000148 	bmi	11004c <_dtoa_r+0x6f8>
  10fb28:	e59d2008 	ldr	r2, [sp, #8]
  10fb2c:	e3520016 	cmp	r2, #22
  10fb30:	e1a03002 	mov	r3, r2
  10fb34:	83a03001 	movhi	r3, #1
  10fb38:	858d301c 	strhi	r3, [sp, #28]
  10fb3c:	8a00000a 	bhi	10fb6c <_dtoa_r+0x218>
  10fb40:	e30730c8 	movw	r3, #28872	; 0x70c8
  10fb44:	ec4bab31 	vmov	d17, sl, fp
  10fb48:	e3403011 	movt	r3, #17
  10fb4c:	e0833182 	add	r3, r3, r2, lsl #3
  10fb50:	edd30b00 	vldr	d16, [r3]
  10fb54:	eef40be1 	vcmpe.f64	d16, d17
  10fb58:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10fb5c:	c2423001 	subgt	r3, r2, #1
  10fb60:	c58d3008 	strgt	r3, [sp, #8]
  10fb64:	e3a03000 	mov	r3, #0
  10fb68:	e58d301c 	str	r3, [sp, #28]
  10fb6c:	e59d3008 	ldr	r3, [sp, #8]
  10fb70:	e0619009 	rsb	r9, r1, r9
  10fb74:	e2599001 	subs	r9, r9, #1
  10fb78:	42696000 	rsbmi	r6, r9, #0
  10fb7c:	53a06000 	movpl	r6, #0
  10fb80:	43a09000 	movmi	r9, #0
  10fb84:	e3530000 	cmp	r3, #0
  10fb88:	b59d3008 	ldrlt	r3, [sp, #8]
  10fb8c:	a0899003 	addge	r9, r9, r3
  10fb90:	a58d3020 	strge	r3, [sp, #32]
  10fb94:	a3a03000 	movge	r3, #0
  10fb98:	a58d300c 	strge	r3, [sp, #12]
  10fb9c:	b0636006 	rsblt	r6, r3, r6
  10fba0:	b2633000 	rsblt	r3, r3, #0
  10fba4:	b58d300c 	strlt	r3, [sp, #12]
  10fba8:	b3a03000 	movlt	r3, #0
  10fbac:	b58d3020 	strlt	r3, [sp, #32]
  10fbb0:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  10fbb4:	e3530009 	cmp	r3, #9
  10fbb8:	8a000024 	bhi	10fc50 <_dtoa_r+0x2fc>
  10fbbc:	e3530005 	cmp	r3, #5
  10fbc0:	d3a05001 	movle	r5, #1
  10fbc4:	c3a05000 	movgt	r5, #0
  10fbc8:	c2433004 	subgt	r3, r3, #4
  10fbcc:	c58d3068 	strgt	r3, [sp, #104]	; 0x68
  10fbd0:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  10fbd4:	e2433002 	sub	r3, r3, #2
  10fbd8:	e3530003 	cmp	r3, #3
  10fbdc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  10fbe0:	ea000120 	b	110068 <_dtoa_r+0x714>
  10fbe4:	00110350 	andseq	r0, r1, r0, asr r3
  10fbe8:	00110134 	andseq	r0, r1, r4, lsr r1
  10fbec:	00110380 	andseq	r0, r1, r0, lsl #7
  10fbf0:	001105e0 	andseq	r0, r1, r0, ror #11
  10fbf4:	e30730a4 	movw	r3, #28836	; 0x70a4
  10fbf8:	e3072098 	movw	r2, #28824	; 0x7098
  10fbfc:	e7f30055 	ubfx	r0, r5, #0, #20
  10fc00:	e3403011 	movt	r3, #17
  10fc04:	e3500000 	cmp	r0, #0
  10fc08:	e3402011 	movt	r2, #17
  10fc0c:	11a08003 	movne	r8, r3
  10fc10:	01a08002 	moveq	r8, r2
  10fc14:	eaffff88 	b	10fa3c <_dtoa_r+0xe8>
  10fc18:	e1a0300b 	mov	r3, fp
  10fc1c:	e2491fff 	sub	r1, r9, #1020	; 0x3fc
  10fc20:	e7f30053 	ubfx	r0, r3, #0, #20
  10fc24:	e1a0200a 	mov	r2, sl
  10fc28:	e38035ff 	orr	r3, r0, #1069547520	; 0x3fc00000
  10fc2c:	e3a00000 	mov	r0, #0
  10fc30:	e2411003 	sub	r1, r1, #3
  10fc34:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  10fc38:	e3833603 	orr	r3, r3, #3145728	; 0x300000
  10fc3c:	e58d0014 	str	r0, [sp, #20]
  10fc40:	eaffffa9 	b	10faec <_dtoa_r+0x198>
  10fc44:	e3070094 	movw	r0, #28820	; 0x7094
  10fc48:	e3400011 	movt	r0, #17
  10fc4c:	eaffff70 	b	10fa14 <_dtoa_r+0xc0>
  10fc50:	e3a01000 	mov	r1, #0
  10fc54:	e3e03000 	mvn	r3, #0
  10fc58:	e1a00004 	mov	r0, r4
  10fc5c:	e5841044 	str	r1, [r4, #68]	; 0x44
  10fc60:	e1a08003 	mov	r8, r3
  10fc64:	e58d3024 	str	r3, [sp, #36]	; 0x24
  10fc68:	e58d1068 	str	r1, [sp, #104]	; 0x68
  10fc6c:	eb000b9b 	bl	112ae0 <_Balloc>
  10fc70:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  10fc74:	e1a05000 	mov	r5, r0
  10fc78:	e5840040 	str	r0, [r4, #64]	; 0x40
  10fc7c:	e58d8010 	str	r8, [sp, #16]
  10fc80:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  10fc84:	e3a03001 	mov	r3, #1
  10fc88:	e58d3018 	str	r3, [sp, #24]
  10fc8c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  10fc90:	e59d1008 	ldr	r1, [sp, #8]
  10fc94:	e1e02003 	mvn	r2, r3
  10fc98:	e1a02fa2 	lsr	r2, r2, #31
  10fc9c:	e351000e 	cmp	r1, #14
  10fca0:	c3a02000 	movgt	r2, #0
  10fca4:	e3520000 	cmp	r2, #0
  10fca8:	0a000045 	beq	10fdc4 <_dtoa_r+0x470>
  10fcac:	e59d1010 	ldr	r1, [sp, #16]
  10fcb0:	e30730c8 	movw	r3, #28872	; 0x70c8
  10fcb4:	e59d006c 	ldr	r0, [sp, #108]	; 0x6c
  10fcb8:	e3403011 	movt	r3, #17
  10fcbc:	e3510000 	cmp	r1, #0
  10fcc0:	e1a02001 	mov	r2, r1
  10fcc4:	c3a02000 	movgt	r2, #0
  10fcc8:	d3a02001 	movle	r2, #1
  10fccc:	e0122fa0 	ands	r2, r2, r0, lsr #31
  10fcd0:	e59d2008 	ldr	r2, [sp, #8]
  10fcd4:	e0833182 	add	r3, r3, r2, lsl #3
  10fcd8:	edd32b00 	vldr	d18, [r3]
  10fcdc:	1a0001aa 	bne	11038c <_dtoa_r+0xa38>
  10fce0:	ec4bab30 	vmov	d16, sl, fp
  10fce4:	e3510001 	cmp	r1, #1
  10fce8:	e2852001 	add	r2, r5, #1
  10fcec:	eec01ba2 	vdiv.f64	d17, d16, d18
  10fcf0:	eefd7be1 	vcvt.s32.f64	s15, d17
  10fcf4:	eef81be7 	vcvt.f64.s32	d17, s15
  10fcf8:	ee173a90 	vmov	r3, s15
  10fcfc:	e2833030 	add	r3, r3, #48	; 0x30
  10fd00:	e5c53000 	strb	r3, [r5]
  10fd04:	ee410be2 	vmls.f64	d16, d17, d18
  10fd08:	0a000014 	beq	10fd60 <_dtoa_r+0x40c>
  10fd0c:	eef23b04 	vmov.f64	d19, #36	; 0x41200000  10.0
  10fd10:	ee600ba3 	vmul.f64	d16, d16, d19
  10fd14:	eef50b40 	vcmp.f64	d16, #0.0
  10fd18:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10fd1c:	159d1010 	ldrne	r1, [sp, #16]
  10fd20:	1a000004 	bne	10fd38 <_dtoa_r+0x3e4>
  10fd24:	ea0002ff 	b	110928 <_dtoa_r+0xfd4>
  10fd28:	ee600ba3 	vmul.f64	d16, d16, d19
  10fd2c:	eef50b40 	vcmp.f64	d16, #0.0
  10fd30:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10fd34:	0a0002fb 	beq	110928 <_dtoa_r+0xfd4>
  10fd38:	eec01ba2 	vdiv.f64	d17, d16, d18
  10fd3c:	eefd7be1 	vcvt.s32.f64	s15, d17
  10fd40:	ee173a90 	vmov	r3, s15
  10fd44:	e2833030 	add	r3, r3, #48	; 0x30
  10fd48:	eef81be7 	vcvt.f64.s32	d17, s15
  10fd4c:	e4c23001 	strb	r3, [r2], #1
  10fd50:	e0653002 	rsb	r3, r5, r2
  10fd54:	e1510003 	cmp	r1, r3
  10fd58:	ee410be2 	vmls.f64	d16, d17, d18
  10fd5c:	1afffff1 	bne	10fd28 <_dtoa_r+0x3d4>
  10fd60:	ee700ba0 	vadd.f64	d16, d16, d16
  10fd64:	eef42be0 	vcmpe.f64	d18, d16
  10fd68:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  10fd6c:	5a000365 	bpl	110b08 <_dtoa_r+0x11b4>
  10fd70:	e5523001 	ldrb	r3, [r2, #-1]
  10fd74:	e1a08005 	mov	r8, r5
  10fd78:	e1a05002 	mov	r5, r2
  10fd7c:	e2452001 	sub	r2, r5, #1
  10fd80:	ea000002 	b	10fd90 <_dtoa_r+0x43c>
  10fd84:	e1520008 	cmp	r2, r8
  10fd88:	0a0002fc 	beq	110980 <_dtoa_r+0x102c>
  10fd8c:	e5723001 	ldrb	r3, [r2, #-1]!
  10fd90:	e3530039 	cmp	r3, #57	; 0x39
  10fd94:	e2825001 	add	r5, r2, #1
  10fd98:	0afffff9 	beq	10fd84 <_dtoa_r+0x430>
  10fd9c:	e2833001 	add	r3, r3, #1
  10fda0:	e5c23000 	strb	r3, [r2]
  10fda4:	ea000096 	b	110004 <_dtoa_r+0x6b0>
  10fda8:	636f4361 	cmnvs	pc, #-2080374783	; 0x84000001
  10fdac:	3fd287a7 	svccc	0x00d287a7
  10fdb0:	8b60c8b3 	blhi	1942084 <__cs3_heap_start+0x18289e4>
  10fdb4:	3fc68a28 	svccc	0x00c68a28
  10fdb8:	509f79fb 			; <UNDEFINED> instruction: 0x509f79fb
  10fdbc:	3fd34413 	svccc	0x00d34413
  10fdc0:	00117095 	mulseq	r1, r5, r0
  10fdc4:	e59d2018 	ldr	r2, [sp, #24]
  10fdc8:	e3520000 	cmp	r2, #0
  10fdcc:	1a0000bb 	bne	1100c0 <_dtoa_r+0x76c>
  10fdd0:	e59d300c 	ldr	r3, [sp, #12]
  10fdd4:	e1a08006 	mov	r8, r6
  10fdd8:	e58d3028 	str	r3, [sp, #40]	; 0x28
  10fddc:	e59d3018 	ldr	r3, [sp, #24]
  10fde0:	e58d3014 	str	r3, [sp, #20]
  10fde4:	e3580000 	cmp	r8, #0
  10fde8:	c3590000 	cmpgt	r9, #0
  10fdec:	da000005 	ble	10fe08 <_dtoa_r+0x4b4>
  10fdf0:	e1580009 	cmp	r8, r9
  10fdf4:	b1a03008 	movlt	r3, r8
  10fdf8:	a1a03009 	movge	r3, r9
  10fdfc:	e0636006 	rsb	r6, r3, r6
  10fe00:	e0638008 	rsb	r8, r3, r8
  10fe04:	e0639009 	rsb	r9, r3, r9
  10fe08:	e59d300c 	ldr	r3, [sp, #12]
  10fe0c:	e3530000 	cmp	r3, #0
  10fe10:	da000018 	ble	10fe78 <_dtoa_r+0x524>
  10fe14:	e59d2018 	ldr	r2, [sp, #24]
  10fe18:	e3520000 	cmp	r2, #0
  10fe1c:	0a0001cd 	beq	110558 <_dtoa_r+0xc04>
  10fe20:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10fe24:	e3520000 	cmp	r2, #0
  10fe28:	0a0001ca 	beq	110558 <_dtoa_r+0xc04>
  10fe2c:	e59d1014 	ldr	r1, [sp, #20]
  10fe30:	e1a00004 	mov	r0, r4
  10fe34:	eb000c7b 	bl	113028 <__pow5mult>
  10fe38:	e1a02007 	mov	r2, r7
  10fe3c:	e1a01000 	mov	r1, r0
  10fe40:	e58d0014 	str	r0, [sp, #20]
  10fe44:	e1a00004 	mov	r0, r4
  10fe48:	eb000c00 	bl	112e50 <__multiply>
  10fe4c:	e1a01007 	mov	r1, r7
  10fe50:	e58d002c 	str	r0, [sp, #44]	; 0x2c
  10fe54:	e1a00004 	mov	r0, r4
  10fe58:	eb000b43 	bl	112b6c <_Bfree>
  10fe5c:	e59d300c 	ldr	r3, [sp, #12]
  10fe60:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  10fe64:	e0533002 	subs	r3, r3, r2
  10fe68:	e58d300c 	str	r3, [sp, #12]
  10fe6c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  10fe70:	e1a07003 	mov	r7, r3
  10fe74:	1a0001b7 	bne	110558 <_dtoa_r+0xc04>
  10fe78:	e3a01001 	mov	r1, #1
  10fe7c:	e1a00004 	mov	r0, r4
  10fe80:	eb000bea 	bl	112e30 <__i2b>
  10fe84:	e59d3020 	ldr	r3, [sp, #32]
  10fe88:	e58d000c 	str	r0, [sp, #12]
  10fe8c:	e3530000 	cmp	r3, #0
  10fe90:	0a0001a9 	beq	11053c <_dtoa_r+0xbe8>
  10fe94:	e1a01000 	mov	r1, r0
  10fe98:	e1a02003 	mov	r2, r3
  10fe9c:	e1a00004 	mov	r0, r4
  10fea0:	eb000c60 	bl	113028 <__pow5mult>
  10fea4:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  10fea8:	e58d000c 	str	r0, [sp, #12]
  10feac:	e3530001 	cmp	r3, #1
  10feb0:	ca0001f5 	bgt	11068c <_dtoa_r+0xd38>
  10feb4:	e35a0000 	cmp	sl, #0
  10feb8:	1a0001f3 	bne	11068c <_dtoa_r+0xd38>
  10febc:	e7f3305b 	ubfx	r3, fp, #0, #20
  10fec0:	e3530000 	cmp	r3, #0
  10fec4:	13a03000 	movne	r3, #0
  10fec8:	158d3028 	strne	r3, [sp, #40]	; 0x28
  10fecc:	1a000007 	bne	10fef0 <_dtoa_r+0x59c>
  10fed0:	e3cb3102 	bic	r3, fp, #-2147483648	; 0x80000000
  10fed4:	e1a03a23 	lsr	r3, r3, #20
  10fed8:	e1a03a03 	lsl	r3, r3, #20
  10fedc:	e3530000 	cmp	r3, #0
  10fee0:	12866001 	addne	r6, r6, #1
  10fee4:	12899001 	addne	r9, r9, #1
  10fee8:	13a03001 	movne	r3, #1
  10feec:	e58d3028 	str	r3, [sp, #40]	; 0x28
  10fef0:	e59d3020 	ldr	r3, [sp, #32]
  10fef4:	e3530000 	cmp	r3, #0
  10fef8:	03a00001 	moveq	r0, #1
  10fefc:	1a0001e4 	bne	110694 <_dtoa_r+0xd40>
  10ff00:	e0800009 	add	r0, r0, r9
  10ff04:	e210001f 	ands	r0, r0, #31
  10ff08:	0a000147 	beq	11042c <_dtoa_r+0xad8>
  10ff0c:	e2603020 	rsb	r3, r0, #32
  10ff10:	e3530004 	cmp	r3, #4
  10ff14:	da000324 	ble	110bac <_dtoa_r+0x1258>
  10ff18:	e260001c 	rsb	r0, r0, #28
  10ff1c:	e0866000 	add	r6, r6, r0
  10ff20:	e0888000 	add	r8, r8, r0
  10ff24:	e0899000 	add	r9, r9, r0
  10ff28:	e3560000 	cmp	r6, #0
  10ff2c:	da000004 	ble	10ff44 <_dtoa_r+0x5f0>
  10ff30:	e1a01007 	mov	r1, r7
  10ff34:	e1a02006 	mov	r2, r6
  10ff38:	e1a00004 	mov	r0, r4
  10ff3c:	eb000c78 	bl	113124 <__lshift>
  10ff40:	e1a07000 	mov	r7, r0
  10ff44:	e3590000 	cmp	r9, #0
  10ff48:	da000004 	ble	10ff60 <_dtoa_r+0x60c>
  10ff4c:	e1a02009 	mov	r2, r9
  10ff50:	e59d100c 	ldr	r1, [sp, #12]
  10ff54:	e1a00004 	mov	r0, r4
  10ff58:	eb000c71 	bl	113124 <__lshift>
  10ff5c:	e58d000c 	str	r0, [sp, #12]
  10ff60:	e59d301c 	ldr	r3, [sp, #28]
  10ff64:	e3530000 	cmp	r3, #0
  10ff68:	1a0001d0 	bne	1106b0 <_dtoa_r+0xd5c>
  10ff6c:	e59d3010 	ldr	r3, [sp, #16]
  10ff70:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
  10ff74:	e3530000 	cmp	r3, #0
  10ff78:	d3a03001 	movle	r3, #1
  10ff7c:	c3a03000 	movgt	r3, #0
  10ff80:	e3520002 	cmp	r2, #2
  10ff84:	d3a03000 	movle	r3, #0
  10ff88:	e3530000 	cmp	r3, #0
  10ff8c:	0a00012b 	beq	110440 <_dtoa_r+0xaec>
  10ff90:	e59d3010 	ldr	r3, [sp, #16]
  10ff94:	e3530000 	cmp	r3, #0
  10ff98:	1a00011c 	bne	110410 <_dtoa_r+0xabc>
  10ff9c:	e59d100c 	ldr	r1, [sp, #12]
  10ffa0:	e3a02005 	mov	r2, #5
  10ffa4:	e1a00004 	mov	r0, r4
  10ffa8:	eb000af6 	bl	112b88 <__multadd>
  10ffac:	e1a01000 	mov	r1, r0
  10ffb0:	e58d000c 	str	r0, [sp, #12]
  10ffb4:	e1a00007 	mov	r0, r7
  10ffb8:	eb000c97 	bl	11321c <__mcmp>
  10ffbc:	e3500000 	cmp	r0, #0
  10ffc0:	c1a08005 	movgt	r8, r5
  10ffc4:	da000111 	ble	110410 <_dtoa_r+0xabc>
  10ffc8:	e59d2008 	ldr	r2, [sp, #8]
  10ffcc:	e2885001 	add	r5, r8, #1
  10ffd0:	e3a03031 	mov	r3, #49	; 0x31
  10ffd4:	e5c83000 	strb	r3, [r8]
  10ffd8:	e2822001 	add	r2, r2, #1
  10ffdc:	e58d2008 	str	r2, [sp, #8]
  10ffe0:	e59d100c 	ldr	r1, [sp, #12]
  10ffe4:	e1a00004 	mov	r0, r4
  10ffe8:	eb000adf 	bl	112b6c <_Bfree>
  10ffec:	e59d3014 	ldr	r3, [sp, #20]
  10fff0:	e3530000 	cmp	r3, #0
  10fff4:	0a000002 	beq	110004 <_dtoa_r+0x6b0>
  10fff8:	e59d1014 	ldr	r1, [sp, #20]
  10fffc:	e1a00004 	mov	r0, r4
  110000:	eb000ad9 	bl	112b6c <_Bfree>
  110004:	e1a01007 	mov	r1, r7
  110008:	e1a00004 	mov	r0, r4
  11000c:	eb000ad6 	bl	112b6c <_Bfree>
  110010:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
  110014:	e3a02000 	mov	r2, #0
  110018:	e5c52000 	strb	r2, [r5]
  11001c:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  110020:	e3530000 	cmp	r3, #0
  110024:	e59d3008 	ldr	r3, [sp, #8]
  110028:	e2833001 	add	r3, r3, #1
  11002c:	e5823000 	str	r3, [r2]
  110030:	0a0000fb 	beq	110424 <_dtoa_r+0xad0>
  110034:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
  110038:	e1a00008 	mov	r0, r8
  11003c:	e5835000 	str	r5, [r3]
  110040:	e28dd03c 	add	sp, sp, #60	; 0x3c
  110044:	ecbd8b02 	vpop	{d8}
  110048:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  11004c:	eef81be7 	vcvt.f64.s32	d17, s15
  110050:	eef40b61 	vcmp.f64	d16, d17
  110054:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  110058:	1e173a90 	vmovne	r3, s15
  11005c:	12433001 	subne	r3, r3, #1
  110060:	158d3008 	strne	r3, [sp, #8]
  110064:	eafffeaf 	b	10fb28 <_dtoa_r+0x1d4>
  110068:	e3a08000 	mov	r8, #0
  11006c:	e1a00004 	mov	r0, r4
  110070:	e5848044 	str	r8, [r4, #68]	; 0x44
  110074:	e1a01008 	mov	r1, r8
  110078:	eb000a98 	bl	112ae0 <_Balloc>
  11007c:	e59d2008 	ldr	r2, [sp, #8]
  110080:	e1a05000 	mov	r5, r0
  110084:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  110088:	e5840040 	str	r0, [r4, #64]	; 0x40
  11008c:	e352000e 	cmp	r2, #14
  110090:	c3a02000 	movgt	r2, #0
  110094:	d3a02001 	movle	r2, #1
  110098:	e1530008 	cmp	r3, r8
  11009c:	b3a02000 	movlt	r2, #0
  1100a0:	e1520008 	cmp	r2, r8
  1100a4:	1a0002c5 	bne	110bc0 <_dtoa_r+0x126c>
  1100a8:	e3e01000 	mvn	r1, #0
  1100ac:	e58d206c 	str	r2, [sp, #108]	; 0x6c
  1100b0:	e3a02001 	mov	r2, #1
  1100b4:	e58d1024 	str	r1, [sp, #36]	; 0x24
  1100b8:	e58d1010 	str	r1, [sp, #16]
  1100bc:	e58d2018 	str	r2, [sp, #24]
  1100c0:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
  1100c4:	e3520001 	cmp	r2, #1
  1100c8:	da000244 	ble	1109e0 <_dtoa_r+0x108c>
  1100cc:	e59d3010 	ldr	r3, [sp, #16]
  1100d0:	e2432001 	sub	r2, r3, #1
  1100d4:	e59d300c 	ldr	r3, [sp, #12]
  1100d8:	e1530002 	cmp	r3, r2
  1100dc:	b59d300c 	ldrlt	r3, [sp, #12]
  1100e0:	a0623003 	rsbge	r3, r2, r3
  1100e4:	b58d200c 	strlt	r2, [sp, #12]
  1100e8:	b0633002 	rsblt	r3, r3, r2
  1100ec:	b59d2020 	ldrlt	r2, [sp, #32]
  1100f0:	b0823003 	addlt	r3, r2, r3
  1100f4:	b58d3020 	strlt	r3, [sp, #32]
  1100f8:	b3a03000 	movlt	r3, #0
  1100fc:	e58d3028 	str	r3, [sp, #40]	; 0x28
  110100:	e59d3010 	ldr	r3, [sp, #16]
  110104:	e3530000 	cmp	r3, #0
  110108:	a59d3010 	ldrge	r3, [sp, #16]
  11010c:	b0638006 	rsblt	r8, r3, r6
  110110:	a1a08006 	movge	r8, r6
  110114:	b3a03000 	movlt	r3, #0
  110118:	e3a01001 	mov	r1, #1
  11011c:	e1a00004 	mov	r0, r4
  110120:	e0866003 	add	r6, r6, r3
  110124:	e0899003 	add	r9, r9, r3
  110128:	eb000b40 	bl	112e30 <__i2b>
  11012c:	e58d0014 	str	r0, [sp, #20]
  110130:	eaffff2b 	b	10fde4 <_dtoa_r+0x490>
  110134:	e3a03000 	mov	r3, #0
  110138:	e58d3018 	str	r3, [sp, #24]
  11013c:	e59d3008 	ldr	r3, [sp, #8]
  110140:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
  110144:	e0833002 	add	r3, r3, r2
  110148:	e58d3024 	str	r3, [sp, #36]	; 0x24
  11014c:	e2833001 	add	r3, r3, #1
  110150:	e3530000 	cmp	r3, #0
  110154:	e58d3010 	str	r3, [sp, #16]
  110158:	da0001e6 	ble	1108f8 <_dtoa_r+0xfa4>
  11015c:	e59d3010 	ldr	r3, [sp, #16]
  110160:	e353000e 	cmp	r3, #14
  110164:	83a05000 	movhi	r5, #0
  110168:	92055001 	andls	r5, r5, #1
  11016c:	e1a0c003 	mov	ip, r3
  110170:	e35c0017 	cmp	ip, #23
  110174:	e3a01000 	mov	r1, #0
  110178:	e5841044 	str	r1, [r4, #68]	; 0x44
  11017c:	9a000008 	bls	1101a4 <_dtoa_r+0x850>
  110180:	e3a02001 	mov	r2, #1
  110184:	e3a03004 	mov	r3, #4
  110188:	e1a03083 	lsl	r3, r3, #1
  11018c:	e1a01002 	mov	r1, r2
  110190:	e2822001 	add	r2, r2, #1
  110194:	e2830014 	add	r0, r3, #20
  110198:	e150000c 	cmp	r0, ip
  11019c:	9afffff9 	bls	110188 <_dtoa_r+0x834>
  1101a0:	e5841044 	str	r1, [r4, #68]	; 0x44
  1101a4:	e1a00004 	mov	r0, r4
  1101a8:	eb000a4c 	bl	112ae0 <_Balloc>
  1101ac:	e3550000 	cmp	r5, #0
  1101b0:	e1a08000 	mov	r8, r0
  1101b4:	e5840040 	str	r0, [r4, #64]	; 0x40
  1101b8:	0a00027e 	beq	110bb8 <_dtoa_r+0x1264>
  1101bc:	e59d1008 	ldr	r1, [sp, #8]
  1101c0:	ec4bab35 	vmov	d21, sl, fp
  1101c4:	e3510000 	cmp	r1, #0
  1101c8:	da0000eb 	ble	11057c <_dtoa_r+0xc28>
  1101cc:	e30720c8 	movw	r2, #28872	; 0x70c8
  1101d0:	e1a03241 	asr	r3, r1, #4
  1101d4:	e3402011 	movt	r2, #17
  1101d8:	e201100f 	and	r1, r1, #15
  1101dc:	e3130010 	tst	r3, #16
  1101e0:	e0822181 	add	r2, r2, r1, lsl #3
  1101e4:	1203300f 	andne	r3, r3, #15
  1101e8:	13a01003 	movne	r1, #3
  1101ec:	0ef02b65 	vmoveq.f64	d18, d21
  1101f0:	edd21b00 	vldr	d17, [r2]
  1101f4:	130721b8 	movwne	r2, #29112	; 0x71b8
  1101f8:	13402011 	movtne	r2, #17
  1101fc:	03a01002 	moveq	r1, #2
  110200:	1dd20b08 	vldrne	d16, [r2, #32]
  110204:	1ec52ba0 	vdivne.f64	d18, d21, d16
  110208:	e3530000 	cmp	r3, #0
  11020c:	0a000008 	beq	110234 <_dtoa_r+0x8e0>
  110210:	e30721b8 	movw	r2, #29112	; 0x71b8
  110214:	e3402011 	movt	r2, #17
  110218:	e3130001 	tst	r3, #1
  11021c:	e2822008 	add	r2, r2, #8
  110220:	1d520b02 	vldrne	d16, [r2, #-8]
  110224:	12811001 	addne	r1, r1, #1
  110228:	1e611ba0 	vmulne.f64	d17, d17, d16
  11022c:	e1b030c3 	asrs	r3, r3, #1
  110230:	1afffff8 	bne	110218 <_dtoa_r+0x8c4>
  110234:	eec23ba1 	vdiv.f64	d19, d18, d17
  110238:	e59d301c 	ldr	r3, [sp, #28]
  11023c:	e3530000 	cmp	r3, #0
  110240:	0a000003 	beq	110254 <_dtoa_r+0x900>
  110244:	eef70b00 	vmov.f64	d16, #112	; 0x3f800000  1.0
  110248:	eef43be0 	vcmpe.f64	d19, d16
  11024c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  110250:	4a0001b7 	bmi	110934 <_dtoa_r+0xfe0>
  110254:	ee071a90 	vmov	s15, r1
  110258:	eef80be7 	vcvt.f64.s32	d16, s15
  11025c:	eef12b0c 	vmov.f64	d18, #28	; 0x40e00000  7.0
  110260:	e59d3010 	ldr	r3, [sp, #16]
  110264:	ee402ba3 	vmla.f64	d18, d16, d19
  110268:	e3530000 	cmp	r3, #0
  11026c:	ec5bab32 	vmov	sl, fp, d18
  110270:	e24bb50d 	sub	fp, fp, #54525952	; 0x3400000
  110274:	0a000057 	beq	1103d8 <_dtoa_r+0xa84>
  110278:	e59dc008 	ldr	ip, [sp, #8]
  11027c:	e59d2010 	ldr	r2, [sp, #16]
  110280:	e59d3018 	ldr	r3, [sp, #24]
  110284:	e3530000 	cmp	r3, #0
  110288:	e30730c8 	movw	r3, #28872	; 0x70c8
  11028c:	0a0000d6 	beq	1105ec <_dtoa_r+0xc98>
  110290:	e3403011 	movt	r3, #17
  110294:	eef64b00 	vmov.f64	d20, #96	; 0x3f000000  0.5
  110298:	e0833182 	add	r3, r3, r2, lsl #3
  11029c:	eefd7be3 	vcvt.s32.f64	s15, d19
  1102a0:	e2885001 	add	r5, r8, #1
  1102a4:	ed532b02 	vldr	d18, [r3, #-8]
  1102a8:	eef80be7 	vcvt.f64.s32	d16, s15
  1102ac:	ee173a90 	vmov	r3, s15
  1102b0:	eec41ba2 	vdiv.f64	d17, d20, d18
  1102b4:	e2833030 	add	r3, r3, #48	; 0x30
  1102b8:	ec4bab32 	vmov	d18, sl, fp
  1102bc:	e6ef3073 	uxtb	r3, r3
  1102c0:	ee730be0 	vsub.f64	d16, d19, d16
  1102c4:	e5c83000 	strb	r3, [r8]
  1102c8:	ee712be2 	vsub.f64	d18, d17, d18
  1102cc:	eef42be0 	vcmpe.f64	d18, d16
  1102d0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1102d4:	ca00001b 	bgt	110348 <_dtoa_r+0x9f4>
  1102d8:	eef74b00 	vmov.f64	d20, #112	; 0x3f800000  1.0
  1102dc:	ee741be0 	vsub.f64	d17, d20, d16
  1102e0:	eef42be1 	vcmpe.f64	d18, d17
  1102e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1102e8:	ca0001cd 	bgt	110a24 <_dtoa_r+0x10d0>
  1102ec:	e3520001 	cmp	r2, #1
  1102f0:	c0882002 	addgt	r2, r8, r2
  1102f4:	cef23b04 	vmovgt.f64	d19, #36	; 0x41200000  10.0
  1102f8:	ca000006 	bgt	110318 <_dtoa_r+0x9c4>
  1102fc:	ea00009b 	b	110570 <_dtoa_r+0xc1c>
  110300:	ee741be0 	vsub.f64	d17, d20, d16
  110304:	eef41be2 	vcmpe.f64	d17, d18
  110308:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  11030c:	4a0001c4 	bmi	110a24 <_dtoa_r+0x10d0>
  110310:	e1550002 	cmp	r5, r2
  110314:	0a000095 	beq	110570 <_dtoa_r+0xc1c>
  110318:	ee600ba3 	vmul.f64	d16, d16, d19
  11031c:	ee622ba3 	vmul.f64	d18, d18, d19
  110320:	eefd7be0 	vcvt.s32.f64	s15, d16
  110324:	eef81be7 	vcvt.f64.s32	d17, s15
  110328:	ee173a90 	vmov	r3, s15
  11032c:	e2833030 	add	r3, r3, #48	; 0x30
  110330:	e6ef3073 	uxtb	r3, r3
  110334:	ee700be1 	vsub.f64	d16, d16, d17
  110338:	e4c53001 	strb	r3, [r5], #1
  11033c:	eef40be2 	vcmpe.f64	d16, d18
  110340:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  110344:	5affffed 	bpl	110300 <_dtoa_r+0x9ac>
  110348:	e58dc008 	str	ip, [sp, #8]
  11034c:	eaffff2c 	b	110004 <_dtoa_r+0x6b0>
  110350:	e3a03000 	mov	r3, #0
  110354:	e58d3018 	str	r3, [sp, #24]
  110358:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  11035c:	e3530000 	cmp	r3, #0
  110360:	da00016b 	ble	110914 <_dtoa_r+0xfc0>
  110364:	e353000e 	cmp	r3, #14
  110368:	83a05000 	movhi	r5, #0
  11036c:	92055001 	andls	r5, r5, #1
  110370:	e1a0c003 	mov	ip, r3
  110374:	e58d3024 	str	r3, [sp, #36]	; 0x24
  110378:	e58d3010 	str	r3, [sp, #16]
  11037c:	eaffff7b 	b	110170 <_dtoa_r+0x81c>
  110380:	e3a03001 	mov	r3, #1
  110384:	e58d3018 	str	r3, [sp, #24]
  110388:	eafffff2 	b	110358 <_dtoa_r+0xa04>
  11038c:	e59d3010 	ldr	r3, [sp, #16]
  110390:	e3530000 	cmp	r3, #0
  110394:	1a0001c3 	bne	110aa8 <_dtoa_r+0x1154>
  110398:	eef10b04 	vmov.f64	d16, #20	; 0x40a00000  5.0
  11039c:	ee622ba0 	vmul.f64	d18, d18, d16
  1103a0:	ec4bab30 	vmov	d16, sl, fp
  1103a4:	eef42be0 	vcmpe.f64	d18, d16
  1103a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1103ac:	aa000198 	bge	110a14 <_dtoa_r+0x10c0>
  1103b0:	e58d300c 	str	r3, [sp, #12]
  1103b4:	e1a08005 	mov	r8, r5
  1103b8:	e58d3014 	str	r3, [sp, #20]
  1103bc:	eaffff01 	b	10ffc8 <_dtoa_r+0x674>
  1103c0:	ee071a90 	vmov	s15, r1
  1103c4:	eef81be7 	vcvt.f64.s32	d17, s15
  1103c8:	eef12b0c 	vmov.f64	d18, #28	; 0x40e00000  7.0
  1103cc:	ee412ba3 	vmla.f64	d18, d17, d19
  1103d0:	ec5bab32 	vmov	sl, fp, d18
  1103d4:	e24bb50d 	sub	fp, fp, #54525952	; 0x3400000
  1103d8:	eef10b04 	vmov.f64	d16, #20	; 0x40a00000  5.0
  1103dc:	ec4bab32 	vmov	d18, sl, fp
  1103e0:	ee730be0 	vsub.f64	d16, d19, d16
  1103e4:	eef40be2 	vcmpe.f64	d16, d18
  1103e8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1103ec:	ca0000a2 	bgt	11067c <_dtoa_r+0xd28>
  1103f0:	eef12b62 	vneg.f64	d18, d18
  1103f4:	eef40be2 	vcmpe.f64	d16, d18
  1103f8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1103fc:	5a00005b 	bpl	110570 <_dtoa_r+0xc1c>
  110400:	e1a05008 	mov	r5, r8
  110404:	e3a03000 	mov	r3, #0
  110408:	e58d300c 	str	r3, [sp, #12]
  11040c:	e58d3014 	str	r3, [sp, #20]
  110410:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  110414:	e1a08005 	mov	r8, r5
  110418:	e1e03003 	mvn	r3, r3
  11041c:	e58d3008 	str	r3, [sp, #8]
  110420:	eafffeee 	b	10ffe0 <_dtoa_r+0x68c>
  110424:	e1a00008 	mov	r0, r8
  110428:	eafffd79 	b	10fa14 <_dtoa_r+0xc0>
  11042c:	e3a0001c 	mov	r0, #28
  110430:	e0866000 	add	r6, r6, r0
  110434:	e0888000 	add	r8, r8, r0
  110438:	e0899000 	add	r9, r9, r0
  11043c:	eafffeb9 	b	10ff28 <_dtoa_r+0x5d4>
  110440:	e59d3018 	ldr	r3, [sp, #24]
  110444:	e3530000 	cmp	r3, #0
  110448:	1a0000c8 	bne	110770 <_dtoa_r+0xe1c>
  11044c:	e1a06005 	mov	r6, r5
  110450:	e59d900c 	ldr	r9, [sp, #12]
  110454:	e59da010 	ldr	sl, [sp, #16]
  110458:	ea000001 	b	110464 <_dtoa_r+0xb10>
  11045c:	eb0009c9 	bl	112b88 <__multadd>
  110460:	e1a07000 	mov	r7, r0
  110464:	e1a01009 	mov	r1, r9
  110468:	e1a00007 	mov	r0, r7
  11046c:	ebfffcc7 	bl	10f790 <quorem>
  110470:	e2808030 	add	r8, r0, #48	; 0x30
  110474:	e3a03000 	mov	r3, #0
  110478:	e4c68001 	strb	r8, [r6], #1
  11047c:	e0652006 	rsb	r2, r5, r6
  110480:	e152000a 	cmp	r2, sl
  110484:	e1a01007 	mov	r1, r7
  110488:	e3a0200a 	mov	r2, #10
  11048c:	e1a00004 	mov	r0, r4
  110490:	bafffff1 	blt	11045c <_dtoa_r+0xb08>
  110494:	e59d3010 	ldr	r3, [sp, #16]
  110498:	e3a0a000 	mov	sl, #0
  11049c:	e3530001 	cmp	r3, #1
  1104a0:	a0856003 	addge	r6, r5, r3
  1104a4:	b2856001 	addlt	r6, r5, #1
  1104a8:	e1a01007 	mov	r1, r7
  1104ac:	e3a02001 	mov	r2, #1
  1104b0:	e1a00004 	mov	r0, r4
  1104b4:	eb000b1a 	bl	113124 <__lshift>
  1104b8:	e59d100c 	ldr	r1, [sp, #12]
  1104bc:	e1a07000 	mov	r7, r0
  1104c0:	eb000b55 	bl	11321c <__mcmp>
  1104c4:	e3500000 	cmp	r0, #0
  1104c8:	da00016c 	ble	110a80 <_dtoa_r+0x112c>
  1104cc:	e5562001 	ldrb	r2, [r6, #-1]
  1104d0:	e2463001 	sub	r3, r6, #1
  1104d4:	ea000002 	b	1104e4 <_dtoa_r+0xb90>
  1104d8:	e1530005 	cmp	r3, r5
  1104dc:	0a000139 	beq	1109c8 <_dtoa_r+0x1074>
  1104e0:	e5732001 	ldrb	r2, [r3, #-1]!
  1104e4:	e3520039 	cmp	r2, #57	; 0x39
  1104e8:	e2836001 	add	r6, r3, #1
  1104ec:	0afffff9 	beq	1104d8 <_dtoa_r+0xb84>
  1104f0:	e2822001 	add	r2, r2, #1
  1104f4:	e5c32000 	strb	r2, [r3]
  1104f8:	e59d100c 	ldr	r1, [sp, #12]
  1104fc:	e1a00004 	mov	r0, r4
  110500:	eb000999 	bl	112b6c <_Bfree>
  110504:	e59d3014 	ldr	r3, [sp, #20]
  110508:	e3530000 	cmp	r3, #0
  11050c:	0a000169 	beq	110ab8 <_dtoa_r+0x1164>
  110510:	e35a0000 	cmp	sl, #0
  110514:	115a0003 	cmpne	sl, r3
  110518:	01a08005 	moveq	r8, r5
  11051c:	01a05006 	moveq	r5, r6
  110520:	0afffeb4 	beq	10fff8 <_dtoa_r+0x6a4>
  110524:	e1a0100a 	mov	r1, sl
  110528:	e1a00004 	mov	r0, r4
  11052c:	e1a08005 	mov	r8, r5
  110530:	e1a05006 	mov	r5, r6
  110534:	eb00098c 	bl	112b6c <_Bfree>
  110538:	eafffeae 	b	10fff8 <_dtoa_r+0x6a4>
  11053c:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  110540:	e3530001 	cmp	r3, #1
  110544:	da000195 	ble	110ba0 <_dtoa_r+0x124c>
  110548:	e59d3020 	ldr	r3, [sp, #32]
  11054c:	e3a00001 	mov	r0, #1
  110550:	e58d3028 	str	r3, [sp, #40]	; 0x28
  110554:	eafffe69 	b	10ff00 <_dtoa_r+0x5ac>
  110558:	e1a01007 	mov	r1, r7
  11055c:	e59d200c 	ldr	r2, [sp, #12]
  110560:	e1a00004 	mov	r0, r4
  110564:	eb000aaf 	bl	113028 <__pow5mult>
  110568:	e1a07000 	mov	r7, r0
  11056c:	eafffe41 	b	10fe78 <_dtoa_r+0x524>
  110570:	e1a05008 	mov	r5, r8
  110574:	ec5bab35 	vmov	sl, fp, d21
  110578:	eafffdc3 	b	10fc8c <_dtoa_r+0x338>
  11057c:	e59d3008 	ldr	r3, [sp, #8]
  110580:	e2633000 	rsb	r3, r3, #0
  110584:	e3530000 	cmp	r3, #0
  110588:	03a01002 	moveq	r1, #2
  11058c:	0ef03b65 	vmoveq.f64	d19, d21
  110590:	0affff28 	beq	110238 <_dtoa_r+0x8e4>
  110594:	e30720c8 	movw	r2, #28872	; 0x70c8
  110598:	e203100f 	and	r1, r3, #15
  11059c:	e3402011 	movt	r2, #17
  1105a0:	e1b03243 	asrs	r3, r3, #4
  1105a4:	e0822181 	add	r2, r2, r1, lsl #3
  1105a8:	edd20b00 	vldr	d16, [r2]
  1105ac:	ee653ba0 	vmul.f64	d19, d21, d16
  1105b0:	0a000178 	beq	110b98 <_dtoa_r+0x1244>
  1105b4:	e30721b8 	movw	r2, #29112	; 0x71b8
  1105b8:	e3a01002 	mov	r1, #2
  1105bc:	e3402011 	movt	r2, #17
  1105c0:	e3130001 	tst	r3, #1
  1105c4:	e2822008 	add	r2, r2, #8
  1105c8:	1d520b02 	vldrne	d16, [r2, #-8]
  1105cc:	12811001 	addne	r1, r1, #1
  1105d0:	1e633ba0 	vmulne.f64	d19, d19, d16
  1105d4:	e1b030c3 	asrs	r3, r3, #1
  1105d8:	1afffff8 	bne	1105c0 <_dtoa_r+0xc6c>
  1105dc:	eaffff15 	b	110238 <_dtoa_r+0x8e4>
  1105e0:	e3a03001 	mov	r3, #1
  1105e4:	e58d3018 	str	r3, [sp, #24]
  1105e8:	eafffed3 	b	11013c <_dtoa_r+0x7e8>
  1105ec:	eefd7be3 	vcvt.s32.f64	s15, d19
  1105f0:	e2420001 	sub	r0, r2, #1
  1105f4:	e3403011 	movt	r3, #17
  1105f8:	ec4bab30 	vmov	d16, sl, fp
  1105fc:	e0833180 	add	r3, r3, r0, lsl #3
  110600:	e3520001 	cmp	r2, #1
  110604:	e2885001 	add	r5, r8, #1
  110608:	edd32b00 	vldr	d18, [r3]
  11060c:	10881002 	addne	r1, r8, r2
  110610:	eef81be7 	vcvt.f64.s32	d17, s15
  110614:	11a02005 	movne	r2, r5
  110618:	ee173a90 	vmov	r3, s15
  11061c:	e2833030 	add	r3, r3, #48	; 0x30
  110620:	ee622ba0 	vmul.f64	d18, d18, d16
  110624:	e5c83000 	strb	r3, [r8]
  110628:	ee730be1 	vsub.f64	d16, d19, d17
  11062c:	1ef23b04 	vmovne.f64	d19, #36	; 0x41200000  10.0
  110630:	0a000009 	beq	11065c <_dtoa_r+0xd08>
  110634:	ee600ba3 	vmul.f64	d16, d16, d19
  110638:	eefd7be0 	vcvt.s32.f64	s15, d16
  11063c:	eef81be7 	vcvt.f64.s32	d17, s15
  110640:	ee173a90 	vmov	r3, s15
  110644:	e2833030 	add	r3, r3, #48	; 0x30
  110648:	e4c23001 	strb	r3, [r2], #1
  11064c:	e1510002 	cmp	r1, r2
  110650:	ee700be1 	vsub.f64	d16, d16, d17
  110654:	1afffff6 	bne	110634 <_dtoa_r+0xce0>
  110658:	e0855000 	add	r5, r5, r0
  11065c:	eef61b00 	vmov.f64	d17, #96	; 0x3f000000  0.5
  110660:	ee723ba1 	vadd.f64	d19, d18, d17
  110664:	eef43be0 	vcmpe.f64	d19, d16
  110668:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  11066c:	5a0000ca 	bpl	11099c <_dtoa_r+0x1048>
  110670:	e58dc008 	str	ip, [sp, #8]
  110674:	e5553001 	ldrb	r3, [r5, #-1]
  110678:	eafffdbf 	b	10fd7c <_dtoa_r+0x428>
  11067c:	e3a03000 	mov	r3, #0
  110680:	e58d300c 	str	r3, [sp, #12]
  110684:	e58d3014 	str	r3, [sp, #20]
  110688:	eafffe4e 	b	10ffc8 <_dtoa_r+0x674>
  11068c:	e3a03000 	mov	r3, #0
  110690:	e58d3028 	str	r3, [sp, #40]	; 0x28
  110694:	e59d200c 	ldr	r2, [sp, #12]
  110698:	e5923010 	ldr	r3, [r2, #16]
  11069c:	e0823103 	add	r3, r2, r3, lsl #2
  1106a0:	e5930010 	ldr	r0, [r3, #16]
  1106a4:	eb0009a4 	bl	112d3c <__hi0bits>
  1106a8:	e2600020 	rsb	r0, r0, #32
  1106ac:	eafffe13 	b	10ff00 <_dtoa_r+0x5ac>
  1106b0:	e59d100c 	ldr	r1, [sp, #12]
  1106b4:	e1a00007 	mov	r0, r7
  1106b8:	eb000ad7 	bl	11321c <__mcmp>
  1106bc:	e3500000 	cmp	r0, #0
  1106c0:	aafffe29 	bge	10ff6c <_dtoa_r+0x618>
  1106c4:	e1a01007 	mov	r1, r7
  1106c8:	e3a03000 	mov	r3, #0
  1106cc:	e3a0200a 	mov	r2, #10
  1106d0:	e1a00004 	mov	r0, r4
  1106d4:	eb00092b 	bl	112b88 <__multadd>
  1106d8:	e59d3018 	ldr	r3, [sp, #24]
  1106dc:	e1a07000 	mov	r7, r0
  1106e0:	e3530000 	cmp	r3, #0
  1106e4:	e59d3008 	ldr	r3, [sp, #8]
  1106e8:	e2433001 	sub	r3, r3, #1
  1106ec:	e58d3008 	str	r3, [sp, #8]
  1106f0:	1a00000c 	bne	110728 <_dtoa_r+0xdd4>
  1106f4:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  1106f8:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
  1106fc:	e3530002 	cmp	r3, #2
  110700:	c3a03001 	movgt	r3, #1
  110704:	d3a03000 	movle	r3, #0
  110708:	e3520000 	cmp	r2, #0
  11070c:	c3a03000 	movgt	r3, #0
  110710:	e3530000 	cmp	r3, #0
  110714:	058d2010 	streq	r2, [sp, #16]
  110718:	0affff4b 	beq	11044c <_dtoa_r+0xaf8>
  11071c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  110720:	e58d3010 	str	r3, [sp, #16]
  110724:	eafffe19 	b	10ff90 <_dtoa_r+0x63c>
  110728:	e59d1014 	ldr	r1, [sp, #20]
  11072c:	e3a03000 	mov	r3, #0
  110730:	e3a0200a 	mov	r2, #10
  110734:	e1a00004 	mov	r0, r4
  110738:	eb000912 	bl	112b88 <__multadd>
  11073c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
  110740:	e59d1068 	ldr	r1, [sp, #104]	; 0x68
  110744:	e58d0014 	str	r0, [sp, #20]
  110748:	e3520000 	cmp	r2, #0
  11074c:	e1a03002 	mov	r3, r2
  110750:	d3a03001 	movle	r3, #1
  110754:	c3a03000 	movgt	r3, #0
  110758:	e3510002 	cmp	r1, #2
  11075c:	d3a03000 	movle	r3, #0
  110760:	e3530000 	cmp	r3, #0
  110764:	01a03002 	moveq	r3, r2
  110768:	058d3010 	streq	r3, [sp, #16]
  11076c:	1affffea 	bne	11071c <_dtoa_r+0xdc8>
  110770:	e3580000 	cmp	r8, #0
  110774:	da000004 	ble	11078c <_dtoa_r+0xe38>
  110778:	e1a02008 	mov	r2, r8
  11077c:	e59d1014 	ldr	r1, [sp, #20]
  110780:	e1a00004 	mov	r0, r4
  110784:	eb000a66 	bl	113124 <__lshift>
  110788:	e58d0014 	str	r0, [sp, #20]
  11078c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  110790:	e3530000 	cmp	r3, #0
  110794:	059d9014 	ldreq	r9, [sp, #20]
  110798:	1a0000c9 	bne	110ac4 <_dtoa_r+0x1170>
  11079c:	e59d3010 	ldr	r3, [sp, #16]
  1107a0:	e58d5020 	str	r5, [sp, #32]
  1107a4:	e2436001 	sub	r6, r3, #1
  1107a8:	e20a3001 	and	r3, sl, #1
  1107ac:	e58d3018 	str	r3, [sp, #24]
  1107b0:	e0853006 	add	r3, r5, r6
  1107b4:	e58d301c 	str	r3, [sp, #28]
  1107b8:	e1a06005 	mov	r6, r5
  1107bc:	e59d5014 	ldr	r5, [sp, #20]
  1107c0:	ea000008 	b	1107e8 <_dtoa_r+0xe94>
  1107c4:	eb0008ef 	bl	112b88 <__multadd>
  1107c8:	e1a01009 	mov	r1, r9
  1107cc:	e1a05000 	mov	r5, r0
  1107d0:	e3a03000 	mov	r3, #0
  1107d4:	e1a00004 	mov	r0, r4
  1107d8:	e3a0200a 	mov	r2, #10
  1107dc:	eb0008e9 	bl	112b88 <__multadd>
  1107e0:	e1a09000 	mov	r9, r0
  1107e4:	e1a0600a 	mov	r6, sl
  1107e8:	e59d100c 	ldr	r1, [sp, #12]
  1107ec:	e1a00007 	mov	r0, r7
  1107f0:	ebfffbe6 	bl	10f790 <quorem>
  1107f4:	e1a01005 	mov	r1, r5
  1107f8:	e1a0b000 	mov	fp, r0
  1107fc:	e1a00007 	mov	r0, r7
  110800:	e28b8030 	add	r8, fp, #48	; 0x30
  110804:	eb000a84 	bl	11321c <__mcmp>
  110808:	e1a02009 	mov	r2, r9
  11080c:	e1a0a000 	mov	sl, r0
  110810:	e59d100c 	ldr	r1, [sp, #12]
  110814:	e1a00004 	mov	r0, r4
  110818:	eb000a98 	bl	113280 <__mdiff>
  11081c:	e590200c 	ldr	r2, [r0, #12]
  110820:	e1a03000 	mov	r3, r0
  110824:	e3520000 	cmp	r2, #0
  110828:	1a000030 	bne	1108f0 <_dtoa_r+0xf9c>
  11082c:	e1a01000 	mov	r1, r0
  110830:	e58d0010 	str	r0, [sp, #16]
  110834:	e1a00007 	mov	r0, r7
  110838:	eb000a77 	bl	11321c <__mcmp>
  11083c:	e59d3010 	ldr	r3, [sp, #16]
  110840:	e1a02000 	mov	r2, r0
  110844:	e1a01003 	mov	r1, r3
  110848:	e1a00004 	mov	r0, r4
  11084c:	e58d2010 	str	r2, [sp, #16]
  110850:	eb0008c5 	bl	112b6c <_Bfree>
  110854:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  110858:	e59d2010 	ldr	r2, [sp, #16]
  11085c:	e1923003 	orrs	r3, r2, r3
  110860:	1a000002 	bne	110870 <_dtoa_r+0xf1c>
  110864:	e59d3018 	ldr	r3, [sp, #24]
  110868:	e3530000 	cmp	r3, #0
  11086c:	0a0000be 	beq	110b6c <_dtoa_r+0x1218>
  110870:	e35a0000 	cmp	sl, #0
  110874:	ba00006c 	blt	110a2c <_dtoa_r+0x10d8>
  110878:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  11087c:	e19a3003 	orrs	r3, sl, r3
  110880:	1a000002 	bne	110890 <_dtoa_r+0xf3c>
  110884:	e59d3018 	ldr	r3, [sp, #24]
  110888:	e3530000 	cmp	r3, #0
  11088c:	0a000066 	beq	110a2c <_dtoa_r+0x10d8>
  110890:	e3520000 	cmp	r2, #0
  110894:	ca0000a5 	bgt	110b30 <_dtoa_r+0x11dc>
  110898:	e59d301c 	ldr	r3, [sp, #28]
  11089c:	e286a001 	add	sl, r6, #1
  1108a0:	e5c68000 	strb	r8, [r6]
  1108a4:	e1530006 	cmp	r3, r6
  1108a8:	e1a0600a 	mov	r6, sl
  1108ac:	0a0000aa 	beq	110b5c <_dtoa_r+0x1208>
  1108b0:	e1a01007 	mov	r1, r7
  1108b4:	e3a03000 	mov	r3, #0
  1108b8:	e3a0200a 	mov	r2, #10
  1108bc:	e1a00004 	mov	r0, r4
  1108c0:	eb0008b0 	bl	112b88 <__multadd>
  1108c4:	e1550009 	cmp	r5, r9
  1108c8:	e1a07000 	mov	r7, r0
  1108cc:	e1a01005 	mov	r1, r5
  1108d0:	e3a03000 	mov	r3, #0
  1108d4:	e3a0200a 	mov	r2, #10
  1108d8:	e1a00004 	mov	r0, r4
  1108dc:	1affffb8 	bne	1107c4 <_dtoa_r+0xe70>
  1108e0:	eb0008a8 	bl	112b88 <__multadd>
  1108e4:	e1a05000 	mov	r5, r0
  1108e8:	e1a09000 	mov	r9, r0
  1108ec:	eaffffbc 	b	1107e4 <_dtoa_r+0xe90>
  1108f0:	e3a02001 	mov	r2, #1
  1108f4:	eaffffd2 	b	110844 <_dtoa_r+0xef0>
  1108f8:	e353000e 	cmp	r3, #14
  1108fc:	83a03000 	movhi	r3, #0
  110900:	93a03001 	movls	r3, #1
  110904:	e3a01000 	mov	r1, #0
  110908:	e0055003 	and	r5, r5, r3
  11090c:	e5841044 	str	r1, [r4, #68]	; 0x44
  110910:	eafffe23 	b	1101a4 <_dtoa_r+0x850>
  110914:	e3a03001 	mov	r3, #1
  110918:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  11091c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  110920:	e58d3010 	str	r3, [sp, #16]
  110924:	eafffff6 	b	110904 <_dtoa_r+0xfb0>
  110928:	e1a08005 	mov	r8, r5
  11092c:	e1a05002 	mov	r5, r2
  110930:	eafffdb3 	b	110004 <_dtoa_r+0x6b0>
  110934:	e59d3010 	ldr	r3, [sp, #16]
  110938:	e3530000 	cmp	r3, #0
  11093c:	0afffe9f 	beq	1103c0 <_dtoa_r+0xa6c>
  110940:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  110944:	e3530000 	cmp	r3, #0
  110948:	daffff08 	ble	110570 <_dtoa_r+0xc1c>
  11094c:	eef20b04 	vmov.f64	d16, #36	; 0x41200000  10.0
  110950:	e2811001 	add	r1, r1, #1
  110954:	eef12b0c 	vmov.f64	d18, #28	; 0x40e00000  7.0
  110958:	ee633ba0 	vmul.f64	d19, d19, d16
  11095c:	ee071a90 	vmov	s15, r1
  110960:	eef80be7 	vcvt.f64.s32	d16, s15
  110964:	e59d2008 	ldr	r2, [sp, #8]
  110968:	ee402ba3 	vmla.f64	d18, d16, d19
  11096c:	e242c001 	sub	ip, r2, #1
  110970:	e1a02003 	mov	r2, r3
  110974:	ec5bab32 	vmov	sl, fp, d18
  110978:	e24bb50d 	sub	fp, fp, #54525952	; 0x3400000
  11097c:	eafffe3f 	b	110280 <_dtoa_r+0x92c>
  110980:	e59d1008 	ldr	r1, [sp, #8]
  110984:	e3a03030 	mov	r3, #48	; 0x30
  110988:	e5c23000 	strb	r3, [r2]
  11098c:	e5553001 	ldrb	r3, [r5, #-1]
  110990:	e2811001 	add	r1, r1, #1
  110994:	e58d1008 	str	r1, [sp, #8]
  110998:	eafffcff 	b	10fd9c <_dtoa_r+0x448>
  11099c:	ee711be2 	vsub.f64	d17, d17, d18
  1109a0:	eef41be0 	vcmpe.f64	d17, d16
  1109a4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  1109a8:	ca000001 	bgt	1109b4 <_dtoa_r+0x1060>
  1109ac:	eafffeef 	b	110570 <_dtoa_r+0xc1c>
  1109b0:	e1a05002 	mov	r5, r2
  1109b4:	e5553001 	ldrb	r3, [r5, #-1]
  1109b8:	e2452001 	sub	r2, r5, #1
  1109bc:	e3530030 	cmp	r3, #48	; 0x30
  1109c0:	0afffffa 	beq	1109b0 <_dtoa_r+0x105c>
  1109c4:	eafffe5f 	b	110348 <_dtoa_r+0x9f4>
  1109c8:	e59d2008 	ldr	r2, [sp, #8]
  1109cc:	e3a03031 	mov	r3, #49	; 0x31
  1109d0:	e5c53000 	strb	r3, [r5]
  1109d4:	e2822001 	add	r2, r2, #1
  1109d8:	e58d2008 	str	r2, [sp, #8]
  1109dc:	eafffec5 	b	1104f8 <_dtoa_r+0xba4>
  1109e0:	e59d2014 	ldr	r2, [sp, #20]
  1109e4:	e3520000 	cmp	r2, #0
  1109e8:	159d200c 	ldrne	r2, [sp, #12]
  1109ec:	12833e43 	addne	r3, r3, #1072	; 0x430
  1109f0:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
  1109f4:	12833003 	addne	r3, r3, #3
  1109f8:	059d200c 	ldreq	r2, [sp, #12]
  1109fc:	11a08006 	movne	r8, r6
  110a00:	158d2028 	strne	r2, [sp, #40]	; 0x28
  110a04:	01a08006 	moveq	r8, r6
  110a08:	02633036 	rsbeq	r3, r3, #54	; 0x36
  110a0c:	058d2028 	streq	r2, [sp, #40]	; 0x28
  110a10:	eafffdc0 	b	110118 <_dtoa_r+0x7c4>
  110a14:	e59d3010 	ldr	r3, [sp, #16]
  110a18:	e58d300c 	str	r3, [sp, #12]
  110a1c:	e58d3014 	str	r3, [sp, #20]
  110a20:	eafffe7a 	b	110410 <_dtoa_r+0xabc>
  110a24:	e58dc008 	str	ip, [sp, #8]
  110a28:	eafffcd3 	b	10fd7c <_dtoa_r+0x428>
  110a2c:	e3520000 	cmp	r2, #0
  110a30:	e58d5014 	str	r5, [sp, #20]
  110a34:	e59d5020 	ldr	r5, [sp, #32]
  110a38:	da00000b 	ble	110a6c <_dtoa_r+0x1118>
  110a3c:	e1a01007 	mov	r1, r7
  110a40:	e3a02001 	mov	r2, #1
  110a44:	e1a00004 	mov	r0, r4
  110a48:	eb0009b5 	bl	113124 <__lshift>
  110a4c:	e59d100c 	ldr	r1, [sp, #12]
  110a50:	e1a07000 	mov	r7, r0
  110a54:	eb0009f0 	bl	11321c <__mcmp>
  110a58:	e3500000 	cmp	r0, #0
  110a5c:	da000049 	ble	110b88 <_dtoa_r+0x1234>
  110a60:	e3580039 	cmp	r8, #57	; 0x39
  110a64:	0a000036 	beq	110b44 <_dtoa_r+0x11f0>
  110a68:	e28b8031 	add	r8, fp, #49	; 0x31
  110a6c:	e59da014 	ldr	sl, [sp, #20]
  110a70:	e2866001 	add	r6, r6, #1
  110a74:	e5468001 	strb	r8, [r6, #-1]
  110a78:	e58d9014 	str	r9, [sp, #20]
  110a7c:	eafffe9d 	b	1104f8 <_dtoa_r+0xba4>
  110a80:	1a000003 	bne	110a94 <_dtoa_r+0x1140>
  110a84:	e3180001 	tst	r8, #1
  110a88:	0a000001 	beq	110a94 <_dtoa_r+0x1140>
  110a8c:	eafffe8e 	b	1104cc <_dtoa_r+0xb78>
  110a90:	e1a06002 	mov	r6, r2
  110a94:	e5563001 	ldrb	r3, [r6, #-1]
  110a98:	e2462001 	sub	r2, r6, #1
  110a9c:	e3530030 	cmp	r3, #48	; 0x30
  110aa0:	0afffffa 	beq	110a90 <_dtoa_r+0x113c>
  110aa4:	eafffe93 	b	1104f8 <_dtoa_r+0xba4>
  110aa8:	e3a03000 	mov	r3, #0
  110aac:	e58d300c 	str	r3, [sp, #12]
  110ab0:	e58d3014 	str	r3, [sp, #20]
  110ab4:	eafffe55 	b	110410 <_dtoa_r+0xabc>
  110ab8:	e1a08005 	mov	r8, r5
  110abc:	e1a05006 	mov	r5, r6
  110ac0:	eafffd4f 	b	110004 <_dtoa_r+0x6b0>
  110ac4:	e59d8014 	ldr	r8, [sp, #20]
  110ac8:	e1a00004 	mov	r0, r4
  110acc:	e5981004 	ldr	r1, [r8, #4]
  110ad0:	eb000802 	bl	112ae0 <_Balloc>
  110ad4:	e5982010 	ldr	r2, [r8, #16]
  110ad8:	e1a06000 	mov	r6, r0
  110adc:	e288100c 	add	r1, r8, #12
  110ae0:	e280000c 	add	r0, r0, #12
  110ae4:	e2822002 	add	r2, r2, #2
  110ae8:	e1a02102 	lsl	r2, r2, #2
  110aec:	eb000727 	bl	112790 <memcpy>
  110af0:	e1a01006 	mov	r1, r6
  110af4:	e3a02001 	mov	r2, #1
  110af8:	e1a00004 	mov	r0, r4
  110afc:	eb000988 	bl	113124 <__lshift>
  110b00:	e1a09000 	mov	r9, r0
  110b04:	eaffff24 	b	11079c <_dtoa_r+0xe48>
  110b08:	eef42b60 	vcmp.f64	d18, d16
  110b0c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  110b10:	1affff84 	bne	110928 <_dtoa_r+0xfd4>
  110b14:	ee173a90 	vmov	r3, s15
  110b18:	e1a08005 	mov	r8, r5
  110b1c:	e3130001 	tst	r3, #1
  110b20:	0affff81 	beq	11092c <_dtoa_r+0xfd8>
  110b24:	e5523001 	ldrb	r3, [r2, #-1]
  110b28:	e1a05002 	mov	r5, r2
  110b2c:	eafffc92 	b	10fd7c <_dtoa_r+0x428>
  110b30:	e3580039 	cmp	r8, #57	; 0x39
  110b34:	e58d5014 	str	r5, [sp, #20]
  110b38:	12888001 	addne	r8, r8, #1
  110b3c:	e59d5020 	ldr	r5, [sp, #32]
  110b40:	1affffc9 	bne	110a6c <_dtoa_r+0x1118>
  110b44:	e3a02039 	mov	r2, #57	; 0x39
  110b48:	e59da014 	ldr	sl, [sp, #20]
  110b4c:	e5c62000 	strb	r2, [r6]
  110b50:	e2866001 	add	r6, r6, #1
  110b54:	e58d9014 	str	r9, [sp, #20]
  110b58:	eafffe5c 	b	1104d0 <_dtoa_r+0xb7c>
  110b5c:	e1a0a005 	mov	sl, r5
  110b60:	e58d9014 	str	r9, [sp, #20]
  110b64:	e59d5020 	ldr	r5, [sp, #32]
  110b68:	eafffe4e 	b	1104a8 <_dtoa_r+0xb54>
  110b6c:	e3580039 	cmp	r8, #57	; 0x39
  110b70:	e58d5014 	str	r5, [sp, #20]
  110b74:	e59d5020 	ldr	r5, [sp, #32]
  110b78:	0afffff1 	beq	110b44 <_dtoa_r+0x11f0>
  110b7c:	e35a0000 	cmp	sl, #0
  110b80:	caffffb8 	bgt	110a68 <_dtoa_r+0x1114>
  110b84:	eaffffb8 	b	110a6c <_dtoa_r+0x1118>
  110b88:	1affffb7 	bne	110a6c <_dtoa_r+0x1118>
  110b8c:	e3180001 	tst	r8, #1
  110b90:	0affffb5 	beq	110a6c <_dtoa_r+0x1118>
  110b94:	eaffffb1 	b	110a60 <_dtoa_r+0x110c>
  110b98:	e3a01002 	mov	r1, #2
  110b9c:	eafffda5 	b	110238 <_dtoa_r+0x8e4>
  110ba0:	e35a0000 	cmp	sl, #0
  110ba4:	0afffcc4 	beq	10febc <_dtoa_r+0x568>
  110ba8:	eafffe66 	b	110548 <_dtoa_r+0xbf4>
  110bac:	1260003c 	rsbne	r0, r0, #60	; 0x3c
  110bb0:	0afffcdc 	beq	10ff28 <_dtoa_r+0x5d4>
  110bb4:	eafffe1d 	b	110430 <_dtoa_r+0xadc>
  110bb8:	e1a05000 	mov	r5, r0
  110bbc:	eafffc32 	b	10fc8c <_dtoa_r+0x338>
  110bc0:	e3e03000 	mvn	r3, #0
  110bc4:	e58d806c 	str	r8, [sp, #108]	; 0x6c
  110bc8:	e58d3010 	str	r3, [sp, #16]
  110bcc:	eafffc36 	b	10fcac <_dtoa_r+0x358>

00110bd0 <__sflush_r>:
  110bd0:	e1d130bc 	ldrh	r3, [r1, #12]
  110bd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  110bd8:	e1a05001 	mov	r5, r1
  110bdc:	e1a08000 	mov	r8, r0
  110be0:	e6ff2073 	uxth	r2, r3
  110be4:	e3120008 	tst	r2, #8
  110be8:	1a000034 	bne	110cc0 <__sflush_r+0xf0>
  110bec:	e5912004 	ldr	r2, [r1, #4]
  110bf0:	e3833b02 	orr	r3, r3, #2048	; 0x800
  110bf4:	e1c130bc 	strh	r3, [r1, #12]
  110bf8:	e3520000 	cmp	r2, #0
  110bfc:	da00004d 	ble	110d38 <__sflush_r+0x168>
  110c00:	e5956028 	ldr	r6, [r5, #40]	; 0x28
  110c04:	e3560000 	cmp	r6, #0
  110c08:	0a00004d 	beq	110d44 <__sflush_r+0x174>
  110c0c:	e6ff3073 	uxth	r3, r3
  110c10:	e3a02000 	mov	r2, #0
  110c14:	e5987000 	ldr	r7, [r8]
  110c18:	e2030a01 	and	r0, r3, #4096	; 0x1000
  110c1c:	e5882000 	str	r2, [r8]
  110c20:	e6ff4070 	uxth	r4, r0
  110c24:	e1540002 	cmp	r4, r2
  110c28:	0a00005e 	beq	110da8 <__sflush_r+0x1d8>
  110c2c:	e5952050 	ldr	r2, [r5, #80]	; 0x50
  110c30:	e3130004 	tst	r3, #4
  110c34:	0a000005 	beq	110c50 <__sflush_r+0x80>
  110c38:	e5951030 	ldr	r1, [r5, #48]	; 0x30
  110c3c:	e5953004 	ldr	r3, [r5, #4]
  110c40:	e3510000 	cmp	r1, #0
  110c44:	e0632002 	rsb	r2, r3, r2
  110c48:	1595303c 	ldrne	r3, [r5, #60]	; 0x3c
  110c4c:	10632002 	rsbne	r2, r3, r2
  110c50:	e3a03000 	mov	r3, #0
  110c54:	e595101c 	ldr	r1, [r5, #28]
  110c58:	e1a00008 	mov	r0, r8
  110c5c:	e12fff36 	blx	r6
  110c60:	e3700001 	cmn	r0, #1
  110c64:	0a000038 	beq	110d4c <__sflush_r+0x17c>
  110c68:	e1d510bc 	ldrh	r1, [r5, #12]
  110c6c:	e30f37ff 	movw	r3, #63487	; 0xf7ff
  110c70:	e5952010 	ldr	r2, [r5, #16]
  110c74:	e3a0c000 	mov	ip, #0
  110c78:	e585c004 	str	ip, [r5, #4]
  110c7c:	e0033001 	and	r3, r3, r1
  110c80:	e3130a01 	tst	r3, #4096	; 0x1000
  110c84:	e1c530bc 	strh	r3, [r5, #12]
  110c88:	e5852000 	str	r2, [r5]
  110c8c:	1a000043 	bne	110da0 <__sflush_r+0x1d0>
  110c90:	e5951030 	ldr	r1, [r5, #48]	; 0x30
  110c94:	e5887000 	str	r7, [r8]
  110c98:	e3510000 	cmp	r1, #0
  110c9c:	0a000028 	beq	110d44 <__sflush_r+0x174>
  110ca0:	e2853040 	add	r3, r5, #64	; 0x40
  110ca4:	e1510003 	cmp	r1, r3
  110ca8:	0a000001 	beq	110cb4 <__sflush_r+0xe4>
  110cac:	e1a00008 	mov	r0, r8
  110cb0:	eb0001b8 	bl	111398 <_free_r>
  110cb4:	e3a00000 	mov	r0, #0
  110cb8:	e5850030 	str	r0, [r5, #48]	; 0x30
  110cbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  110cc0:	e5916010 	ldr	r6, [r1, #16]
  110cc4:	e3560000 	cmp	r6, #0
  110cc8:	0a00001d 	beq	110d44 <__sflush_r+0x174>
  110ccc:	e5914000 	ldr	r4, [r1]
  110cd0:	e3120003 	tst	r2, #3
  110cd4:	05913014 	ldreq	r3, [r1, #20]
  110cd8:	13a03000 	movne	r3, #0
  110cdc:	e5816000 	str	r6, [r1]
  110ce0:	e0664004 	rsb	r4, r6, r4
  110ce4:	e3540000 	cmp	r4, #0
  110ce8:	e5813008 	str	r3, [r1, #8]
  110cec:	ca000002 	bgt	110cfc <__sflush_r+0x12c>
  110cf0:	ea000013 	b	110d44 <__sflush_r+0x174>
  110cf4:	e3540000 	cmp	r4, #0
  110cf8:	da000011 	ble	110d44 <__sflush_r+0x174>
  110cfc:	e1a03004 	mov	r3, r4
  110d00:	e1a02006 	mov	r2, r6
  110d04:	e5957024 	ldr	r7, [r5, #36]	; 0x24
  110d08:	e1a00008 	mov	r0, r8
  110d0c:	e595101c 	ldr	r1, [r5, #28]
  110d10:	e12fff37 	blx	r7
  110d14:	e3500000 	cmp	r0, #0
  110d18:	e0604004 	rsb	r4, r0, r4
  110d1c:	e0866000 	add	r6, r6, r0
  110d20:	cafffff3 	bgt	110cf4 <__sflush_r+0x124>
  110d24:	e1d530bc 	ldrh	r3, [r5, #12]
  110d28:	e3e00000 	mvn	r0, #0
  110d2c:	e3833040 	orr	r3, r3, #64	; 0x40
  110d30:	e1c530bc 	strh	r3, [r5, #12]
  110d34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  110d38:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
  110d3c:	e3520000 	cmp	r2, #0
  110d40:	caffffae 	bgt	110c00 <__sflush_r+0x30>
  110d44:	e3a00000 	mov	r0, #0
  110d48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  110d4c:	e5982000 	ldr	r2, [r8]
  110d50:	e352001d 	cmp	r2, #29
  110d54:	13520000 	cmpne	r2, #0
  110d58:	03a03001 	moveq	r3, #1
  110d5c:	13a03000 	movne	r3, #0
  110d60:	e3520016 	cmp	r2, #22
  110d64:	03833001 	orreq	r3, r3, #1
  110d68:	e3530000 	cmp	r3, #0
  110d6c:	0a000024 	beq	110e04 <__sflush_r+0x234>
  110d70:	e1d5c0bc 	ldrh	ip, [r5, #12]
  110d74:	e30f37ff 	movw	r3, #63487	; 0xf7ff
  110d78:	e5951010 	ldr	r1, [r5, #16]
  110d7c:	e3a0e000 	mov	lr, #0
  110d80:	e585e004 	str	lr, [r5, #4]
  110d84:	e003300c 	and	r3, r3, ip
  110d88:	e3130a01 	tst	r3, #4096	; 0x1000
  110d8c:	e1c530bc 	strh	r3, [r5, #12]
  110d90:	e5851000 	str	r1, [r5]
  110d94:	0affffbd 	beq	110c90 <__sflush_r+0xc0>
  110d98:	e3520000 	cmp	r2, #0
  110d9c:	1affffbb 	bne	110c90 <__sflush_r+0xc0>
  110da0:	e5850050 	str	r0, [r5, #80]	; 0x50
  110da4:	eaffffb9 	b	110c90 <__sflush_r+0xc0>
  110da8:	e1a02004 	mov	r2, r4
  110dac:	e3a03001 	mov	r3, #1
  110db0:	e595101c 	ldr	r1, [r5, #28]
  110db4:	e1a00008 	mov	r0, r8
  110db8:	e12fff36 	blx	r6
  110dbc:	e3700001 	cmn	r0, #1
  110dc0:	e1a02000 	mov	r2, r0
  110dc4:	0a000002 	beq	110dd4 <__sflush_r+0x204>
  110dc8:	e1d530bc 	ldrh	r3, [r5, #12]
  110dcc:	e5956028 	ldr	r6, [r5, #40]	; 0x28
  110dd0:	eaffff96 	b	110c30 <__sflush_r+0x60>
  110dd4:	e5983000 	ldr	r3, [r8]
  110dd8:	e3530000 	cmp	r3, #0
  110ddc:	0afffff9 	beq	110dc8 <__sflush_r+0x1f8>
  110de0:	e3530016 	cmp	r3, #22
  110de4:	1353001d 	cmpne	r3, #29
  110de8:	11d530bc 	ldrhne	r3, [r5, #12]
  110dec:	01a00004 	moveq	r0, r4
  110df0:	05887000 	streq	r7, [r8]
  110df4:	11a00002 	movne	r0, r2
  110df8:	13833040 	orrne	r3, r3, #64	; 0x40
  110dfc:	11c530bc 	strhne	r3, [r5, #12]
  110e00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  110e04:	e1d530bc 	ldrh	r3, [r5, #12]
  110e08:	e3833040 	orr	r3, r3, #64	; 0x40
  110e0c:	e1c530bc 	strh	r3, [r5, #12]
  110e10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00110e14 <_fflush_r>:
  110e14:	e92d4070 	push	{r4, r5, r6, lr}
  110e18:	e2504000 	subs	r4, r0, #0
  110e1c:	e1a05001 	mov	r5, r1
  110e20:	0a000002 	beq	110e30 <_fflush_r+0x1c>
  110e24:	e5943038 	ldr	r3, [r4, #56]	; 0x38
  110e28:	e3530000 	cmp	r3, #0
  110e2c:	0a000013 	beq	110e80 <_fflush_r+0x6c>
  110e30:	e1d500bc 	ldrh	r0, [r5, #12]
  110e34:	e3500000 	cmp	r0, #0
  110e38:	08bd8070 	popeq	{r4, r5, r6, pc}
  110e3c:	e5953064 	ldr	r3, [r5, #100]	; 0x64
  110e40:	e3130001 	tst	r3, #1
  110e44:	1a000001 	bne	110e50 <_fflush_r+0x3c>
  110e48:	e3100c02 	tst	r0, #512	; 0x200
  110e4c:	0a00000d 	beq	110e88 <_fflush_r+0x74>
  110e50:	e1a00004 	mov	r0, r4
  110e54:	e1a01005 	mov	r1, r5
  110e58:	ebffff5c 	bl	110bd0 <__sflush_r>
  110e5c:	e5953064 	ldr	r3, [r5, #100]	; 0x64
  110e60:	e1a04000 	mov	r4, r0
  110e64:	e3130001 	tst	r3, #1
  110e68:	1a000002 	bne	110e78 <_fflush_r+0x64>
  110e6c:	e1d530bc 	ldrh	r3, [r5, #12]
  110e70:	e3130c02 	tst	r3, #512	; 0x200
  110e74:	0a000006 	beq	110e94 <_fflush_r+0x80>
  110e78:	e1a00004 	mov	r0, r4
  110e7c:	e8bd8070 	pop	{r4, r5, r6, pc}
  110e80:	eb000066 	bl	111020 <__sinit>
  110e84:	eaffffe9 	b	110e30 <_fflush_r+0x1c>
  110e88:	e2850058 	add	r0, r5, #88	; 0x58
  110e8c:	eb001551 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  110e90:	eaffffee 	b	110e50 <_fflush_r+0x3c>
  110e94:	e2850058 	add	r0, r5, #88	; 0x58
  110e98:	eb00154c 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  110e9c:	e1a00004 	mov	r0, r4
  110ea0:	e8bd8070 	pop	{r4, r5, r6, pc}

00110ea4 <fflush>:
  110ea4:	e3500000 	cmp	r0, #0
  110ea8:	0a000005 	beq	110ec4 <fflush+0x20>
  110eac:	e92d4010 	push	{r4, lr}
  110eb0:	e1a04000 	mov	r4, r0
  110eb4:	eb000356 	bl	111c14 <__getreent>
  110eb8:	e1a01004 	mov	r1, r4
  110ebc:	e8bd4010 	pop	{r4, lr}
  110ec0:	eaffffd3 	b	110e14 <_fflush_r>
  110ec4:	e3073390 	movw	r3, #29584	; 0x7390
  110ec8:	e3001e14 	movw	r1, #3604	; 0xe14
  110ecc:	e3403011 	movt	r3, #17
  110ed0:	e3401011 	movt	r1, #17
  110ed4:	e5930000 	ldr	r0, [r3]
  110ed8:	ea00032d 	b	111b94 <_fwalk_reent>

00110edc <_cleanup_r>:
  110edc:	e3051a48 	movw	r1, #23112	; 0x5a48
  110ee0:	e3401011 	movt	r1, #17
  110ee4:	ea00032a 	b	111b94 <_fwalk_reent>

00110ee8 <__fp_lock>:
  110ee8:	e1d030bc 	ldrh	r3, [r0, #12]
  110eec:	e3130c02 	tst	r3, #512	; 0x200
  110ef0:	0a000001 	beq	110efc <__fp_lock+0x14>
  110ef4:	e3a00000 	mov	r0, #0
  110ef8:	e12fff1e 	bx	lr
  110efc:	e92d4010 	push	{r4, lr}
  110f00:	e2800058 	add	r0, r0, #88	; 0x58
  110f04:	eb001533 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  110f08:	e3a00000 	mov	r0, #0
  110f0c:	e8bd8010 	pop	{r4, pc}

00110f10 <__fp_unlock>:
  110f10:	e1d030bc 	ldrh	r3, [r0, #12]
  110f14:	e3130c02 	tst	r3, #512	; 0x200
  110f18:	0a000001 	beq	110f24 <__fp_unlock+0x14>
  110f1c:	e3a00000 	mov	r0, #0
  110f20:	e12fff1e 	bx	lr
  110f24:	e92d4010 	push	{r4, lr}
  110f28:	e2800058 	add	r0, r0, #88	; 0x58
  110f2c:	eb001527 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  110f30:	e3a00000 	mov	r0, #0
  110f34:	e8bd8010 	pop	{r4, pc}

00110f38 <std.isra.0>:
  110f38:	e92d4010 	push	{r4, lr}
  110f3c:	e3a03000 	mov	r3, #0
  110f40:	e1a04000 	mov	r4, r0
  110f44:	e1c010bc 	strh	r1, [r0, #12]
  110f48:	e1a01003 	mov	r1, r3
  110f4c:	e280005c 	add	r0, r0, #92	; 0x5c
  110f50:	e1c420be 	strh	r2, [r4, #14]
  110f54:	e3a02008 	mov	r2, #8
  110f58:	e5843000 	str	r3, [r4]
  110f5c:	e5843004 	str	r3, [r4, #4]
  110f60:	e5843008 	str	r3, [r4, #8]
  110f64:	e5843064 	str	r3, [r4, #100]	; 0x64
  110f68:	e5843010 	str	r3, [r4, #16]
  110f6c:	e5843014 	str	r3, [r4, #20]
  110f70:	e5843018 	str	r3, [r4, #24]
  110f74:	eb000692 	bl	1129c4 <memset>
  110f78:	e303cf28 	movw	ip, #16168	; 0x3f28
  110f7c:	e3031f60 	movw	r1, #16224	; 0x3f60
  110f80:	e3032fb4 	movw	r2, #16308	; 0x3fb4
  110f84:	e3033fe0 	movw	r3, #16352	; 0x3fe0
  110f88:	e340c011 	movt	ip, #17
  110f8c:	e3401011 	movt	r1, #17
  110f90:	e3402011 	movt	r2, #17
  110f94:	e3403011 	movt	r3, #17
  110f98:	e584401c 	str	r4, [r4, #28]
  110f9c:	e2840058 	add	r0, r4, #88	; 0x58
  110fa0:	e584c020 	str	ip, [r4, #32]
  110fa4:	e5841024 	str	r1, [r4, #36]	; 0x24
  110fa8:	e5842028 	str	r2, [r4, #40]	; 0x28
  110fac:	e584302c 	str	r3, [r4, #44]	; 0x2c
  110fb0:	e8bd4010 	pop	{r4, lr}
  110fb4:	ea001501 	b	1163c0 <__generic_gxx_recursive_mutex_init_function>

00110fb8 <__sfmoreglue>:
  110fb8:	e2412001 	sub	r2, r1, #1
  110fbc:	e92d4070 	push	{r4, r5, r6, lr}
  110fc0:	e1a04202 	lsl	r4, r2, #4
  110fc4:	e1a06001 	mov	r6, r1
  110fc8:	e0444102 	sub	r4, r4, r2, lsl #2
  110fcc:	e0844002 	add	r4, r4, r2
  110fd0:	e1a04184 	lsl	r4, r4, #3
  110fd4:	e2841074 	add	r1, r4, #116	; 0x74
  110fd8:	eb0003b4 	bl	111eb0 <_malloc_r>
  110fdc:	e2505000 	subs	r5, r0, #0
  110fe0:	0a000006 	beq	111000 <__sfmoreglue+0x48>
  110fe4:	e3a01000 	mov	r1, #0
  110fe8:	e285000c 	add	r0, r5, #12
  110fec:	e5856004 	str	r6, [r5, #4]
  110ff0:	e2842068 	add	r2, r4, #104	; 0x68
  110ff4:	e5851000 	str	r1, [r5]
  110ff8:	e5850008 	str	r0, [r5, #8]
  110ffc:	eb000670 	bl	1129c4 <memset>
  111000:	e1a00005 	mov	r0, r5
  111004:	e8bd8070 	pop	{r4, r5, r6, pc}

00111008 <_cleanup>:
  111008:	e3073390 	movw	r3, #29584	; 0x7390
  11100c:	e3051a48 	movw	r1, #23112	; 0x5a48
  111010:	e3403011 	movt	r3, #17
  111014:	e3401011 	movt	r1, #17
  111018:	e5930000 	ldr	r0, [r3]
  11101c:	ea0002dc 	b	111b94 <_fwalk_reent>

00111020 <__sinit>:
  111020:	e92d4010 	push	{r4, lr}
  111024:	e1a04000 	mov	r4, r0
  111028:	e30905a4 	movw	r0, #38308	; 0x95a4
  11102c:	e3400011 	movt	r0, #17
  111030:	eb0014e8 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  111034:	e5942038 	ldr	r2, [r4, #56]	; 0x38
  111038:	e3520000 	cmp	r2, #0
  11103c:	1a000018 	bne	1110a4 <__sinit+0x84>
  111040:	e3003edc 	movw	r3, #3804	; 0xedc
  111044:	e3a0c003 	mov	ip, #3
  111048:	e3403011 	movt	r3, #17
  11104c:	e2840fbb 	add	r0, r4, #748	; 0x2ec
  111050:	e584303c 	str	r3, [r4, #60]	; 0x3c
  111054:	e3a01004 	mov	r1, #4
  111058:	e584c2e4 	str	ip, [r4, #740]	; 0x2e4
  11105c:	e58422e0 	str	r2, [r4, #736]	; 0x2e0
  111060:	e58402e8 	str	r0, [r4, #744]	; 0x2e8
  111064:	e5940004 	ldr	r0, [r4, #4]
  111068:	ebffffb2 	bl	110f38 <std.isra.0>
  11106c:	e5940008 	ldr	r0, [r4, #8]
  111070:	e3a02001 	mov	r2, #1
  111074:	e3a01009 	mov	r1, #9
  111078:	ebffffae 	bl	110f38 <std.isra.0>
  11107c:	e594000c 	ldr	r0, [r4, #12]
  111080:	e3a02002 	mov	r2, #2
  111084:	e3a01012 	mov	r1, #18
  111088:	ebffffaa 	bl	110f38 <std.isra.0>
  11108c:	e3a03001 	mov	r3, #1
  111090:	e30905a4 	movw	r0, #38308	; 0x95a4
  111094:	e5843038 	str	r3, [r4, #56]	; 0x38
  111098:	e3400011 	movt	r0, #17
  11109c:	e8bd4010 	pop	{r4, lr}
  1110a0:	ea0014ca 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>
  1110a4:	e30905a4 	movw	r0, #38308	; 0x95a4
  1110a8:	e8bd4010 	pop	{r4, lr}
  1110ac:	e3400011 	movt	r0, #17
  1110b0:	ea0014c6 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>

001110b4 <__sfp>:
  1110b4:	e92d4070 	push	{r4, r5, r6, lr}
  1110b8:	e3074390 	movw	r4, #29584	; 0x7390
  1110bc:	e1a06000 	mov	r6, r0
  1110c0:	e3404011 	movt	r4, #17
  1110c4:	e59f0100 	ldr	r0, [pc, #256]	; 1111cc <__sfp+0x118>
  1110c8:	eb0014c2 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  1110cc:	e5940000 	ldr	r0, [r4]
  1110d0:	e5903038 	ldr	r3, [r0, #56]	; 0x38
  1110d4:	e3530000 	cmp	r3, #0
  1110d8:	0a000032 	beq	1111a8 <__sfp+0xf4>
  1110dc:	e2805e2e 	add	r5, r0, #736	; 0x2e0
  1110e0:	e9950018 	ldmib	r5, {r3, r4}
  1110e4:	e2533001 	subs	r3, r3, #1
  1110e8:	5a000004 	bpl	111100 <__sfp+0x4c>
  1110ec:	ea000020 	b	111174 <__sfp+0xc0>
  1110f0:	e2433001 	sub	r3, r3, #1
  1110f4:	e2844068 	add	r4, r4, #104	; 0x68
  1110f8:	e3730001 	cmn	r3, #1
  1110fc:	0a00001c 	beq	111174 <__sfp+0xc0>
  111100:	e1d420fc 	ldrsh	r2, [r4, #12]
  111104:	e3520000 	cmp	r2, #0
  111108:	1afffff8 	bne	1110f0 <__sfp+0x3c>
  11110c:	e3a05000 	mov	r5, #0
  111110:	e3a03001 	mov	r3, #1
  111114:	e3e02000 	mvn	r2, #0
  111118:	e1c430bc 	strh	r3, [r4, #12]
  11111c:	e1c420be 	strh	r2, [r4, #14]
  111120:	e2840058 	add	r0, r4, #88	; 0x58
  111124:	e5845064 	str	r5, [r4, #100]	; 0x64
  111128:	eb0014a4 	bl	1163c0 <__generic_gxx_recursive_mutex_init_function>
  11112c:	e59f0098 	ldr	r0, [pc, #152]	; 1111cc <__sfp+0x118>
  111130:	eb0014a6 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  111134:	e5845000 	str	r5, [r4]
  111138:	e1a01005 	mov	r1, r5
  11113c:	e5845008 	str	r5, [r4, #8]
  111140:	e3a02008 	mov	r2, #8
  111144:	e5845004 	str	r5, [r4, #4]
  111148:	e284005c 	add	r0, r4, #92	; 0x5c
  11114c:	e5845010 	str	r5, [r4, #16]
  111150:	e5845014 	str	r5, [r4, #20]
  111154:	e5845018 	str	r5, [r4, #24]
  111158:	eb000619 	bl	1129c4 <memset>
  11115c:	e1a00004 	mov	r0, r4
  111160:	e5845030 	str	r5, [r4, #48]	; 0x30
  111164:	e5845034 	str	r5, [r4, #52]	; 0x34
  111168:	e5845044 	str	r5, [r4, #68]	; 0x44
  11116c:	e5845048 	str	r5, [r4, #72]	; 0x48
  111170:	e8bd8070 	pop	{r4, r5, r6, pc}
  111174:	e5953000 	ldr	r3, [r5]
  111178:	e3530000 	cmp	r3, #0
  11117c:	11a05003 	movne	r5, r3
  111180:	1affffd6 	bne	1110e0 <__sfp+0x2c>
  111184:	e3a01004 	mov	r1, #4
  111188:	e1a00006 	mov	r0, r6
  11118c:	ebffff89 	bl	110fb8 <__sfmoreglue>
  111190:	e3500000 	cmp	r0, #0
  111194:	e1a04000 	mov	r4, r0
  111198:	e5850000 	str	r0, [r5]
  11119c:	0a000004 	beq	1111b4 <__sfp+0x100>
  1111a0:	e1a05000 	mov	r5, r0
  1111a4:	eaffffcd 	b	1110e0 <__sfp+0x2c>
  1111a8:	ebffff9c 	bl	111020 <__sinit>
  1111ac:	e5940000 	ldr	r0, [r4]
  1111b0:	eaffffc9 	b	1110dc <__sfp+0x28>
  1111b4:	e59f0010 	ldr	r0, [pc, #16]	; 1111cc <__sfp+0x118>
  1111b8:	eb001484 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  1111bc:	e3a0300c 	mov	r3, #12
  1111c0:	e1a00004 	mov	r0, r4
  1111c4:	e5863000 	str	r3, [r6]
  1111c8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1111cc:	001195a8 	andseq	r9, r1, r8, lsr #11

001111d0 <__sfp_lock_acquire>:
  1111d0:	e59f0000 	ldr	r0, [pc]	; 1111d8 <__sfp_lock_acquire+0x8>
  1111d4:	ea00147f 	b	1163d8 <__generic_gxx_recursive_mutex_lock>
  1111d8:	001195a8 	andseq	r9, r1, r8, lsr #11

001111dc <__sfp_lock_release>:
  1111dc:	e59f0000 	ldr	r0, [pc]	; 1111e4 <__sfp_lock_release+0x8>
  1111e0:	ea00147a 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>
  1111e4:	001195a8 	andseq	r9, r1, r8, lsr #11

001111e8 <__sinit_lock_acquire>:
  1111e8:	e30905a4 	movw	r0, #38308	; 0x95a4
  1111ec:	e3400011 	movt	r0, #17
  1111f0:	ea001478 	b	1163d8 <__generic_gxx_recursive_mutex_lock>

001111f4 <__sinit_lock_release>:
  1111f4:	e30905a4 	movw	r0, #38308	; 0x95a4
  1111f8:	e3400011 	movt	r0, #17
  1111fc:	ea001473 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>

00111200 <__fp_lock_all>:
  111200:	e92d4010 	push	{r4, lr}
  111204:	e59f0014 	ldr	r0, [pc, #20]	; 111220 <__fp_lock_all+0x20>
  111208:	eb001472 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  11120c:	eb000280 	bl	111c14 <__getreent>
  111210:	e3001ee8 	movw	r1, #3816	; 0xee8
  111214:	e8bd4010 	pop	{r4, lr}
  111218:	e3401011 	movt	r1, #17
  11121c:	ea00023e 	b	111b1c <_fwalk>
  111220:	001195a8 	andseq	r9, r1, r8, lsr #11

00111224 <__fp_unlock_all>:
  111224:	e92d4010 	push	{r4, lr}
  111228:	eb000279 	bl	111c14 <__getreent>
  11122c:	e3001f10 	movw	r1, #3856	; 0xf10
  111230:	e3401011 	movt	r1, #17
  111234:	eb000238 	bl	111b1c <_fwalk>
  111238:	e59f0004 	ldr	r0, [pc, #4]	; 111244 <__fp_unlock_all+0x20>
  11123c:	e8bd4010 	pop	{r4, lr}
  111240:	ea001462 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>
  111244:	001195a8 	andseq	r9, r1, r8, lsr #11

00111248 <__init___sfp_lock>:
  111248:	e59f0000 	ldr	r0, [pc]	; 111250 <__init___sfp_lock+0x8>
  11124c:	ea00145b 	b	1163c0 <__generic_gxx_recursive_mutex_init_function>
  111250:	001195a8 	andseq	r9, r1, r8, lsr #11

00111254 <__init___sinit_lock>:
  111254:	e30905a4 	movw	r0, #38308	; 0x95a4
  111258:	e3400011 	movt	r0, #17
  11125c:	ea001457 	b	1163c0 <__generic_gxx_recursive_mutex_init_function>

00111260 <__libc_fini_array>:
  111260:	e92d4070 	push	{r4, r5, r6, lr}
  111264:	e3075258 	movw	r5, #29272	; 0x7258
  111268:	e3074254 	movw	r4, #29268	; 0x7254
  11126c:	e3405011 	movt	r5, #17
  111270:	e3404011 	movt	r4, #17
  111274:	e0644005 	rsb	r4, r4, r5
  111278:	e1b04144 	asrs	r4, r4, #2
  11127c:	0a000004 	beq	111294 <__libc_fini_array+0x34>
  111280:	e2444001 	sub	r4, r4, #1
  111284:	e5353004 	ldr	r3, [r5, #-4]!
  111288:	e12fff33 	blx	r3
  11128c:	e3540000 	cmp	r4, #0
  111290:	1afffffa 	bne	111280 <__libc_fini_array+0x20>
  111294:	e8bd4070 	pop	{r4, r5, r6, lr}
  111298:	ea0017e7 	b	11723c <__libc_fini>

0011129c <_malloc_trim_r>:
  11129c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1112a0:	e307783c 	movw	r7, #30780	; 0x783c
  1112a4:	e3407011 	movt	r7, #17
  1112a8:	e1a04001 	mov	r4, r1
  1112ac:	e1a06000 	mov	r6, r0
  1112b0:	eb000601 	bl	112abc <__malloc_lock>
  1112b4:	e5973008 	ldr	r3, [r7, #8]
  1112b8:	e5935004 	ldr	r5, [r3, #4]
  1112bc:	e3c55003 	bic	r5, r5, #3
  1112c0:	e0641005 	rsb	r1, r4, r5
  1112c4:	e2811efe 	add	r1, r1, #4064	; 0xfe0
  1112c8:	e281100f 	add	r1, r1, #15
  1112cc:	e3c11eff 	bic	r1, r1, #4080	; 0xff0
  1112d0:	e3c1100f 	bic	r1, r1, #15
  1112d4:	e2414a01 	sub	r4, r1, #4096	; 0x1000
  1112d8:	e3540a01 	cmp	r4, #4096	; 0x1000
  1112dc:	ba000006 	blt	1112fc <_malloc_trim_r+0x60>
  1112e0:	e3a01000 	mov	r1, #0
  1112e4:	e1a00006 	mov	r0, r6
  1112e8:	eb000b00 	bl	113ef0 <_sbrk_r>
  1112ec:	e5973008 	ldr	r3, [r7, #8]
  1112f0:	e0833005 	add	r3, r3, r5
  1112f4:	e1500003 	cmp	r0, r3
  1112f8:	0a000003 	beq	11130c <_malloc_trim_r+0x70>
  1112fc:	e1a00006 	mov	r0, r6
  111300:	eb0005f0 	bl	112ac8 <__malloc_unlock>
  111304:	e3a00000 	mov	r0, #0
  111308:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  11130c:	e2641000 	rsb	r1, r4, #0
  111310:	e1a00006 	mov	r0, r6
  111314:	eb000af5 	bl	113ef0 <_sbrk_r>
  111318:	e3700001 	cmn	r0, #1
  11131c:	0a00000c 	beq	111354 <_malloc_trim_r+0xb8>
  111320:	e30935bc 	movw	r3, #38332	; 0x95bc
  111324:	e5972008 	ldr	r2, [r7, #8]
  111328:	e3403011 	movt	r3, #17
  11132c:	e0645005 	rsb	r5, r4, r5
  111330:	e5931000 	ldr	r1, [r3]
  111334:	e3855001 	orr	r5, r5, #1
  111338:	e1a00006 	mov	r0, r6
  11133c:	e5825004 	str	r5, [r2, #4]
  111340:	e0641001 	rsb	r1, r4, r1
  111344:	e5831000 	str	r1, [r3]
  111348:	eb0005de 	bl	112ac8 <__malloc_unlock>
  11134c:	e3a00001 	mov	r0, #1
  111350:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  111354:	e3a01000 	mov	r1, #0
  111358:	e1a00006 	mov	r0, r6
  11135c:	eb000ae3 	bl	113ef0 <_sbrk_r>
  111360:	e5972008 	ldr	r2, [r7, #8]
  111364:	e0623000 	rsb	r3, r2, r0
  111368:	e353000f 	cmp	r3, #15
  11136c:	daffffe2 	ble	1112fc <_malloc_trim_r+0x60>
  111370:	e307cc44 	movw	ip, #31812	; 0x7c44
  111374:	e30915bc 	movw	r1, #38332	; 0x95bc
  111378:	e340c011 	movt	ip, #17
  11137c:	e3833001 	orr	r3, r3, #1
  111380:	e59cc000 	ldr	ip, [ip]
  111384:	e3401011 	movt	r1, #17
  111388:	e5823004 	str	r3, [r2, #4]
  11138c:	e06c0000 	rsb	r0, ip, r0
  111390:	e5810000 	str	r0, [r1]
  111394:	eaffffd8 	b	1112fc <_malloc_trim_r+0x60>

00111398 <_free_r>:
  111398:	e3510000 	cmp	r1, #0
  11139c:	012fff1e 	bxeq	lr
  1113a0:	e92d4070 	push	{r4, r5, r6, lr}
  1113a4:	e1a05001 	mov	r5, r1
  1113a8:	e1a04000 	mov	r4, r0
  1113ac:	eb0005c2 	bl	112abc <__malloc_lock>
  1113b0:	e5151004 	ldr	r1, [r5, #-4]
  1113b4:	e307283c 	movw	r2, #30780	; 0x783c
  1113b8:	e3402011 	movt	r2, #17
  1113bc:	e245c008 	sub	ip, r5, #8
  1113c0:	e5926008 	ldr	r6, [r2, #8]
  1113c4:	e3c13001 	bic	r3, r1, #1
  1113c8:	e08c0003 	add	r0, ip, r3
  1113cc:	e590e004 	ldr	lr, [r0, #4]
  1113d0:	e1500006 	cmp	r0, r6
  1113d4:	e3cee003 	bic	lr, lr, #3
  1113d8:	0a000051 	beq	111524 <_free_r+0x18c>
  1113dc:	e3110001 	tst	r1, #1
  1113e0:	e580e004 	str	lr, [r0, #4]
  1113e4:	1a000009 	bne	111410 <_free_r+0x78>
  1113e8:	e5151008 	ldr	r1, [r5, #-8]
  1113ec:	e2825008 	add	r5, r2, #8
  1113f0:	e061c00c 	rsb	ip, r1, ip
  1113f4:	e0833001 	add	r3, r3, r1
  1113f8:	e59c1008 	ldr	r1, [ip, #8]
  1113fc:	e1510005 	cmp	r1, r5
  111400:	0a00005f 	beq	111584 <_free_r+0x1ec>
  111404:	e59c500c 	ldr	r5, [ip, #12]
  111408:	e581500c 	str	r5, [r1, #12]
  11140c:	e5851008 	str	r1, [r5, #8]
  111410:	e080100e 	add	r1, r0, lr
  111414:	e5911004 	ldr	r1, [r1, #4]
  111418:	e3110001 	tst	r1, #1
  11141c:	13831001 	orrne	r1, r3, #1
  111420:	158c1004 	strne	r1, [ip, #4]
  111424:	178c3003 	strne	r3, [ip, r3]
  111428:	0a00002f 	beq	1114ec <_free_r+0x154>
  11142c:	e3530c02 	cmp	r3, #512	; 0x200
  111430:	2a000010 	bcs	111478 <_free_r+0xe0>
  111434:	e592e004 	ldr	lr, [r2, #4]
  111438:	e1a031a3 	lsr	r3, r3, #3
  11143c:	e3a06001 	mov	r6, #1
  111440:	e0831006 	add	r1, r3, r6
  111444:	e1a03143 	asr	r3, r3, #2
  111448:	e7925181 	ldr	r5, [r2, r1, lsl #3]
  11144c:	e0820181 	add	r0, r2, r1, lsl #3
  111450:	e18e3316 	orr	r3, lr, r6, lsl r3
  111454:	e2400008 	sub	r0, r0, #8
  111458:	e58c000c 	str	r0, [ip, #12]
  11145c:	e58c5008 	str	r5, [ip, #8]
  111460:	e5823004 	str	r3, [r2, #4]
  111464:	e782c181 	str	ip, [r2, r1, lsl #3]
  111468:	e585c00c 	str	ip, [r5, #12]
  11146c:	e1a00004 	mov	r0, r4
  111470:	e8bd4070 	pop	{r4, r5, r6, lr}
  111474:	ea000593 	b	112ac8 <__malloc_unlock>
  111478:	e1a014a3 	lsr	r1, r3, #9
  11147c:	e3510004 	cmp	r1, #4
  111480:	8a00004c 	bhi	1115b8 <_free_r+0x220>
  111484:	e1a01323 	lsr	r1, r3, #6
  111488:	e281e039 	add	lr, r1, #57	; 0x39
  11148c:	e2811038 	add	r1, r1, #56	; 0x38
  111490:	e1a0e08e 	lsl	lr, lr, #1
  111494:	e082010e 	add	r0, r2, lr, lsl #2
  111498:	e792210e 	ldr	r2, [r2, lr, lsl #2]
  11149c:	e307e83c 	movw	lr, #30780	; 0x783c
  1114a0:	e2400008 	sub	r0, r0, #8
  1114a4:	e340e011 	movt	lr, #17
  1114a8:	e1500002 	cmp	r0, r2
  1114ac:	0a000047 	beq	1115d0 <_free_r+0x238>
  1114b0:	e5921004 	ldr	r1, [r2, #4]
  1114b4:	e3c11003 	bic	r1, r1, #3
  1114b8:	e1530001 	cmp	r3, r1
  1114bc:	2a000002 	bcs	1114cc <_free_r+0x134>
  1114c0:	e5922008 	ldr	r2, [r2, #8]
  1114c4:	e1500002 	cmp	r0, r2
  1114c8:	1afffff8 	bne	1114b0 <_free_r+0x118>
  1114cc:	e592000c 	ldr	r0, [r2, #12]
  1114d0:	e58c000c 	str	r0, [ip, #12]
  1114d4:	e58c2008 	str	r2, [ip, #8]
  1114d8:	e580c008 	str	ip, [r0, #8]
  1114dc:	e1a00004 	mov	r0, r4
  1114e0:	e582c00c 	str	ip, [r2, #12]
  1114e4:	e8bd4070 	pop	{r4, r5, r6, lr}
  1114e8:	ea000576 	b	112ac8 <__malloc_unlock>
  1114ec:	e5901008 	ldr	r1, [r0, #8]
  1114f0:	e083300e 	add	r3, r3, lr
  1114f4:	e59fe178 	ldr	lr, [pc, #376]	; 111674 <_free_r+0x2dc>
  1114f8:	e151000e 	cmp	r1, lr
  1114fc:	0a00003a 	beq	1115ec <_free_r+0x254>
  111500:	e590e00c 	ldr	lr, [r0, #12]
  111504:	e3530c02 	cmp	r3, #512	; 0x200
  111508:	e3830001 	orr	r0, r3, #1
  11150c:	e581e00c 	str	lr, [r1, #12]
  111510:	e58e1008 	str	r1, [lr, #8]
  111514:	e58c0004 	str	r0, [ip, #4]
  111518:	e78c3003 	str	r3, [ip, r3]
  11151c:	2affffd5 	bcs	111478 <_free_r+0xe0>
  111520:	eaffffc3 	b	111434 <_free_r+0x9c>
  111524:	e3110001 	tst	r1, #1
  111528:	e083300e 	add	r3, r3, lr
  11152c:	1a000006 	bne	11154c <_free_r+0x1b4>
  111530:	e5151008 	ldr	r1, [r5, #-8]
  111534:	e061c00c 	rsb	ip, r1, ip
  111538:	e0833001 	add	r3, r3, r1
  11153c:	e59c0008 	ldr	r0, [ip, #8]
  111540:	e59c100c 	ldr	r1, [ip, #12]
  111544:	e580100c 	str	r1, [r0, #12]
  111548:	e5810008 	str	r0, [r1, #8]
  11154c:	e3071c48 	movw	r1, #31816	; 0x7c48
  111550:	e3830001 	orr	r0, r3, #1
  111554:	e3401011 	movt	r1, #17
  111558:	e58c0004 	str	r0, [ip, #4]
  11155c:	e5911000 	ldr	r1, [r1]
  111560:	e582c008 	str	ip, [r2, #8]
  111564:	e1530001 	cmp	r3, r1
  111568:	3affffbf 	bcc	11146c <_free_r+0xd4>
  11156c:	e30935b8 	movw	r3, #38328	; 0x95b8
  111570:	e1a00004 	mov	r0, r4
  111574:	e3403011 	movt	r3, #17
  111578:	e5931000 	ldr	r1, [r3]
  11157c:	ebffff46 	bl	11129c <_malloc_trim_r>
  111580:	eaffffb9 	b	11146c <_free_r+0xd4>
  111584:	e080200e 	add	r2, r0, lr
  111588:	e5922004 	ldr	r2, [r2, #4]
  11158c:	e3120001 	tst	r2, #1
  111590:	1a000033 	bne	111664 <_free_r+0x2cc>
  111594:	e5901008 	ldr	r1, [r0, #8]
  111598:	e08e3003 	add	r3, lr, r3
  11159c:	e590200c 	ldr	r2, [r0, #12]
  1115a0:	e3830001 	orr	r0, r3, #1
  1115a4:	e581200c 	str	r2, [r1, #12]
  1115a8:	e5821008 	str	r1, [r2, #8]
  1115ac:	e58c0004 	str	r0, [ip, #4]
  1115b0:	e78c3003 	str	r3, [ip, r3]
  1115b4:	eaffffac 	b	11146c <_free_r+0xd4>
  1115b8:	e3510014 	cmp	r1, #20
  1115bc:	8a000011 	bhi	111608 <_free_r+0x270>
  1115c0:	e281e05c 	add	lr, r1, #92	; 0x5c
  1115c4:	e281105b 	add	r1, r1, #91	; 0x5b
  1115c8:	e1a0e08e 	lsl	lr, lr, #1
  1115cc:	eaffffb0 	b	111494 <_free_r+0xfc>
  1115d0:	e59e3004 	ldr	r3, [lr, #4]
  1115d4:	e1a01141 	asr	r1, r1, #2
  1115d8:	e3a05001 	mov	r5, #1
  1115dc:	e1a02000 	mov	r2, r0
  1115e0:	e1831115 	orr	r1, r3, r5, lsl r1
  1115e4:	e58e1004 	str	r1, [lr, #4]
  1115e8:	eaffffb8 	b	1114d0 <_free_r+0x138>
  1115ec:	e3830001 	orr	r0, r3, #1
  1115f0:	e582c014 	str	ip, [r2, #20]
  1115f4:	e582c010 	str	ip, [r2, #16]
  1115f8:	e58c100c 	str	r1, [ip, #12]
  1115fc:	e98c0003 	stmib	ip, {r0, r1}
  111600:	e78c3003 	str	r3, [ip, r3]
  111604:	eaffff98 	b	11146c <_free_r+0xd4>
  111608:	e3510054 	cmp	r1, #84	; 0x54
  11160c:	8a000004 	bhi	111624 <_free_r+0x28c>
  111610:	e1a01623 	lsr	r1, r3, #12
  111614:	e281e06f 	add	lr, r1, #111	; 0x6f
  111618:	e281106e 	add	r1, r1, #110	; 0x6e
  11161c:	e1a0e08e 	lsl	lr, lr, #1
  111620:	eaffff9b 	b	111494 <_free_r+0xfc>
  111624:	e3510f55 	cmp	r1, #340	; 0x154
  111628:	8a000004 	bhi	111640 <_free_r+0x2a8>
  11162c:	e1a017a3 	lsr	r1, r3, #15
  111630:	e281e078 	add	lr, r1, #120	; 0x78
  111634:	e2811077 	add	r1, r1, #119	; 0x77
  111638:	e1a0e08e 	lsl	lr, lr, #1
  11163c:	eaffff94 	b	111494 <_free_r+0xfc>
  111640:	e3000554 	movw	r0, #1364	; 0x554
  111644:	e1510000 	cmp	r1, r0
  111648:	91a01923 	lsrls	r1, r3, #18
  11164c:	83a0e0fe 	movhi	lr, #254	; 0xfe
  111650:	83a0107e 	movhi	r1, #126	; 0x7e
  111654:	9281e07d 	addls	lr, r1, #125	; 0x7d
  111658:	9281107c 	addls	r1, r1, #124	; 0x7c
  11165c:	91a0e08e 	lslls	lr, lr, #1
  111660:	eaffff8b 	b	111494 <_free_r+0xfc>
  111664:	e3832001 	orr	r2, r3, #1
  111668:	e58c2004 	str	r2, [ip, #4]
  11166c:	e78c3003 	str	r3, [ip, r3]
  111670:	eaffff7d 	b	11146c <_free_r+0xd4>
  111674:	00117844 	andseq	r7, r1, r4, asr #16

00111678 <__sfvwrite_r>:
  111678:	e5923008 	ldr	r3, [r2, #8]
  11167c:	e3530000 	cmp	r3, #0
  111680:	0a000034 	beq	111758 <__sfvwrite_r+0xe0>
  111684:	e1d130bc 	ldrh	r3, [r1, #12]
  111688:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  11168c:	e24dd00c 	sub	sp, sp, #12
  111690:	e1a04001 	mov	r4, r1
  111694:	e58d0000 	str	r0, [sp]
  111698:	e3130008 	tst	r3, #8
  11169c:	e1a07002 	mov	r7, r2
  1116a0:	0a000021 	beq	11172c <__sfvwrite_r+0xb4>
  1116a4:	e5912010 	ldr	r2, [r1, #16]
  1116a8:	e3520000 	cmp	r2, #0
  1116ac:	0a00001e 	beq	11172c <__sfvwrite_r+0xb4>
  1116b0:	e2038002 	and	r8, r3, #2
  1116b4:	e5975000 	ldr	r5, [r7]
  1116b8:	e6ff8078 	uxth	r8, r8
  1116bc:	e3580000 	cmp	r8, #0
  1116c0:	0a000026 	beq	111760 <__sfvwrite_r+0xe8>
  1116c4:	e3a08000 	mov	r8, #0
  1116c8:	e3a09b3f 	mov	r9, #64512	; 0xfc00
  1116cc:	e1a06008 	mov	r6, r8
  1116d0:	e3479fff 	movt	r9, #32767	; 0x7fff
  1116d4:	e3560000 	cmp	r6, #0
  1116d8:	e1a02008 	mov	r2, r8
  1116dc:	e59d0000 	ldr	r0, [sp]
  1116e0:	0a000018 	beq	111748 <__sfvwrite_r+0xd0>
  1116e4:	e1560009 	cmp	r6, r9
  1116e8:	e594a024 	ldr	sl, [r4, #36]	; 0x24
  1116ec:	31a03006 	movcc	r3, r6
  1116f0:	21a03009 	movcs	r3, r9
  1116f4:	e594101c 	ldr	r1, [r4, #28]
  1116f8:	e12fff3a 	blx	sl
  1116fc:	e3500000 	cmp	r0, #0
  111700:	e0888000 	add	r8, r8, r0
  111704:	e0606006 	rsb	r6, r0, r6
  111708:	da00003f 	ble	11180c <__sfvwrite_r+0x194>
  11170c:	e5973008 	ldr	r3, [r7, #8]
  111710:	e0600003 	rsb	r0, r0, r3
  111714:	e3500000 	cmp	r0, #0
  111718:	e5870008 	str	r0, [r7, #8]
  11171c:	1affffec 	bne	1116d4 <__sfvwrite_r+0x5c>
  111720:	e3a00000 	mov	r0, #0
  111724:	e28dd00c 	add	sp, sp, #12
  111728:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  11172c:	e1a01004 	mov	r1, r4
  111730:	e59d0000 	ldr	r0, [sp]
  111734:	ebfff718 	bl	10f39c <__swsetup_r>
  111738:	e3500000 	cmp	r0, #0
  11173c:	1a0000ef 	bne	111b00 <__sfvwrite_r+0x488>
  111740:	e1d430bc 	ldrh	r3, [r4, #12]
  111744:	eaffffd9 	b	1116b0 <__sfvwrite_r+0x38>
  111748:	e5958000 	ldr	r8, [r5]
  11174c:	e2855008 	add	r5, r5, #8
  111750:	e5156004 	ldr	r6, [r5, #-4]
  111754:	eaffffde 	b	1116d4 <__sfvwrite_r+0x5c>
  111758:	e3a00000 	mov	r0, #0
  11175c:	e12fff1e 	bx	lr
  111760:	e2139001 	ands	r9, r3, #1
  111764:	1a00002e 	bne	111824 <__sfvwrite_r+0x1ac>
  111768:	e1a08009 	mov	r8, r9
  11176c:	e3580000 	cmp	r8, #0
  111770:	0a00001c 	beq	1117e8 <__sfvwrite_r+0x170>
  111774:	e3130c02 	tst	r3, #512	; 0x200
  111778:	e5946008 	ldr	r6, [r4, #8]
  11177c:	0a000059 	beq	1118e8 <__sfvwrite_r+0x270>
  111780:	e1580006 	cmp	r8, r6
  111784:	e1a0a006 	mov	sl, r6
  111788:	3a00007e 	bcc	111988 <__sfvwrite_r+0x310>
  11178c:	e3130d12 	tst	r3, #1152	; 0x480
  111790:	1a00008b 	bne	1119c4 <__sfvwrite_r+0x34c>
  111794:	e5940000 	ldr	r0, [r4]
  111798:	e1a0200a 	mov	r2, sl
  11179c:	e1a01009 	mov	r1, r9
  1117a0:	eb00043d 	bl	11289c <memmove>
  1117a4:	e5943008 	ldr	r3, [r4, #8]
  1117a8:	e1a00008 	mov	r0, r8
  1117ac:	e5942000 	ldr	r2, [r4]
  1117b0:	e0666003 	rsb	r6, r6, r3
  1117b4:	e082200a 	add	r2, r2, sl
  1117b8:	e5846008 	str	r6, [r4, #8]
  1117bc:	e5842000 	str	r2, [r4]
  1117c0:	e5973008 	ldr	r3, [r7, #8]
  1117c4:	e0899000 	add	r9, r9, r0
  1117c8:	e0608008 	rsb	r8, r0, r8
  1117cc:	e0600003 	rsb	r0, r0, r3
  1117d0:	e3500000 	cmp	r0, #0
  1117d4:	e5870008 	str	r0, [r7, #8]
  1117d8:	0affffd0 	beq	111720 <__sfvwrite_r+0xa8>
  1117dc:	e3580000 	cmp	r8, #0
  1117e0:	e1d430bc 	ldrh	r3, [r4, #12]
  1117e4:	1affffe2 	bne	111774 <__sfvwrite_r+0xfc>
  1117e8:	e5959000 	ldr	r9, [r5]
  1117ec:	e2855008 	add	r5, r5, #8
  1117f0:	e5158004 	ldr	r8, [r5, #-4]
  1117f4:	eaffffdc 	b	11176c <__sfvwrite_r+0xf4>
  1117f8:	e1a01004 	mov	r1, r4
  1117fc:	e59d0000 	ldr	r0, [sp]
  111800:	ebfffd83 	bl	110e14 <_fflush_r>
  111804:	e3500000 	cmp	r0, #0
  111808:	0a00004a 	beq	111938 <__sfvwrite_r+0x2c0>
  11180c:	e1d430bc 	ldrh	r3, [r4, #12]
  111810:	e3833040 	orr	r3, r3, #64	; 0x40
  111814:	e3e00000 	mvn	r0, #0
  111818:	e1c430bc 	strh	r3, [r4, #12]
  11181c:	e28dd00c 	add	sp, sp, #12
  111820:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  111824:	e1a0b008 	mov	fp, r8
  111828:	e1a0a008 	mov	sl, r8
  11182c:	e1a09008 	mov	r9, r8
  111830:	e3590000 	cmp	r9, #0
  111834:	0a000026 	beq	1118d4 <__sfvwrite_r+0x25c>
  111838:	e35b0000 	cmp	fp, #0
  11183c:	0a000055 	beq	111998 <__sfvwrite_r+0x320>
  111840:	e5942010 	ldr	r2, [r4, #16]
  111844:	e1580009 	cmp	r8, r9
  111848:	e594c014 	ldr	ip, [r4, #20]
  11184c:	31a01008 	movcc	r1, r8
  111850:	e5943008 	ldr	r3, [r4, #8]
  111854:	21a01009 	movcs	r1, r9
  111858:	e5940000 	ldr	r0, [r4]
  11185c:	e1a06001 	mov	r6, r1
  111860:	e08c3003 	add	r3, ip, r3
  111864:	e1500002 	cmp	r0, r2
  111868:	93a02000 	movls	r2, #0
  11186c:	83a02001 	movhi	r2, #1
  111870:	e1510003 	cmp	r1, r3
  111874:	d3a02000 	movle	r2, #0
  111878:	e3520000 	cmp	r2, #0
  11187c:	1a000082 	bne	111a8c <__sfvwrite_r+0x414>
  111880:	e151000c 	cmp	r1, ip
  111884:	ba00002d 	blt	111940 <__sfvwrite_r+0x2c8>
  111888:	e5946024 	ldr	r6, [r4, #36]	; 0x24
  11188c:	e1a0300c 	mov	r3, ip
  111890:	e1a0200a 	mov	r2, sl
  111894:	e594101c 	ldr	r1, [r4, #28]
  111898:	e59d0000 	ldr	r0, [sp]
  11189c:	e12fff36 	blx	r6
  1118a0:	e2506000 	subs	r6, r0, #0
  1118a4:	daffffd8 	ble	11180c <__sfvwrite_r+0x194>
  1118a8:	e0588006 	subs	r8, r8, r6
  1118ac:	0a00002e 	beq	11196c <__sfvwrite_r+0x2f4>
  1118b0:	e5973008 	ldr	r3, [r7, #8]
  1118b4:	e08aa006 	add	sl, sl, r6
  1118b8:	e0669009 	rsb	r9, r6, r9
  1118bc:	e0666003 	rsb	r6, r6, r3
  1118c0:	e3560000 	cmp	r6, #0
  1118c4:	e5876008 	str	r6, [r7, #8]
  1118c8:	0affff94 	beq	111720 <__sfvwrite_r+0xa8>
  1118cc:	e3590000 	cmp	r9, #0
  1118d0:	1affffd8 	bne	111838 <__sfvwrite_r+0x1c0>
  1118d4:	e595a000 	ldr	sl, [r5]
  1118d8:	e3a0b000 	mov	fp, #0
  1118dc:	e5959004 	ldr	r9, [r5, #4]
  1118e0:	e2855008 	add	r5, r5, #8
  1118e4:	eaffffd1 	b	111830 <__sfvwrite_r+0x1b8>
  1118e8:	e5940000 	ldr	r0, [r4]
  1118ec:	e5943010 	ldr	r3, [r4, #16]
  1118f0:	e1500003 	cmp	r0, r3
  1118f4:	8a000002 	bhi	111904 <__sfvwrite_r+0x28c>
  1118f8:	e594a014 	ldr	sl, [r4, #20]
  1118fc:	e158000a 	cmp	r8, sl
  111900:	2a000053 	bcs	111a54 <__sfvwrite_r+0x3dc>
  111904:	e1560008 	cmp	r6, r8
  111908:	e1a01009 	mov	r1, r9
  11190c:	21a06008 	movcs	r6, r8
  111910:	e1a02006 	mov	r2, r6
  111914:	eb0003e0 	bl	11289c <memmove>
  111918:	e5943008 	ldr	r3, [r4, #8]
  11191c:	e5942000 	ldr	r2, [r4]
  111920:	e0663003 	rsb	r3, r6, r3
  111924:	e3530000 	cmp	r3, #0
  111928:	e0822006 	add	r2, r2, r6
  11192c:	e5843008 	str	r3, [r4, #8]
  111930:	e5842000 	str	r2, [r4]
  111934:	0affffaf 	beq	1117f8 <__sfvwrite_r+0x180>
  111938:	e1a00006 	mov	r0, r6
  11193c:	eaffff9f 	b	1117c0 <__sfvwrite_r+0x148>
  111940:	e1a02001 	mov	r2, r1
  111944:	e1a0100a 	mov	r1, sl
  111948:	eb0003d3 	bl	11289c <memmove>
  11194c:	e5942008 	ldr	r2, [r4, #8]
  111950:	e0588006 	subs	r8, r8, r6
  111954:	e5943000 	ldr	r3, [r4]
  111958:	e0662002 	rsb	r2, r6, r2
  11195c:	e0833006 	add	r3, r3, r6
  111960:	e5842008 	str	r2, [r4, #8]
  111964:	e5843000 	str	r3, [r4]
  111968:	1affffd0 	bne	1118b0 <__sfvwrite_r+0x238>
  11196c:	e1a01004 	mov	r1, r4
  111970:	e59d0000 	ldr	r0, [sp]
  111974:	ebfffd26 	bl	110e14 <_fflush_r>
  111978:	e3500000 	cmp	r0, #0
  11197c:	1affffa2 	bne	11180c <__sfvwrite_r+0x194>
  111980:	e1a0b008 	mov	fp, r8
  111984:	eaffffc9 	b	1118b0 <__sfvwrite_r+0x238>
  111988:	e5940000 	ldr	r0, [r4]
  11198c:	e1a06008 	mov	r6, r8
  111990:	e1a0a008 	mov	sl, r8
  111994:	eaffff7f 	b	111798 <__sfvwrite_r+0x120>
  111998:	e1a02009 	mov	r2, r9
  11199c:	e3a0100a 	mov	r1, #10
  1119a0:	e1a0000a 	mov	r0, sl
  1119a4:	eb000338 	bl	11268c <memchr>
  1119a8:	e3500000 	cmp	r0, #0
  1119ac:	12800001 	addne	r0, r0, #1
  1119b0:	13a0b001 	movne	fp, #1
  1119b4:	106a8000 	rsbne	r8, sl, r0
  1119b8:	02898001 	addeq	r8, r9, #1
  1119bc:	03a0b001 	moveq	fp, #1
  1119c0:	eaffff9e 	b	111840 <__sfvwrite_r+0x1c8>
  1119c4:	e594b014 	ldr	fp, [r4, #20]
  1119c8:	e5941010 	ldr	r1, [r4, #16]
  1119cc:	e5946000 	ldr	r6, [r4]
  1119d0:	e08bb08b 	add	fp, fp, fp, lsl #1
  1119d4:	e0616006 	rsb	r6, r1, r6
  1119d8:	e08bbfab 	add	fp, fp, fp, lsr #31
  1119dc:	e2860001 	add	r0, r6, #1
  1119e0:	e0800008 	add	r0, r0, r8
  1119e4:	e1a0b0cb 	asr	fp, fp, #1
  1119e8:	e150000b 	cmp	r0, fp
  1119ec:	e1a0200b 	mov	r2, fp
  1119f0:	81a0b000 	movhi	fp, r0
  1119f4:	81a0200b 	movhi	r2, fp
  1119f8:	e3130b01 	tst	r3, #1024	; 0x400
  1119fc:	0a000031 	beq	111ac8 <__sfvwrite_r+0x450>
  111a00:	e1a01002 	mov	r1, r2
  111a04:	e59d0000 	ldr	r0, [sp]
  111a08:	eb000128 	bl	111eb0 <_malloc_r>
  111a0c:	e250a000 	subs	sl, r0, #0
  111a10:	0a00003c 	beq	111b08 <__sfvwrite_r+0x490>
  111a14:	e1a02006 	mov	r2, r6
  111a18:	e5941010 	ldr	r1, [r4, #16]
  111a1c:	eb00035b 	bl	112790 <memcpy>
  111a20:	e1d430bc 	ldrh	r3, [r4, #12]
  111a24:	e3c33d12 	bic	r3, r3, #1152	; 0x480
  111a28:	e3833080 	orr	r3, r3, #128	; 0x80
  111a2c:	e1c430bc 	strh	r3, [r4, #12]
  111a30:	e08a0006 	add	r0, sl, r6
  111a34:	e066300b 	rsb	r3, r6, fp
  111a38:	e584a010 	str	sl, [r4, #16]
  111a3c:	e1a06008 	mov	r6, r8
  111a40:	e5840000 	str	r0, [r4]
  111a44:	e1a0a008 	mov	sl, r8
  111a48:	e5843008 	str	r3, [r4, #8]
  111a4c:	e584b014 	str	fp, [r4, #20]
  111a50:	eaffff50 	b	111798 <__sfvwrite_r+0x120>
  111a54:	e3780106 	cmn	r8, #-2147483647	; 0x80000001
  111a58:	e1a0100a 	mov	r1, sl
  111a5c:	31a00008 	movcc	r0, r8
  111a60:	23e00102 	mvncs	r0, #-2147483648	; 0x80000000
  111a64:	eb0011ba 	bl	116154 <__aeabi_idiv>
  111a68:	e5946024 	ldr	r6, [r4, #36]	; 0x24
  111a6c:	e003009a 	mul	r3, sl, r0
  111a70:	e1a02009 	mov	r2, r9
  111a74:	e594101c 	ldr	r1, [r4, #28]
  111a78:	e59d0000 	ldr	r0, [sp]
  111a7c:	e12fff36 	blx	r6
  111a80:	e3500000 	cmp	r0, #0
  111a84:	caffff4d 	bgt	1117c0 <__sfvwrite_r+0x148>
  111a88:	eaffff5f 	b	11180c <__sfvwrite_r+0x194>
  111a8c:	e1a02003 	mov	r2, r3
  111a90:	e1a0100a 	mov	r1, sl
  111a94:	e58d3004 	str	r3, [sp, #4]
  111a98:	eb00037f 	bl	11289c <memmove>
  111a9c:	e5942000 	ldr	r2, [r4]
  111aa0:	e1a01004 	mov	r1, r4
  111aa4:	e89d0009 	ldm	sp, {r0, r3}
  111aa8:	e0822003 	add	r2, r2, r3
  111aac:	e5842000 	str	r2, [r4]
  111ab0:	ebfffcd7 	bl	110e14 <_fflush_r>
  111ab4:	e3500000 	cmp	r0, #0
  111ab8:	e59d3004 	ldr	r3, [sp, #4]
  111abc:	1affff52 	bne	11180c <__sfvwrite_r+0x194>
  111ac0:	e1a06003 	mov	r6, r3
  111ac4:	eaffff77 	b	1118a8 <__sfvwrite_r+0x230>
  111ac8:	e59d0000 	ldr	r0, [sp]
  111acc:	eb00074b 	bl	113800 <_realloc_r>
  111ad0:	e250a000 	subs	sl, r0, #0
  111ad4:	1affffd5 	bne	111a30 <__sfvwrite_r+0x3b8>
  111ad8:	e59d5000 	ldr	r5, [sp]
  111adc:	e5941010 	ldr	r1, [r4, #16]
  111ae0:	e1a00005 	mov	r0, r5
  111ae4:	ebfffe2b 	bl	111398 <_free_r>
  111ae8:	e1d420bc 	ldrh	r2, [r4, #12]
  111aec:	e30f3f7f 	movw	r3, #65407	; 0xff7f
  111af0:	e3a0100c 	mov	r1, #12
  111af4:	e5851000 	str	r1, [r5]
  111af8:	e0033002 	and	r3, r3, r2
  111afc:	eaffff43 	b	111810 <__sfvwrite_r+0x198>
  111b00:	e3e00000 	mvn	r0, #0
  111b04:	eaffff06 	b	111724 <__sfvwrite_r+0xac>
  111b08:	e59d1000 	ldr	r1, [sp]
  111b0c:	e3a0200c 	mov	r2, #12
  111b10:	e1d430bc 	ldrh	r3, [r4, #12]
  111b14:	e5812000 	str	r2, [r1]
  111b18:	eaffff3c 	b	111810 <__sfvwrite_r+0x198>

00111b1c <_fwalk>:
  111b1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  111b20:	e2907e2e 	adds	r7, r0, #736	; 0x2e0
  111b24:	0a000017 	beq	111b88 <_fwalk+0x6c>
  111b28:	e1a08001 	mov	r8, r1
  111b2c:	e3a06000 	mov	r6, #0
  111b30:	e5975004 	ldr	r5, [r7, #4]
  111b34:	e5974008 	ldr	r4, [r7, #8]
  111b38:	e2555001 	subs	r5, r5, #1
  111b3c:	4a00000c 	bmi	111b74 <_fwalk+0x58>
  111b40:	e1d430bc 	ldrh	r3, [r4, #12]
  111b44:	e2455001 	sub	r5, r5, #1
  111b48:	e3530001 	cmp	r3, #1
  111b4c:	9a000005 	bls	111b68 <_fwalk+0x4c>
  111b50:	e1d430fe 	ldrsh	r3, [r4, #14]
  111b54:	e1a00004 	mov	r0, r4
  111b58:	e3730001 	cmn	r3, #1
  111b5c:	0a000001 	beq	111b68 <_fwalk+0x4c>
  111b60:	e12fff38 	blx	r8
  111b64:	e1866000 	orr	r6, r6, r0
  111b68:	e3750001 	cmn	r5, #1
  111b6c:	e2844068 	add	r4, r4, #104	; 0x68
  111b70:	1afffff2 	bne	111b40 <_fwalk+0x24>
  111b74:	e5977000 	ldr	r7, [r7]
  111b78:	e3570000 	cmp	r7, #0
  111b7c:	1affffeb 	bne	111b30 <_fwalk+0x14>
  111b80:	e1a00006 	mov	r0, r6
  111b84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  111b88:	e1a06007 	mov	r6, r7
  111b8c:	e1a00006 	mov	r0, r6
  111b90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00111b94 <_fwalk_reent>:
  111b94:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  111b98:	e2907e2e 	adds	r7, r0, #736	; 0x2e0
  111b9c:	0a000019 	beq	111c08 <_fwalk_reent+0x74>
  111ba0:	e1a08001 	mov	r8, r1
  111ba4:	e1a06000 	mov	r6, r0
  111ba8:	e3a09000 	mov	r9, #0
  111bac:	e5975004 	ldr	r5, [r7, #4]
  111bb0:	e5974008 	ldr	r4, [r7, #8]
  111bb4:	e2555001 	subs	r5, r5, #1
  111bb8:	4a00000d 	bmi	111bf4 <_fwalk_reent+0x60>
  111bbc:	e1d430bc 	ldrh	r3, [r4, #12]
  111bc0:	e2455001 	sub	r5, r5, #1
  111bc4:	e3530001 	cmp	r3, #1
  111bc8:	9a000006 	bls	111be8 <_fwalk_reent+0x54>
  111bcc:	e1d430fe 	ldrsh	r3, [r4, #14]
  111bd0:	e1a01004 	mov	r1, r4
  111bd4:	e1a00006 	mov	r0, r6
  111bd8:	e3730001 	cmn	r3, #1
  111bdc:	0a000001 	beq	111be8 <_fwalk_reent+0x54>
  111be0:	e12fff38 	blx	r8
  111be4:	e1899000 	orr	r9, r9, r0
  111be8:	e3750001 	cmn	r5, #1
  111bec:	e2844068 	add	r4, r4, #104	; 0x68
  111bf0:	1afffff1 	bne	111bbc <_fwalk_reent+0x28>
  111bf4:	e5977000 	ldr	r7, [r7]
  111bf8:	e3570000 	cmp	r7, #0
  111bfc:	1affffea 	bne	111bac <_fwalk_reent+0x18>
  111c00:	e1a00009 	mov	r0, r9
  111c04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  111c08:	e1a09007 	mov	r9, r7
  111c0c:	e1a00009 	mov	r0, r9
  111c10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00111c14 <__getreent>:
  111c14:	e3073394 	movw	r3, #29588	; 0x7394
  111c18:	e3403011 	movt	r3, #17
  111c1c:	e5930000 	ldr	r0, [r3]
  111c20:	e12fff1e 	bx	lr

00111c24 <_gettimeofday_r>:
  111c24:	e92d4070 	push	{r4, r5, r6, lr}
  111c28:	e1a03001 	mov	r3, r1
  111c2c:	e30945f0 	movw	r4, #38384	; 0x95f0
  111c30:	e1a05000 	mov	r5, r0
  111c34:	e1a01002 	mov	r1, r2
  111c38:	e1a00003 	mov	r0, r3
  111c3c:	e3404011 	movt	r4, #17
  111c40:	e3a03000 	mov	r3, #0
  111c44:	e5843000 	str	r3, [r4]
  111c48:	eb001260 	bl	1165d0 <_gettimeofday>
  111c4c:	e3700001 	cmn	r0, #1
  111c50:	18bd8070 	popne	{r4, r5, r6, pc}
  111c54:	e5943000 	ldr	r3, [r4]
  111c58:	e3530000 	cmp	r3, #0
  111c5c:	15853000 	strne	r3, [r5]
  111c60:	e8bd8070 	pop	{r4, r5, r6, pc}

00111c64 <_setlocale_r>:
  111c64:	e3520000 	cmp	r2, #0
  111c68:	0a000018 	beq	111cd0 <_setlocale_r+0x6c>
  111c6c:	e30710a8 	movw	r1, #28840	; 0x70a8
  111c70:	e92d4010 	push	{r4, lr}
  111c74:	e1a00002 	mov	r0, r2
  111c78:	e3401011 	movt	r1, #17
  111c7c:	e1a04002 	mov	r4, r2
  111c80:	fa0008e0 	blx	114008 <strcmp>
  111c84:	e3500000 	cmp	r0, #0
  111c88:	1a000002 	bne	111c98 <_setlocale_r+0x34>
  111c8c:	e307002c 	movw	r0, #28716	; 0x702c
  111c90:	e3400011 	movt	r0, #17
  111c94:	e8bd8010 	pop	{r4, pc}
  111c98:	e307102c 	movw	r1, #28716	; 0x702c
  111c9c:	e1a00004 	mov	r0, r4
  111ca0:	e3401011 	movt	r1, #17
  111ca4:	fa0008d7 	blx	114008 <strcmp>
  111ca8:	e3500000 	cmp	r0, #0
  111cac:	0afffff6 	beq	111c8c <_setlocale_r+0x28>
  111cb0:	e3071074 	movw	r1, #28788	; 0x7074
  111cb4:	e1a00004 	mov	r0, r4
  111cb8:	e3401011 	movt	r1, #17
  111cbc:	fa0008d1 	blx	114008 <strcmp>
  111cc0:	e3500000 	cmp	r0, #0
  111cc4:	0afffff0 	beq	111c8c <_setlocale_r+0x28>
  111cc8:	e3a00000 	mov	r0, #0
  111ccc:	e8bd8010 	pop	{r4, pc}
  111cd0:	e307002c 	movw	r0, #28716	; 0x702c
  111cd4:	e3400011 	movt	r0, #17
  111cd8:	e12fff1e 	bx	lr

00111cdc <__locale_charset>:
  111cdc:	e30707c0 	movw	r0, #30656	; 0x77c0
  111ce0:	e3400011 	movt	r0, #17
  111ce4:	e12fff1e 	bx	lr

00111ce8 <__locale_mb_cur_max>:
  111ce8:	e30737c0 	movw	r3, #30656	; 0x77c0
  111cec:	e3403011 	movt	r3, #17
  111cf0:	e5930020 	ldr	r0, [r3, #32]
  111cf4:	e12fff1e 	bx	lr

00111cf8 <__locale_msgcharset>:
  111cf8:	e59f0000 	ldr	r0, [pc]	; 111d00 <__locale_msgcharset+0x8>
  111cfc:	e12fff1e 	bx	lr
  111d00:	001177e4 	andseq	r7, r1, r4, ror #15

00111d04 <__locale_cjk_lang>:
  111d04:	e3a00000 	mov	r0, #0
  111d08:	e12fff1e 	bx	lr

00111d0c <_localeconv_r>:
  111d0c:	e59f0000 	ldr	r0, [pc]	; 111d14 <_localeconv_r+0x8>
  111d10:	e12fff1e 	bx	lr
  111d14:	00117804 	andseq	r7, r1, r4, lsl #16

00111d18 <setlocale>:
  111d18:	e92d4070 	push	{r4, r5, r6, lr}
  111d1c:	e1a05001 	mov	r5, r1
  111d20:	e1a04000 	mov	r4, r0
  111d24:	ebffffba 	bl	111c14 <__getreent>
  111d28:	e1a02005 	mov	r2, r5
  111d2c:	e1a01004 	mov	r1, r4
  111d30:	e8bd4070 	pop	{r4, r5, r6, lr}
  111d34:	eaffffca 	b	111c64 <_setlocale_r>

00111d38 <localeconv>:
  111d38:	e92d4010 	push	{r4, lr}
  111d3c:	ebffffb4 	bl	111c14 <__getreent>
  111d40:	e59f0000 	ldr	r0, [pc]	; 111d48 <localeconv+0x10>
  111d44:	e8bd8010 	pop	{r4, pc}
  111d48:	00117804 	andseq	r7, r1, r4, lsl #16

00111d4c <__smakebuf_r>:
  111d4c:	e1d130bc 	ldrh	r3, [r1, #12]
  111d50:	e6ff2073 	uxth	r2, r3
  111d54:	e3120002 	tst	r2, #2
  111d58:	1a000030 	bne	111e20 <__smakebuf_r+0xd4>
  111d5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  111d60:	e1a04001 	mov	r4, r1
  111d64:	e1d110fe 	ldrsh	r1, [r1, #14]
  111d68:	e24dd044 	sub	sp, sp, #68	; 0x44
  111d6c:	e1a05000 	mov	r5, r0
  111d70:	e3510000 	cmp	r1, #0
  111d74:	ba000011 	blt	111dc0 <__smakebuf_r+0x74>
  111d78:	e28d2004 	add	r2, sp, #4
  111d7c:	eb001001 	bl	115d88 <_fstat_r>
  111d80:	e3500000 	cmp	r0, #0
  111d84:	ba00000b 	blt	111db8 <__smakebuf_r+0x6c>
  111d88:	e59d3008 	ldr	r3, [sp, #8]
  111d8c:	e2033a0f 	and	r3, r3, #61440	; 0xf000
  111d90:	e2437a02 	sub	r7, r3, #8192	; 0x2000
  111d94:	e3530902 	cmp	r3, #32768	; 0x8000
  111d98:	e16f7f17 	clz	r7, r7
  111d9c:	e1a072a7 	lsr	r7, r7, #5
  111da0:	0a000024 	beq	111e38 <__smakebuf_r+0xec>
  111da4:	e1d430bc 	ldrh	r3, [r4, #12]
  111da8:	e3a06b01 	mov	r6, #1024	; 0x400
  111dac:	e3833b02 	orr	r3, r3, #2048	; 0x800
  111db0:	e1c430bc 	strh	r3, [r4, #12]
  111db4:	ea000007 	b	111dd8 <__smakebuf_r+0x8c>
  111db8:	e1d430bc 	ldrh	r3, [r4, #12]
  111dbc:	e6ff2073 	uxth	r2, r3
  111dc0:	e3120080 	tst	r2, #128	; 0x80
  111dc4:	13a06040 	movne	r6, #64	; 0x40
  111dc8:	03a06b01 	moveq	r6, #1024	; 0x400
  111dcc:	e3a07000 	mov	r7, #0
  111dd0:	e3833b02 	orr	r3, r3, #2048	; 0x800
  111dd4:	e1c430bc 	strh	r3, [r4, #12]
  111dd8:	e1a01006 	mov	r1, r6
  111ddc:	e1a00005 	mov	r0, r5
  111de0:	eb000032 	bl	111eb0 <_malloc_r>
  111de4:	e3500000 	cmp	r0, #0
  111de8:	e1d430bc 	ldrh	r3, [r4, #12]
  111dec:	0a000025 	beq	111e88 <__smakebuf_r+0x13c>
  111df0:	e3002edc 	movw	r2, #3804	; 0xedc
  111df4:	e3570000 	cmp	r7, #0
  111df8:	e3402011 	movt	r2, #17
  111dfc:	e3833080 	orr	r3, r3, #128	; 0x80
  111e00:	e585203c 	str	r2, [r5, #60]	; 0x3c
  111e04:	e5840000 	str	r0, [r4]
  111e08:	e5840010 	str	r0, [r4, #16]
  111e0c:	e5846014 	str	r6, [r4, #20]
  111e10:	e1c430bc 	strh	r3, [r4, #12]
  111e14:	1a000012 	bne	111e64 <__smakebuf_r+0x118>
  111e18:	e28dd044 	add	sp, sp, #68	; 0x44
  111e1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  111e20:	e2813043 	add	r3, r1, #67	; 0x43
  111e24:	e3a02001 	mov	r2, #1
  111e28:	e5813000 	str	r3, [r1]
  111e2c:	e5813010 	str	r3, [r1, #16]
  111e30:	e5812014 	str	r2, [r1, #20]
  111e34:	e12fff1e 	bx	lr
  111e38:	e5942028 	ldr	r2, [r4, #40]	; 0x28
  111e3c:	e3033fb4 	movw	r3, #16308	; 0x3fb4
  111e40:	e3403011 	movt	r3, #17
  111e44:	e1520003 	cmp	r2, r3
  111e48:	1affffd5 	bne	111da4 <__smakebuf_r+0x58>
  111e4c:	e1d430bc 	ldrh	r3, [r4, #12]
  111e50:	e3a06b01 	mov	r6, #1024	; 0x400
  111e54:	e584604c 	str	r6, [r4, #76]	; 0x4c
  111e58:	e1833006 	orr	r3, r3, r6
  111e5c:	e1c430bc 	strh	r3, [r4, #12]
  111e60:	eaffffdc 	b	111dd8 <__smakebuf_r+0x8c>
  111e64:	e1a00005 	mov	r0, r5
  111e68:	e1d410fe 	ldrsh	r1, [r4, #14]
  111e6c:	eb000fd5 	bl	115dc8 <_isatty_r>
  111e70:	e3500000 	cmp	r0, #0
  111e74:	11d430bc 	ldrhne	r3, [r4, #12]
  111e78:	13833001 	orrne	r3, r3, #1
  111e7c:	11c430bc 	strhne	r3, [r4, #12]
  111e80:	e28dd044 	add	sp, sp, #68	; 0x44
  111e84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  111e88:	e3130c02 	tst	r3, #512	; 0x200
  111e8c:	1affffe1 	bne	111e18 <__smakebuf_r+0xcc>
  111e90:	e2842043 	add	r2, r4, #67	; 0x43
  111e94:	e3833002 	orr	r3, r3, #2
  111e98:	e3a01001 	mov	r1, #1
  111e9c:	e1c430bc 	strh	r3, [r4, #12]
  111ea0:	e5842000 	str	r2, [r4]
  111ea4:	e5842010 	str	r2, [r4, #16]
  111ea8:	e5841014 	str	r1, [r4, #20]
  111eac:	eaffffd9 	b	111e18 <__smakebuf_r+0xcc>

00111eb0 <_malloc_r>:
  111eb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  111eb4:	e281500b 	add	r5, r1, #11
  111eb8:	e3550016 	cmp	r5, #22
  111ebc:	e24dd00c 	sub	sp, sp, #12
  111ec0:	e1a06000 	mov	r6, r0
  111ec4:	9a000075 	bls	1120a0 <_malloc_r+0x1f0>
  111ec8:	e3c55007 	bic	r5, r5, #7
  111ecc:	e1510005 	cmp	r1, r5
  111ed0:	93a01000 	movls	r1, #0
  111ed4:	83a01001 	movhi	r1, #1
  111ed8:	e1913fa5 	orrs	r3, r1, r5, lsr #31
  111edc:	1a00008c 	bne	112114 <_malloc_r+0x264>
  111ee0:	eb0002f5 	bl	112abc <__malloc_lock>
  111ee4:	e3550f7e 	cmp	r5, #504	; 0x1f8
  111ee8:	3a0001e3 	bcc	11267c <_malloc_r+0x7cc>
  111eec:	e1b034a5 	lsrs	r3, r5, #9
  111ef0:	0a00008d 	beq	11212c <_malloc_r+0x27c>
  111ef4:	e3530004 	cmp	r3, #4
  111ef8:	8a0000e8 	bhi	1122a0 <_malloc_r+0x3f0>
  111efc:	e1a03325 	lsr	r3, r5, #6
  111f00:	e283e039 	add	lr, r3, #57	; 0x39
  111f04:	e283c038 	add	ip, r3, #56	; 0x38
  111f08:	e1a0008e 	lsl	r0, lr, #1
  111f0c:	e307783c 	movw	r7, #30780	; 0x783c
  111f10:	e3407011 	movt	r7, #17
  111f14:	e0870100 	add	r0, r7, r0, lsl #2
  111f18:	e5903004 	ldr	r3, [r0, #4]
  111f1c:	e2400008 	sub	r0, r0, #8
  111f20:	e1500003 	cmp	r0, r3
  111f24:	1a000005 	bne	111f40 <_malloc_r+0x90>
  111f28:	ea000083 	b	11213c <_malloc_r+0x28c>
  111f2c:	e3510000 	cmp	r1, #0
  111f30:	aa000083 	bge	112144 <_malloc_r+0x294>
  111f34:	e593300c 	ldr	r3, [r3, #12]
  111f38:	e1500003 	cmp	r0, r3
  111f3c:	0a00007e 	beq	11213c <_malloc_r+0x28c>
  111f40:	e5932004 	ldr	r2, [r3, #4]
  111f44:	e3c22003 	bic	r2, r2, #3
  111f48:	e0651002 	rsb	r1, r5, r2
  111f4c:	e351000f 	cmp	r1, #15
  111f50:	dafffff5 	ble	111f2c <_malloc_r+0x7c>
  111f54:	e1a0000c 	mov	r0, ip
  111f58:	e307e83c 	movw	lr, #30780	; 0x783c
  111f5c:	e5973010 	ldr	r3, [r7, #16]
  111f60:	e340e011 	movt	lr, #17
  111f64:	e28ec008 	add	ip, lr, #8
  111f68:	e153000c 	cmp	r3, ip
  111f6c:	059e2004 	ldreq	r2, [lr, #4]
  111f70:	0a000018 	beq	111fd8 <_malloc_r+0x128>
  111f74:	e5932004 	ldr	r2, [r3, #4]
  111f78:	e3c22003 	bic	r2, r2, #3
  111f7c:	e0651002 	rsb	r1, r5, r2
  111f80:	e351000f 	cmp	r1, #15
  111f84:	ca0000eb 	bgt	112338 <_malloc_r+0x488>
  111f88:	e3510000 	cmp	r1, #0
  111f8c:	e58ec014 	str	ip, [lr, #20]
  111f90:	e58ec010 	str	ip, [lr, #16]
  111f94:	aa000078 	bge	11217c <_malloc_r+0x2cc>
  111f98:	e3520c02 	cmp	r2, #512	; 0x200
  111f9c:	2a0000c8 	bcs	1122c4 <_malloc_r+0x414>
  111fa0:	e59e1004 	ldr	r1, [lr, #4]
  111fa4:	e1a021a2 	lsr	r2, r2, #3
  111fa8:	e3a0a001 	mov	sl, #1
  111fac:	e082400a 	add	r4, r2, sl
  111fb0:	e1a02142 	asr	r2, r2, #2
  111fb4:	e79e8184 	ldr	r8, [lr, r4, lsl #3]
  111fb8:	e08e9184 	add	r9, lr, r4, lsl #3
  111fbc:	e181221a 	orr	r2, r1, sl, lsl r2
  111fc0:	e2491008 	sub	r1, r9, #8
  111fc4:	e583100c 	str	r1, [r3, #12]
  111fc8:	e5838008 	str	r8, [r3, #8]
  111fcc:	e58e2004 	str	r2, [lr, #4]
  111fd0:	e78e3184 	str	r3, [lr, r4, lsl #3]
  111fd4:	e588300c 	str	r3, [r8, #12]
  111fd8:	e1a03140 	asr	r3, r0, #2
  111fdc:	e3a0e001 	mov	lr, #1
  111fe0:	e1a0e31e 	lsl	lr, lr, r3
  111fe4:	e15e0002 	cmp	lr, r2
  111fe8:	8a00006d 	bhi	1121a4 <_malloc_r+0x2f4>
  111fec:	e11e0002 	tst	lr, r2
  111ff0:	1a000008 	bne	112018 <_malloc_r+0x168>
  111ff4:	e1a0e08e 	lsl	lr, lr, #1
  111ff8:	e3c00003 	bic	r0, r0, #3
  111ffc:	e2800004 	add	r0, r0, #4
  112000:	e11e0002 	tst	lr, r2
  112004:	1a000003 	bne	112018 <_malloc_r+0x168>
  112008:	e1a0e08e 	lsl	lr, lr, #1
  11200c:	e2800004 	add	r0, r0, #4
  112010:	e11e0002 	tst	lr, r2
  112014:	0afffffb 	beq	112008 <_malloc_r+0x158>
  112018:	e0879180 	add	r9, r7, r0, lsl #3
  11201c:	e1a08000 	mov	r8, r0
  112020:	e1a04009 	mov	r4, r9
  112024:	e594300c 	ldr	r3, [r4, #12]
  112028:	e1540003 	cmp	r4, r3
  11202c:	1a000005 	bne	112048 <_malloc_r+0x198>
  112030:	ea0000cd 	b	11236c <_malloc_r+0x4bc>
  112034:	e3510000 	cmp	r1, #0
  112038:	aa0000d5 	bge	112394 <_malloc_r+0x4e4>
  11203c:	e593300c 	ldr	r3, [r3, #12]
  112040:	e1540003 	cmp	r4, r3
  112044:	0a0000c8 	beq	11236c <_malloc_r+0x4bc>
  112048:	e5932004 	ldr	r2, [r3, #4]
  11204c:	e3c22003 	bic	r2, r2, #3
  112050:	e0651002 	rsb	r1, r5, r2
  112054:	e351000f 	cmp	r1, #15
  112058:	dafffff5 	ble	112034 <_malloc_r+0x184>
  11205c:	e1a04003 	mov	r4, r3
  112060:	e593200c 	ldr	r2, [r3, #12]
  112064:	e5b4e008 	ldr	lr, [r4, #8]!
  112068:	e3858001 	orr	r8, r5, #1
  11206c:	e5838004 	str	r8, [r3, #4]
  112070:	e0835005 	add	r5, r3, r5
  112074:	e3813001 	orr	r3, r1, #1
  112078:	e1a00006 	mov	r0, r6
  11207c:	e58e200c 	str	r2, [lr, #12]
  112080:	e582e008 	str	lr, [r2, #8]
  112084:	e5875014 	str	r5, [r7, #20]
  112088:	e5875010 	str	r5, [r7, #16]
  11208c:	e585c00c 	str	ip, [r5, #12]
  112090:	e9851008 	stmib	r5, {r3, ip}
  112094:	e7851001 	str	r1, [r5, r1]
  112098:	eb00028a 	bl	112ac8 <__malloc_unlock>
  11209c:	ea000019 	b	112108 <_malloc_r+0x258>
  1120a0:	e3510010 	cmp	r1, #16
  1120a4:	8a00001a 	bhi	112114 <_malloc_r+0x264>
  1120a8:	eb000283 	bl	112abc <__malloc_lock>
  1120ac:	e3a05010 	mov	r5, #16
  1120b0:	e3a02006 	mov	r2, #6
  1120b4:	e3a00002 	mov	r0, #2
  1120b8:	e307783c 	movw	r7, #30780	; 0x783c
  1120bc:	e3407011 	movt	r7, #17
  1120c0:	e0872102 	add	r2, r7, r2, lsl #2
  1120c4:	e5923004 	ldr	r3, [r2, #4]
  1120c8:	e2421008 	sub	r1, r2, #8
  1120cc:	e1530001 	cmp	r3, r1
  1120d0:	0a0000aa 	beq	112380 <_malloc_r+0x4d0>
  1120d4:	e5932004 	ldr	r2, [r3, #4]
  1120d8:	e2834008 	add	r4, r3, #8
  1120dc:	e593100c 	ldr	r1, [r3, #12]
  1120e0:	e1a00006 	mov	r0, r6
  1120e4:	e593c008 	ldr	ip, [r3, #8]
  1120e8:	e3c22003 	bic	r2, r2, #3
  1120ec:	e0833002 	add	r3, r3, r2
  1120f0:	e5932004 	ldr	r2, [r3, #4]
  1120f4:	e58c100c 	str	r1, [ip, #12]
  1120f8:	e581c008 	str	ip, [r1, #8]
  1120fc:	e3822001 	orr	r2, r2, #1
  112100:	e5832004 	str	r2, [r3, #4]
  112104:	eb00026f 	bl	112ac8 <__malloc_unlock>
  112108:	e1a00004 	mov	r0, r4
  11210c:	e28dd00c 	add	sp, sp, #12
  112110:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  112114:	e3a0300c 	mov	r3, #12
  112118:	e3a04000 	mov	r4, #0
  11211c:	e1a00004 	mov	r0, r4
  112120:	e5863000 	str	r3, [r6]
  112124:	e28dd00c 	add	sp, sp, #12
  112128:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  11212c:	e3a00080 	mov	r0, #128	; 0x80
  112130:	e3a0e040 	mov	lr, #64	; 0x40
  112134:	e3a0c03f 	mov	ip, #63	; 0x3f
  112138:	eaffff73 	b	111f0c <_malloc_r+0x5c>
  11213c:	e1a0000e 	mov	r0, lr
  112140:	eaffff84 	b	111f58 <_malloc_r+0xa8>
  112144:	e0832002 	add	r2, r3, r2
  112148:	e593c00c 	ldr	ip, [r3, #12]
  11214c:	e5921004 	ldr	r1, [r2, #4]
  112150:	e2834008 	add	r4, r3, #8
  112154:	e593e008 	ldr	lr, [r3, #8]
  112158:	e1a00006 	mov	r0, r6
  11215c:	e3813001 	orr	r3, r1, #1
  112160:	e58ec00c 	str	ip, [lr, #12]
  112164:	e58ce008 	str	lr, [ip, #8]
  112168:	e5823004 	str	r3, [r2, #4]
  11216c:	eb000255 	bl	112ac8 <__malloc_unlock>
  112170:	e1a00004 	mov	r0, r4
  112174:	e28dd00c 	add	sp, sp, #12
  112178:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  11217c:	e0832002 	add	r2, r3, r2
  112180:	e2834008 	add	r4, r3, #8
  112184:	e5921004 	ldr	r1, [r2, #4]
  112188:	e1a00006 	mov	r0, r6
  11218c:	e3813001 	orr	r3, r1, #1
  112190:	e5823004 	str	r3, [r2, #4]
  112194:	eb00024b 	bl	112ac8 <__malloc_unlock>
  112198:	e1a00004 	mov	r0, r4
  11219c:	e28dd00c 	add	sp, sp, #12
  1121a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1121a4:	e5974008 	ldr	r4, [r7, #8]
  1121a8:	e307183c 	movw	r1, #30780	; 0x783c
  1121ac:	e3401011 	movt	r1, #17
  1121b0:	e5943004 	ldr	r3, [r4, #4]
  1121b4:	e3c3a003 	bic	sl, r3, #3
  1121b8:	e065300a 	rsb	r3, r5, sl
  1121bc:	e353000f 	cmp	r3, #15
  1121c0:	c3a02000 	movgt	r2, #0
  1121c4:	d3a02001 	movle	r2, #1
  1121c8:	e15a0005 	cmp	sl, r5
  1121cc:	33822001 	orrcc	r2, r2, #1
  1121d0:	e3520000 	cmp	r2, #0
  1121d4:	0a000025 	beq	112270 <_malloc_r+0x3c0>
  1121d8:	e30995b8 	movw	r9, #38328	; 0x95b8
  1121dc:	e5913408 	ldr	r3, [r1, #1032]	; 0x408
  1121e0:	e3409011 	movt	r9, #17
  1121e4:	e1a00006 	mov	r0, r6
  1121e8:	e5998000 	ldr	r8, [r9]
  1121ec:	e3730001 	cmn	r3, #1
  1121f0:	e0858008 	add	r8, r5, r8
  1121f4:	12888a01 	addne	r8, r8, #4096	; 0x1000
  1121f8:	02888010 	addeq	r8, r8, #16
  1121fc:	1288800f 	addne	r8, r8, #15
  112200:	13c88eff 	bicne	r8, r8, #4080	; 0xff0
  112204:	13c8800f 	bicne	r8, r8, #15
  112208:	e1a01008 	mov	r1, r8
  11220c:	eb000737 	bl	113ef0 <_sbrk_r>
  112210:	e3700001 	cmn	r0, #1
  112214:	e1a0b000 	mov	fp, r0
  112218:	0a0000f0 	beq	1125e0 <_malloc_r+0x730>
  11221c:	e084300a 	add	r3, r4, sl
  112220:	e307183c 	movw	r1, #30780	; 0x783c
  112224:	e1540007 	cmp	r4, r7
  112228:	11530000 	cmpne	r3, r0
  11222c:	e3401011 	movt	r1, #17
  112230:	9a000085 	bls	11244c <_malloc_r+0x59c>
  112234:	e5914008 	ldr	r4, [r1, #8]
  112238:	e5942004 	ldr	r2, [r4, #4]
  11223c:	e3c22003 	bic	r2, r2, #3
  112240:	e1550002 	cmp	r5, r2
  112244:	e0653002 	rsb	r3, r5, r2
  112248:	93a02000 	movls	r2, #0
  11224c:	83a02001 	movhi	r2, #1
  112250:	e353000f 	cmp	r3, #15
  112254:	d3822001 	orrle	r2, r2, #1
  112258:	e3520000 	cmp	r2, #0
  11225c:	0a000003 	beq	112270 <_malloc_r+0x3c0>
  112260:	e1a00006 	mov	r0, r6
  112264:	e3a04000 	mov	r4, #0
  112268:	eb000216 	bl	112ac8 <__malloc_unlock>
  11226c:	eaffffa5 	b	112108 <_malloc_r+0x258>
  112270:	e3852001 	orr	r2, r5, #1
  112274:	e3833001 	orr	r3, r3, #1
  112278:	e0845005 	add	r5, r4, r5
  11227c:	e5842004 	str	r2, [r4, #4]
  112280:	e1a00006 	mov	r0, r6
  112284:	e5875008 	str	r5, [r7, #8]
  112288:	e2844008 	add	r4, r4, #8
  11228c:	e5853004 	str	r3, [r5, #4]
  112290:	eb00020c 	bl	112ac8 <__malloc_unlock>
  112294:	e1a00004 	mov	r0, r4
  112298:	e28dd00c 	add	sp, sp, #12
  11229c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1122a0:	e3530014 	cmp	r3, #20
  1122a4:	9a000046 	bls	1123c4 <_malloc_r+0x514>
  1122a8:	e3530054 	cmp	r3, #84	; 0x54
  1122ac:	8a0000ae 	bhi	11256c <_malloc_r+0x6bc>
  1122b0:	e1a03625 	lsr	r3, r5, #12
  1122b4:	e283e06f 	add	lr, r3, #111	; 0x6f
  1122b8:	e283c06e 	add	ip, r3, #110	; 0x6e
  1122bc:	e1a0008e 	lsl	r0, lr, #1
  1122c0:	eaffff11 	b	111f0c <_malloc_r+0x5c>
  1122c4:	e1a0e4a2 	lsr	lr, r2, #9
  1122c8:	e35e0004 	cmp	lr, #4
  1122cc:	9a000040 	bls	1123d4 <_malloc_r+0x524>
  1122d0:	e35e0014 	cmp	lr, #20
  1122d4:	8a0000ba 	bhi	1125c4 <_malloc_r+0x714>
  1122d8:	e28e105c 	add	r1, lr, #92	; 0x5c
  1122dc:	e28ee05b 	add	lr, lr, #91	; 0x5b
  1122e0:	e1a01081 	lsl	r1, r1, #1
  1122e4:	e0878101 	add	r8, r7, r1, lsl #2
  1122e8:	e7971101 	ldr	r1, [r7, r1, lsl #2]
  1122ec:	e307483c 	movw	r4, #30780	; 0x783c
  1122f0:	e2488008 	sub	r8, r8, #8
  1122f4:	e3404011 	movt	r4, #17
  1122f8:	e1580001 	cmp	r8, r1
  1122fc:	0a0000a1 	beq	112588 <_malloc_r+0x6d8>
  112300:	e591e004 	ldr	lr, [r1, #4]
  112304:	e3cee003 	bic	lr, lr, #3
  112308:	e152000e 	cmp	r2, lr
  11230c:	2a000002 	bcs	11231c <_malloc_r+0x46c>
  112310:	e5911008 	ldr	r1, [r1, #8]
  112314:	e1580001 	cmp	r8, r1
  112318:	1afffff8 	bne	112300 <_malloc_r+0x450>
  11231c:	e591800c 	ldr	r8, [r1, #12]
  112320:	e5972004 	ldr	r2, [r7, #4]
  112324:	e583800c 	str	r8, [r3, #12]
  112328:	e5831008 	str	r1, [r3, #8]
  11232c:	e5883008 	str	r3, [r8, #8]
  112330:	e581300c 	str	r3, [r1, #12]
  112334:	eaffff27 	b	111fd8 <_malloc_r+0x128>
  112338:	e3854001 	orr	r4, r5, #1
  11233c:	e3812001 	orr	r2, r1, #1
  112340:	e0835005 	add	r5, r3, r5
  112344:	e5834004 	str	r4, [r3, #4]
  112348:	e1a00006 	mov	r0, r6
  11234c:	e58e5014 	str	r5, [lr, #20]
  112350:	e58e5010 	str	r5, [lr, #16]
  112354:	e2834008 	add	r4, r3, #8
  112358:	e585c00c 	str	ip, [r5, #12]
  11235c:	e9851004 	stmib	r5, {r2, ip}
  112360:	e7851001 	str	r1, [r5, r1]
  112364:	eb0001d7 	bl	112ac8 <__malloc_unlock>
  112368:	eaffff66 	b	112108 <_malloc_r+0x258>
  11236c:	e2888001 	add	r8, r8, #1
  112370:	e2844008 	add	r4, r4, #8
  112374:	e3180003 	tst	r8, #3
  112378:	1affff29 	bne	112024 <_malloc_r+0x174>
  11237c:	ea00001c 	b	1123f4 <_malloc_r+0x544>
  112380:	e592300c 	ldr	r3, [r2, #12]
  112384:	e1520003 	cmp	r2, r3
  112388:	02800002 	addeq	r0, r0, #2
  11238c:	0afffef1 	beq	111f58 <_malloc_r+0xa8>
  112390:	eaffff4f 	b	1120d4 <_malloc_r+0x224>
  112394:	e0832002 	add	r2, r3, r2
  112398:	e1a04003 	mov	r4, r3
  11239c:	e5921004 	ldr	r1, [r2, #4]
  1123a0:	e1a00006 	mov	r0, r6
  1123a4:	e593c00c 	ldr	ip, [r3, #12]
  1123a8:	e5b4e008 	ldr	lr, [r4, #8]!
  1123ac:	e3813001 	orr	r3, r1, #1
  1123b0:	e5823004 	str	r3, [r2, #4]
  1123b4:	e58ec00c 	str	ip, [lr, #12]
  1123b8:	e58ce008 	str	lr, [ip, #8]
  1123bc:	eb0001c1 	bl	112ac8 <__malloc_unlock>
  1123c0:	eaffff50 	b	112108 <_malloc_r+0x258>
  1123c4:	e283e05c 	add	lr, r3, #92	; 0x5c
  1123c8:	e283c05b 	add	ip, r3, #91	; 0x5b
  1123cc:	e1a0008e 	lsl	r0, lr, #1
  1123d0:	eafffecd 	b	111f0c <_malloc_r+0x5c>
  1123d4:	e1a0e322 	lsr	lr, r2, #6
  1123d8:	e28e1039 	add	r1, lr, #57	; 0x39
  1123dc:	e28ee038 	add	lr, lr, #56	; 0x38
  1123e0:	e1a01081 	lsl	r1, r1, #1
  1123e4:	eaffffbe 	b	1122e4 <_malloc_r+0x434>
  1123e8:	e4193008 	ldr	r3, [r9], #-8
  1123ec:	e1590003 	cmp	r9, r3
  1123f0:	1a00009f 	bne	112674 <_malloc_r+0x7c4>
  1123f4:	e3100003 	tst	r0, #3
  1123f8:	e2400001 	sub	r0, r0, #1
  1123fc:	1afffff9 	bne	1123e8 <_malloc_r+0x538>
  112400:	e5973004 	ldr	r3, [r7, #4]
  112404:	e1c3300e 	bic	r3, r3, lr
  112408:	e5873004 	str	r3, [r7, #4]
  11240c:	e1b0e08e 	lsls	lr, lr, #1
  112410:	13a02001 	movne	r2, #1
  112414:	03a02000 	moveq	r2, #0
  112418:	e15e0003 	cmp	lr, r3
  11241c:	83a02000 	movhi	r2, #0
  112420:	92022001 	andls	r2, r2, #1
  112424:	e3520000 	cmp	r2, #0
  112428:	0affff5d 	beq	1121a4 <_malloc_r+0x2f4>
  11242c:	e11e0003 	tst	lr, r3
  112430:	e1a00008 	mov	r0, r8
  112434:	1afffef7 	bne	112018 <_malloc_r+0x168>
  112438:	e1a0e08e 	lsl	lr, lr, #1
  11243c:	e2800004 	add	r0, r0, #4
  112440:	e11e0003 	tst	lr, r3
  112444:	0afffffb 	beq	112438 <_malloc_r+0x588>
  112448:	eafffef2 	b	112018 <_malloc_r+0x168>
  11244c:	e5992004 	ldr	r2, [r9, #4]
  112450:	e1530000 	cmp	r3, r0
  112454:	e0882002 	add	r2, r8, r2
  112458:	e5892004 	str	r2, [r9, #4]
  11245c:	0a000063 	beq	1125f0 <_malloc_r+0x740>
  112460:	e5970408 	ldr	r0, [r7, #1032]	; 0x408
  112464:	e307183c 	movw	r1, #30780	; 0x783c
  112468:	e3401011 	movt	r1, #17
  11246c:	e3700001 	cmn	r0, #1
  112470:	e1a00006 	mov	r0, r6
  112474:	1063300b 	rsbne	r3, r3, fp
  112478:	0581b408 	streq	fp, [r1, #1032]	; 0x408
  11247c:	10832002 	addne	r2, r3, r2
  112480:	15892004 	strne	r2, [r9, #4]
  112484:	e21b3007 	ands	r3, fp, #7
  112488:	12631008 	rsbne	r1, r3, #8
  11248c:	12632a01 	rsbne	r2, r3, #4096	; 0x1000
  112490:	108bb001 	addne	fp, fp, r1
  112494:	12822008 	addne	r2, r2, #8
  112498:	e08b3008 	add	r3, fp, r8
  11249c:	03a02a01 	moveq	r2, #4096	; 0x1000
  1124a0:	e7eb3053 	ubfx	r3, r3, #0, #12
  1124a4:	e30985b8 	movw	r8, #38328	; 0x95b8
  1124a8:	e0633002 	rsb	r3, r3, r2
  1124ac:	e3408011 	movt	r8, #17
  1124b0:	e1a01003 	mov	r1, r3
  1124b4:	e58d3004 	str	r3, [sp, #4]
  1124b8:	eb00068c 	bl	113ef0 <_sbrk_r>
  1124bc:	e3700001 	cmn	r0, #1
  1124c0:	e5992004 	ldr	r2, [r9, #4]
  1124c4:	159d3004 	ldrne	r3, [sp, #4]
  1124c8:	106b1000 	rsbne	r1, fp, r0
  1124cc:	03a01001 	moveq	r1, #1
  1124d0:	03a03000 	moveq	r3, #0
  1124d4:	e587b008 	str	fp, [r7, #8]
  1124d8:	10811003 	addne	r1, r1, r3
  1124dc:	e0832002 	add	r2, r3, r2
  1124e0:	13811001 	orrne	r1, r1, #1
  1124e4:	e1540007 	cmp	r4, r7
  1124e8:	e58b1004 	str	r1, [fp, #4]
  1124ec:	e5892004 	str	r2, [r9, #4]
  1124f0:	0a00000f 	beq	112534 <_malloc_r+0x684>
  1124f4:	e35a000f 	cmp	sl, #15
  1124f8:	93a03001 	movls	r3, #1
  1124fc:	958b3004 	strls	r3, [fp, #4]
  112500:	9affff56 	bls	112260 <_malloc_r+0x3b0>
  112504:	e5941004 	ldr	r1, [r4, #4]
  112508:	e24a300c 	sub	r3, sl, #12
  11250c:	e3c33007 	bic	r3, r3, #7
  112510:	e3a0c005 	mov	ip, #5
  112514:	e353000f 	cmp	r3, #15
  112518:	e0840003 	add	r0, r4, r3
  11251c:	e2011001 	and	r1, r1, #1
  112520:	e1813003 	orr	r3, r1, r3
  112524:	e5843004 	str	r3, [r4, #4]
  112528:	e580c004 	str	ip, [r0, #4]
  11252c:	e580c008 	str	ip, [r0, #8]
  112530:	8a00003a 	bhi	112620 <_malloc_r+0x770>
  112534:	e599102c 	ldr	r1, [r9, #44]	; 0x2c
  112538:	e30935b8 	movw	r3, #38328	; 0x95b8
  11253c:	e3403011 	movt	r3, #17
  112540:	e5974008 	ldr	r4, [r7, #8]
  112544:	e1520001 	cmp	r2, r1
  112548:	e5991030 	ldr	r1, [r9, #48]	; 0x30
  11254c:	8583202c 	strhi	r2, [r3, #44]	; 0x2c
  112550:	e30935b8 	movw	r3, #38328	; 0x95b8
  112554:	e3403011 	movt	r3, #17
  112558:	e1520001 	cmp	r2, r1
  11255c:	85832030 	strhi	r2, [r3, #48]	; 0x30
  112560:	e5942004 	ldr	r2, [r4, #4]
  112564:	e3c22003 	bic	r2, r2, #3
  112568:	eaffff34 	b	112240 <_malloc_r+0x390>
  11256c:	e3530f55 	cmp	r3, #340	; 0x154
  112570:	8a00000b 	bhi	1125a4 <_malloc_r+0x6f4>
  112574:	e1a037a5 	lsr	r3, r5, #15
  112578:	e283e078 	add	lr, r3, #120	; 0x78
  11257c:	e283c077 	add	ip, r3, #119	; 0x77
  112580:	e1a0008e 	lsl	r0, lr, #1
  112584:	eafffe60 	b	111f0c <_malloc_r+0x5c>
  112588:	e5942004 	ldr	r2, [r4, #4]
  11258c:	e1a0e14e 	asr	lr, lr, #2
  112590:	e3a09001 	mov	r9, #1
  112594:	e1a01008 	mov	r1, r8
  112598:	e1822e19 	orr	r2, r2, r9, lsl lr
  11259c:	e5842004 	str	r2, [r4, #4]
  1125a0:	eaffff5f 	b	112324 <_malloc_r+0x474>
  1125a4:	e3002554 	movw	r2, #1364	; 0x554
  1125a8:	e1530002 	cmp	r3, r2
  1125ac:	8a000017 	bhi	112610 <_malloc_r+0x760>
  1125b0:	e1a03925 	lsr	r3, r5, #18
  1125b4:	e283e07d 	add	lr, r3, #125	; 0x7d
  1125b8:	e283c07c 	add	ip, r3, #124	; 0x7c
  1125bc:	e1a0008e 	lsl	r0, lr, #1
  1125c0:	eafffe51 	b	111f0c <_malloc_r+0x5c>
  1125c4:	e35e0054 	cmp	lr, #84	; 0x54
  1125c8:	8a000019 	bhi	112634 <_malloc_r+0x784>
  1125cc:	e1a0e622 	lsr	lr, r2, #12
  1125d0:	e28e106f 	add	r1, lr, #111	; 0x6f
  1125d4:	e28ee06e 	add	lr, lr, #110	; 0x6e
  1125d8:	e1a01081 	lsl	r1, r1, #1
  1125dc:	eaffff40 	b	1122e4 <_malloc_r+0x434>
  1125e0:	e5974008 	ldr	r4, [r7, #8]
  1125e4:	e5942004 	ldr	r2, [r4, #4]
  1125e8:	e3c22003 	bic	r2, r2, #3
  1125ec:	eaffff13 	b	112240 <_malloc_r+0x390>
  1125f0:	e7eb0053 	ubfx	r0, r3, #0, #12
  1125f4:	e3500000 	cmp	r0, #0
  1125f8:	1affff98 	bne	112460 <_malloc_r+0x5b0>
  1125fc:	e5911008 	ldr	r1, [r1, #8]
  112600:	e08a3008 	add	r3, sl, r8
  112604:	e3833001 	orr	r3, r3, #1
  112608:	e5813004 	str	r3, [r1, #4]
  11260c:	eaffffc8 	b	112534 <_malloc_r+0x684>
  112610:	e3a000fe 	mov	r0, #254	; 0xfe
  112614:	e3a0e07f 	mov	lr, #127	; 0x7f
  112618:	e3a0c07e 	mov	ip, #126	; 0x7e
  11261c:	eafffe3a 	b	111f0c <_malloc_r+0x5c>
  112620:	e2841008 	add	r1, r4, #8
  112624:	e1a00006 	mov	r0, r6
  112628:	ebfffb5a 	bl	111398 <_free_r>
  11262c:	e5982004 	ldr	r2, [r8, #4]
  112630:	eaffffbf 	b	112534 <_malloc_r+0x684>
  112634:	e35e0f55 	cmp	lr, #340	; 0x154
  112638:	8a000004 	bhi	112650 <_malloc_r+0x7a0>
  11263c:	e1a0e7a2 	lsr	lr, r2, #15
  112640:	e28e1078 	add	r1, lr, #120	; 0x78
  112644:	e28ee077 	add	lr, lr, #119	; 0x77
  112648:	e1a01081 	lsl	r1, r1, #1
  11264c:	eaffff24 	b	1122e4 <_malloc_r+0x434>
  112650:	e3001554 	movw	r1, #1364	; 0x554
  112654:	e15e0001 	cmp	lr, r1
  112658:	91a0e922 	lsrls	lr, r2, #18
  11265c:	83a010fe 	movhi	r1, #254	; 0xfe
  112660:	83a0e07e 	movhi	lr, #126	; 0x7e
  112664:	928e107d 	addls	r1, lr, #125	; 0x7d
  112668:	928ee07c 	addls	lr, lr, #124	; 0x7c
  11266c:	91a01081 	lslls	r1, r1, #1
  112670:	eaffff1b 	b	1122e4 <_malloc_r+0x434>
  112674:	e5973004 	ldr	r3, [r7, #4]
  112678:	eaffff63 	b	11240c <_malloc_r+0x55c>
  11267c:	e1a001a5 	lsr	r0, r5, #3
  112680:	e2802001 	add	r2, r0, #1
  112684:	e1a02082 	lsl	r2, r2, #1
  112688:	eafffe8a 	b	1120b8 <_malloc_r+0x208>

0011268c <memchr>:
  11268c:	e3100003 	tst	r0, #3
  112690:	e92d4030 	push	{r4, r5, lr}
  112694:	e6ef1071 	uxtb	r1, r1
  112698:	0a000038 	beq	112780 <memchr+0xf4>
  11269c:	e3520000 	cmp	r2, #0
  1126a0:	e2423001 	sub	r3, r2, #1
  1126a4:	0a00001f 	beq	112728 <memchr+0x9c>
  1126a8:	e5d02000 	ldrb	r2, [r0]
  1126ac:	e1520001 	cmp	r2, r1
  1126b0:	08bd8030 	popeq	{r4, r5, pc}
  1126b4:	e2802001 	add	r2, r0, #1
  1126b8:	ea000005 	b	1126d4 <memchr+0x48>
  1126bc:	e3530000 	cmp	r3, #0
  1126c0:	0a000018 	beq	112728 <memchr+0x9c>
  1126c4:	e5d0c000 	ldrb	ip, [r0]
  1126c8:	e2433001 	sub	r3, r3, #1
  1126cc:	e15c0001 	cmp	ip, r1
  1126d0:	08bd8030 	popeq	{r4, r5, pc}
  1126d4:	e3120003 	tst	r2, #3
  1126d8:	e1a00002 	mov	r0, r2
  1126dc:	e2822001 	add	r2, r2, #1
  1126e0:	1afffff5 	bne	1126bc <memchr+0x30>
  1126e4:	e3530003 	cmp	r3, #3
  1126e8:	8a000010 	bhi	112730 <memchr+0xa4>
  1126ec:	e3530000 	cmp	r3, #0
  1126f0:	0a00000c 	beq	112728 <memchr+0x9c>
  1126f4:	e5d02000 	ldrb	r2, [r0]
  1126f8:	e1520001 	cmp	r2, r1
  1126fc:	08bd8030 	popeq	{r4, r5, pc}
  112700:	e0803003 	add	r3, r0, r3
  112704:	e2802001 	add	r2, r0, #1
  112708:	ea000002 	b	112718 <memchr+0x8c>
  11270c:	e5d0c000 	ldrb	ip, [r0]
  112710:	e15c0001 	cmp	ip, r1
  112714:	08bd8030 	popeq	{r4, r5, pc}
  112718:	e1530002 	cmp	r3, r2
  11271c:	e1a00002 	mov	r0, r2
  112720:	e2822001 	add	r2, r2, #1
  112724:	1afffff8 	bne	11270c <memchr+0x80>
  112728:	e3a00000 	mov	r0, #0
  11272c:	e8bd8030 	pop	{r4, r5, pc}
  112730:	e1815401 	orr	r5, r1, r1, lsl #8
  112734:	e1a0e000 	mov	lr, r0
  112738:	e1855805 	orr	r5, r5, r5, lsl #16
  11273c:	e59ec000 	ldr	ip, [lr]
  112740:	e30f2eff 	movw	r2, #65279	; 0xfeff
  112744:	e34f2efe 	movt	r2, #65278	; 0xfefe
  112748:	e3084080 	movw	r4, #32896	; 0x8080
  11274c:	e7df4814 	bfi	r4, r4, #16, #16
  112750:	e1a0000e 	mov	r0, lr
  112754:	e02cc005 	eor	ip, ip, r5
  112758:	e28ee004 	add	lr, lr, #4
  11275c:	e08c2002 	add	r2, ip, r2
  112760:	e1c2200c 	bic	r2, r2, ip
  112764:	e1120004 	tst	r2, r4
  112768:	1affffe1 	bne	1126f4 <memchr+0x68>
  11276c:	e2433004 	sub	r3, r3, #4
  112770:	e1a0000e 	mov	r0, lr
  112774:	e3530003 	cmp	r3, #3
  112778:	8affffef 	bhi	11273c <memchr+0xb0>
  11277c:	eaffffda 	b	1126ec <memchr+0x60>
  112780:	e1a03002 	mov	r3, r2
  112784:	eaffffd6 	b	1126e4 <memchr+0x58>
	...

00112790 <memcpy>:
  112790:	e92d4001 	push	{r0, lr}
  112794:	f5d1f000 	pld	[r1]
  112798:	f5d1f040 	pld	[r1, #64]	; 0x40
  11279c:	e3520010 	cmp	r2, #16
  1127a0:	3a00002d 	bcc	11285c <memcpy+0xcc>
  1127a4:	e2603000 	rsb	r3, r0, #0
  1127a8:	e213300f 	ands	r3, r3, #15
  1127ac:	0a00000f 	beq	1127f0 <memcpy+0x60>
  1127b0:	e0422003 	sub	r2, r2, r3
  1127b4:	e1b0cf83 	lsls	ip, r3, #31
  1127b8:	44d1e001 	ldrbmi	lr, [r1], #1
  1127bc:	44c0e001 	strbmi	lr, [r0], #1
  1127c0:	24d1c001 	ldrbcs	ip, [r1], #1
  1127c4:	24d1e001 	ldrbcs	lr, [r1], #1
  1127c8:	24c0c001 	strbcs	ip, [r0], #1
  1127cc:	24c0e001 	strbcs	lr, [r0], #1
  1127d0:	e1b0ce83 	lsls	ip, r3, #29
  1127d4:	aa000001 	bge	1127e0 <memcpy+0x50>
  1127d8:	f4a1030d 	vld4.8	{d0[0],d1[0],d2[0],d3[0]}, [r1]!
  1127dc:	f480031d 	vst4.8	{d0[0],d1[0],d2[0],d3[0]}, [r0 :32]!
  1127e0:	3a000001 	bcc	1127ec <memcpy+0x5c>
  1127e4:	f421070d 	vld1.8	{d0}, [r1]!
  1127e8:	f400071d 	vst1.8	{d0}, [r0 :64]!
  1127ec:	f5d1f040 	pld	[r1, #64]	; 0x40
  1127f0:	e2522080 	subs	r2, r2, #128	; 0x80
  1127f4:	3a00000c 	bcc	11282c <memcpy+0x9c>
  1127f8:	f5d1f080 	pld	[r1, #128]	; 0x80
  1127fc:	f5d1f0c0 	pld	[r1, #192]	; 0xc0
  112800:	f5d1f100 	pld	[r1, #256]	; 0x100
  112804:	f421020d 	vld1.8	{d0-d3}, [r1]!
  112808:	f421420d 	vld1.8	{d4-d7}, [r1]!
  11280c:	f400022d 	vst1.8	{d0-d3}, [r0 :128]!
  112810:	f421020d 	vld1.8	{d0-d3}, [r1]!
  112814:	f400422d 	vst1.8	{d4-d7}, [r0 :128]!
  112818:	f421420d 	vld1.8	{d4-d7}, [r1]!
  11281c:	e2522080 	subs	r2, r2, #128	; 0x80
  112820:	f400022d 	vst1.8	{d0-d3}, [r0 :128]!
  112824:	f400422d 	vst1.8	{d4-d7}, [r0 :128]!
  112828:	2afffff3 	bcs	1127fc <memcpy+0x6c>
  11282c:	e2822080 	add	r2, r2, #128	; 0x80
  112830:	e2522020 	subs	r2, r2, #32
  112834:	3a000003 	bcc	112848 <memcpy+0xb8>
  112838:	f421020d 	vld1.8	{d0-d3}, [r1]!
  11283c:	e2522020 	subs	r2, r2, #32
  112840:	f400022d 	vst1.8	{d0-d3}, [r0 :128]!
  112844:	2afffffb 	bcs	112838 <memcpy+0xa8>
  112848:	e2822020 	add	r2, r2, #32
  11284c:	e3120010 	tst	r2, #16
  112850:	0a000001 	beq	11285c <memcpy+0xcc>
  112854:	f4210a0d 	vld1.8	{d0-d1}, [r1]!
  112858:	f4000a2d 	vst1.8	{d0-d1}, [r0 :128]!
  11285c:	e1b0ce82 	lsls	ip, r2, #29
  112860:	3a000001 	bcc	11286c <memcpy+0xdc>
  112864:	f421070d 	vld1.8	{d0}, [r1]!
  112868:	f400070d 	vst1.8	{d0}, [r0]!
  11286c:	aa000001 	bge	112878 <memcpy+0xe8>
  112870:	f4a1030d 	vld4.8	{d0[0],d1[0],d2[0],d3[0]}, [r1]!
  112874:	f480030d 	vst4.8	{d0[0],d1[0],d2[0],d3[0]}, [r0]!
  112878:	e1b0cf82 	lsls	ip, r2, #31
  11287c:	44d13001 	ldrbmi	r3, [r1], #1
  112880:	24d1c001 	ldrbcs	ip, [r1], #1
  112884:	24d1e001 	ldrbcs	lr, [r1], #1
  112888:	44c03001 	strbmi	r3, [r0], #1
  11288c:	24c0c001 	strbcs	ip, [r0], #1
  112890:	24c0e001 	strbcs	lr, [r0], #1
  112894:	e8bd4001 	pop	{r0, lr}
  112898:	e12fff1e 	bx	lr

0011289c <memmove>:
  11289c:	e1500001 	cmp	r0, r1
  1128a0:	e92d4070 	push	{r4, r5, r6, lr}
  1128a4:	9a00000b 	bls	1128d8 <memmove+0x3c>
  1128a8:	e0813002 	add	r3, r1, r2
  1128ac:	e1500003 	cmp	r0, r3
  1128b0:	2a000008 	bcs	1128d8 <memmove+0x3c>
  1128b4:	e3520000 	cmp	r2, #0
  1128b8:	e0801002 	add	r1, r0, r2
  1128bc:	08bd8070 	popeq	{r4, r5, r6, pc}
  1128c0:	e0622003 	rsb	r2, r2, r3
  1128c4:	e573c001 	ldrb	ip, [r3, #-1]!
  1128c8:	e1530002 	cmp	r3, r2
  1128cc:	e561c001 	strb	ip, [r1, #-1]!
  1128d0:	1afffffb 	bne	1128c4 <memmove+0x28>
  1128d4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1128d8:	e352000f 	cmp	r2, #15
  1128dc:	8a000009 	bhi	112908 <memmove+0x6c>
  1128e0:	e1a03000 	mov	r3, r0
  1128e4:	e3520000 	cmp	r2, #0
  1128e8:	0a000032 	beq	1129b8 <memmove+0x11c>
  1128ec:	e2433001 	sub	r3, r3, #1
  1128f0:	e0812002 	add	r2, r1, r2
  1128f4:	e4d1c001 	ldrb	ip, [r1], #1
  1128f8:	e1520001 	cmp	r2, r1
  1128fc:	e5e3c001 	strb	ip, [r3, #1]!
  112900:	1afffffb 	bne	1128f4 <memmove+0x58>
  112904:	e8bd8070 	pop	{r4, r5, r6, pc}
  112908:	e1813000 	orr	r3, r1, r0
  11290c:	e3130003 	tst	r3, #3
  112910:	1a000026 	bne	1129b0 <memmove+0x114>
  112914:	e280c010 	add	ip, r0, #16
  112918:	e2813010 	add	r3, r1, #16
  11291c:	e1a0e002 	mov	lr, r2
  112920:	e5134010 	ldr	r4, [r3, #-16]
  112924:	e24ee010 	sub	lr, lr, #16
  112928:	e35e000f 	cmp	lr, #15
  11292c:	e2833010 	add	r3, r3, #16
  112930:	e28cc010 	add	ip, ip, #16
  112934:	e50c4020 	str	r4, [ip, #-32]	; 0xffffffe0
  112938:	e513401c 	ldr	r4, [r3, #-28]	; 0xffffffe4
  11293c:	e50c401c 	str	r4, [ip, #-28]	; 0xffffffe4
  112940:	e5134018 	ldr	r4, [r3, #-24]	; 0xffffffe8
  112944:	e50c4018 	str	r4, [ip, #-24]	; 0xffffffe8
  112948:	e5134014 	ldr	r4, [r3, #-20]	; 0xffffffec
  11294c:	e50c4014 	str	r4, [ip, #-20]	; 0xffffffec
  112950:	8afffff2 	bhi	112920 <memmove+0x84>
  112954:	e2423010 	sub	r3, r2, #16
  112958:	e202600f 	and	r6, r2, #15
  11295c:	e3c3300f 	bic	r3, r3, #15
  112960:	e3560003 	cmp	r6, #3
  112964:	e2833010 	add	r3, r3, #16
  112968:	e0811003 	add	r1, r1, r3
  11296c:	e0803003 	add	r3, r0, r3
  112970:	9a000011 	bls	1129bc <memmove+0x120>
  112974:	e2434004 	sub	r4, r3, #4
  112978:	e1a0e001 	mov	lr, r1
  11297c:	e1a0c006 	mov	ip, r6
  112980:	e24cc004 	sub	ip, ip, #4
  112984:	e49e5004 	ldr	r5, [lr], #4
  112988:	e35c0003 	cmp	ip, #3
  11298c:	e5a45004 	str	r5, [r4, #4]!
  112990:	8afffffa 	bhi	112980 <memmove+0xe4>
  112994:	e246c004 	sub	ip, r6, #4
  112998:	e2022003 	and	r2, r2, #3
  11299c:	e3ccc003 	bic	ip, ip, #3
  1129a0:	e28cc004 	add	ip, ip, #4
  1129a4:	e083300c 	add	r3, r3, ip
  1129a8:	e081100c 	add	r1, r1, ip
  1129ac:	eaffffcc 	b	1128e4 <memmove+0x48>
  1129b0:	e1a03000 	mov	r3, r0
  1129b4:	eaffffcc 	b	1128ec <memmove+0x50>
  1129b8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1129bc:	e1a02006 	mov	r2, r6
  1129c0:	eaffffc7 	b	1128e4 <memmove+0x48>

001129c4 <memset>:
  1129c4:	e3100003 	tst	r0, #3
  1129c8:	e92d4010 	push	{r4, lr}
  1129cc:	0a000038 	beq	112ab4 <memset+0xf0>
  1129d0:	e3520000 	cmp	r2, #0
  1129d4:	e2422001 	sub	r2, r2, #1
  1129d8:	08bd8010 	popeq	{r4, pc}
  1129dc:	e6efe071 	uxtb	lr, r1
  1129e0:	e1a03000 	mov	r3, r0
  1129e4:	ea000002 	b	1129f4 <memset+0x30>
  1129e8:	e3520000 	cmp	r2, #0
  1129ec:	e1a0200c 	mov	r2, ip
  1129f0:	08bd8010 	popeq	{r4, pc}
  1129f4:	e4c3e001 	strb	lr, [r3], #1
  1129f8:	e3130003 	tst	r3, #3
  1129fc:	e242c001 	sub	ip, r2, #1
  112a00:	1afffff8 	bne	1129e8 <memset+0x24>
  112a04:	e3520003 	cmp	r2, #3
  112a08:	9a000020 	bls	112a90 <memset+0xcc>
  112a0c:	e6efe071 	uxtb	lr, r1
  112a10:	e352000f 	cmp	r2, #15
  112a14:	e18ee40e 	orr	lr, lr, lr, lsl #8
  112a18:	e18ee80e 	orr	lr, lr, lr, lsl #16
  112a1c:	9a000010 	bls	112a64 <memset+0xa0>
  112a20:	e283c010 	add	ip, r3, #16
  112a24:	e1a04002 	mov	r4, r2
  112a28:	e2444010 	sub	r4, r4, #16
  112a2c:	e50ce010 	str	lr, [ip, #-16]
  112a30:	e354000f 	cmp	r4, #15
  112a34:	e50ce00c 	str	lr, [ip, #-12]
  112a38:	e50ce008 	str	lr, [ip, #-8]
  112a3c:	e28cc010 	add	ip, ip, #16
  112a40:	e50ce014 	str	lr, [ip, #-20]	; 0xffffffec
  112a44:	8afffff7 	bhi	112a28 <memset+0x64>
  112a48:	e242c010 	sub	ip, r2, #16
  112a4c:	e202200f 	and	r2, r2, #15
  112a50:	e3ccc00f 	bic	ip, ip, #15
  112a54:	e3520003 	cmp	r2, #3
  112a58:	e28cc010 	add	ip, ip, #16
  112a5c:	e083300c 	add	r3, r3, ip
  112a60:	9a00000a 	bls	112a90 <memset+0xcc>
  112a64:	e1a04003 	mov	r4, r3
  112a68:	e1a0c002 	mov	ip, r2
  112a6c:	e24cc004 	sub	ip, ip, #4
  112a70:	e484e004 	str	lr, [r4], #4
  112a74:	e35c0003 	cmp	ip, #3
  112a78:	8afffffb 	bhi	112a6c <memset+0xa8>
  112a7c:	e242c004 	sub	ip, r2, #4
  112a80:	e2022003 	and	r2, r2, #3
  112a84:	e3ccc003 	bic	ip, ip, #3
  112a88:	e28cc004 	add	ip, ip, #4
  112a8c:	e083300c 	add	r3, r3, ip
  112a90:	e3520000 	cmp	r2, #0
  112a94:	16ef1071 	uxtbne	r1, r1
  112a98:	10832002 	addne	r2, r3, r2
  112a9c:	0a000003 	beq	112ab0 <memset+0xec>
  112aa0:	e4c31001 	strb	r1, [r3], #1
  112aa4:	e1530002 	cmp	r3, r2
  112aa8:	1afffffc 	bne	112aa0 <memset+0xdc>
  112aac:	e8bd8010 	pop	{r4, pc}
  112ab0:	e8bd8010 	pop	{r4, pc}
  112ab4:	e1a03000 	mov	r3, r0
  112ab8:	eaffffd1 	b	112a04 <memset+0x40>

00112abc <__malloc_lock>:
  112abc:	e30905ec 	movw	r0, #38380	; 0x95ec
  112ac0:	e3400011 	movt	r0, #17
  112ac4:	ea000e43 	b	1163d8 <__generic_gxx_recursive_mutex_lock>

00112ac8 <__malloc_unlock>:
  112ac8:	e30905ec 	movw	r0, #38380	; 0x95ec
  112acc:	e3400011 	movt	r0, #17
  112ad0:	ea000e3e 	b	1163d0 <__generic_gxx_recursive_mutex_unlock>

00112ad4 <__init___malloc_lock_object>:
  112ad4:	e30905ec 	movw	r0, #38380	; 0x95ec
  112ad8:	e3400011 	movt	r0, #17
  112adc:	ea000e37 	b	1163c0 <__generic_gxx_recursive_mutex_init_function>

00112ae0 <_Balloc>:
  112ae0:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
  112ae4:	e92d4070 	push	{r4, r5, r6, lr}
  112ae8:	e1a05000 	mov	r5, r0
  112aec:	e1a04001 	mov	r4, r1
  112af0:	e3520000 	cmp	r2, #0
  112af4:	0a000009 	beq	112b20 <_Balloc+0x40>
  112af8:	e7923104 	ldr	r3, [r2, r4, lsl #2]
  112afc:	e3530000 	cmp	r3, #0
  112b00:	0a00000f 	beq	112b44 <_Balloc+0x64>
  112b04:	e5931000 	ldr	r1, [r3]
  112b08:	e7821104 	str	r1, [r2, r4, lsl #2]
  112b0c:	e3a02000 	mov	r2, #0
  112b10:	e1a00003 	mov	r0, r3
  112b14:	e5832010 	str	r2, [r3, #16]
  112b18:	e583200c 	str	r2, [r3, #12]
  112b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
  112b20:	e3a02021 	mov	r2, #33	; 0x21
  112b24:	e3a01004 	mov	r1, #4
  112b28:	eb000b94 	bl	115980 <_calloc_r>
  112b2c:	e3500000 	cmp	r0, #0
  112b30:	e585004c 	str	r0, [r5, #76]	; 0x4c
  112b34:	11a02000 	movne	r2, r0
  112b38:	1affffee 	bne	112af8 <_Balloc+0x18>
  112b3c:	e3a00000 	mov	r0, #0
  112b40:	e8bd8070 	pop	{r4, r5, r6, pc}
  112b44:	e3a01001 	mov	r1, #1
  112b48:	e1a00005 	mov	r0, r5
  112b4c:	e1a05411 	lsl	r5, r1, r4
  112b50:	e2852005 	add	r2, r5, #5
  112b54:	e1a02102 	lsl	r2, r2, #2
  112b58:	eb000b88 	bl	115980 <_calloc_r>
  112b5c:	e2503000 	subs	r3, r0, #0
  112b60:	0afffff5 	beq	112b3c <_Balloc+0x5c>
  112b64:	e9830030 	stmib	r3, {r4, r5}
  112b68:	eaffffe7 	b	112b0c <_Balloc+0x2c>

00112b6c <_Bfree>:
  112b6c:	e3510000 	cmp	r1, #0
  112b70:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
  112b74:	15912004 	ldrne	r2, [r1, #4]
  112b78:	17930102 	ldrne	r0, [r3, r2, lsl #2]
  112b7c:	15810000 	strne	r0, [r1]
  112b80:	17831102 	strne	r1, [r3, r2, lsl #2]
  112b84:	e12fff1e 	bx	lr

00112b88 <__multadd>:
  112b88:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  112b8c:	e3a0c000 	mov	ip, #0
  112b90:	e5914010 	ldr	r4, [r1, #16]
  112b94:	e24dd00c 	sub	sp, sp, #12
  112b98:	e1a05001 	mov	r5, r1
  112b9c:	e1a06000 	mov	r6, r0
  112ba0:	e281e014 	add	lr, r1, #20
  112ba4:	e59e0000 	ldr	r0, [lr]
  112ba8:	e28cc001 	add	ip, ip, #1
  112bac:	e154000c 	cmp	r4, ip
  112bb0:	e6ff1070 	uxth	r1, r0
  112bb4:	e1a00820 	lsr	r0, r0, #16
  112bb8:	e0233192 	mla	r3, r2, r1, r3
  112bbc:	e1a07823 	lsr	r7, r3, #16
  112bc0:	e6ff1073 	uxth	r1, r3
  112bc4:	e0237092 	mla	r3, r2, r0, r7
  112bc8:	e0811803 	add	r1, r1, r3, lsl #16
  112bcc:	e1a03823 	lsr	r3, r3, #16
  112bd0:	e48e1004 	str	r1, [lr], #4
  112bd4:	cafffff2 	bgt	112ba4 <__multadd+0x1c>
  112bd8:	e3530000 	cmp	r3, #0
  112bdc:	0a000006 	beq	112bfc <__multadd+0x74>
  112be0:	e5952008 	ldr	r2, [r5, #8]
  112be4:	e1540002 	cmp	r4, r2
  112be8:	aa000006 	bge	112c08 <__multadd+0x80>
  112bec:	e0852104 	add	r2, r5, r4, lsl #2
  112bf0:	e2844001 	add	r4, r4, #1
  112bf4:	e5823014 	str	r3, [r2, #20]
  112bf8:	e5854010 	str	r4, [r5, #16]
  112bfc:	e1a00005 	mov	r0, r5
  112c00:	e28dd00c 	add	sp, sp, #12
  112c04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  112c08:	e5951004 	ldr	r1, [r5, #4]
  112c0c:	e1a00006 	mov	r0, r6
  112c10:	e58d3004 	str	r3, [sp, #4]
  112c14:	e2811001 	add	r1, r1, #1
  112c18:	ebffffb0 	bl	112ae0 <_Balloc>
  112c1c:	e5952010 	ldr	r2, [r5, #16]
  112c20:	e285100c 	add	r1, r5, #12
  112c24:	e1a07000 	mov	r7, r0
  112c28:	e280000c 	add	r0, r0, #12
  112c2c:	e2822002 	add	r2, r2, #2
  112c30:	e1a02102 	lsl	r2, r2, #2
  112c34:	ebfffed5 	bl	112790 <memcpy>
  112c38:	e596204c 	ldr	r2, [r6, #76]	; 0x4c
  112c3c:	e5951004 	ldr	r1, [r5, #4]
  112c40:	e59d3004 	ldr	r3, [sp, #4]
  112c44:	e7920101 	ldr	r0, [r2, r1, lsl #2]
  112c48:	e5850000 	str	r0, [r5]
  112c4c:	e7825101 	str	r5, [r2, r1, lsl #2]
  112c50:	e1a05007 	mov	r5, r7
  112c54:	eaffffe4 	b	112bec <__multadd+0x64>

00112c58 <__s2b>:
  112c58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  112c5c:	e3088e39 	movw	r8, #36409	; 0x8e39
  112c60:	e1a06003 	mov	r6, r3
  112c64:	e34388e3 	movt	r8, #14563	; 0x38e3
  112c68:	e2833008 	add	r3, r3, #8
  112c6c:	e1a07002 	mov	r7, r2
  112c70:	e0c98893 	smull	r8, r9, r3, r8
  112c74:	e1a03fc3 	asr	r3, r3, #31
  112c78:	e1a05000 	mov	r5, r0
  112c7c:	e59d8020 	ldr	r8, [sp, #32]
  112c80:	e1a04001 	mov	r4, r1
  112c84:	e06320c9 	rsb	r2, r3, r9, asr #1
  112c88:	e3520001 	cmp	r2, #1
  112c8c:	da000028 	ble	112d34 <__s2b+0xdc>
  112c90:	e3a03001 	mov	r3, #1
  112c94:	e3a01000 	mov	r1, #0
  112c98:	e1a03083 	lsl	r3, r3, #1
  112c9c:	e2811001 	add	r1, r1, #1
  112ca0:	e1520003 	cmp	r2, r3
  112ca4:	cafffffb 	bgt	112c98 <__s2b+0x40>
  112ca8:	e1a00005 	mov	r0, r5
  112cac:	ebffff8b 	bl	112ae0 <_Balloc>
  112cb0:	e3570009 	cmp	r7, #9
  112cb4:	e3a03001 	mov	r3, #1
  112cb8:	e5808014 	str	r8, [r0, #20]
  112cbc:	d284400a 	addle	r4, r4, #10
  112cc0:	e5803010 	str	r3, [r0, #16]
  112cc4:	d3a07009 	movle	r7, #9
  112cc8:	da00000c 	ble	112d00 <__s2b+0xa8>
  112ccc:	e2849009 	add	r9, r4, #9
  112cd0:	e0844007 	add	r4, r4, r7
  112cd4:	e1a08009 	mov	r8, r9
  112cd8:	e4d83001 	ldrb	r3, [r8], #1
  112cdc:	e1a01000 	mov	r1, r0
  112ce0:	e3a0200a 	mov	r2, #10
  112ce4:	e1a00005 	mov	r0, r5
  112ce8:	e2433030 	sub	r3, r3, #48	; 0x30
  112cec:	ebffffa5 	bl	112b88 <__multadd>
  112cf0:	e1580004 	cmp	r8, r4
  112cf4:	1afffff7 	bne	112cd8 <__s2b+0x80>
  112cf8:	e0894007 	add	r4, r9, r7
  112cfc:	e2444008 	sub	r4, r4, #8
  112d00:	e1560007 	cmp	r6, r7
  112d04:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
  112d08:	e0676006 	rsb	r6, r7, r6
  112d0c:	e0846006 	add	r6, r4, r6
  112d10:	e4d43001 	ldrb	r3, [r4], #1
  112d14:	e1a01000 	mov	r1, r0
  112d18:	e3a0200a 	mov	r2, #10
  112d1c:	e1a00005 	mov	r0, r5
  112d20:	e2433030 	sub	r3, r3, #48	; 0x30
  112d24:	ebffff97 	bl	112b88 <__multadd>
  112d28:	e1560004 	cmp	r6, r4
  112d2c:	1afffff7 	bne	112d10 <__s2b+0xb8>
  112d30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  112d34:	e3a01000 	mov	r1, #0
  112d38:	eaffffda 	b	112ca8 <__s2b+0x50>

00112d3c <__hi0bits>:
  112d3c:	e1a03820 	lsr	r3, r0, #16
  112d40:	e1a03803 	lsl	r3, r3, #16
  112d44:	e3530000 	cmp	r3, #0
  112d48:	01a00800 	lsleq	r0, r0, #16
  112d4c:	03a03010 	moveq	r3, #16
  112d50:	13a03000 	movne	r3, #0
  112d54:	e31004ff 	tst	r0, #-16777216	; 0xff000000
  112d58:	01a00400 	lsleq	r0, r0, #8
  112d5c:	02833008 	addeq	r3, r3, #8
  112d60:	e310020f 	tst	r0, #-268435456	; 0xf0000000
  112d64:	01a00200 	lsleq	r0, r0, #4
  112d68:	02833004 	addeq	r3, r3, #4
  112d6c:	e3100103 	tst	r0, #-1073741824	; 0xc0000000
  112d70:	01a00100 	lsleq	r0, r0, #2
  112d74:	02833002 	addeq	r3, r3, #2
  112d78:	e3500000 	cmp	r0, #0
  112d7c:	ba000005 	blt	112d98 <__hi0bits+0x5c>
  112d80:	e3100101 	tst	r0, #1073741824	; 0x40000000
  112d84:	1a000001 	bne	112d90 <__hi0bits+0x54>
  112d88:	e3a00020 	mov	r0, #32
  112d8c:	e12fff1e 	bx	lr
  112d90:	e2830001 	add	r0, r3, #1
  112d94:	e12fff1e 	bx	lr
  112d98:	e1a00003 	mov	r0, r3
  112d9c:	e12fff1e 	bx	lr

00112da0 <__lo0bits>:
  112da0:	e5903000 	ldr	r3, [r0]
  112da4:	e2132007 	ands	r2, r3, #7
  112da8:	0a00000a 	beq	112dd8 <__lo0bits+0x38>
  112dac:	e3130001 	tst	r3, #1
  112db0:	13a02000 	movne	r2, #0
  112db4:	1a000005 	bne	112dd0 <__lo0bits+0x30>
  112db8:	e3130002 	tst	r3, #2
  112dbc:	11a030a3 	lsrne	r3, r3, #1
  112dc0:	01a03123 	lsreq	r3, r3, #2
  112dc4:	13a02001 	movne	r2, #1
  112dc8:	03a02002 	moveq	r2, #2
  112dcc:	e5803000 	str	r3, [r0]
  112dd0:	e1a00002 	mov	r0, r2
  112dd4:	e12fff1e 	bx	lr
  112dd8:	e6ff1073 	uxth	r1, r3
  112ddc:	e3510000 	cmp	r1, #0
  112de0:	01a03823 	lsreq	r3, r3, #16
  112de4:	03a02010 	moveq	r2, #16
  112de8:	e31300ff 	tst	r3, #255	; 0xff
  112dec:	01a03423 	lsreq	r3, r3, #8
  112df0:	02822008 	addeq	r2, r2, #8
  112df4:	e313000f 	tst	r3, #15
  112df8:	01a03223 	lsreq	r3, r3, #4
  112dfc:	02822004 	addeq	r2, r2, #4
  112e00:	e3130003 	tst	r3, #3
  112e04:	01a03123 	lsreq	r3, r3, #2
  112e08:	02822002 	addeq	r2, r2, #2
  112e0c:	e3130001 	tst	r3, #1
  112e10:	1a000003 	bne	112e24 <__lo0bits+0x84>
  112e14:	e1b030a3 	lsrs	r3, r3, #1
  112e18:	03a02020 	moveq	r2, #32
  112e1c:	0affffeb 	beq	112dd0 <__lo0bits+0x30>
  112e20:	e2822001 	add	r2, r2, #1
  112e24:	e5803000 	str	r3, [r0]
  112e28:	e1a00002 	mov	r0, r2
  112e2c:	e12fff1e 	bx	lr

00112e30 <__i2b>:
  112e30:	e92d4010 	push	{r4, lr}
  112e34:	e1a04001 	mov	r4, r1
  112e38:	e3a01001 	mov	r1, #1
  112e3c:	ebffff27 	bl	112ae0 <_Balloc>
  112e40:	e3a02001 	mov	r2, #1
  112e44:	e5804014 	str	r4, [r0, #20]
  112e48:	e5802010 	str	r2, [r0, #16]
  112e4c:	e8bd8010 	pop	{r4, pc}

00112e50 <__multiply>:
  112e50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  112e54:	e1a04001 	mov	r4, r1
  112e58:	e5919010 	ldr	r9, [r1, #16]
  112e5c:	e24dd014 	sub	sp, sp, #20
  112e60:	e1a06002 	mov	r6, r2
  112e64:	e5925010 	ldr	r5, [r2, #16]
  112e68:	e1590005 	cmp	r9, r5
  112e6c:	aa000004 	bge	112e84 <__multiply+0x34>
  112e70:	e1a02009 	mov	r2, r9
  112e74:	e1a04006 	mov	r4, r6
  112e78:	e1a09005 	mov	r9, r5
  112e7c:	e1a06001 	mov	r6, r1
  112e80:	e1a05002 	mov	r5, r2
  112e84:	e5943008 	ldr	r3, [r4, #8]
  112e88:	e0898005 	add	r8, r9, r5
  112e8c:	e5941004 	ldr	r1, [r4, #4]
  112e90:	e1580003 	cmp	r8, r3
  112e94:	c2811001 	addgt	r1, r1, #1
  112e98:	ebffff10 	bl	112ae0 <_Balloc>
  112e9c:	e280a014 	add	sl, r0, #20
  112ea0:	e1a03000 	mov	r3, r0
  112ea4:	e08ab108 	add	fp, sl, r8, lsl #2
  112ea8:	e58d0004 	str	r0, [sp, #4]
  112eac:	e15a000b 	cmp	sl, fp
  112eb0:	31a0300a 	movcc	r3, sl
  112eb4:	33a01000 	movcc	r1, #0
  112eb8:	2a000002 	bcs	112ec8 <__multiply+0x78>
  112ebc:	e4831004 	str	r1, [r3], #4
  112ec0:	e15b0003 	cmp	fp, r3
  112ec4:	8afffffc 	bhi	112ebc <__multiply+0x6c>
  112ec8:	e2862014 	add	r2, r6, #20
  112ecc:	e2843014 	add	r3, r4, #20
  112ed0:	e0821105 	add	r1, r2, r5, lsl #2
  112ed4:	e0839109 	add	r9, r3, r9, lsl #2
  112ed8:	e1520001 	cmp	r2, r1
  112edc:	358db008 	strcc	fp, [sp, #8]
  112ee0:	31a0b001 	movcc	fp, r1
  112ee4:	358d800c 	strcc	r8, [sp, #12]
  112ee8:	31a08003 	movcc	r8, r3
  112eec:	2a00003c 	bcs	112fe4 <__multiply+0x194>
  112ef0:	e4925004 	ldr	r5, [r2], #4
  112ef4:	e6ff7075 	uxth	r7, r5
  112ef8:	e3570000 	cmp	r7, #0
  112efc:	0a000017 	beq	112f60 <__multiply+0x110>
  112f00:	e1a06008 	mov	r6, r8
  112f04:	e1a0500a 	mov	r5, sl
  112f08:	e3a01000 	mov	r1, #0
  112f0c:	ea000000 	b	112f14 <__multiply+0xc4>
  112f10:	e1a0500e 	mov	r5, lr
  112f14:	e4960004 	ldr	r0, [r6], #4
  112f18:	e1a0e005 	mov	lr, r5
  112f1c:	e5953000 	ldr	r3, [r5]
  112f20:	e1590006 	cmp	r9, r6
  112f24:	e6ffc070 	uxth	ip, r0
  112f28:	e1a00820 	lsr	r0, r0, #16
  112f2c:	e6ff4073 	uxth	r4, r3
  112f30:	e1a03823 	lsr	r3, r3, #16
  112f34:	e02c4c97 	mla	ip, r7, ip, r4
  112f38:	e0233097 	mla	r3, r7, r0, r3
  112f3c:	e08c1001 	add	r1, ip, r1
  112f40:	e6ff0071 	uxth	r0, r1
  112f44:	e0831821 	add	r1, r3, r1, lsr #16
  112f48:	e1803801 	orr	r3, r0, r1, lsl #16
  112f4c:	e1a01821 	lsr	r1, r1, #16
  112f50:	e48e3004 	str	r3, [lr], #4
  112f54:	8affffed 	bhi	112f10 <__multiply+0xc0>
  112f58:	e5851004 	str	r1, [r5, #4]
  112f5c:	e5125004 	ldr	r5, [r2, #-4]
  112f60:	e1b05825 	lsrs	r5, r5, #16
  112f64:	0a000019 	beq	112fd0 <__multiply+0x180>
  112f68:	e59a3000 	ldr	r3, [sl]
  112f6c:	e3a06000 	mov	r6, #0
  112f70:	e1a0400a 	mov	r4, sl
  112f74:	e1a0c008 	mov	ip, r8
  112f78:	e1a07006 	mov	r7, r6
  112f7c:	e1a01003 	mov	r1, r3
  112f80:	ea000000 	b	112f88 <__multiply+0x138>
  112f84:	e1a0400e 	mov	r4, lr
  112f88:	e1dc60b0 	ldrh	r6, [ip]
  112f8c:	e1a01821 	lsr	r1, r1, #16
  112f90:	e6ff0073 	uxth	r0, r3
  112f94:	e1a0e004 	mov	lr, r4
  112f98:	e0211695 	mla	r1, r5, r6, r1
  112f9c:	e0816007 	add	r6, r1, r7
  112fa0:	e1803806 	orr	r3, r0, r6, lsl #16
  112fa4:	e48e3004 	str	r3, [lr], #4
  112fa8:	e49c0004 	ldr	r0, [ip], #4
  112fac:	e5941004 	ldr	r1, [r4, #4]
  112fb0:	e159000c 	cmp	r9, ip
  112fb4:	e1a00820 	lsr	r0, r0, #16
  112fb8:	e6ff3071 	uxth	r3, r1
  112fbc:	e0203095 	mla	r0, r5, r0, r3
  112fc0:	e0803826 	add	r3, r0, r6, lsr #16
  112fc4:	e1a07823 	lsr	r7, r3, #16
  112fc8:	8affffed 	bhi	112f84 <__multiply+0x134>
  112fcc:	e5843004 	str	r3, [r4, #4]
  112fd0:	e15b0002 	cmp	fp, r2
  112fd4:	e28aa004 	add	sl, sl, #4
  112fd8:	8affffc4 	bhi	112ef0 <__multiply+0xa0>
  112fdc:	e59db008 	ldr	fp, [sp, #8]
  112fe0:	e59d800c 	ldr	r8, [sp, #12]
  112fe4:	e3580000 	cmp	r8, #0
  112fe8:	da000009 	ble	113014 <__multiply+0x1c4>
  112fec:	e51b3004 	ldr	r3, [fp, #-4]
  112ff0:	e24bb004 	sub	fp, fp, #4
  112ff4:	e3530000 	cmp	r3, #0
  112ff8:	0a000003 	beq	11300c <__multiply+0x1bc>
  112ffc:	ea000004 	b	113014 <__multiply+0x1c4>
  113000:	e53b3004 	ldr	r3, [fp, #-4]!
  113004:	e3530000 	cmp	r3, #0
  113008:	1a000001 	bne	113014 <__multiply+0x1c4>
  11300c:	e2588001 	subs	r8, r8, #1
  113010:	1afffffa 	bne	113000 <__multiply+0x1b0>
  113014:	e59d3004 	ldr	r3, [sp, #4]
  113018:	e1a00003 	mov	r0, r3
  11301c:	e5838010 	str	r8, [r3, #16]
  113020:	e28dd014 	add	sp, sp, #20
  113024:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00113028 <__pow5mult>:
  113028:	e2123003 	ands	r3, r2, #3
  11302c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  113030:	e1a04002 	mov	r4, r2
  113034:	e1a07000 	mov	r7, r0
  113038:	01a06001 	moveq	r6, r1
  11303c:	1a000024 	bne	1130d4 <__pow5mult+0xac>
  113040:	e1b04144 	asrs	r4, r4, #2
  113044:	0a000019 	beq	1130b0 <__pow5mult+0x88>
  113048:	e5975048 	ldr	r5, [r7, #72]	; 0x48
  11304c:	e3550000 	cmp	r5, #0
  113050:	0a000027 	beq	1130f4 <__pow5mult+0xcc>
  113054:	e3a08000 	mov	r8, #0
  113058:	ea000005 	b	113074 <__pow5mult+0x4c>
  11305c:	e1b040c4 	asrs	r4, r4, #1
  113060:	0a000012 	beq	1130b0 <__pow5mult+0x88>
  113064:	e5950000 	ldr	r0, [r5]
  113068:	e3500000 	cmp	r0, #0
  11306c:	0a000011 	beq	1130b8 <__pow5mult+0x90>
  113070:	e1a05000 	mov	r5, r0
  113074:	e3140001 	tst	r4, #1
  113078:	0afffff7 	beq	11305c <__pow5mult+0x34>
  11307c:	e1a02005 	mov	r2, r5
  113080:	e1a01006 	mov	r1, r6
  113084:	e1a00007 	mov	r0, r7
  113088:	ebffff70 	bl	112e50 <__multiply>
  11308c:	e3560000 	cmp	r6, #0
  113090:	15962004 	ldrne	r2, [r6, #4]
  113094:	1597304c 	ldrne	r3, [r7, #76]	; 0x4c
  113098:	17931102 	ldrne	r1, [r3, r2, lsl #2]
  11309c:	15861000 	strne	r1, [r6]
  1130a0:	17836102 	strne	r6, [r3, r2, lsl #2]
  1130a4:	e1b040c4 	asrs	r4, r4, #1
  1130a8:	e1a06000 	mov	r6, r0
  1130ac:	1affffec 	bne	113064 <__pow5mult+0x3c>
  1130b0:	e1a00006 	mov	r0, r6
  1130b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1130b8:	e1a02005 	mov	r2, r5
  1130bc:	e1a01005 	mov	r1, r5
  1130c0:	e1a00007 	mov	r0, r7
  1130c4:	ebffff61 	bl	112e50 <__multiply>
  1130c8:	e5850000 	str	r0, [r5]
  1130cc:	e5808000 	str	r8, [r0]
  1130d0:	eaffffe6 	b	113070 <__pow5mult+0x48>
  1130d4:	e307c0b8 	movw	ip, #28856	; 0x70b8
  1130d8:	e2432001 	sub	r2, r3, #1
  1130dc:	e340c011 	movt	ip, #17
  1130e0:	e3a03000 	mov	r3, #0
  1130e4:	e79c2102 	ldr	r2, [ip, r2, lsl #2]
  1130e8:	ebfffea6 	bl	112b88 <__multadd>
  1130ec:	e1a06000 	mov	r6, r0
  1130f0:	eaffffd2 	b	113040 <__pow5mult+0x18>
  1130f4:	e3a01001 	mov	r1, #1
  1130f8:	e1a00007 	mov	r0, r7
  1130fc:	ebfffe77 	bl	112ae0 <_Balloc>
  113100:	e3001271 	movw	r1, #625	; 0x271
  113104:	e3a02001 	mov	r2, #1
  113108:	e3a03000 	mov	r3, #0
  11310c:	e5801014 	str	r1, [r0, #20]
  113110:	e5802010 	str	r2, [r0, #16]
  113114:	e1a05000 	mov	r5, r0
  113118:	e5870048 	str	r0, [r7, #72]	; 0x48
  11311c:	e5803000 	str	r3, [r0]
  113120:	eaffffcb 	b	113054 <__pow5mult+0x2c>

00113124 <__lshift>:
  113124:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  113128:	e1a042c2 	asr	r4, r2, #5
  11312c:	e5918010 	ldr	r8, [r1, #16]
  113130:	e1a06001 	mov	r6, r1
  113134:	e1a09002 	mov	r9, r2
  113138:	e1a07000 	mov	r7, r0
  11313c:	e5913008 	ldr	r3, [r1, #8]
  113140:	e0848008 	add	r8, r4, r8
  113144:	e5911004 	ldr	r1, [r1, #4]
  113148:	e2885001 	add	r5, r8, #1
  11314c:	e1550003 	cmp	r5, r3
  113150:	da000003 	ble	113164 <__lshift+0x40>
  113154:	e1a03083 	lsl	r3, r3, #1
  113158:	e2811001 	add	r1, r1, #1
  11315c:	e1550003 	cmp	r5, r3
  113160:	cafffffb 	bgt	113154 <__lshift+0x30>
  113164:	e1a00007 	mov	r0, r7
  113168:	ebfffe5c 	bl	112ae0 <_Balloc>
  11316c:	e3540000 	cmp	r4, #0
  113170:	e1a0c000 	mov	ip, r0
  113174:	e2801014 	add	r1, r0, #20
  113178:	da000025 	ble	113214 <__lshift+0xf0>
  11317c:	e0813104 	add	r3, r1, r4, lsl #2
  113180:	e3a02000 	mov	r2, #0
  113184:	e4812004 	str	r2, [r1], #4
  113188:	e1530001 	cmp	r3, r1
  11318c:	1afffffc 	bne	113184 <__lshift+0x60>
  113190:	e596e010 	ldr	lr, [r6, #16]
  113194:	e219901f 	ands	r9, r9, #31
  113198:	e2861014 	add	r1, r6, #20
  11319c:	e081e10e 	add	lr, r1, lr, lsl #2
  1131a0:	0a000015 	beq	1131fc <__lshift+0xd8>
  1131a4:	e2694020 	rsb	r4, r9, #32
  1131a8:	e3a00000 	mov	r0, #0
  1131ac:	e591a000 	ldr	sl, [r1]
  1131b0:	e1a02003 	mov	r2, r3
  1131b4:	e180091a 	orr	r0, r0, sl, lsl r9
  1131b8:	e4830004 	str	r0, [r3], #4
  1131bc:	e4910004 	ldr	r0, [r1], #4
  1131c0:	e15e0001 	cmp	lr, r1
  1131c4:	e1a00430 	lsr	r0, r0, r4
  1131c8:	8afffff7 	bhi	1131ac <__lshift+0x88>
  1131cc:	e3500000 	cmp	r0, #0
  1131d0:	e5820004 	str	r0, [r2, #4]
  1131d4:	12885002 	addne	r5, r8, #2
  1131d8:	e597304c 	ldr	r3, [r7, #76]	; 0x4c
  1131dc:	e2455001 	sub	r5, r5, #1
  1131e0:	e5962004 	ldr	r2, [r6, #4]
  1131e4:	e1a0000c 	mov	r0, ip
  1131e8:	e58c5010 	str	r5, [ip, #16]
  1131ec:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  1131f0:	e5861000 	str	r1, [r6]
  1131f4:	e7836102 	str	r6, [r3, r2, lsl #2]
  1131f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1131fc:	e2433004 	sub	r3, r3, #4
  113200:	e4912004 	ldr	r2, [r1], #4
  113204:	e15e0001 	cmp	lr, r1
  113208:	e5a32004 	str	r2, [r3, #4]!
  11320c:	8afffffb 	bhi	113200 <__lshift+0xdc>
  113210:	eafffff0 	b	1131d8 <__lshift+0xb4>
  113214:	e1a03001 	mov	r3, r1
  113218:	eaffffdc 	b	113190 <__lshift+0x6c>

0011321c <__mcmp>:
  11321c:	e5902010 	ldr	r2, [r0, #16]
  113220:	e5913010 	ldr	r3, [r1, #16]
  113224:	e0522003 	subs	r2, r2, r3
  113228:	1a00000e 	bne	113268 <__mcmp+0x4c>
  11322c:	e1a03103 	lsl	r3, r3, #2
  113230:	e2800014 	add	r0, r0, #20
  113234:	e2811014 	add	r1, r1, #20
  113238:	e0811003 	add	r1, r1, r3
  11323c:	e0803003 	add	r3, r0, r3
  113240:	ea000001 	b	11324c <__mcmp+0x30>
  113244:	e1500003 	cmp	r0, r3
  113248:	2a000008 	bcs	113270 <__mcmp+0x54>
  11324c:	e533c004 	ldr	ip, [r3, #-4]!
  113250:	e5312004 	ldr	r2, [r1, #-4]!
  113254:	e15c0002 	cmp	ip, r2
  113258:	0afffff9 	beq	113244 <__mcmp+0x28>
  11325c:	3a000005 	bcc	113278 <__mcmp+0x5c>
  113260:	e3a00001 	mov	r0, #1
  113264:	e12fff1e 	bx	lr
  113268:	e1a00002 	mov	r0, r2
  11326c:	e12fff1e 	bx	lr
  113270:	e3a00000 	mov	r0, #0
  113274:	e12fff1e 	bx	lr
  113278:	e3e00000 	mvn	r0, #0
  11327c:	e12fff1e 	bx	lr

00113280 <__mdiff>:
  113280:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  113284:	e1a06001 	mov	r6, r1
  113288:	e5913010 	ldr	r3, [r1, #16]
  11328c:	e1a04002 	mov	r4, r2
  113290:	e5921010 	ldr	r1, [r2, #16]
  113294:	e0613003 	rsb	r3, r1, r3
  113298:	e3530000 	cmp	r3, #0
  11329c:	1a000012 	bne	1132ec <__mdiff+0x6c>
  1132a0:	e1a01101 	lsl	r1, r1, #2
  1132a4:	e286e014 	add	lr, r6, #20
  1132a8:	e2825014 	add	r5, r2, #20
  1132ac:	e08e3001 	add	r3, lr, r1
  1132b0:	e0851001 	add	r1, r5, r1
  1132b4:	ea000001 	b	1132c0 <__mdiff+0x40>
  1132b8:	e15e0003 	cmp	lr, r3
  1132bc:	2a000043 	bcs	1133d0 <__mdiff+0x150>
  1132c0:	e533c004 	ldr	ip, [r3, #-4]!
  1132c4:	e5312004 	ldr	r2, [r1, #-4]!
  1132c8:	e15c0002 	cmp	ip, r2
  1132cc:	0afffff9 	beq	1132b8 <__mdiff+0x38>
  1132d0:	2a000045 	bcs	1133ec <__mdiff+0x16c>
  1132d4:	e1a03006 	mov	r3, r6
  1132d8:	e1a0700e 	mov	r7, lr
  1132dc:	e1a06004 	mov	r6, r4
  1132e0:	e3a08001 	mov	r8, #1
  1132e4:	e1a04003 	mov	r4, r3
  1132e8:	ea000003 	b	1132fc <__mdiff+0x7c>
  1132ec:	ba000042 	blt	1133fc <__mdiff+0x17c>
  1132f0:	e2865014 	add	r5, r6, #20
  1132f4:	e2827014 	add	r7, r2, #20
  1132f8:	e3a08000 	mov	r8, #0
  1132fc:	e5961004 	ldr	r1, [r6, #4]
  113300:	ebfffdf6 	bl	112ae0 <_Balloc>
  113304:	e5942010 	ldr	r2, [r4, #16]
  113308:	e1a0e007 	mov	lr, r7
  11330c:	e5966010 	ldr	r6, [r6, #16]
  113310:	e1a04005 	mov	r4, r5
  113314:	e280c014 	add	ip, r0, #20
  113318:	e3a03000 	mov	r3, #0
  11331c:	e580800c 	str	r8, [r0, #12]
  113320:	e0877102 	add	r7, r7, r2, lsl #2
  113324:	e0855106 	add	r5, r5, r6, lsl #2
  113328:	e49e1004 	ldr	r1, [lr], #4
  11332c:	e4949004 	ldr	r9, [r4], #4
  113330:	e157000e 	cmp	r7, lr
  113334:	e1a02821 	lsr	r2, r1, #16
  113338:	e6ff8071 	uxth	r8, r1
  11333c:	e6f31079 	uxtah	r1, r3, r9
  113340:	e0623829 	rsb	r3, r2, r9, lsr #16
  113344:	e0682001 	rsb	r2, r8, r1
  113348:	e0833842 	add	r3, r3, r2, asr #16
  11334c:	e6ff2072 	uxth	r2, r2
  113350:	e1822803 	orr	r2, r2, r3, lsl #16
  113354:	e1a03843 	asr	r3, r3, #16
  113358:	e48c2004 	str	r2, [ip], #4
  11335c:	8afffff1 	bhi	113328 <__mdiff+0xa8>
  113360:	e1550004 	cmp	r5, r4
  113364:	9a000010 	bls	1133ac <__mdiff+0x12c>
  113368:	e1a0800c 	mov	r8, ip
  11336c:	e1a0e004 	mov	lr, r4
  113370:	e49e7004 	ldr	r7, [lr], #4
  113374:	e155000e 	cmp	r5, lr
  113378:	e6f32077 	uxtah	r2, r3, r7
  11337c:	e1a01842 	asr	r1, r2, #16
  113380:	e6ff2072 	uxth	r2, r2
  113384:	e0813827 	add	r3, r1, r7, lsr #16
  113388:	e1822803 	orr	r2, r2, r3, lsl #16
  11338c:	e1a03843 	asr	r3, r3, #16
  113390:	e4882004 	str	r2, [r8], #4
  113394:	8afffff5 	bhi	113370 <__mdiff+0xf0>
  113398:	e1e04004 	mvn	r4, r4
  11339c:	e0845005 	add	r5, r4, r5
  1133a0:	e3c55003 	bic	r5, r5, #3
  1133a4:	e2855004 	add	r5, r5, #4
  1133a8:	e08cc005 	add	ip, ip, r5
  1133ac:	e3520000 	cmp	r2, #0
  1133b0:	e24cc004 	sub	ip, ip, #4
  1133b4:	1a000003 	bne	1133c8 <__mdiff+0x148>
  1133b8:	e53c3004 	ldr	r3, [ip, #-4]!
  1133bc:	e2466001 	sub	r6, r6, #1
  1133c0:	e3530000 	cmp	r3, #0
  1133c4:	0afffffb 	beq	1133b8 <__mdiff+0x138>
  1133c8:	e5806010 	str	r6, [r0, #16]
  1133cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1133d0:	e3a01000 	mov	r1, #0
  1133d4:	ebfffdc1 	bl	112ae0 <_Balloc>
  1133d8:	e3a01001 	mov	r1, #1
  1133dc:	e3a02000 	mov	r2, #0
  1133e0:	e5801010 	str	r1, [r0, #16]
  1133e4:	e5802014 	str	r2, [r0, #20]
  1133e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1133ec:	e1a07005 	mov	r7, r5
  1133f0:	e3a08000 	mov	r8, #0
  1133f4:	e1a0500e 	mov	r5, lr
  1133f8:	eaffffbf 	b	1132fc <__mdiff+0x7c>
  1133fc:	e1a03006 	mov	r3, r6
  113400:	e2867014 	add	r7, r6, #20
  113404:	e2845014 	add	r5, r4, #20
  113408:	e1a06004 	mov	r6, r4
  11340c:	e3a08001 	mov	r8, #1
  113410:	e1a04003 	mov	r4, r3
  113414:	eaffffb8 	b	1132fc <__mdiff+0x7c>

00113418 <__ulp>:
  113418:	e3a03000 	mov	r3, #0
  11341c:	e3473ff0 	movt	r3, #32752	; 0x7ff0
  113420:	e0033001 	and	r3, r3, r1
  113424:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
  113428:	e3530000 	cmp	r3, #0
  11342c:	da000002 	ble	11343c <__ulp+0x24>
  113430:	e3a00000 	mov	r0, #0
  113434:	e1a01003 	mov	r1, r3
  113438:	e12fff1e 	bx	lr
  11343c:	e2633000 	rsb	r3, r3, #0
  113440:	e1a03a43 	asr	r3, r3, #20
  113444:	e3530013 	cmp	r3, #19
  113448:	da000008 	ble	113470 <__ulp+0x58>
  11344c:	e2433014 	sub	r3, r3, #20
  113450:	e3a01000 	mov	r1, #0
  113454:	e353001e 	cmp	r3, #30
  113458:	d263301f 	rsble	r3, r3, #31
  11345c:	d3a02001 	movle	r2, #1
  113460:	d1a03312 	lslle	r3, r2, r3
  113464:	c3a03001 	movgt	r3, #1
  113468:	e1a00003 	mov	r0, r3
  11346c:	e12fff1e 	bx	lr
  113470:	e3a02702 	mov	r2, #524288	; 0x80000
  113474:	e3a00000 	mov	r0, #0
  113478:	e1a01352 	asr	r1, r2, r3
  11347c:	e12fff1e 	bx	lr

00113480 <__b2d>:
  113480:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  113484:	e2802014 	add	r2, r0, #20
  113488:	e5906010 	ldr	r6, [r0, #16]
  11348c:	e0826106 	add	r6, r2, r6, lsl #2
  113490:	e5167004 	ldr	r7, [r6, #-4]
  113494:	e2468004 	sub	r8, r6, #4
  113498:	e1a00007 	mov	r0, r7
  11349c:	ebfffe26 	bl	112d3c <__hi0bits>
  1134a0:	e350000a 	cmp	r0, #10
  1134a4:	e2603020 	rsb	r3, r0, #32
  1134a8:	e5813000 	str	r3, [r1]
  1134ac:	ca00000c 	bgt	1134e4 <__b2d+0x64>
  1134b0:	e260100b 	rsb	r1, r0, #11
  1134b4:	e1520008 	cmp	r2, r8
  1134b8:	e1a03137 	lsr	r3, r7, r1
  1134bc:	23a02000 	movcs	r2, #0
  1134c0:	e38355ff 	orr	r5, r3, #1069547520	; 0x3fc00000
  1134c4:	35163008 	ldrcc	r3, [r6, #-8]
  1134c8:	e3855603 	orr	r5, r5, #3145728	; 0x300000
  1134cc:	31a02133 	lsrcc	r2, r3, r1
  1134d0:	e2803015 	add	r3, r0, #21
  1134d4:	e1824317 	orr	r4, r2, r7, lsl r3
  1134d8:	e1a00004 	mov	r0, r4
  1134dc:	e1a01005 	mov	r1, r5
  1134e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1134e4:	e1520008 	cmp	r2, r8
  1134e8:	2a00000e 	bcs	113528 <__b2d+0xa8>
  1134ec:	e250000b 	subs	r0, r0, #11
  1134f0:	e5163008 	ldr	r3, [r6, #-8]
  1134f4:	0a00000d 	beq	113530 <__b2d+0xb0>
  1134f8:	e2461008 	sub	r1, r6, #8
  1134fc:	e1a07017 	lsl	r7, r7, r0
  113500:	e1520001 	cmp	r2, r1
  113504:	3516100c 	ldrcc	r1, [r6, #-12]
  113508:	e2602020 	rsb	r2, r0, #32
  11350c:	e38775ff 	orr	r7, r7, #1069547520	; 0x3fc00000
  113510:	31a00013 	lslcc	r0, r3, r0
  113514:	e3877603 	orr	r7, r7, #3145728	; 0x300000
  113518:	e1875233 	orr	r5, r7, r3, lsr r2
  11351c:	21a03013 	lslcs	r3, r3, r0
  113520:	31803231 	orrcc	r3, r0, r1, lsr r2
  113524:	ea000003 	b	113538 <__b2d+0xb8>
  113528:	e250300b 	subs	r3, r0, #11
  11352c:	1a000003 	bne	113540 <__b2d+0xc0>
  113530:	e38755ff 	orr	r5, r7, #1069547520	; 0x3fc00000
  113534:	e3855603 	orr	r5, r5, #3145728	; 0x300000
  113538:	e1a04003 	mov	r4, r3
  11353c:	eaffffe5 	b	1134d8 <__b2d+0x58>
  113540:	e1a00317 	lsl	r0, r7, r3
  113544:	e3a03000 	mov	r3, #0
  113548:	e38055ff 	orr	r5, r0, #1069547520	; 0x3fc00000
  11354c:	e3855603 	orr	r5, r5, #3145728	; 0x300000
  113550:	eafffff8 	b	113538 <__b2d+0xb8>

00113554 <__d2b>:
  113554:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  113558:	e3a01001 	mov	r1, #1
  11355c:	e24dd00c 	sub	sp, sp, #12
  113560:	e1a04003 	mov	r4, r3
  113564:	e7ea5a53 	ubfx	r5, r3, #20, #11
  113568:	e1a08002 	mov	r8, r2
  11356c:	e7f34054 	ubfx	r4, r4, #0, #20
  113570:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
  113574:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
  113578:	ebfffd58 	bl	112ae0 <_Balloc>
  11357c:	e3550000 	cmp	r5, #0
  113580:	e1a09000 	mov	r9, r0
  113584:	13844601 	orrne	r4, r4, #1048576	; 0x100000
  113588:	e3580000 	cmp	r8, #0
  11358c:	e58d4004 	str	r4, [sp, #4]
  113590:	0a00001d 	beq	11360c <__d2b+0xb8>
  113594:	e28d0008 	add	r0, sp, #8
  113598:	e5208008 	str	r8, [r0, #-8]!
  11359c:	ebfffdff 	bl	112da0 <__lo0bits>
  1135a0:	e3500000 	cmp	r0, #0
  1135a4:	159dc004 	ldrne	ip, [sp, #4]
  1135a8:	12602020 	rsbne	r2, r0, #32
  1135ac:	159d1000 	ldrne	r1, [sp]
  1135b0:	089d000c 	ldmeq	sp, {r2, r3}
  1135b4:	11a0303c 	lsrne	r3, ip, r0
  1135b8:	1181221c 	orrne	r2, r1, ip, lsl r2
  1135bc:	158d3004 	strne	r3, [sp, #4]
  1135c0:	e3530000 	cmp	r3, #0
  1135c4:	e5892014 	str	r2, [r9, #20]
  1135c8:	03a02001 	moveq	r2, #1
  1135cc:	13a02002 	movne	r2, #2
  1135d0:	e3550000 	cmp	r5, #0
  1135d4:	e5893018 	str	r3, [r9, #24]
  1135d8:	e5892010 	str	r2, [r9, #16]
  1135dc:	1a000014 	bne	113634 <__d2b+0xe0>
  1135e0:	e0893102 	add	r3, r9, r2, lsl #2
  1135e4:	e2405e43 	sub	r5, r0, #1072	; 0x430
  1135e8:	e2455002 	sub	r5, r5, #2
  1135ec:	e5930010 	ldr	r0, [r3, #16]
  1135f0:	e5875000 	str	r5, [r7]
  1135f4:	ebfffdd0 	bl	112d3c <__hi0bits>
  1135f8:	e0600282 	rsb	r0, r0, r2, lsl #5
  1135fc:	e5860000 	str	r0, [r6]
  113600:	e1a00009 	mov	r0, r9
  113604:	e28dd00c 	add	sp, sp, #12
  113608:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  11360c:	e28d0004 	add	r0, sp, #4
  113610:	ebfffde2 	bl	112da0 <__lo0bits>
  113614:	e59d1004 	ldr	r1, [sp, #4]
  113618:	e3550000 	cmp	r5, #0
  11361c:	e3a03001 	mov	r3, #1
  113620:	e2800020 	add	r0, r0, #32
  113624:	e1a02003 	mov	r2, r3
  113628:	e5893010 	str	r3, [r9, #16]
  11362c:	e5891014 	str	r1, [r9, #20]
  113630:	0affffea 	beq	1135e0 <__d2b+0x8c>
  113634:	e2455e43 	sub	r5, r5, #1072	; 0x430
  113638:	e2603035 	rsb	r3, r0, #53	; 0x35
  11363c:	e2455003 	sub	r5, r5, #3
  113640:	e0855000 	add	r5, r5, r0
  113644:	e1a00009 	mov	r0, r9
  113648:	e5875000 	str	r5, [r7]
  11364c:	e5863000 	str	r3, [r6]
  113650:	e28dd00c 	add	sp, sp, #12
  113654:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

00113658 <__ratio>:
  113658:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  11365c:	e24dd008 	sub	sp, sp, #8
  113660:	e1a08001 	mov	r8, r1
  113664:	e1a0100d 	mov	r1, sp
  113668:	e1a06000 	mov	r6, r0
  11366c:	ebffff83 	bl	113480 <__b2d>
  113670:	ec410b30 	vmov	d16, r0, r1
  113674:	e1a00008 	mov	r0, r8
  113678:	e28d1004 	add	r1, sp, #4
  11367c:	ebffff7f 	bl	113480 <__b2d>
  113680:	e89d000c 	ldm	sp, {r2, r3}
  113684:	ec410b31 	vmov	d17, r0, r1
  113688:	e5961010 	ldr	r1, [r6, #16]
  11368c:	e5980010 	ldr	r0, [r8, #16]
  113690:	e0633002 	rsb	r3, r3, r2
  113694:	e0601001 	rsb	r1, r0, r1
  113698:	e0833281 	add	r3, r3, r1, lsl #5
  11369c:	e3530000 	cmp	r3, #0
  1136a0:	da000006 	ble	1136c0 <__ratio+0x68>
  1136a4:	ec554b30 	vmov	r4, r5, d16
  1136a8:	e0855a03 	add	r5, r5, r3, lsl #20
  1136ac:	ec454b30 	vmov	d16, r4, r5
  1136b0:	eec02ba1 	vdiv.f64	d18, d16, d17
  1136b4:	ec510b32 	vmov	r0, r1, d18
  1136b8:	e28dd008 	add	sp, sp, #8
  1136bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1136c0:	ec576b31 	vmov	r6, r7, d17
  1136c4:	e0477a03 	sub	r7, r7, r3, lsl #20
  1136c8:	ec476b31 	vmov	d17, r6, r7
  1136cc:	eec02ba1 	vdiv.f64	d18, d16, d17
  1136d0:	ec510b32 	vmov	r0, r1, d18
  1136d4:	e28dd008 	add	sp, sp, #8
  1136d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

001136dc <_mprec_log10>:
  1136dc:	e3500017 	cmp	r0, #23
  1136e0:	da000006 	ble	113700 <_mprec_log10+0x24>
  1136e4:	eef70b00 	vmov.f64	d16, #112	; 0x3f800000  1.0
  1136e8:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
  1136ec:	e2500001 	subs	r0, r0, #1
  1136f0:	ee600ba1 	vmul.f64	d16, d16, d17
  1136f4:	1afffffc 	bne	1136ec <_mprec_log10+0x10>
  1136f8:	ec510b30 	vmov	r0, r1, d16
  1136fc:	e12fff1e 	bx	lr
  113700:	e30730b8 	movw	r3, #28856	; 0x70b8
  113704:	e3403011 	movt	r3, #17
  113708:	e0830180 	add	r0, r3, r0, lsl #3
  11370c:	e1c001d0 	ldrd	r0, [r0, #16]
  113710:	e12fff1e 	bx	lr

00113714 <__copybits>:
  113714:	e592c010 	ldr	ip, [r2, #16]
  113718:	e2823014 	add	r3, r2, #20
  11371c:	e2411001 	sub	r1, r1, #1
  113720:	e92d4010 	push	{r4, lr}
  113724:	e1a012c1 	asr	r1, r1, #5
  113728:	e083c10c 	add	ip, r3, ip, lsl #2
  11372c:	e2811001 	add	r1, r1, #1
  113730:	e0804101 	add	r4, r0, r1, lsl #2
  113734:	e153000c 	cmp	r3, ip
  113738:	2a000009 	bcs	113764 <__copybits+0x50>
  11373c:	e2401004 	sub	r1, r0, #4
  113740:	e493e004 	ldr	lr, [r3], #4
  113744:	e15c0003 	cmp	ip, r3
  113748:	e5a1e004 	str	lr, [r1, #4]!
  11374c:	8afffffb 	bhi	113740 <__copybits+0x2c>
  113750:	e062300c 	rsb	r3, r2, ip
  113754:	e2433015 	sub	r3, r3, #21
  113758:	e3c33003 	bic	r3, r3, #3
  11375c:	e2833004 	add	r3, r3, #4
  113760:	e0800003 	add	r0, r0, r3
  113764:	e1540000 	cmp	r4, r0
  113768:	98bd8010 	popls	{r4, pc}
  11376c:	e3a03000 	mov	r3, #0
  113770:	e4803004 	str	r3, [r0], #4
  113774:	e1540000 	cmp	r4, r0
  113778:	8afffffc 	bhi	113770 <__copybits+0x5c>
  11377c:	e8bd8010 	pop	{r4, pc}

00113780 <__any_on>:
  113780:	e5903010 	ldr	r3, [r0, #16]
  113784:	e1a022c1 	asr	r2, r1, #5
  113788:	e280c014 	add	ip, r0, #20
  11378c:	e1530002 	cmp	r3, r2
  113790:	b08c3103 	addlt	r3, ip, r3, lsl #2
  113794:	ba00000a 	blt	1137c4 <__any_on+0x44>
  113798:	da000008 	ble	1137c0 <__any_on+0x40>
  11379c:	e211101f 	ands	r1, r1, #31
  1137a0:	0a000006 	beq	1137c0 <__any_on+0x40>
  1137a4:	e79c0102 	ldr	r0, [ip, r2, lsl #2]
  1137a8:	e08c3102 	add	r3, ip, r2, lsl #2
  1137ac:	e1a02130 	lsr	r2, r0, r1
  1137b0:	e1500112 	cmp	r0, r2, lsl r1
  1137b4:	0a000002 	beq	1137c4 <__any_on+0x44>
  1137b8:	e3a00001 	mov	r0, #1
  1137bc:	e12fff1e 	bx	lr
  1137c0:	e08c3102 	add	r3, ip, r2, lsl #2
  1137c4:	e15c0003 	cmp	ip, r3
  1137c8:	2a00000a 	bcs	1137f8 <__any_on+0x78>
  1137cc:	e5130004 	ldr	r0, [r3, #-4]
  1137d0:	e2433004 	sub	r3, r3, #4
  1137d4:	e3500000 	cmp	r0, #0
  1137d8:	0a000003 	beq	1137ec <__any_on+0x6c>
  1137dc:	eafffff5 	b	1137b8 <__any_on+0x38>
  1137e0:	e5332004 	ldr	r2, [r3, #-4]!
  1137e4:	e3520000 	cmp	r2, #0
  1137e8:	1afffff2 	bne	1137b8 <__any_on+0x38>
  1137ec:	e15c0003 	cmp	ip, r3
  1137f0:	3afffffa 	bcc	1137e0 <__any_on+0x60>
  1137f4:	e12fff1e 	bx	lr
  1137f8:	e3a00000 	mov	r0, #0
  1137fc:	e12fff1e 	bx	lr

00113800 <_realloc_r>:
  113800:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  113804:	e2516000 	subs	r6, r1, #0
  113808:	e24dd00c 	sub	sp, sp, #12
  11380c:	e1a07002 	mov	r7, r2
  113810:	0a00007c 	beq	113a08 <_realloc_r+0x208>
  113814:	e287400b 	add	r4, r7, #11
  113818:	e1a08000 	mov	r8, r0
  11381c:	ebfffca6 	bl	112abc <__malloc_lock>
  113820:	e3540016 	cmp	r4, #22
  113824:	e5163004 	ldr	r3, [r6, #-4]
  113828:	83c44007 	bichi	r4, r4, #7
  11382c:	93a02010 	movls	r2, #16
  113830:	81a00fa4 	lsrhi	r0, r4, #31
  113834:	93a00000 	movls	r0, #0
  113838:	91a04002 	movls	r4, r2
  11383c:	81a02004 	movhi	r2, r4
  113840:	e1540007 	cmp	r4, r7
  113844:	33800001 	orrcc	r0, r0, #1
  113848:	e3500000 	cmp	r0, #0
  11384c:	e3c35003 	bic	r5, r3, #3
  113850:	13a0300c 	movne	r3, #12
  113854:	e2469008 	sub	r9, r6, #8
  113858:	13a00000 	movne	r0, #0
  11385c:	15883000 	strne	r3, [r8]
  113860:	1a00000f 	bne	1138a4 <_realloc_r+0xa4>
  113864:	e1550002 	cmp	r5, r2
  113868:	ba00000f 	blt	1138ac <_realloc_r+0xac>
  11386c:	e1a07006 	mov	r7, r6
  113870:	e0642005 	rsb	r2, r4, r5
  113874:	e2033001 	and	r3, r3, #1
  113878:	e352000f 	cmp	r2, #15
  11387c:	8a000054 	bhi	1139d4 <_realloc_r+0x1d4>
  113880:	e0892005 	add	r2, r9, r5
  113884:	e1835005 	orr	r5, r3, r5
  113888:	e5895004 	str	r5, [r9, #4]
  11388c:	e5923004 	ldr	r3, [r2, #4]
  113890:	e3833001 	orr	r3, r3, #1
  113894:	e5823004 	str	r3, [r2, #4]
  113898:	e1a00008 	mov	r0, r8
  11389c:	ebfffc89 	bl	112ac8 <__malloc_unlock>
  1138a0:	e1a00007 	mov	r0, r7
  1138a4:	e28dd00c 	add	sp, sp, #12
  1138a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1138ac:	e307b83c 	movw	fp, #30780	; 0x783c
  1138b0:	e0891005 	add	r1, r9, r5
  1138b4:	e340b011 	movt	fp, #17
  1138b8:	e59b0008 	ldr	r0, [fp, #8]
  1138bc:	e1510000 	cmp	r1, r0
  1138c0:	0a0000bc 	beq	113bb8 <_realloc_r+0x3b8>
  1138c4:	e591c004 	ldr	ip, [r1, #4]
  1138c8:	e3cc0001 	bic	r0, ip, #1
  1138cc:	e0810000 	add	r0, r1, r0
  1138d0:	e5900004 	ldr	r0, [r0, #4]
  1138d4:	e3100001 	tst	r0, #1
  1138d8:	0a000032 	beq	1139a8 <_realloc_r+0x1a8>
  1138dc:	e3130001 	tst	r3, #1
  1138e0:	0a000083 	beq	113af4 <_realloc_r+0x2f4>
  1138e4:	e1a01007 	mov	r1, r7
  1138e8:	e1a00008 	mov	r0, r8
  1138ec:	ebfff96f 	bl	111eb0 <_malloc_r>
  1138f0:	e2507000 	subs	r7, r0, #0
  1138f4:	0affffe7 	beq	113898 <_realloc_r+0x98>
  1138f8:	e5163004 	ldr	r3, [r6, #-4]
  1138fc:	e2471008 	sub	r1, r7, #8
  113900:	e3c32001 	bic	r2, r3, #1
  113904:	e0892002 	add	r2, r9, r2
  113908:	e1510002 	cmp	r1, r2
  11390c:	0a000102 	beq	113d1c <_realloc_r+0x51c>
  113910:	e2452004 	sub	r2, r5, #4
  113914:	e3520024 	cmp	r2, #36	; 0x24
  113918:	8a0000fc 	bhi	113d10 <_realloc_r+0x510>
  11391c:	e3520013 	cmp	r2, #19
  113920:	91a03007 	movls	r3, r7
  113924:	91a02006 	movls	r2, r6
  113928:	9a000014 	bls	113980 <_realloc_r+0x180>
  11392c:	e5963000 	ldr	r3, [r6]
  113930:	e352001b 	cmp	r2, #27
  113934:	92862008 	addls	r2, r6, #8
  113938:	e5873000 	str	r3, [r7]
  11393c:	e5963004 	ldr	r3, [r6, #4]
  113940:	e5873004 	str	r3, [r7, #4]
  113944:	92873008 	addls	r3, r7, #8
  113948:	9a00000c 	bls	113980 <_realloc_r+0x180>
  11394c:	e5963008 	ldr	r3, [r6, #8]
  113950:	e3520024 	cmp	r2, #36	; 0x24
  113954:	12862010 	addne	r2, r6, #16
  113958:	02862018 	addeq	r2, r6, #24
  11395c:	e5873008 	str	r3, [r7, #8]
  113960:	e596300c 	ldr	r3, [r6, #12]
  113964:	e587300c 	str	r3, [r7, #12]
  113968:	12873010 	addne	r3, r7, #16
  11396c:	05961010 	ldreq	r1, [r6, #16]
  113970:	02873018 	addeq	r3, r7, #24
  113974:	05871010 	streq	r1, [r7, #16]
  113978:	05961014 	ldreq	r1, [r6, #20]
  11397c:	05871014 	streq	r1, [r7, #20]
  113980:	e5921000 	ldr	r1, [r2]
  113984:	e5831000 	str	r1, [r3]
  113988:	e5921004 	ldr	r1, [r2, #4]
  11398c:	e5831004 	str	r1, [r3, #4]
  113990:	e5922008 	ldr	r2, [r2, #8]
  113994:	e5832008 	str	r2, [r3, #8]
  113998:	e1a01006 	mov	r1, r6
  11399c:	e1a00008 	mov	r0, r8
  1139a0:	ebfff67c 	bl	111398 <_free_r>
  1139a4:	eaffffbb 	b	113898 <_realloc_r+0x98>
  1139a8:	e3ccc003 	bic	ip, ip, #3
  1139ac:	e08cc005 	add	ip, ip, r5
  1139b0:	e15c0002 	cmp	ip, r2
  1139b4:	ba000017 	blt	113a18 <_realloc_r+0x218>
  1139b8:	e591200c 	ldr	r2, [r1, #12]
  1139bc:	e1a07006 	mov	r7, r6
  1139c0:	e5911008 	ldr	r1, [r1, #8]
  1139c4:	e1a0500c 	mov	r5, ip
  1139c8:	e581200c 	str	r2, [r1, #12]
  1139cc:	e5821008 	str	r1, [r2, #8]
  1139d0:	eaffffa6 	b	113870 <_realloc_r+0x70>
  1139d4:	e0891004 	add	r1, r9, r4
  1139d8:	e1834004 	orr	r4, r3, r4
  1139dc:	e3823001 	orr	r3, r2, #1
  1139e0:	e0812002 	add	r2, r1, r2
  1139e4:	e5894004 	str	r4, [r9, #4]
  1139e8:	e2811008 	add	r1, r1, #8
  1139ec:	e5013004 	str	r3, [r1, #-4]
  1139f0:	e1a00008 	mov	r0, r8
  1139f4:	e5923004 	ldr	r3, [r2, #4]
  1139f8:	e3833001 	orr	r3, r3, #1
  1139fc:	e5823004 	str	r3, [r2, #4]
  113a00:	ebfff664 	bl	111398 <_free_r>
  113a04:	eaffffa3 	b	113898 <_realloc_r+0x98>
  113a08:	e1a01002 	mov	r1, r2
  113a0c:	e28dd00c 	add	sp, sp, #12
  113a10:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  113a14:	eafff925 	b	111eb0 <_malloc_r>
  113a18:	e3130001 	tst	r3, #1
  113a1c:	1affffb0 	bne	1138e4 <_realloc_r+0xe4>
  113a20:	e516a008 	ldr	sl, [r6, #-8]
  113a24:	e06aa009 	rsb	sl, sl, r9
  113a28:	e59a0004 	ldr	r0, [sl, #4]
  113a2c:	e3c00003 	bic	r0, r0, #3
  113a30:	e08cc000 	add	ip, ip, r0
  113a34:	e15c0002 	cmp	ip, r2
  113a38:	ba000031 	blt	113b04 <_realloc_r+0x304>
  113a3c:	e591300c 	ldr	r3, [r1, #12]
  113a40:	e1a0700a 	mov	r7, sl
  113a44:	e5911008 	ldr	r1, [r1, #8]
  113a48:	e2452004 	sub	r2, r5, #4
  113a4c:	e3520024 	cmp	r2, #36	; 0x24
  113a50:	e581300c 	str	r3, [r1, #12]
  113a54:	e5831008 	str	r1, [r3, #8]
  113a58:	e59a300c 	ldr	r3, [sl, #12]
  113a5c:	e5b71008 	ldr	r1, [r7, #8]!
  113a60:	e581300c 	str	r3, [r1, #12]
  113a64:	e5831008 	str	r1, [r3, #8]
  113a68:	8a0000b0 	bhi	113d30 <_realloc_r+0x530>
  113a6c:	e3520013 	cmp	r2, #19
  113a70:	91a03007 	movls	r3, r7
  113a74:	9a000014 	bls	113acc <_realloc_r+0x2cc>
  113a78:	e5963000 	ldr	r3, [r6]
  113a7c:	e352001b 	cmp	r2, #27
  113a80:	e58a3008 	str	r3, [sl, #8]
  113a84:	e5963004 	ldr	r3, [r6, #4]
  113a88:	92866008 	addls	r6, r6, #8
  113a8c:	e58a300c 	str	r3, [sl, #12]
  113a90:	928a3010 	addls	r3, sl, #16
  113a94:	9a00000c 	bls	113acc <_realloc_r+0x2cc>
  113a98:	e5963008 	ldr	r3, [r6, #8]
  113a9c:	e3520024 	cmp	r2, #36	; 0x24
  113aa0:	e58a3010 	str	r3, [sl, #16]
  113aa4:	e596300c 	ldr	r3, [r6, #12]
  113aa8:	12866010 	addne	r6, r6, #16
  113aac:	e58a3014 	str	r3, [sl, #20]
  113ab0:	128a3018 	addne	r3, sl, #24
  113ab4:	05962010 	ldreq	r2, [r6, #16]
  113ab8:	028a3020 	addeq	r3, sl, #32
  113abc:	058a2018 	streq	r2, [sl, #24]
  113ac0:	05962014 	ldreq	r2, [r6, #20]
  113ac4:	02866018 	addeq	r6, r6, #24
  113ac8:	058a201c 	streq	r2, [sl, #28]
  113acc:	e5962000 	ldr	r2, [r6]
  113ad0:	e1a0500c 	mov	r5, ip
  113ad4:	e1a0900a 	mov	r9, sl
  113ad8:	e5832000 	str	r2, [r3]
  113adc:	e5962004 	ldr	r2, [r6, #4]
  113ae0:	e5832004 	str	r2, [r3, #4]
  113ae4:	e5962008 	ldr	r2, [r6, #8]
  113ae8:	e5832008 	str	r2, [r3, #8]
  113aec:	e59a3004 	ldr	r3, [sl, #4]
  113af0:	eaffff5e 	b	113870 <_realloc_r+0x70>
  113af4:	e516a008 	ldr	sl, [r6, #-8]
  113af8:	e06aa009 	rsb	sl, sl, r9
  113afc:	e59a0004 	ldr	r0, [sl, #4]
  113b00:	e3c00003 	bic	r0, r0, #3
  113b04:	e0853000 	add	r3, r5, r0
  113b08:	e1530002 	cmp	r3, r2
  113b0c:	baffff74 	blt	1138e4 <_realloc_r+0xe4>
  113b10:	e1a0700a 	mov	r7, sl
  113b14:	e59a100c 	ldr	r1, [sl, #12]
  113b18:	e5b70008 	ldr	r0, [r7, #8]!
  113b1c:	e2452004 	sub	r2, r5, #4
  113b20:	e3520024 	cmp	r2, #36	; 0x24
  113b24:	e580100c 	str	r1, [r0, #12]
  113b28:	e5810008 	str	r0, [r1, #8]
  113b2c:	8a000063 	bhi	113cc0 <_realloc_r+0x4c0>
  113b30:	e3520013 	cmp	r2, #19
  113b34:	91a02007 	movls	r2, r7
  113b38:	9a000014 	bls	113b90 <_realloc_r+0x390>
  113b3c:	e5961000 	ldr	r1, [r6]
  113b40:	e352001b 	cmp	r2, #27
  113b44:	928a2010 	addls	r2, sl, #16
  113b48:	e58a1008 	str	r1, [sl, #8]
  113b4c:	e5961004 	ldr	r1, [r6, #4]
  113b50:	92866008 	addls	r6, r6, #8
  113b54:	e58a100c 	str	r1, [sl, #12]
  113b58:	9a00000c 	bls	113b90 <_realloc_r+0x390>
  113b5c:	e5961008 	ldr	r1, [r6, #8]
  113b60:	e3520024 	cmp	r2, #36	; 0x24
  113b64:	e58a1010 	str	r1, [sl, #16]
  113b68:	e596200c 	ldr	r2, [r6, #12]
  113b6c:	12866010 	addne	r6, r6, #16
  113b70:	e58a2014 	str	r2, [sl, #20]
  113b74:	128a2018 	addne	r2, sl, #24
  113b78:	05961010 	ldreq	r1, [r6, #16]
  113b7c:	028a2020 	addeq	r2, sl, #32
  113b80:	058a1018 	streq	r1, [sl, #24]
  113b84:	05961014 	ldreq	r1, [r6, #20]
  113b88:	02866018 	addeq	r6, r6, #24
  113b8c:	058a101c 	streq	r1, [sl, #28]
  113b90:	e5961000 	ldr	r1, [r6]
  113b94:	e1a05003 	mov	r5, r3
  113b98:	e1a0900a 	mov	r9, sl
  113b9c:	e5821000 	str	r1, [r2]
  113ba0:	e5963004 	ldr	r3, [r6, #4]
  113ba4:	e5823004 	str	r3, [r2, #4]
  113ba8:	e5963008 	ldr	r3, [r6, #8]
  113bac:	e5823008 	str	r3, [r2, #8]
  113bb0:	e59a3004 	ldr	r3, [sl, #4]
  113bb4:	eaffff2d 	b	113870 <_realloc_r+0x70>
  113bb8:	e5911004 	ldr	r1, [r1, #4]
  113bbc:	e284c010 	add	ip, r4, #16
  113bc0:	e3c11003 	bic	r1, r1, #3
  113bc4:	e0811005 	add	r1, r1, r5
  113bc8:	e151000c 	cmp	r1, ip
  113bcc:	aa000042 	bge	113cdc <_realloc_r+0x4dc>
  113bd0:	e3130001 	tst	r3, #1
  113bd4:	1affff42 	bne	1138e4 <_realloc_r+0xe4>
  113bd8:	e516a008 	ldr	sl, [r6, #-8]
  113bdc:	e06aa009 	rsb	sl, sl, r9
  113be0:	e59a0004 	ldr	r0, [sl, #4]
  113be4:	e3c00003 	bic	r0, r0, #3
  113be8:	e0803001 	add	r3, r0, r1
  113bec:	e15c0003 	cmp	ip, r3
  113bf0:	caffffc3 	bgt	113b04 <_realloc_r+0x304>
  113bf4:	e1a0700a 	mov	r7, sl
  113bf8:	e59a100c 	ldr	r1, [sl, #12]
  113bfc:	e5b70008 	ldr	r0, [r7, #8]!
  113c00:	e2452004 	sub	r2, r5, #4
  113c04:	e3520024 	cmp	r2, #36	; 0x24
  113c08:	e580100c 	str	r1, [r0, #12]
  113c0c:	e5810008 	str	r0, [r1, #8]
  113c10:	8a00004d 	bhi	113d4c <_realloc_r+0x54c>
  113c14:	e3520013 	cmp	r2, #19
  113c18:	91a02007 	movls	r2, r7
  113c1c:	9a000014 	bls	113c74 <_realloc_r+0x474>
  113c20:	e5961000 	ldr	r1, [r6]
  113c24:	e352001b 	cmp	r2, #27
  113c28:	928a2010 	addls	r2, sl, #16
  113c2c:	e58a1008 	str	r1, [sl, #8]
  113c30:	e5961004 	ldr	r1, [r6, #4]
  113c34:	92866008 	addls	r6, r6, #8
  113c38:	e58a100c 	str	r1, [sl, #12]
  113c3c:	9a00000c 	bls	113c74 <_realloc_r+0x474>
  113c40:	e5961008 	ldr	r1, [r6, #8]
  113c44:	e3520024 	cmp	r2, #36	; 0x24
  113c48:	e58a1010 	str	r1, [sl, #16]
  113c4c:	e596200c 	ldr	r2, [r6, #12]
  113c50:	12866010 	addne	r6, r6, #16
  113c54:	e58a2014 	str	r2, [sl, #20]
  113c58:	128a2018 	addne	r2, sl, #24
  113c5c:	05961010 	ldreq	r1, [r6, #16]
  113c60:	028a2020 	addeq	r2, sl, #32
  113c64:	058a1018 	streq	r1, [sl, #24]
  113c68:	05961014 	ldreq	r1, [r6, #20]
  113c6c:	02866018 	addeq	r6, r6, #24
  113c70:	058a101c 	streq	r1, [sl, #28]
  113c74:	e5961000 	ldr	r1, [r6]
  113c78:	e5821000 	str	r1, [r2]
  113c7c:	e5961004 	ldr	r1, [r6, #4]
  113c80:	e5821004 	str	r1, [r2, #4]
  113c84:	e5961008 	ldr	r1, [r6, #8]
  113c88:	e5821008 	str	r1, [r2, #8]
  113c8c:	e0643003 	rsb	r3, r4, r3
  113c90:	e08a2004 	add	r2, sl, r4
  113c94:	e3833001 	orr	r3, r3, #1
  113c98:	e58b2008 	str	r2, [fp, #8]
  113c9c:	e5823004 	str	r3, [r2, #4]
  113ca0:	e1a00008 	mov	r0, r8
  113ca4:	e59a3004 	ldr	r3, [sl, #4]
  113ca8:	e2033001 	and	r3, r3, #1
  113cac:	e1834004 	orr	r4, r3, r4
  113cb0:	e58a4004 	str	r4, [sl, #4]
  113cb4:	ebfffb83 	bl	112ac8 <__malloc_unlock>
  113cb8:	e1a00007 	mov	r0, r7
  113cbc:	eafffef8 	b	1138a4 <_realloc_r+0xa4>
  113cc0:	e1a01006 	mov	r1, r6
  113cc4:	e1a00007 	mov	r0, r7
  113cc8:	e1a05003 	mov	r5, r3
  113ccc:	e1a0900a 	mov	r9, sl
  113cd0:	ebfffaf1 	bl	11289c <memmove>
  113cd4:	e59a3004 	ldr	r3, [sl, #4]
  113cd8:	eafffee4 	b	113870 <_realloc_r+0x70>
  113cdc:	e0643001 	rsb	r3, r4, r1
  113ce0:	e0899004 	add	r9, r9, r4
  113ce4:	e3833001 	orr	r3, r3, #1
  113ce8:	e58b9008 	str	r9, [fp, #8]
  113cec:	e5893004 	str	r3, [r9, #4]
  113cf0:	e1a00008 	mov	r0, r8
  113cf4:	e5163004 	ldr	r3, [r6, #-4]
  113cf8:	e2033001 	and	r3, r3, #1
  113cfc:	e1834004 	orr	r4, r3, r4
  113d00:	e5064004 	str	r4, [r6, #-4]
  113d04:	ebfffb6f 	bl	112ac8 <__malloc_unlock>
  113d08:	e1a00006 	mov	r0, r6
  113d0c:	eafffee4 	b	1138a4 <_realloc_r+0xa4>
  113d10:	e1a01006 	mov	r1, r6
  113d14:	ebfffae0 	bl	11289c <memmove>
  113d18:	eaffff1e 	b	113998 <_realloc_r+0x198>
  113d1c:	e5172004 	ldr	r2, [r7, #-4]
  113d20:	e1a07006 	mov	r7, r6
  113d24:	e3c22003 	bic	r2, r2, #3
  113d28:	e0855002 	add	r5, r5, r2
  113d2c:	eafffecf 	b	113870 <_realloc_r+0x70>
  113d30:	e1a01006 	mov	r1, r6
  113d34:	e1a00007 	mov	r0, r7
  113d38:	e1a0500c 	mov	r5, ip
  113d3c:	e1a0900a 	mov	r9, sl
  113d40:	ebfffad5 	bl	11289c <memmove>
  113d44:	e59a3004 	ldr	r3, [sl, #4]
  113d48:	eafffec8 	b	113870 <_realloc_r+0x70>
  113d4c:	e1a01006 	mov	r1, r6
  113d50:	e1a00007 	mov	r0, r7
  113d54:	e58d3004 	str	r3, [sp, #4]
  113d58:	ebfffacf 	bl	11289c <memmove>
  113d5c:	e59d3004 	ldr	r3, [sp, #4]
  113d60:	eaffffc9 	b	113c8c <_realloc_r+0x48c>

00113d64 <cleanup_glue>:
  113d64:	e92d4070 	push	{r4, r5, r6, lr}
  113d68:	e1a04001 	mov	r4, r1
  113d6c:	e5911000 	ldr	r1, [r1]
  113d70:	e1a05000 	mov	r5, r0
  113d74:	e3510000 	cmp	r1, #0
  113d78:	0a000000 	beq	113d80 <cleanup_glue+0x1c>
  113d7c:	ebfffff8 	bl	113d64 <cleanup_glue>
  113d80:	e1a01004 	mov	r1, r4
  113d84:	e1a00005 	mov	r0, r5
  113d88:	e8bd4070 	pop	{r4, r5, r6, lr}
  113d8c:	eafff581 	b	111398 <_free_r>

00113d90 <_reclaim_reent>:
  113d90:	e3073394 	movw	r3, #29588	; 0x7394
  113d94:	e3403011 	movt	r3, #17
  113d98:	e5933000 	ldr	r3, [r3]
  113d9c:	e1530000 	cmp	r3, r0
  113da0:	012fff1e 	bxeq	lr
  113da4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  113da8:	e92d4070 	push	{r4, r5, r6, lr}
  113dac:	e1a05000 	mov	r5, r0
  113db0:	e3530000 	cmp	r3, #0
  113db4:	0a00000f 	beq	113df8 <_reclaim_reent+0x68>
  113db8:	e3a06000 	mov	r6, #0
  113dbc:	e7931006 	ldr	r1, [r3, r6]
  113dc0:	e3510000 	cmp	r1, #0
  113dc4:	0a000005 	beq	113de0 <_reclaim_reent+0x50>
  113dc8:	e5914000 	ldr	r4, [r1]
  113dcc:	e1a00005 	mov	r0, r5
  113dd0:	ebfff570 	bl	111398 <_free_r>
  113dd4:	e2541000 	subs	r1, r4, #0
  113dd8:	1afffffa 	bne	113dc8 <_reclaim_reent+0x38>
  113ddc:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  113de0:	e2866004 	add	r6, r6, #4
  113de4:	e3560080 	cmp	r6, #128	; 0x80
  113de8:	1afffff3 	bne	113dbc <_reclaim_reent+0x2c>
  113dec:	e1a01003 	mov	r1, r3
  113df0:	e1a00005 	mov	r0, r5
  113df4:	ebfff567 	bl	111398 <_free_r>
  113df8:	e5951040 	ldr	r1, [r5, #64]	; 0x40
  113dfc:	e3510000 	cmp	r1, #0
  113e00:	0a000001 	beq	113e0c <_reclaim_reent+0x7c>
  113e04:	e1a00005 	mov	r0, r5
  113e08:	ebfff562 	bl	111398 <_free_r>
  113e0c:	e5951148 	ldr	r1, [r5, #328]	; 0x148
  113e10:	e3510000 	cmp	r1, #0
  113e14:	0a000008 	beq	113e3c <_reclaim_reent+0xac>
  113e18:	e2856f53 	add	r6, r5, #332	; 0x14c
  113e1c:	e1510006 	cmp	r1, r6
  113e20:	0a000005 	beq	113e3c <_reclaim_reent+0xac>
  113e24:	e5914000 	ldr	r4, [r1]
  113e28:	e1a00005 	mov	r0, r5
  113e2c:	ebfff559 	bl	111398 <_free_r>
  113e30:	e1560004 	cmp	r6, r4
  113e34:	e1a01004 	mov	r1, r4
  113e38:	1afffff9 	bne	113e24 <_reclaim_reent+0x94>
  113e3c:	e5951054 	ldr	r1, [r5, #84]	; 0x54
  113e40:	e3510000 	cmp	r1, #0
  113e44:	0a000001 	beq	113e50 <_reclaim_reent+0xc0>
  113e48:	e1a00005 	mov	r0, r5
  113e4c:	ebfff551 	bl	111398 <_free_r>
  113e50:	e5953038 	ldr	r3, [r5, #56]	; 0x38
  113e54:	e3530000 	cmp	r3, #0
  113e58:	08bd8070 	popeq	{r4, r5, r6, pc}
  113e5c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
  113e60:	e1a00005 	mov	r0, r5
  113e64:	e12fff33 	blx	r3
  113e68:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
  113e6c:	e3510000 	cmp	r1, #0
  113e70:	08bd8070 	popeq	{r4, r5, r6, pc}
  113e74:	e1a00005 	mov	r0, r5
  113e78:	e8bd4070 	pop	{r4, r5, r6, lr}
  113e7c:	eaffffb8 	b	113d64 <cleanup_glue>

00113e80 <__fpclassifyd>:
  113e80:	e1a03000 	mov	r3, r0
  113e84:	e1912003 	orrs	r2, r1, r3
  113e88:	1a000001 	bne	113e94 <__fpclassifyd+0x14>
  113e8c:	e3a00002 	mov	r0, #2
  113e90:	e12fff1e 	bx	lr
  113e94:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
  113e98:	03530000 	cmpeq	r3, #0
  113e9c:	e16f3f13 	clz	r3, r3
  113ea0:	e1a032a3 	lsr	r3, r3, #5
  113ea4:	0afffff8 	beq	113e8c <__fpclassifyd+0xc>
  113ea8:	e3c10102 	bic	r0, r1, #-2147483648	; 0x80000000
  113eac:	e30f2fff 	movw	r2, #65535	; 0xffff
  113eb0:	e2401601 	sub	r1, r0, #1048576	; 0x100000
  113eb4:	e3472fdf 	movt	r2, #32735	; 0x7fdf
  113eb8:	e1510002 	cmp	r1, r2
  113ebc:	8a000001 	bhi	113ec8 <__fpclassifyd+0x48>
  113ec0:	e3a00004 	mov	r0, #4
  113ec4:	e12fff1e 	bx	lr
  113ec8:	e3500601 	cmp	r0, #1048576	; 0x100000
  113ecc:	2a000001 	bcs	113ed8 <__fpclassifyd+0x58>
  113ed0:	e3a00003 	mov	r0, #3
  113ed4:	e12fff1e 	bx	lr
  113ed8:	e3a02000 	mov	r2, #0
  113edc:	e3472ff0 	movt	r2, #32752	; 0x7ff0
  113ee0:	e1500002 	cmp	r0, r2
  113ee4:	13a00000 	movne	r0, #0
  113ee8:	02030001 	andeq	r0, r3, #1
  113eec:	e12fff1e 	bx	lr

00113ef0 <_sbrk_r>:
  113ef0:	e92d4070 	push	{r4, r5, r6, lr}
  113ef4:	e30945f0 	movw	r4, #38384	; 0x95f0
  113ef8:	e3a03000 	mov	r3, #0
  113efc:	e1a05000 	mov	r5, r0
  113f00:	e3404011 	movt	r4, #17
  113f04:	e1a00001 	mov	r0, r1
  113f08:	e5843000 	str	r3, [r4]
  113f0c:	eb000a41 	bl	116818 <_sbrk>
  113f10:	e3700001 	cmn	r0, #1
  113f14:	18bd8070 	popne	{r4, r5, r6, pc}
  113f18:	e5943000 	ldr	r3, [r4]
  113f1c:	e3530000 	cmp	r3, #0
  113f20:	15853000 	strne	r3, [r5]
  113f24:	e8bd8070 	pop	{r4, r5, r6, pc}

00113f28 <__sread>:
  113f28:	e92d4010 	push	{r4, lr}
  113f2c:	e1a04001 	mov	r4, r1
  113f30:	e1d110fe 	ldrsh	r1, [r1, #14]
  113f34:	eb0007c2 	bl	115e44 <_read_r>
  113f38:	e3500000 	cmp	r0, #0
  113f3c:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
  113f40:	b1d430bc 	ldrhlt	r3, [r4, #12]
  113f44:	a0833000 	addge	r3, r3, r0
  113f48:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
  113f4c:	a5843050 	strge	r3, [r4, #80]	; 0x50
  113f50:	b1c430bc 	strhlt	r3, [r4, #12]
  113f54:	e8bd8010 	pop	{r4, pc}

00113f58 <__seofread>:
  113f58:	e3a00000 	mov	r0, #0
  113f5c:	e12fff1e 	bx	lr

00113f60 <__swrite>:
  113f60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  113f64:	e1a06002 	mov	r6, r2
  113f68:	e1d120bc 	ldrh	r2, [r1, #12]
  113f6c:	e1a04001 	mov	r4, r1
  113f70:	e1a07003 	mov	r7, r3
  113f74:	e1a05000 	mov	r5, r0
  113f78:	e3120c01 	tst	r2, #256	; 0x100
  113f7c:	0a000004 	beq	113f94 <__swrite+0x34>
  113f80:	e3a02000 	mov	r2, #0
  113f84:	e3a03002 	mov	r3, #2
  113f88:	e1d110fe 	ldrsh	r1, [r1, #14]
  113f8c:	eb00079b 	bl	115e00 <_lseek_r>
  113f90:	e1d420bc 	ldrh	r2, [r4, #12]
  113f94:	e3c22a01 	bic	r2, r2, #4096	; 0x1000
  113f98:	e1a03007 	mov	r3, r7
  113f9c:	e1c420bc 	strh	r2, [r4, #12]
  113fa0:	e1a00005 	mov	r0, r5
  113fa4:	e1a02006 	mov	r2, r6
  113fa8:	e1d410fe 	ldrsh	r1, [r4, #14]
  113fac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  113fb0:	ea000661 	b	11593c <_write_r>

00113fb4 <__sseek>:
  113fb4:	e92d4010 	push	{r4, lr}
  113fb8:	e1a04001 	mov	r4, r1
  113fbc:	e1d110fe 	ldrsh	r1, [r1, #14]
  113fc0:	eb00078e 	bl	115e00 <_lseek_r>
  113fc4:	e1d430bc 	ldrh	r3, [r4, #12]
  113fc8:	e3700001 	cmn	r0, #1
  113fcc:	15840050 	strne	r0, [r4, #80]	; 0x50
  113fd0:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
  113fd4:	13833a01 	orrne	r3, r3, #4096	; 0x1000
  113fd8:	e1c430bc 	strh	r3, [r4, #12]
  113fdc:	e8bd8010 	pop	{r4, pc}

00113fe0 <__sclose>:
  113fe0:	e1d110fe 	ldrsh	r1, [r1, #14]
  113fe4:	ea000689 	b	115a10 <_close_r>
	...
  114000:	eba2 0003 	sub.w	r0, r2, r3
  114004:	4770      	bx	lr
  114006:	bf00      	nop

00114008 <strcmp>:
  114008:	7802      	ldrb	r2, [r0, #0]
  11400a:	780b      	ldrb	r3, [r1, #0]
  11400c:	2a01      	cmp	r2, #1
  11400e:	bf28      	it	cs
  114010:	429a      	cmpcs	r2, r3
  114012:	d1f5      	bne.n	114000 <__sclose+0x20>
  114014:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  114018:	ea40 0401 	orr.w	r4, r0, r1
  11401c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  114020:	f06f 0c00 	mvn.w	ip, #0
  114024:	ea4f 7244 	mov.w	r2, r4, lsl #29
  114028:	b312      	cbz	r2, 114070 <strcmp+0x68>
  11402a:	ea80 0401 	eor.w	r4, r0, r1
  11402e:	f014 0f07 	tst.w	r4, #7
  114032:	d16a      	bne.n	11410a <strcmp+0x102>
  114034:	f000 0407 	and.w	r4, r0, #7
  114038:	f020 0007 	bic.w	r0, r0, #7
  11403c:	f004 0503 	and.w	r5, r4, #3
  114040:	f021 0107 	bic.w	r1, r1, #7
  114044:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  114048:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  11404c:	f014 0f04 	tst.w	r4, #4
  114050:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  114054:	fa0c f405 	lsl.w	r4, ip, r5
  114058:	ea62 0204 	orn	r2, r2, r4
  11405c:	ea66 0604 	orn	r6, r6, r4
  114060:	d00a      	beq.n	114078 <strcmp+0x70>
  114062:	ea63 0304 	orn	r3, r3, r4
  114066:	4662      	mov	r2, ip
  114068:	ea67 0704 	orn	r7, r7, r4
  11406c:	4666      	mov	r6, ip
  11406e:	e003      	b.n	114078 <strcmp+0x70>
  114070:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  114074:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  114078:	fa82 f54c 	uadd8	r5, r2, ip
  11407c:	ea82 0406 	eor.w	r4, r2, r6
  114080:	faa4 f48c 	sel	r4, r4, ip
  114084:	bb6c      	cbnz	r4, 1140e2 <strcmp+0xda>
  114086:	fa83 f54c 	uadd8	r5, r3, ip
  11408a:	ea83 0507 	eor.w	r5, r3, r7
  11408e:	faa5 f58c 	sel	r5, r5, ip
  114092:	b995      	cbnz	r5, 1140ba <strcmp+0xb2>
  114094:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  114098:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  11409c:	fa82 f54c 	uadd8	r5, r2, ip
  1140a0:	ea82 0406 	eor.w	r4, r2, r6
  1140a4:	faa4 f48c 	sel	r4, r4, ip
  1140a8:	fa83 f54c 	uadd8	r5, r3, ip
  1140ac:	ea83 0507 	eor.w	r5, r3, r7
  1140b0:	faa5 f58c 	sel	r5, r5, ip
  1140b4:	4325      	orrs	r5, r4
  1140b6:	d0db      	beq.n	114070 <strcmp+0x68>
  1140b8:	b99c      	cbnz	r4, 1140e2 <strcmp+0xda>
  1140ba:	ba2d      	rev	r5, r5
  1140bc:	fab5 f485 	clz	r4, r5
  1140c0:	f024 0407 	bic.w	r4, r4, #7
  1140c4:	fa27 f104 	lsr.w	r1, r7, r4
  1140c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  1140cc:	fa23 f304 	lsr.w	r3, r3, r4
  1140d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  1140d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  1140d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  1140dc:	eba0 0001 	sub.w	r0, r0, r1
  1140e0:	4770      	bx	lr
  1140e2:	ba24      	rev	r4, r4
  1140e4:	fab4 f484 	clz	r4, r4
  1140e8:	f024 0407 	bic.w	r4, r4, #7
  1140ec:	fa26 f104 	lsr.w	r1, r6, r4
  1140f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  1140f4:	fa22 f204 	lsr.w	r2, r2, r4
  1140f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  1140fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  114100:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  114104:	eba0 0001 	sub.w	r0, r0, r1
  114108:	4770      	bx	lr
  11410a:	f014 0f03 	tst.w	r4, #3
  11410e:	d13c      	bne.n	11418a <strcmp+0x182>
  114110:	f010 0403 	ands.w	r4, r0, #3
  114114:	d128      	bne.n	114168 <strcmp+0x160>
  114116:	f850 2b08 	ldr.w	r2, [r0], #8
  11411a:	f851 3b08 	ldr.w	r3, [r1], #8
  11411e:	fa82 f54c 	uadd8	r5, r2, ip
  114122:	ea82 0503 	eor.w	r5, r2, r3
  114126:	faa5 f58c 	sel	r5, r5, ip
  11412a:	b95d      	cbnz	r5, 114144 <strcmp+0x13c>
  11412c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  114130:	f851 3c04 	ldr.w	r3, [r1, #-4]
  114134:	fa82 f54c 	uadd8	r5, r2, ip
  114138:	ea82 0503 	eor.w	r5, r2, r3
  11413c:	faa5 f58c 	sel	r5, r5, ip
  114140:	2d00      	cmp	r5, #0
  114142:	d0e8      	beq.n	114116 <strcmp+0x10e>
  114144:	ba2d      	rev	r5, r5
  114146:	fab5 f485 	clz	r4, r5
  11414a:	f024 0407 	bic.w	r4, r4, #7
  11414e:	fa23 f104 	lsr.w	r1, r3, r4
  114152:	fa22 f204 	lsr.w	r2, r2, r4
  114156:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  11415a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  11415e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  114162:	eba0 0001 	sub.w	r0, r0, r1
  114166:	4770      	bx	lr
  114168:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  11416c:	f020 0003 	bic.w	r0, r0, #3
  114170:	f850 2b08 	ldr.w	r2, [r0], #8
  114174:	f021 0103 	bic.w	r1, r1, #3
  114178:	f851 3b08 	ldr.w	r3, [r1], #8
  11417c:	fa0c f404 	lsl.w	r4, ip, r4
  114180:	ea62 0204 	orn	r2, r2, r4
  114184:	ea63 0304 	orn	r3, r3, r4
  114188:	e7c9      	b.n	11411e <strcmp+0x116>
  11418a:	f010 0403 	ands.w	r4, r0, #3
  11418e:	d01a      	beq.n	1141c6 <strcmp+0x1be>
  114190:	eba1 0104 	sub.w	r1, r1, r4
  114194:	f020 0003 	bic.w	r0, r0, #3
  114198:	07e4      	lsls	r4, r4, #31
  11419a:	f850 2b04 	ldr.w	r2, [r0], #4
  11419e:	d006      	beq.n	1141ae <strcmp+0x1a6>
  1141a0:	d20f      	bcs.n	1141c2 <strcmp+0x1ba>
  1141a2:	788b      	ldrb	r3, [r1, #2]
  1141a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  1141a8:	1ae4      	subs	r4, r4, r3
  1141aa:	d106      	bne.n	1141ba <strcmp+0x1b2>
  1141ac:	b12b      	cbz	r3, 1141ba <strcmp+0x1b2>
  1141ae:	78cb      	ldrb	r3, [r1, #3]
  1141b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  1141b4:	1ae4      	subs	r4, r4, r3
  1141b6:	d100      	bne.n	1141ba <strcmp+0x1b2>
  1141b8:	b91b      	cbnz	r3, 1141c2 <strcmp+0x1ba>
  1141ba:	4620      	mov	r0, r4
  1141bc:	f85d 4b10 	ldr.w	r4, [sp], #16
  1141c0:	4770      	bx	lr
  1141c2:	f101 0104 	add.w	r1, r1, #4
  1141c6:	f850 2b04 	ldr.w	r2, [r0], #4
  1141ca:	07cc      	lsls	r4, r1, #31
  1141cc:	f021 0103 	bic.w	r1, r1, #3
  1141d0:	f851 3b04 	ldr.w	r3, [r1], #4
  1141d4:	d848      	bhi.n	114268 <strcmp+0x260>
  1141d6:	d224      	bcs.n	114222 <strcmp+0x21a>
  1141d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  1141dc:	fa82 f54c 	uadd8	r5, r2, ip
  1141e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  1141e4:	faa5 f58c 	sel	r5, r5, ip
  1141e8:	d10a      	bne.n	114200 <strcmp+0x1f8>
  1141ea:	b965      	cbnz	r5, 114206 <strcmp+0x1fe>
  1141ec:	f851 3b04 	ldr.w	r3, [r1], #4
  1141f0:	ea84 0402 	eor.w	r4, r4, r2
  1141f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  1141f8:	d10e      	bne.n	114218 <strcmp+0x210>
  1141fa:	f850 2b04 	ldr.w	r2, [r0], #4
  1141fe:	e7eb      	b.n	1141d8 <strcmp+0x1d0>
  114200:	ea4f 2313 	mov.w	r3, r3, lsr #8
  114204:	e055      	b.n	1142b2 <strcmp+0x2aa>
  114206:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  11420a:	d14d      	bne.n	1142a8 <strcmp+0x2a0>
  11420c:	7808      	ldrb	r0, [r1, #0]
  11420e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  114212:	f1c0 0000 	rsb	r0, r0, #0
  114216:	4770      	bx	lr
  114218:	ea4f 6212 	mov.w	r2, r2, lsr #24
  11421c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  114220:	e047      	b.n	1142b2 <strcmp+0x2aa>
  114222:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  114226:	fa82 f54c 	uadd8	r5, r2, ip
  11422a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  11422e:	faa5 f58c 	sel	r5, r5, ip
  114232:	d10a      	bne.n	11424a <strcmp+0x242>
  114234:	b965      	cbnz	r5, 114250 <strcmp+0x248>
  114236:	f851 3b04 	ldr.w	r3, [r1], #4
  11423a:	ea84 0402 	eor.w	r4, r4, r2
  11423e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  114242:	d10c      	bne.n	11425e <strcmp+0x256>
  114244:	f850 2b04 	ldr.w	r2, [r0], #4
  114248:	e7eb      	b.n	114222 <strcmp+0x21a>
  11424a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  11424e:	e030      	b.n	1142b2 <strcmp+0x2aa>
  114250:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  114254:	d128      	bne.n	1142a8 <strcmp+0x2a0>
  114256:	880b      	ldrh	r3, [r1, #0]
  114258:	ea4f 4212 	mov.w	r2, r2, lsr #16
  11425c:	e029      	b.n	1142b2 <strcmp+0x2aa>
  11425e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  114262:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  114266:	e024      	b.n	1142b2 <strcmp+0x2aa>
  114268:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  11426c:	fa82 f54c 	uadd8	r5, r2, ip
  114270:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  114274:	faa5 f58c 	sel	r5, r5, ip
  114278:	d10a      	bne.n	114290 <strcmp+0x288>
  11427a:	b965      	cbnz	r5, 114296 <strcmp+0x28e>
  11427c:	f851 3b04 	ldr.w	r3, [r1], #4
  114280:	ea84 0402 	eor.w	r4, r4, r2
  114284:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  114288:	d109      	bne.n	11429e <strcmp+0x296>
  11428a:	f850 2b04 	ldr.w	r2, [r0], #4
  11428e:	e7eb      	b.n	114268 <strcmp+0x260>
  114290:	ea4f 6313 	mov.w	r3, r3, lsr #24
  114294:	e00d      	b.n	1142b2 <strcmp+0x2aa>
  114296:	f015 0fff 	tst.w	r5, #255	; 0xff
  11429a:	d105      	bne.n	1142a8 <strcmp+0x2a0>
  11429c:	680b      	ldr	r3, [r1, #0]
  11429e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  1142a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  1142a6:	e004      	b.n	1142b2 <strcmp+0x2aa>
  1142a8:	f04f 0000 	mov.w	r0, #0
  1142ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  1142b0:	4770      	bx	lr
  1142b2:	ba12      	rev	r2, r2
  1142b4:	ba1b      	rev	r3, r3
  1142b6:	fa82 f44c 	uadd8	r4, r2, ip
  1142ba:	ea82 0403 	eor.w	r4, r2, r3
  1142be:	faa4 f58c 	sel	r5, r4, ip
  1142c2:	fab5 f485 	clz	r4, r5
  1142c6:	fa02 f204 	lsl.w	r2, r2, r4
  1142ca:	fa03 f304 	lsl.w	r3, r3, r4
  1142ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
  1142d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  1142d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  1142da:	4770      	bx	lr

001142dc <__sprint_r.part.0>:
  1142dc:	e5913064 	ldr	r3, [r1, #100]	; 0x64
  1142e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1142e4:	e1a0a002 	mov	sl, r2
  1142e8:	e3130a02 	tst	r3, #8192	; 0x2000
  1142ec:	0a000021 	beq	114378 <__sprint_r.part.0+0x9c>
  1142f0:	e5923008 	ldr	r3, [r2, #8]
  1142f4:	e5929000 	ldr	r9, [r2]
  1142f8:	e3530000 	cmp	r3, #0
  1142fc:	11a07001 	movne	r7, r1
  114300:	11a08000 	movne	r8, r0
  114304:	12899008 	addne	r9, r9, #8
  114308:	0a000018 	beq	114370 <__sprint_r.part.0+0x94>
  11430c:	e9190060 	ldmdb	r9, {r5, r6}
  114310:	e1b06126 	lsrs	r6, r6, #2
  114314:	12455004 	subne	r5, r5, #4
  114318:	13a04000 	movne	r4, #0
  11431c:	1a000002 	bne	11432c <__sprint_r.part.0+0x50>
  114320:	ea00000d 	b	11435c <__sprint_r.part.0+0x80>
  114324:	e1560004 	cmp	r6, r4
  114328:	0a00000a 	beq	114358 <__sprint_r.part.0+0x7c>
  11432c:	e1a02007 	mov	r2, r7
  114330:	e5b51004 	ldr	r1, [r5, #4]!
  114334:	e1a00008 	mov	r0, r8
  114338:	e2844001 	add	r4, r4, #1
  11433c:	eb000658 	bl	115ca4 <_fputwc_r>
  114340:	e3700001 	cmn	r0, #1
  114344:	1afffff6 	bne	114324 <__sprint_r.part.0+0x48>
  114348:	e3a03000 	mov	r3, #0
  11434c:	e58a3008 	str	r3, [sl, #8]
  114350:	e58a3004 	str	r3, [sl, #4]
  114354:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  114358:	e59a3008 	ldr	r3, [sl, #8]
  11435c:	e0433106 	sub	r3, r3, r6, lsl #2
  114360:	e2899008 	add	r9, r9, #8
  114364:	e3530000 	cmp	r3, #0
  114368:	e58a3008 	str	r3, [sl, #8]
  11436c:	1affffe6 	bne	11430c <__sprint_r.part.0+0x30>
  114370:	e3a00000 	mov	r0, #0
  114374:	eafffff3 	b	114348 <__sprint_r.part.0+0x6c>
  114378:	ebfff4be 	bl	111678 <__sfvwrite_r>
  11437c:	eafffff1 	b	114348 <__sprint_r.part.0+0x6c>

00114380 <__sprint_r>:
  114380:	e5923008 	ldr	r3, [r2, #8]
  114384:	e3530000 	cmp	r3, #0
  114388:	0a000000 	beq	114390 <__sprint_r+0x10>
  11438c:	eaffffd2 	b	1142dc <__sprint_r.part.0>
  114390:	e5823004 	str	r3, [r2, #4]
  114394:	e1a00003 	mov	r0, r3
  114398:	e12fff1e 	bx	lr

0011439c <_vfiprintf_r>:
  11439c:	e250c000 	subs	ip, r0, #0
  1143a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1143a4:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
  1143a8:	e1a04003 	mov	r4, r3
  1143ac:	e1a09001 	mov	r9, r1
  1143b0:	e1a08002 	mov	r8, r2
  1143b4:	e58dc010 	str	ip, [sp, #16]
  1143b8:	e58d301c 	str	r3, [sp, #28]
  1143bc:	0a000002 	beq	1143cc <_vfiprintf_r+0x30>
  1143c0:	e59c3038 	ldr	r3, [ip, #56]	; 0x38
  1143c4:	e3530000 	cmp	r3, #0
  1143c8:	0a0000b4 	beq	1146a0 <_vfiprintf_r+0x304>
  1143cc:	e5993064 	ldr	r3, [r9, #100]	; 0x64
  1143d0:	e1d910bc 	ldrh	r1, [r9, #12]
  1143d4:	e3130001 	tst	r3, #1
  1143d8:	e6ff2071 	uxth	r2, r1
  1143dc:	1a000001 	bne	1143e8 <_vfiprintf_r+0x4c>
  1143e0:	e3120c02 	tst	r2, #512	; 0x200
  1143e4:	0a0000c2 	beq	1146f4 <_vfiprintf_r+0x358>
  1143e8:	e3120a02 	tst	r2, #8192	; 0x2000
  1143ec:	1a000005 	bne	114408 <_vfiprintf_r+0x6c>
  1143f0:	e3811a02 	orr	r1, r1, #8192	; 0x2000
  1143f4:	e5993064 	ldr	r3, [r9, #100]	; 0x64
  1143f8:	e6ff2071 	uxth	r2, r1
  1143fc:	e1c910bc 	strh	r1, [r9, #12]
  114400:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  114404:	e5893064 	str	r3, [r9, #100]	; 0x64
  114408:	e3120008 	tst	r2, #8
  11440c:	0a000095 	beq	114668 <_vfiprintf_r+0x2cc>
  114410:	e5993010 	ldr	r3, [r9, #16]
  114414:	e3530000 	cmp	r3, #0
  114418:	0a000092 	beq	114668 <_vfiprintf_r+0x2cc>
  11441c:	e202301a 	and	r3, r2, #26
  114420:	e353000a 	cmp	r3, #10
  114424:	0a00009f 	beq	1146a8 <_vfiprintf_r+0x30c>
  114428:	e28db070 	add	fp, sp, #112	; 0x70
  11442c:	e3a03000 	mov	r3, #0
  114430:	e1a0a00b 	mov	sl, fp
  114434:	e58d3014 	str	r3, [sp, #20]
  114438:	e58d3044 	str	r3, [sp, #68]	; 0x44
  11443c:	e58d3040 	str	r3, [sp, #64]	; 0x40
  114440:	e58db03c 	str	fp, [sp, #60]	; 0x3c
  114444:	e58d9004 	str	r9, [sp, #4]
  114448:	e5d83000 	ldrb	r3, [r8]
  11444c:	e1a04008 	mov	r4, r8
  114450:	e3530000 	cmp	r3, #0
  114454:	13530025 	cmpne	r3, #37	; 0x25
  114458:	0a000013 	beq	1144ac <_vfiprintf_r+0x110>
  11445c:	e5f43001 	ldrb	r3, [r4, #1]!
  114460:	e3530000 	cmp	r3, #0
  114464:	13530025 	cmpne	r3, #37	; 0x25
  114468:	1afffffb 	bne	11445c <_vfiprintf_r+0xc0>
  11446c:	e0545008 	subs	r5, r4, r8
  114470:	0a00000d 	beq	1144ac <_vfiprintf_r+0x110>
  114474:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  114478:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  11447c:	e58a8000 	str	r8, [sl]
  114480:	e2833001 	add	r3, r3, #1
  114484:	e58a5004 	str	r5, [sl, #4]
  114488:	e3530007 	cmp	r3, #7
  11448c:	e0852002 	add	r2, r5, r2
  114490:	e58d3040 	str	r3, [sp, #64]	; 0x40
  114494:	d28aa008 	addle	sl, sl, #8
  114498:	e58d2044 	str	r2, [sp, #68]	; 0x44
  11449c:	ca00006c 	bgt	114654 <_vfiprintf_r+0x2b8>
  1144a0:	e59d3014 	ldr	r3, [sp, #20]
  1144a4:	e0833005 	add	r3, r3, r5
  1144a8:	e58d3014 	str	r3, [sp, #20]
  1144ac:	e5d43000 	ldrb	r3, [r4]
  1144b0:	e3530000 	cmp	r3, #0
  1144b4:	0a00049a 	beq	115724 <_vfiprintf_r+0x1388>
  1144b8:	e3a03000 	mov	r3, #0
  1144bc:	e3a01000 	mov	r1, #0
  1144c0:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  1144c4:	e1a00001 	mov	r0, r1
  1144c8:	e5d43001 	ldrb	r3, [r4, #1]
  1144cc:	e1a02001 	mov	r2, r1
  1144d0:	e1a06001 	mov	r6, r1
  1144d4:	e2848001 	add	r8, r4, #1
  1144d8:	e3e04000 	mvn	r4, #0
  1144dc:	e2888001 	add	r8, r8, #1
  1144e0:	e243c020 	sub	ip, r3, #32
  1144e4:	e35c0058 	cmp	ip, #88	; 0x58
  1144e8:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
  1144ec:	ea0002b0 	b	114fb4 <_vfiprintf_r+0xc18>
  1144f0:	00114b2c 	andseq	r4, r1, ip, lsr #22
  1144f4:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1144f8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1144fc:	00114c5c 	andseq	r4, r1, ip, asr ip
  114500:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114504:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114508:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11450c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114510:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114514:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114518:	00114cac 	andseq	r4, r1, ip, lsr #25
  11451c:	00114ccc 	andseq	r4, r1, ip, asr #25
  114520:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114524:	00114710 	andseq	r4, r1, r0, lsl r7
  114528:	00114f64 	andseq	r4, r1, r4, ror #30
  11452c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114530:	00114cdc 			; <UNDEFINED> instruction: 0x00114cdc
  114534:	00114ce8 	andseq	r4, r1, r8, ror #25
  114538:	00114ce8 	andseq	r4, r1, r8, ror #25
  11453c:	00114ce8 	andseq	r4, r1, r8, ror #25
  114540:	00114ce8 	andseq	r4, r1, r8, ror #25
  114544:	00114ce8 	andseq	r4, r1, r8, ror #25
  114548:	00114ce8 	andseq	r4, r1, r8, ror #25
  11454c:	00114ce8 	andseq	r4, r1, r8, ror #25
  114550:	00114ce8 	andseq	r4, r1, r8, ror #25
  114554:	00114ce8 	andseq	r4, r1, r8, ror #25
  114558:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11455c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114560:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114564:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114568:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11456c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114570:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114574:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114578:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11457c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114580:	00114d10 	andseq	r4, r1, r0, lsl sp
  114584:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114588:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11458c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114590:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114594:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114598:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11459c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145a0:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145a4:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145a8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145ac:	00114a3c 	andseq	r4, r1, ip, lsr sl
  1145b0:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145b4:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145b8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145bc:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145c0:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145c4:	00114bec 	andseq	r4, r1, ip, ror #23
  1145c8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145cc:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145d0:	00114b40 	andseq	r4, r1, r0, asr #22
  1145d4:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145d8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145dc:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145e0:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145e4:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145e8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145ec:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145f0:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145f4:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145f8:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  1145fc:	00114bb0 			; <UNDEFINED> instruction: 0x00114bb0
  114600:	00114ac8 	andseq	r4, r1, r8, asr #21
  114604:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114608:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11460c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114610:	00114d54 	andseq	r4, r1, r4, asr sp
  114614:	00114ac8 	andseq	r4, r1, r8, asr #21
  114618:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11461c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114620:	00114d60 	andseq	r4, r1, r0, ror #26
  114624:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114628:	00114d7c 	andseq	r4, r1, ip, ror sp
  11462c:	00114db0 			; <UNDEFINED> instruction: 0x00114db0
  114630:	0011471c 	andseq	r4, r1, ip, lsl r7
  114634:	00114f58 	andseq	r4, r1, r8, asr pc
  114638:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11463c:	00114e68 	andseq	r4, r1, r8, ror #28
  114640:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114644:	00114ec8 	andseq	r4, r1, r8, asr #29
  114648:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  11464c:	00114fb4 			; <UNDEFINED> instruction: 0x00114fb4
  114650:	00114c68 	andseq	r4, r1, r8, ror #24
  114654:	e3520000 	cmp	r2, #0
  114658:	1a000366 	bne	1153f8 <_vfiprintf_r+0x105c>
  11465c:	e58d2040 	str	r2, [sp, #64]	; 0x40
  114660:	e1a0a00b 	mov	sl, fp
  114664:	eaffff8d 	b	1144a0 <_vfiprintf_r+0x104>
  114668:	e1a01009 	mov	r1, r9
  11466c:	e59d0010 	ldr	r0, [sp, #16]
  114670:	ebffeb49 	bl	10f39c <__swsetup_r>
  114674:	e3500000 	cmp	r0, #0
  114678:	0a00001b 	beq	1146ec <_vfiprintf_r+0x350>
  11467c:	e5993064 	ldr	r3, [r9, #100]	; 0x64
  114680:	e3130001 	tst	r3, #1
  114684:	1a000002 	bne	114694 <_vfiprintf_r+0x2f8>
  114688:	e1d930bc 	ldrh	r3, [r9, #12]
  11468c:	e3130c02 	tst	r3, #512	; 0x200
  114690:	0a0003d8 	beq	1155f8 <_vfiprintf_r+0x125c>
  114694:	e3e00000 	mvn	r0, #0
  114698:	e28dd0b4 	add	sp, sp, #180	; 0xb4
  11469c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1146a0:	ebfff25e 	bl	111020 <__sinit>
  1146a4:	eaffff48 	b	1143cc <_vfiprintf_r+0x30>
  1146a8:	e1d930fe 	ldrsh	r3, [r9, #14]
  1146ac:	e3530000 	cmp	r3, #0
  1146b0:	baffff5c 	blt	114428 <_vfiprintf_r+0x8c>
  1146b4:	e5993064 	ldr	r3, [r9, #100]	; 0x64
  1146b8:	e3130001 	tst	r3, #1
  1146bc:	1a000003 	bne	1146d0 <_vfiprintf_r+0x334>
  1146c0:	e3120c02 	tst	r2, #512	; 0x200
  1146c4:	1a000001 	bne	1146d0 <_vfiprintf_r+0x334>
  1146c8:	e2890058 	add	r0, r9, #88	; 0x58
  1146cc:	eb00073f 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  1146d0:	e1a03004 	mov	r3, r4
  1146d4:	e1a02008 	mov	r2, r8
  1146d8:	e1a01009 	mov	r1, r9
  1146dc:	e59d0010 	ldr	r0, [sp, #16]
  1146e0:	eb000462 	bl	115870 <__sbprintf>
  1146e4:	e28dd0b4 	add	sp, sp, #180	; 0xb4
  1146e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1146ec:	e1d920bc 	ldrh	r2, [r9, #12]
  1146f0:	eaffff49 	b	11441c <_vfiprintf_r+0x80>
  1146f4:	e2890058 	add	r0, r9, #88	; 0x58
  1146f8:	eb000736 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  1146fc:	e1d910bc 	ldrh	r1, [r9, #12]
  114700:	e6ff2071 	uxth	r2, r1
  114704:	eaffff37 	b	1143e8 <_vfiprintf_r+0x4c>
  114708:	e2622000 	rsb	r2, r2, #0
  11470c:	e58d301c 	str	r3, [sp, #28]
  114710:	e3866004 	orr	r6, r6, #4
  114714:	e5d83000 	ldrb	r3, [r8]
  114718:	eaffff6f 	b	1144dc <_vfiprintf_r+0x140>
  11471c:	e59d101c 	ldr	r1, [sp, #28]
  114720:	e3540000 	cmp	r4, #0
  114724:	e3a0c000 	mov	ip, #0
  114728:	e58d2020 	str	r2, [sp, #32]
  11472c:	e3a03078 	mov	r3, #120	; 0x78
  114730:	e3a02030 	mov	r2, #48	; 0x30
  114734:	e5910000 	ldr	r0, [r1]
  114738:	e5cdc037 	strb	ip, [sp, #55]	; 0x37
  11473c:	e281c004 	add	ip, r1, #4
  114740:	e5cd2038 	strb	r2, [sp, #56]	; 0x38
  114744:	e3a01000 	mov	r1, #0
  114748:	e5cd3039 	strb	r3, [sp, #57]	; 0x39
  11474c:	ba0003ed 	blt	115708 <_vfiprintf_r+0x136c>
  114750:	e1803001 	orr	r3, r0, r1
  114754:	e3c66080 	bic	r6, r6, #128	; 0x80
  114758:	e3530000 	cmp	r3, #0
  11475c:	03540000 	cmpeq	r4, #0
  114760:	e3866002 	orr	r6, r6, #2
  114764:	13a05001 	movne	r5, #1
  114768:	03a05000 	moveq	r5, #0
  11476c:	058dc01c 	streq	ip, [sp, #28]
  114770:	0a00010a 	beq	114ba0 <_vfiprintf_r+0x804>
  114774:	e3072078 	movw	r2, #28792	; 0x7078
  114778:	e58dc01c 	str	ip, [sp, #28]
  11477c:	e3402011 	movt	r2, #17
  114780:	e1a0300b 	mov	r3, fp
  114784:	e200c00f 	and	ip, r0, #15
  114788:	e1a00220 	lsr	r0, r0, #4
  11478c:	e7d2c00c 	ldrb	ip, [r2, ip]
  114790:	e1800e01 	orr	r0, r0, r1, lsl #28
  114794:	e1a01221 	lsr	r1, r1, #4
  114798:	e190e001 	orrs	lr, r0, r1
  11479c:	e563c001 	strb	ip, [r3, #-1]!
  1147a0:	1afffff7 	bne	114784 <_vfiprintf_r+0x3e8>
  1147a4:	e3a05000 	mov	r5, #0
  1147a8:	e58d3028 	str	r3, [sp, #40]	; 0x28
  1147ac:	e063300b 	rsb	r3, r3, fp
  1147b0:	e58d3018 	str	r3, [sp, #24]
  1147b4:	e59d3018 	ldr	r3, [sp, #24]
  1147b8:	e1540003 	cmp	r4, r3
  1147bc:	a1a03004 	movge	r3, r4
  1147c0:	e3550000 	cmp	r5, #0
  1147c4:	e58d3008 	str	r3, [sp, #8]
  1147c8:	12833001 	addne	r3, r3, #1
  1147cc:	158d3008 	strne	r3, [sp, #8]
  1147d0:	e2163002 	ands	r3, r6, #2
  1147d4:	159d2008 	ldrne	r2, [sp, #8]
  1147d8:	12822002 	addne	r2, r2, #2
  1147dc:	158d2008 	strne	r2, [sp, #8]
  1147e0:	e2162084 	ands	r2, r6, #132	; 0x84
  1147e4:	e58d2024 	str	r2, [sp, #36]	; 0x24
  1147e8:	1a0001ff 	bne	114fec <_vfiprintf_r+0xc50>
  1147ec:	e59d2020 	ldr	r2, [sp, #32]
  1147f0:	e59d1008 	ldr	r1, [sp, #8]
  1147f4:	e0615002 	rsb	r5, r1, r2
  1147f8:	e3550000 	cmp	r5, #0
  1147fc:	da0001fa 	ble	114fec <_vfiprintf_r+0xc50>
  114800:	e3550010 	cmp	r5, #16
  114804:	da0003df 	ble	115788 <_vfiprintf_r+0x13ec>
  114808:	e30771e0 	movw	r7, #29152	; 0x71e0
  11480c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  114810:	e3407011 	movt	r7, #17
  114814:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  114818:	e1a04007 	mov	r4, r7
  11481c:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
  114820:	e3a09010 	mov	r9, #16
  114824:	e1a07003 	mov	r7, r3
  114828:	ea000002 	b	114838 <_vfiprintf_r+0x49c>
  11482c:	e2455010 	sub	r5, r5, #16
  114830:	e3550010 	cmp	r5, #16
  114834:	da00001b 	ble	1148a8 <_vfiprintf_r+0x50c>
  114838:	e28c0001 	add	r0, ip, #1
  11483c:	e2822010 	add	r2, r2, #16
  114840:	e3500007 	cmp	r0, #7
  114844:	e58a4000 	str	r4, [sl]
  114848:	e28c1002 	add	r1, ip, #2
  11484c:	e58a9004 	str	r9, [sl, #4]
  114850:	e58d2044 	str	r2, [sp, #68]	; 0x44
  114854:	e1a0c000 	mov	ip, r0
  114858:	e58d0040 	str	r0, [sp, #64]	; 0x40
  11485c:	d28aa008 	addle	sl, sl, #8
  114860:	dafffff1 	ble	11482c <_vfiprintf_r+0x490>
  114864:	e3520000 	cmp	r2, #0
  114868:	e1a0c002 	mov	ip, r2
  11486c:	e3a01001 	mov	r1, #1
  114870:	e1a0a00b 	mov	sl, fp
  114874:	0affffec 	beq	11482c <_vfiprintf_r+0x490>
  114878:	e28d203c 	add	r2, sp, #60	; 0x3c
  11487c:	e59d1004 	ldr	r1, [sp, #4]
  114880:	e59d0010 	ldr	r0, [sp, #16]
  114884:	ebfffe94 	bl	1142dc <__sprint_r.part.0>
  114888:	e3500000 	cmp	r0, #0
  11488c:	1a00027a 	bne	11527c <_vfiprintf_r+0xee0>
  114890:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
  114894:	e2455010 	sub	r5, r5, #16
  114898:	e3550010 	cmp	r5, #16
  11489c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  1148a0:	e28c1001 	add	r1, ip, #1
  1148a4:	caffffe3 	bgt	114838 <_vfiprintf_r+0x49c>
  1148a8:	e1a03007 	mov	r3, r7
  1148ac:	e1a07004 	mov	r7, r4
  1148b0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
  1148b4:	e3510007 	cmp	r1, #7
  1148b8:	e0852002 	add	r2, r5, r2
  1148bc:	e58a7000 	str	r7, [sl]
  1148c0:	d2810001 	addle	r0, r1, #1
  1148c4:	e58a5004 	str	r5, [sl, #4]
  1148c8:	d28aa008 	addle	sl, sl, #8
  1148cc:	e58d2044 	str	r2, [sp, #68]	; 0x44
  1148d0:	e58d1040 	str	r1, [sp, #64]	; 0x40
  1148d4:	da0001c7 	ble	114ff8 <_vfiprintf_r+0xc5c>
  1148d8:	e3520000 	cmp	r2, #0
  1148dc:	1a00037c 	bne	1156d4 <_vfiprintf_r+0x1338>
  1148e0:	e5dd1037 	ldrb	r1, [sp, #55]	; 0x37
  1148e4:	e3510000 	cmp	r1, #0
  1148e8:	0a000338 	beq	1155d0 <_vfiprintf_r+0x1234>
  1148ec:	e3a02001 	mov	r2, #1
  1148f0:	e1a0a00b 	mov	sl, fp
  1148f4:	e1a00002 	mov	r0, r2
  1148f8:	e28d1037 	add	r1, sp, #55	; 0x37
  1148fc:	e58d2074 	str	r2, [sp, #116]	; 0x74
  114900:	e58d1070 	str	r1, [sp, #112]	; 0x70
  114904:	e1a01000 	mov	r1, r0
  114908:	e28aa008 	add	sl, sl, #8
  11490c:	e2800001 	add	r0, r0, #1
  114910:	e3530000 	cmp	r3, #0
  114914:	0a0001ca 	beq	115044 <_vfiprintf_r+0xca8>
  114918:	e3500007 	cmp	r0, #7
  11491c:	e2822002 	add	r2, r2, #2
  114920:	e28d1038 	add	r1, sp, #56	; 0x38
  114924:	e3a03002 	mov	r3, #2
  114928:	e58d2044 	str	r2, [sp, #68]	; 0x44
  11492c:	e58d0040 	str	r0, [sp, #64]	; 0x40
  114930:	e88a000a 	stm	sl, {r1, r3}
  114934:	da000289 	ble	115360 <_vfiprintf_r+0xfc4>
  114938:	e3520000 	cmp	r2, #0
  11493c:	1a0002c6 	bne	11545c <_vfiprintf_r+0x10c0>
  114940:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  114944:	e3a00001 	mov	r0, #1
  114948:	e1a01002 	mov	r1, r2
  11494c:	e1a0a00b 	mov	sl, fp
  114950:	e3530080 	cmp	r3, #128	; 0x80
  114954:	1a0001bd 	bne	115050 <_vfiprintf_r+0xcb4>
  114958:	e59d3020 	ldr	r3, [sp, #32]
  11495c:	e59dc008 	ldr	ip, [sp, #8]
  114960:	e06c7003 	rsb	r7, ip, r3
  114964:	e3570000 	cmp	r7, #0
  114968:	da0001b8 	ble	115050 <_vfiprintf_r+0xcb4>
  11496c:	e3570010 	cmp	r7, #16
  114970:	e59f5ecc 	ldr	r5, [pc, #3788]	; 115844 <_vfiprintf_r+0x14a8>
  114974:	da00039e 	ble	1157f4 <_vfiprintf_r+0x1458>
  114978:	e1a03005 	mov	r3, r5
  11497c:	e3a09010 	mov	r9, #16
  114980:	e1a05004 	mov	r5, r4
  114984:	e1a04003 	mov	r4, r3
  114988:	ea000002 	b	114998 <_vfiprintf_r+0x5fc>
  11498c:	e2477010 	sub	r7, r7, #16
  114990:	e3570010 	cmp	r7, #16
  114994:	da00001b 	ble	114a08 <_vfiprintf_r+0x66c>
  114998:	e2810001 	add	r0, r1, #1
  11499c:	e2822010 	add	r2, r2, #16
  1149a0:	e3500007 	cmp	r0, #7
  1149a4:	e58a4000 	str	r4, [sl]
  1149a8:	e281c002 	add	ip, r1, #2
  1149ac:	e58a9004 	str	r9, [sl, #4]
  1149b0:	e58d2044 	str	r2, [sp, #68]	; 0x44
  1149b4:	e1a01000 	mov	r1, r0
  1149b8:	e58d0040 	str	r0, [sp, #64]	; 0x40
  1149bc:	d28aa008 	addle	sl, sl, #8
  1149c0:	dafffff1 	ble	11498c <_vfiprintf_r+0x5f0>
  1149c4:	e3520000 	cmp	r2, #0
  1149c8:	e3a0c001 	mov	ip, #1
  1149cc:	e1a01002 	mov	r1, r2
  1149d0:	e1a0a00b 	mov	sl, fp
  1149d4:	0affffec 	beq	11498c <_vfiprintf_r+0x5f0>
  1149d8:	e28d203c 	add	r2, sp, #60	; 0x3c
  1149dc:	e59d1004 	ldr	r1, [sp, #4]
  1149e0:	e59d0010 	ldr	r0, [sp, #16]
  1149e4:	ebfffe3c 	bl	1142dc <__sprint_r.part.0>
  1149e8:	e3500000 	cmp	r0, #0
  1149ec:	1a000222 	bne	11527c <_vfiprintf_r+0xee0>
  1149f0:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  1149f4:	e2477010 	sub	r7, r7, #16
  1149f8:	e3570010 	cmp	r7, #16
  1149fc:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  114a00:	e281c001 	add	ip, r1, #1
  114a04:	caffffe3 	bgt	114998 <_vfiprintf_r+0x5fc>
  114a08:	e1a03004 	mov	r3, r4
  114a0c:	e1a04005 	mov	r4, r5
  114a10:	e1a05003 	mov	r5, r3
  114a14:	e35c0007 	cmp	ip, #7
  114a18:	e0822007 	add	r2, r2, r7
  114a1c:	e58d2044 	str	r2, [sp, #68]	; 0x44
  114a20:	e88a00a0 	stm	sl, {r5, r7}
  114a24:	e58dc040 	str	ip, [sp, #64]	; 0x40
  114a28:	ca000296 	bgt	115488 <_vfiprintf_r+0x10ec>
  114a2c:	e28aa008 	add	sl, sl, #8
  114a30:	e28c0001 	add	r0, ip, #1
  114a34:	e1a0100c 	mov	r1, ip
  114a38:	ea000184 	b	115050 <_vfiprintf_r+0xcb4>
  114a3c:	e3510000 	cmp	r1, #0
  114a40:	e3866010 	orr	r6, r6, #16
  114a44:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114a48:	e2163020 	ands	r3, r6, #32
  114a4c:	e58d2020 	str	r2, [sp, #32]
  114a50:	1a0000db 	bne	114dc4 <_vfiprintf_r+0xa28>
  114a54:	e2162010 	ands	r2, r6, #16
  114a58:	1a000299 	bne	1154c4 <_vfiprintf_r+0x1128>
  114a5c:	e2163040 	ands	r3, r6, #64	; 0x40
  114a60:	0a0002fd 	beq	11565c <_vfiprintf_r+0x12c0>
  114a64:	e59d301c 	ldr	r3, [sp, #28]
  114a68:	e3540000 	cmp	r4, #0
  114a6c:	e5cd2037 	strb	r2, [sp, #55]	; 0x37
  114a70:	e1d300b0 	ldrh	r0, [r3]
  114a74:	e2831004 	add	r1, r3, #4
  114a78:	e58d101c 	str	r1, [sp, #28]
  114a7c:	e3a03000 	mov	r3, #0
  114a80:	e1a02000 	mov	r2, r0
  114a84:	ba0000dd 	blt	114e00 <_vfiprintf_r+0xa64>
  114a88:	e3540000 	cmp	r4, #0
  114a8c:	03500000 	cmpeq	r0, #0
  114a90:	e3c66080 	bic	r6, r6, #128	; 0x80
  114a94:	1a0000d9 	bne	114e00 <_vfiprintf_r+0xa64>
  114a98:	e2165001 	ands	r5, r6, #1
  114a9c:	058db028 	streq	fp, [sp, #40]	; 0x28
  114aa0:	058d5018 	streq	r5, [sp, #24]
  114aa4:	0affff42 	beq	1147b4 <_vfiprintf_r+0x418>
  114aa8:	e28d30b0 	add	r3, sp, #176	; 0xb0
  114aac:	e3a02030 	mov	r2, #48	; 0x30
  114ab0:	e5632041 	strb	r2, [r3, #-65]!	; 0xffffffbf
  114ab4:	e063200b 	rsb	r2, r3, fp
  114ab8:	e3a05000 	mov	r5, #0
  114abc:	e58d2018 	str	r2, [sp, #24]
  114ac0:	e58d3028 	str	r3, [sp, #40]	; 0x28
  114ac4:	eaffff3a 	b	1147b4 <_vfiprintf_r+0x418>
  114ac8:	e3510000 	cmp	r1, #0
  114acc:	e58d2020 	str	r2, [sp, #32]
  114ad0:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114ad4:	e3160020 	tst	r6, #32
  114ad8:	0a000092 	beq	114d28 <_vfiprintf_r+0x98c>
  114adc:	e59d301c 	ldr	r3, [sp, #28]
  114ae0:	e2831007 	add	r1, r3, #7
  114ae4:	e3c11007 	bic	r1, r1, #7
  114ae8:	e1c120d0 	ldrd	r2, [r1]
  114aec:	e2811008 	add	r1, r1, #8
  114af0:	e58d101c 	str	r1, [sp, #28]
  114af4:	e1cd20f8 	strd	r2, [sp, #8]
  114af8:	e3520000 	cmp	r2, #0
  114afc:	e2d33000 	sbcs	r3, r3, #0
  114b00:	ba0002a9 	blt	1155ac <_vfiprintf_r+0x1210>
  114b04:	e3540000 	cmp	r4, #0
  114b08:	ba000005 	blt	114b24 <_vfiprintf_r+0x788>
  114b0c:	e1cd20d8 	ldrd	r2, [sp, #8]
  114b10:	e3c66080 	bic	r6, r6, #128	; 0x80
  114b14:	e1823003 	orr	r3, r2, r3
  114b18:	e3530000 	cmp	r3, #0
  114b1c:	03540000 	cmpeq	r4, #0
  114b20:	0a000345 	beq	11583c <_vfiprintf_r+0x14a0>
  114b24:	e5dd5037 	ldrb	r5, [sp, #55]	; 0x37
  114b28:	ea0000ff 	b	114f2c <_vfiprintf_r+0xb90>
  114b2c:	e3500000 	cmp	r0, #0
  114b30:	e5d83000 	ldrb	r3, [r8]
  114b34:	03a01001 	moveq	r1, #1
  114b38:	03a00020 	moveq	r0, #32
  114b3c:	eafffe66 	b	1144dc <_vfiprintf_r+0x140>
  114b40:	e3510000 	cmp	r1, #0
  114b44:	e58d2020 	str	r2, [sp, #32]
  114b48:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114b4c:	e3160020 	tst	r6, #32
  114b50:	e3072064 	movw	r2, #28772	; 0x7064
  114b54:	e59d101c 	ldr	r1, [sp, #28]
  114b58:	e3402011 	movt	r2, #17
  114b5c:	0a000049 	beq	114c88 <_vfiprintf_r+0x8ec>
  114b60:	e2811007 	add	r1, r1, #7
  114b64:	e3c11007 	bic	r1, r1, #7
  114b68:	e2810008 	add	r0, r1, #8
  114b6c:	e58d001c 	str	r0, [sp, #28]
  114b70:	e1c100d0 	ldrd	r0, [r1]
  114b74:	e216c001 	ands	ip, r6, #1
  114b78:	0a0001fc 	beq	115370 <_vfiprintf_r+0xfd4>
  114b7c:	e190c001 	orrs	ip, r0, r1
  114b80:	1a000246 	bne	1154a0 <_vfiprintf_r+0x1104>
  114b84:	e3540000 	cmp	r4, #0
  114b88:	e3a03000 	mov	r3, #0
  114b8c:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  114b90:	bafffefa 	blt	114780 <_vfiprintf_r+0x3e4>
  114b94:	e3c66080 	bic	r6, r6, #128	; 0x80
  114b98:	01a05004 	moveq	r5, r4
  114b9c:	1afffef7 	bne	114780 <_vfiprintf_r+0x3e4>
  114ba0:	e3a04000 	mov	r4, #0
  114ba4:	e58db028 	str	fp, [sp, #40]	; 0x28
  114ba8:	e58d4018 	str	r4, [sp, #24]
  114bac:	eaffff00 	b	1147b4 <_vfiprintf_r+0x418>
  114bb0:	e58d2020 	str	r2, [sp, #32]
  114bb4:	e3a01001 	mov	r1, #1
  114bb8:	e59d201c 	ldr	r2, [sp, #28]
  114bbc:	e3a00000 	mov	r0, #0
  114bc0:	e58d1008 	str	r1, [sp, #8]
  114bc4:	e5cd0037 	strb	r0, [sp, #55]	; 0x37
  114bc8:	e5923000 	ldr	r3, [r2]
  114bcc:	e2822004 	add	r2, r2, #4
  114bd0:	e58d201c 	str	r2, [sp, #28]
  114bd4:	e28d2048 	add	r2, sp, #72	; 0x48
  114bd8:	e58d1018 	str	r1, [sp, #24]
  114bdc:	e58d2028 	str	r2, [sp, #40]	; 0x28
  114be0:	e5cd3048 	strb	r3, [sp, #72]	; 0x48
  114be4:	e3a04000 	mov	r4, #0
  114be8:	eafffef8 	b	1147d0 <_vfiprintf_r+0x434>
  114bec:	e3510000 	cmp	r1, #0
  114bf0:	e3866010 	orr	r6, r6, #16
  114bf4:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114bf8:	e2165020 	ands	r5, r6, #32
  114bfc:	e58d2020 	str	r2, [sp, #32]
  114c00:	1a0000b5 	bne	114edc <_vfiprintf_r+0xb40>
  114c04:	e2162010 	ands	r2, r6, #16
  114c08:	1a00023b 	bne	1154fc <_vfiprintf_r+0x1160>
  114c0c:	e2165040 	ands	r5, r6, #64	; 0x40
  114c10:	0a0002a1 	beq	11569c <_vfiprintf_r+0x1300>
  114c14:	e59d101c 	ldr	r1, [sp, #28]
  114c18:	e3540000 	cmp	r4, #0
  114c1c:	e5cd2037 	strb	r2, [sp, #55]	; 0x37
  114c20:	e1d130b0 	ldrh	r3, [r1]
  114c24:	e2811004 	add	r1, r1, #4
  114c28:	e58d101c 	str	r1, [sp, #28]
  114c2c:	ee803b90 	vdup.32	d16, r3
  114c30:	f3e000b0 	vshr.u64	d16, d16, #32
  114c34:	edcd0b02 	vstr	d16, [sp, #8]
  114c38:	ba000005 	blt	114c54 <_vfiprintf_r+0x8b8>
  114c3c:	e3540000 	cmp	r4, #0
  114c40:	03530000 	cmpeq	r3, #0
  114c44:	e3c66080 	bic	r6, r6, #128	; 0x80
  114c48:	13a03001 	movne	r3, #1
  114c4c:	03a03000 	moveq	r3, #0
  114c50:	0a00023b 	beq	115544 <_vfiprintf_r+0x11a8>
  114c54:	e1a05002 	mov	r5, r2
  114c58:	ea0000b3 	b	114f2c <_vfiprintf_r+0xb90>
  114c5c:	e3866001 	orr	r6, r6, #1
  114c60:	e5d83000 	ldrb	r3, [r8]
  114c64:	eafffe1c 	b	1144dc <_vfiprintf_r+0x140>
  114c68:	e3510000 	cmp	r1, #0
  114c6c:	e58d2020 	str	r2, [sp, #32]
  114c70:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114c74:	e3160020 	tst	r6, #32
  114c78:	e3072078 	movw	r2, #28792	; 0x7078
  114c7c:	e59d101c 	ldr	r1, [sp, #28]
  114c80:	e3402011 	movt	r2, #17
  114c84:	1affffb5 	bne	114b60 <_vfiprintf_r+0x7c4>
  114c88:	e3160010 	tst	r6, #16
  114c8c:	1a0001cb 	bne	1153c0 <_vfiprintf_r+0x1024>
  114c90:	e3160040 	tst	r6, #64	; 0x40
  114c94:	0a0001c9 	beq	1153c0 <_vfiprintf_r+0x1024>
  114c98:	e1d100b0 	ldrh	r0, [r1]
  114c9c:	e2811004 	add	r1, r1, #4
  114ca0:	e58d101c 	str	r1, [sp, #28]
  114ca4:	e3a01000 	mov	r1, #0
  114ca8:	eaffffb1 	b	114b74 <_vfiprintf_r+0x7d8>
  114cac:	e59d301c 	ldr	r3, [sp, #28]
  114cb0:	e5932000 	ldr	r2, [r3]
  114cb4:	e2833004 	add	r3, r3, #4
  114cb8:	e3520000 	cmp	r2, #0
  114cbc:	bafffe91 	blt	114708 <_vfiprintf_r+0x36c>
  114cc0:	e58d301c 	str	r3, [sp, #28]
  114cc4:	e5d83000 	ldrb	r3, [r8]
  114cc8:	eafffe03 	b	1144dc <_vfiprintf_r+0x140>
  114ccc:	e5d83000 	ldrb	r3, [r8]
  114cd0:	e3a01001 	mov	r1, #1
  114cd4:	e3a0002b 	mov	r0, #43	; 0x2b
  114cd8:	eafffdff 	b	1144dc <_vfiprintf_r+0x140>
  114cdc:	e3866080 	orr	r6, r6, #128	; 0x80
  114ce0:	e5d83000 	ldrb	r3, [r8]
  114ce4:	eafffdfc 	b	1144dc <_vfiprintf_r+0x140>
  114ce8:	e2435030 	sub	r5, r3, #48	; 0x30
  114cec:	e3a02000 	mov	r2, #0
  114cf0:	e1a0c182 	lsl	ip, r2, #3
  114cf4:	e4d83001 	ldrb	r3, [r8], #1
  114cf8:	e08c2082 	add	r2, ip, r2, lsl #1
  114cfc:	e0852002 	add	r2, r5, r2
  114d00:	e2435030 	sub	r5, r3, #48	; 0x30
  114d04:	e3550009 	cmp	r5, #9
  114d08:	9afffff8 	bls	114cf0 <_vfiprintf_r+0x954>
  114d0c:	eafffdf3 	b	1144e0 <_vfiprintf_r+0x144>
  114d10:	e3510000 	cmp	r1, #0
  114d14:	e3866010 	orr	r6, r6, #16
  114d18:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114d1c:	e3160020 	tst	r6, #32
  114d20:	e58d2020 	str	r2, [sp, #32]
  114d24:	1affff6c 	bne	114adc <_vfiprintf_r+0x740>
  114d28:	e3160010 	tst	r6, #16
  114d2c:	1a0001a8 	bne	1153d4 <_vfiprintf_r+0x1038>
  114d30:	e3160040 	tst	r6, #64	; 0x40
  114d34:	0a0001a6 	beq	1153d4 <_vfiprintf_r+0x1038>
  114d38:	e59d101c 	ldr	r1, [sp, #28]
  114d3c:	e1d120f0 	ldrsh	r2, [r1]
  114d40:	e2811004 	add	r1, r1, #4
  114d44:	e58d101c 	str	r1, [sp, #28]
  114d48:	e1a03fc2 	asr	r3, r2, #31
  114d4c:	e1cd20f8 	strd	r2, [sp, #8]
  114d50:	eaffff68 	b	114af8 <_vfiprintf_r+0x75c>
  114d54:	e3866040 	orr	r6, r6, #64	; 0x40
  114d58:	e5d83000 	ldrb	r3, [r8]
  114d5c:	eafffdde 	b	1144dc <_vfiprintf_r+0x140>
  114d60:	e5d83000 	ldrb	r3, [r8]
  114d64:	e353006c 	cmp	r3, #108	; 0x6c
  114d68:	05d83001 	ldrbeq	r3, [r8, #1]
  114d6c:	03866020 	orreq	r6, r6, #32
  114d70:	02888001 	addeq	r8, r8, #1
  114d74:	13866010 	orrne	r6, r6, #16
  114d78:	eafffdd7 	b	1144dc <_vfiprintf_r+0x140>
  114d7c:	e3510000 	cmp	r1, #0
  114d80:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114d84:	e3160020 	tst	r6, #32
  114d88:	0a00021d 	beq	115604 <_vfiprintf_r+0x1268>
  114d8c:	e59d1014 	ldr	r1, [sp, #20]
  114d90:	e59d201c 	ldr	r2, [sp, #28]
  114d94:	ee801b90 	vdup.32	d16, r1
  114d98:	e2822004 	add	r2, r2, #4
  114d9c:	e5123004 	ldr	r3, [r2, #-4]
  114da0:	f2e000b0 	vshr.s64	d16, d16, #32
  114da4:	e58d201c 	str	r2, [sp, #28]
  114da8:	edc30b00 	vstr	d16, [r3]
  114dac:	eafffda5 	b	114448 <_vfiprintf_r+0xac>
  114db0:	e3510000 	cmp	r1, #0
  114db4:	e58d2020 	str	r2, [sp, #32]
  114db8:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114dbc:	e2163020 	ands	r3, r6, #32
  114dc0:	0affff23 	beq	114a54 <_vfiprintf_r+0x6b8>
  114dc4:	e59d301c 	ldr	r3, [sp, #28]
  114dc8:	e3a02000 	mov	r2, #0
  114dcc:	e3540000 	cmp	r4, #0
  114dd0:	e5cd2037 	strb	r2, [sp, #55]	; 0x37
  114dd4:	e2833007 	add	r3, r3, #7
  114dd8:	e3c33007 	bic	r3, r3, #7
  114ddc:	e2832008 	add	r2, r3, #8
  114de0:	e58d201c 	str	r2, [sp, #28]
  114de4:	e1c320d0 	ldrd	r2, [r3]
  114de8:	ba000004 	blt	114e00 <_vfiprintf_r+0xa64>
  114dec:	e1821003 	orr	r1, r2, r3
  114df0:	e3c66080 	bic	r6, r6, #128	; 0x80
  114df4:	e3510000 	cmp	r1, #0
  114df8:	03540000 	cmpeq	r4, #0
  114dfc:	0affff25 	beq	114a98 <_vfiprintf_r+0x6fc>
  114e00:	e1a0000b 	mov	r0, fp
  114e04:	e2021007 	and	r1, r2, #7
  114e08:	e1a021a2 	lsr	r2, r2, #3
  114e0c:	e2811030 	add	r1, r1, #48	; 0x30
  114e10:	e1822e83 	orr	r2, r2, r3, lsl #29
  114e14:	e1a031a3 	lsr	r3, r3, #3
  114e18:	e5601001 	strb	r1, [r0, #-1]!
  114e1c:	e192c003 	orrs	ip, r2, r3
  114e20:	1afffff7 	bne	114e04 <_vfiprintf_r+0xa68>
  114e24:	e3510030 	cmp	r1, #48	; 0x30
  114e28:	03a05000 	moveq	r5, #0
  114e2c:	12065001 	andne	r5, r6, #1
  114e30:	e3550000 	cmp	r5, #0
  114e34:	0060300b 	rsbeq	r3, r0, fp
  114e38:	058d0028 	streq	r0, [sp, #40]	; 0x28
  114e3c:	058d3018 	streq	r3, [sp, #24]
  114e40:	0afffe5b 	beq	1147b4 <_vfiprintf_r+0x418>
  114e44:	e2403001 	sub	r3, r0, #1
  114e48:	e3a05000 	mov	r5, #0
  114e4c:	e1a02003 	mov	r2, r3
  114e50:	e58d3028 	str	r3, [sp, #40]	; 0x28
  114e54:	e062200b 	rsb	r2, r2, fp
  114e58:	e3a03030 	mov	r3, #48	; 0x30
  114e5c:	e58d2018 	str	r2, [sp, #24]
  114e60:	e5403001 	strb	r3, [r0, #-1]
  114e64:	eafffe52 	b	1147b4 <_vfiprintf_r+0x418>
  114e68:	e59d301c 	ldr	r3, [sp, #28]
  114e6c:	e58d2020 	str	r2, [sp, #32]
  114e70:	e5932000 	ldr	r2, [r3]
  114e74:	e2837004 	add	r7, r3, #4
  114e78:	e3a03000 	mov	r3, #0
  114e7c:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  114e80:	e3520000 	cmp	r2, #0
  114e84:	e58d2028 	str	r2, [sp, #40]	; 0x28
  114e88:	0a000244 	beq	1157a0 <_vfiprintf_r+0x1404>
  114e8c:	e3540000 	cmp	r4, #0
  114e90:	ba00022a 	blt	115740 <_vfiprintf_r+0x13a4>
  114e94:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
  114e98:	e1a02004 	mov	r2, r4
  114e9c:	e3a01000 	mov	r1, #0
  114ea0:	e1a00005 	mov	r0, r5
  114ea4:	ebfff5f8 	bl	11268c <memchr>
  114ea8:	e3500000 	cmp	r0, #0
  114eac:	0a00024b 	beq	1157e0 <_vfiprintf_r+0x1444>
  114eb0:	e0653000 	rsb	r3, r5, r0
  114eb4:	e58d701c 	str	r7, [sp, #28]
  114eb8:	e58d3018 	str	r3, [sp, #24]
  114ebc:	e3a04000 	mov	r4, #0
  114ec0:	e5dd5037 	ldrb	r5, [sp, #55]	; 0x37
  114ec4:	eafffe3a 	b	1147b4 <_vfiprintf_r+0x418>
  114ec8:	e3510000 	cmp	r1, #0
  114ecc:	e58d2020 	str	r2, [sp, #32]
  114ed0:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114ed4:	e2165020 	ands	r5, r6, #32
  114ed8:	0affff49 	beq	114c04 <_vfiprintf_r+0x868>
  114edc:	e59d301c 	ldr	r3, [sp, #28]
  114ee0:	e3a02000 	mov	r2, #0
  114ee4:	e5cd2037 	strb	r2, [sp, #55]	; 0x37
  114ee8:	e3540000 	cmp	r4, #0
  114eec:	e2833007 	add	r3, r3, #7
  114ef0:	e3c33007 	bic	r3, r3, #7
  114ef4:	e2832008 	add	r2, r3, #8
  114ef8:	e58d201c 	str	r2, [sp, #28]
  114efc:	e1c320d0 	ldrd	r2, [r3]
  114f00:	e1cd20f8 	strd	r2, [sp, #8]
  114f04:	ba000007 	blt	114f28 <_vfiprintf_r+0xb8c>
  114f08:	e1cd20d8 	ldrd	r2, [sp, #8]
  114f0c:	e3c66080 	bic	r6, r6, #128	; 0x80
  114f10:	e1823003 	orr	r3, r2, r3
  114f14:	e3530000 	cmp	r3, #0
  114f18:	03540000 	cmpeq	r4, #0
  114f1c:	13a05001 	movne	r5, #1
  114f20:	03a05000 	moveq	r5, #0
  114f24:	0affff1d 	beq	114ba0 <_vfiprintf_r+0x804>
  114f28:	e3a05000 	mov	r5, #0
  114f2c:	e1cd20d8 	ldrd	r2, [sp, #8]
  114f30:	e3530000 	cmp	r3, #0
  114f34:	03520009 	cmpeq	r2, #9
  114f38:	8a000183 	bhi	11554c <_vfiprintf_r+0x11b0>
  114f3c:	e28d30b0 	add	r3, sp, #176	; 0xb0
  114f40:	e2822030 	add	r2, r2, #48	; 0x30
  114f44:	e5632041 	strb	r2, [r3, #-65]!	; 0xffffffbf
  114f48:	e063200b 	rsb	r2, r3, fp
  114f4c:	e58d2018 	str	r2, [sp, #24]
  114f50:	e58d3028 	str	r3, [sp, #40]	; 0x28
  114f54:	eafffe16 	b	1147b4 <_vfiprintf_r+0x418>
  114f58:	e3866020 	orr	r6, r6, #32
  114f5c:	e5d83000 	ldrb	r3, [r8]
  114f60:	eafffd5d 	b	1144dc <_vfiprintf_r+0x140>
  114f64:	e5d83000 	ldrb	r3, [r8]
  114f68:	e288e001 	add	lr, r8, #1
  114f6c:	e353002a 	cmp	r3, #42	; 0x2a
  114f70:	0a000228 	beq	115818 <_vfiprintf_r+0x147c>
  114f74:	e2435030 	sub	r5, r3, #48	; 0x30
  114f78:	e3550009 	cmp	r5, #9
  114f7c:	81a0800e 	movhi	r8, lr
  114f80:	83a04000 	movhi	r4, #0
  114f84:	8afffd55 	bhi	1144e0 <_vfiprintf_r+0x144>
  114f88:	e3a04000 	mov	r4, #0
  114f8c:	e1a0c184 	lsl	ip, r4, #3
  114f90:	e4de3001 	ldrb	r3, [lr], #1
  114f94:	e08c4084 	add	r4, ip, r4, lsl #1
  114f98:	e0844005 	add	r4, r4, r5
  114f9c:	e2435030 	sub	r5, r3, #48	; 0x30
  114fa0:	e3550009 	cmp	r5, #9
  114fa4:	9afffff8 	bls	114f8c <_vfiprintf_r+0xbf0>
  114fa8:	e1844fc4 	orr	r4, r4, r4, asr #31
  114fac:	e1a0800e 	mov	r8, lr
  114fb0:	eafffd4a 	b	1144e0 <_vfiprintf_r+0x144>
  114fb4:	e3510000 	cmp	r1, #0
  114fb8:	e58d2020 	str	r2, [sp, #32]
  114fbc:	15cd0037 	strbne	r0, [sp, #55]	; 0x37
  114fc0:	e3530000 	cmp	r3, #0
  114fc4:	0a0001d6 	beq	115724 <_vfiprintf_r+0x1388>
  114fc8:	e5cd3048 	strb	r3, [sp, #72]	; 0x48
  114fcc:	e3a03000 	mov	r3, #0
  114fd0:	e3a02001 	mov	r2, #1
  114fd4:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  114fd8:	e28d3048 	add	r3, sp, #72	; 0x48
  114fdc:	e58d2008 	str	r2, [sp, #8]
  114fe0:	e58d2018 	str	r2, [sp, #24]
  114fe4:	e58d3028 	str	r3, [sp, #40]	; 0x28
  114fe8:	eafffefd 	b	114be4 <_vfiprintf_r+0x848>
  114fec:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  114ff0:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  114ff4:	e2810001 	add	r0, r1, #1
  114ff8:	e5ddc037 	ldrb	ip, [sp, #55]	; 0x37
  114ffc:	e35c0000 	cmp	ip, #0
  115000:	0afffe42 	beq	114910 <_vfiprintf_r+0x574>
  115004:	e3500007 	cmp	r0, #7
  115008:	e2822001 	add	r2, r2, #1
  11500c:	e28dc037 	add	ip, sp, #55	; 0x37
  115010:	e3a01001 	mov	r1, #1
  115014:	e58d2044 	str	r2, [sp, #68]	; 0x44
  115018:	e58d0040 	str	r0, [sp, #64]	; 0x40
  11501c:	e58ac000 	str	ip, [sl]
  115020:	e58a1004 	str	r1, [sl, #4]
  115024:	dafffe36 	ble	114904 <_vfiprintf_r+0x568>
  115028:	e3520000 	cmp	r2, #0
  11502c:	1a0000fd 	bne	115428 <_vfiprintf_r+0x108c>
  115030:	e3530000 	cmp	r3, #0
  115034:	1a0000c3 	bne	115348 <_vfiprintf_r+0xfac>
  115038:	e1a00001 	mov	r0, r1
  11503c:	e1a0a00b 	mov	sl, fp
  115040:	e1a01002 	mov	r1, r2
  115044:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  115048:	e3530080 	cmp	r3, #128	; 0x80
  11504c:	0afffe41 	beq	114958 <_vfiprintf_r+0x5bc>
  115050:	e59d3018 	ldr	r3, [sp, #24]
  115054:	e0634004 	rsb	r4, r3, r4
  115058:	e3540000 	cmp	r4, #0
  11505c:	da00009c 	ble	1152d4 <_vfiprintf_r+0xf38>
  115060:	e3540010 	cmp	r4, #16
  115064:	e59f57d8 	ldr	r5, [pc, #2008]	; 115844 <_vfiprintf_r+0x14a8>
  115068:	da000021 	ble	1150f4 <_vfiprintf_r+0xd58>
  11506c:	e3a07010 	mov	r7, #16
  115070:	e59d9010 	ldr	r9, [sp, #16]
  115074:	ea000002 	b	115084 <_vfiprintf_r+0xce8>
  115078:	e2444010 	sub	r4, r4, #16
  11507c:	e3540010 	cmp	r4, #16
  115080:	da00001b 	ble	1150f4 <_vfiprintf_r+0xd58>
  115084:	e2813001 	add	r3, r1, #1
  115088:	e2822010 	add	r2, r2, #16
  11508c:	e3530007 	cmp	r3, #7
  115090:	e58a5000 	str	r5, [sl]
  115094:	e2810002 	add	r0, r1, #2
  115098:	e58a7004 	str	r7, [sl, #4]
  11509c:	e58d2044 	str	r2, [sp, #68]	; 0x44
  1150a0:	e1a01003 	mov	r1, r3
  1150a4:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1150a8:	d28aa008 	addle	sl, sl, #8
  1150ac:	dafffff1 	ble	115078 <_vfiprintf_r+0xcdc>
  1150b0:	e3520000 	cmp	r2, #0
  1150b4:	e3a00001 	mov	r0, #1
  1150b8:	e1a01002 	mov	r1, r2
  1150bc:	e1a0a00b 	mov	sl, fp
  1150c0:	0affffec 	beq	115078 <_vfiprintf_r+0xcdc>
  1150c4:	e28d203c 	add	r2, sp, #60	; 0x3c
  1150c8:	e59d1004 	ldr	r1, [sp, #4]
  1150cc:	e1a00009 	mov	r0, r9
  1150d0:	ebfffc81 	bl	1142dc <__sprint_r.part.0>
  1150d4:	e3500000 	cmp	r0, #0
  1150d8:	1a000067 	bne	11527c <_vfiprintf_r+0xee0>
  1150dc:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  1150e0:	e2444010 	sub	r4, r4, #16
  1150e4:	e3540010 	cmp	r4, #16
  1150e8:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  1150ec:	e2810001 	add	r0, r1, #1
  1150f0:	caffffe3 	bgt	115084 <_vfiprintf_r+0xce8>
  1150f4:	e3500007 	cmp	r0, #7
  1150f8:	e0822004 	add	r2, r2, r4
  1150fc:	e58a5000 	str	r5, [sl]
  115100:	e58a4004 	str	r4, [sl, #4]
  115104:	d28aa008 	addle	sl, sl, #8
  115108:	e58d0040 	str	r0, [sp, #64]	; 0x40
  11510c:	d2800001 	addle	r0, r0, #1
  115110:	e58d2044 	str	r2, [sp, #68]	; 0x44
  115114:	da00006e 	ble	1152d4 <_vfiprintf_r+0xf38>
  115118:	e3520000 	cmp	r2, #0
  11511c:	1a000062 	bne	1152ac <_vfiprintf_r+0xf10>
  115120:	e59d2018 	ldr	r2, [sp, #24]
  115124:	e1a0a00b 	mov	sl, fp
  115128:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  11512c:	e3a03001 	mov	r3, #1
  115130:	e58d3040 	str	r3, [sp, #64]	; 0x40
  115134:	e58d2074 	str	r2, [sp, #116]	; 0x74
  115138:	e58d2044 	str	r2, [sp, #68]	; 0x44
  11513c:	e58d1070 	str	r1, [sp, #112]	; 0x70
  115140:	e28aa008 	add	sl, sl, #8
  115144:	e3160004 	tst	r6, #4
  115148:	0a00003c 	beq	115240 <_vfiprintf_r+0xea4>
  11514c:	e59d3020 	ldr	r3, [sp, #32]
  115150:	e59d1008 	ldr	r1, [sp, #8]
  115154:	e0614003 	rsb	r4, r1, r3
  115158:	e3540000 	cmp	r4, #0
  11515c:	da000037 	ble	115240 <_vfiprintf_r+0xea4>
  115160:	e3540010 	cmp	r4, #16
  115164:	da000198 	ble	1157cc <_vfiprintf_r+0x1430>
  115168:	e30771e0 	movw	r7, #29152	; 0x71e0
  11516c:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  115170:	e3407011 	movt	r7, #17
  115174:	e3a05010 	mov	r5, #16
  115178:	e59d6010 	ldr	r6, [sp, #16]
  11517c:	e59d9004 	ldr	r9, [sp, #4]
  115180:	ea000002 	b	115190 <_vfiprintf_r+0xdf4>
  115184:	e2444010 	sub	r4, r4, #16
  115188:	e3540010 	cmp	r4, #16
  11518c:	da00001b 	ble	115200 <_vfiprintf_r+0xe64>
  115190:	e2813001 	add	r3, r1, #1
  115194:	e2822010 	add	r2, r2, #16
  115198:	e3530007 	cmp	r3, #7
  11519c:	e58a7000 	str	r7, [sl]
  1151a0:	e2810002 	add	r0, r1, #2
  1151a4:	e58a5004 	str	r5, [sl, #4]
  1151a8:	e58d2044 	str	r2, [sp, #68]	; 0x44
  1151ac:	e1a01003 	mov	r1, r3
  1151b0:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1151b4:	d28aa008 	addle	sl, sl, #8
  1151b8:	dafffff1 	ble	115184 <_vfiprintf_r+0xde8>
  1151bc:	e3520000 	cmp	r2, #0
  1151c0:	e3a00001 	mov	r0, #1
  1151c4:	e1a01002 	mov	r1, r2
  1151c8:	e1a0a00b 	mov	sl, fp
  1151cc:	0affffec 	beq	115184 <_vfiprintf_r+0xde8>
  1151d0:	e28d203c 	add	r2, sp, #60	; 0x3c
  1151d4:	e1a01009 	mov	r1, r9
  1151d8:	e1a00006 	mov	r0, r6
  1151dc:	ebfffc3e 	bl	1142dc <__sprint_r.part.0>
  1151e0:	e3500000 	cmp	r0, #0
  1151e4:	1a000025 	bne	115280 <_vfiprintf_r+0xee4>
  1151e8:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  1151ec:	e2444010 	sub	r4, r4, #16
  1151f0:	e3540010 	cmp	r4, #16
  1151f4:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  1151f8:	e2810001 	add	r0, r1, #1
  1151fc:	caffffe3 	bgt	115190 <_vfiprintf_r+0xdf4>
  115200:	e3500007 	cmp	r0, #7
  115204:	e0822004 	add	r2, r2, r4
  115208:	e58d2044 	str	r2, [sp, #68]	; 0x44
  11520c:	e58a7000 	str	r7, [sl]
  115210:	e58a4004 	str	r4, [sl, #4]
  115214:	e58d0040 	str	r0, [sp, #64]	; 0x40
  115218:	da000008 	ble	115240 <_vfiprintf_r+0xea4>
  11521c:	e3520000 	cmp	r2, #0
  115220:	0a00003d 	beq	11531c <_vfiprintf_r+0xf80>
  115224:	e28d203c 	add	r2, sp, #60	; 0x3c
  115228:	e59d1004 	ldr	r1, [sp, #4]
  11522c:	e59d0010 	ldr	r0, [sp, #16]
  115230:	ebfffc29 	bl	1142dc <__sprint_r.part.0>
  115234:	e3500000 	cmp	r0, #0
  115238:	1a00000f 	bne	11527c <_vfiprintf_r+0xee0>
  11523c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  115240:	e59d3014 	ldr	r3, [sp, #20]
  115244:	e59d1020 	ldr	r1, [sp, #32]
  115248:	e59d0008 	ldr	r0, [sp, #8]
  11524c:	e1510000 	cmp	r1, r0
  115250:	a0833001 	addge	r3, r3, r1
  115254:	b0833000 	addlt	r3, r3, r0
  115258:	e3520000 	cmp	r2, #0
  11525c:	e58d3014 	str	r3, [sp, #20]
  115260:	0a000034 	beq	115338 <_vfiprintf_r+0xf9c>
  115264:	e28d203c 	add	r2, sp, #60	; 0x3c
  115268:	e59d1004 	ldr	r1, [sp, #4]
  11526c:	e59d0010 	ldr	r0, [sp, #16]
  115270:	ebfffc19 	bl	1142dc <__sprint_r.part.0>
  115274:	e3500000 	cmp	r0, #0
  115278:	0a00002e 	beq	115338 <_vfiprintf_r+0xf9c>
  11527c:	e59d9004 	ldr	r9, [sp, #4]
  115280:	e5993064 	ldr	r3, [r9, #100]	; 0x64
  115284:	e3130001 	tst	r3, #1
  115288:	e1d930bc 	ldrh	r3, [r9, #12]
  11528c:	1a000001 	bne	115298 <_vfiprintf_r+0xefc>
  115290:	e3130c02 	tst	r3, #512	; 0x200
  115294:	0a00005f 	beq	115418 <_vfiprintf_r+0x107c>
  115298:	e3130040 	tst	r3, #64	; 0x40
  11529c:	1afffcfc 	bne	114694 <_vfiprintf_r+0x2f8>
  1152a0:	e59d0014 	ldr	r0, [sp, #20]
  1152a4:	e28dd0b4 	add	sp, sp, #180	; 0xb4
  1152a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1152ac:	e28d203c 	add	r2, sp, #60	; 0x3c
  1152b0:	e59d1004 	ldr	r1, [sp, #4]
  1152b4:	e59d0010 	ldr	r0, [sp, #16]
  1152b8:	ebfffc07 	bl	1142dc <__sprint_r.part.0>
  1152bc:	e3500000 	cmp	r0, #0
  1152c0:	1affffed 	bne	11527c <_vfiprintf_r+0xee0>
  1152c4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  1152c8:	e1a0a00b 	mov	sl, fp
  1152cc:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  1152d0:	e2800001 	add	r0, r0, #1
  1152d4:	e59d3018 	ldr	r3, [sp, #24]
  1152d8:	e3500007 	cmp	r0, #7
  1152dc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  1152e0:	e58d0040 	str	r0, [sp, #64]	; 0x40
  1152e4:	e0832002 	add	r2, r3, r2
  1152e8:	e58d2044 	str	r2, [sp, #68]	; 0x44
  1152ec:	e88a000a 	stm	sl, {r1, r3}
  1152f0:	daffff92 	ble	115140 <_vfiprintf_r+0xda4>
  1152f4:	e3520000 	cmp	r2, #0
  1152f8:	1a000027 	bne	11539c <_vfiprintf_r+0x1000>
  1152fc:	e3160004 	tst	r6, #4
  115300:	e58d2040 	str	r2, [sp, #64]	; 0x40
  115304:	0a000004 	beq	11531c <_vfiprintf_r+0xf80>
  115308:	e59d3020 	ldr	r3, [sp, #32]
  11530c:	e59d1008 	ldr	r1, [sp, #8]
  115310:	e0614003 	rsb	r4, r1, r3
  115314:	e3540000 	cmp	r4, #0
  115318:	ca0000ff 	bgt	11571c <_vfiprintf_r+0x1380>
  11531c:	e59d3014 	ldr	r3, [sp, #20]
  115320:	e59d2020 	ldr	r2, [sp, #32]
  115324:	e59d1008 	ldr	r1, [sp, #8]
  115328:	e1520001 	cmp	r2, r1
  11532c:	a0833002 	addge	r3, r3, r2
  115330:	b0833001 	addlt	r3, r3, r1
  115334:	e58d3014 	str	r3, [sp, #20]
  115338:	e3a03000 	mov	r3, #0
  11533c:	e1a0a00b 	mov	sl, fp
  115340:	e58d3040 	str	r3, [sp, #64]	; 0x40
  115344:	eafffc3f 	b	114448 <_vfiprintf_r+0xac>
  115348:	e1a00001 	mov	r0, r1
  11534c:	e1a0a00b 	mov	sl, fp
  115350:	e28d3038 	add	r3, sp, #56	; 0x38
  115354:	e3a02002 	mov	r2, #2
  115358:	e58d3070 	str	r3, [sp, #112]	; 0x70
  11535c:	e58d2074 	str	r2, [sp, #116]	; 0x74
  115360:	e1a01000 	mov	r1, r0
  115364:	e28aa008 	add	sl, sl, #8
  115368:	e2800001 	add	r0, r0, #1
  11536c:	eaffff34 	b	115044 <_vfiprintf_r+0xca8>
  115370:	e3540000 	cmp	r4, #0
  115374:	e5cdc037 	strb	ip, [sp, #55]	; 0x37
  115378:	bafffd00 	blt	114780 <_vfiprintf_r+0x3e4>
  11537c:	13a05001 	movne	r5, #1
  115380:	03a05000 	moveq	r5, #0
  115384:	e1903001 	orrs	r3, r0, r1
  115388:	e3c66080 	bic	r6, r6, #128	; 0x80
  11538c:	13855001 	orrne	r5, r5, #1
  115390:	e3550000 	cmp	r5, #0
  115394:	1afffcf9 	bne	114780 <_vfiprintf_r+0x3e4>
  115398:	eafffe00 	b	114ba0 <_vfiprintf_r+0x804>
  11539c:	e28d203c 	add	r2, sp, #60	; 0x3c
  1153a0:	e59d1004 	ldr	r1, [sp, #4]
  1153a4:	e59d0010 	ldr	r0, [sp, #16]
  1153a8:	ebfffbcb 	bl	1142dc <__sprint_r.part.0>
  1153ac:	e3500000 	cmp	r0, #0
  1153b0:	1affffb1 	bne	11527c <_vfiprintf_r+0xee0>
  1153b4:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  1153b8:	e1a0a00b 	mov	sl, fp
  1153bc:	eaffff60 	b	115144 <_vfiprintf_r+0xda8>
  1153c0:	e5910000 	ldr	r0, [r1]
  1153c4:	e2811004 	add	r1, r1, #4
  1153c8:	e58d101c 	str	r1, [sp, #28]
  1153cc:	e3a01000 	mov	r1, #0
  1153d0:	eafffde7 	b	114b74 <_vfiprintf_r+0x7d8>
  1153d4:	e59d201c 	ldr	r2, [sp, #28]
  1153d8:	e5923000 	ldr	r3, [r2]
  1153dc:	e2822004 	add	r2, r2, #4
  1153e0:	e58d201c 	str	r2, [sp, #28]
  1153e4:	ee803b90 	vdup.32	d16, r3
  1153e8:	f2e000b0 	vshr.s64	d16, d16, #32
  1153ec:	edcd0b02 	vstr	d16, [sp, #8]
  1153f0:	ec532b30 	vmov	r2, r3, d16
  1153f4:	eafffdbf 	b	114af8 <_vfiprintf_r+0x75c>
  1153f8:	e28d203c 	add	r2, sp, #60	; 0x3c
  1153fc:	e59d1004 	ldr	r1, [sp, #4]
  115400:	e59d0010 	ldr	r0, [sp, #16]
  115404:	ebfffbb4 	bl	1142dc <__sprint_r.part.0>
  115408:	e3500000 	cmp	r0, #0
  11540c:	1affff9a 	bne	11527c <_vfiprintf_r+0xee0>
  115410:	e1a0a00b 	mov	sl, fp
  115414:	eafffc21 	b	1144a0 <_vfiprintf_r+0x104>
  115418:	e2890058 	add	r0, r9, #88	; 0x58
  11541c:	eb0003eb 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  115420:	e1d930bc 	ldrh	r3, [r9, #12]
  115424:	eaffff9b 	b	115298 <_vfiprintf_r+0xefc>
  115428:	e28d203c 	add	r2, sp, #60	; 0x3c
  11542c:	e59d1004 	ldr	r1, [sp, #4]
  115430:	e59d0010 	ldr	r0, [sp, #16]
  115434:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  115438:	ebfffba7 	bl	1142dc <__sprint_r.part.0>
  11543c:	e3500000 	cmp	r0, #0
  115440:	1affff8d 	bne	11527c <_vfiprintf_r+0xee0>
  115444:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  115448:	e1a0a00b 	mov	sl, fp
  11544c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  115450:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  115454:	e2810001 	add	r0, r1, #1
  115458:	eafffd2c 	b	114910 <_vfiprintf_r+0x574>
  11545c:	e28d203c 	add	r2, sp, #60	; 0x3c
  115460:	e59d1004 	ldr	r1, [sp, #4]
  115464:	e59d0010 	ldr	r0, [sp, #16]
  115468:	ebfffb9b 	bl	1142dc <__sprint_r.part.0>
  11546c:	e3500000 	cmp	r0, #0
  115470:	1affff81 	bne	11527c <_vfiprintf_r+0xee0>
  115474:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  115478:	e1a0a00b 	mov	sl, fp
  11547c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  115480:	e2810001 	add	r0, r1, #1
  115484:	eafffeee 	b	115044 <_vfiprintf_r+0xca8>
  115488:	e3520000 	cmp	r2, #0
  11548c:	1a0000b2 	bne	11575c <_vfiprintf_r+0x13c0>
  115490:	e3a00001 	mov	r0, #1
  115494:	e1a01002 	mov	r1, r2
  115498:	e1a0a00b 	mov	sl, fp
  11549c:	eafffeeb 	b	115050 <_vfiprintf_r+0xcb4>
  1154a0:	e3540000 	cmp	r4, #0
  1154a4:	e3a0c030 	mov	ip, #48	; 0x30
  1154a8:	e5cd3039 	strb	r3, [sp, #57]	; 0x39
  1154ac:	a3c66080 	bicge	r6, r6, #128	; 0x80
  1154b0:	e3a03000 	mov	r3, #0
  1154b4:	e5cdc038 	strb	ip, [sp, #56]	; 0x38
  1154b8:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  1154bc:	e3866002 	orr	r6, r6, #2
  1154c0:	eafffcae 	b	114780 <_vfiprintf_r+0x3e4>
  1154c4:	e59d101c 	ldr	r1, [sp, #28]
  1154c8:	e3540000 	cmp	r4, #0
  1154cc:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  1154d0:	e3a03000 	mov	r3, #0
  1154d4:	e5912000 	ldr	r2, [r1]
  1154d8:	e2810004 	add	r0, r1, #4
  1154dc:	ba00007a 	blt	1156cc <_vfiprintf_r+0x1330>
  1154e0:	e1821003 	orr	r1, r2, r3
  1154e4:	e3c66080 	bic	r6, r6, #128	; 0x80
  1154e8:	e3510000 	cmp	r1, #0
  1154ec:	03540000 	cmpeq	r4, #0
  1154f0:	e58d001c 	str	r0, [sp, #28]
  1154f4:	1afffe41 	bne	114e00 <_vfiprintf_r+0xa64>
  1154f8:	eafffd66 	b	114a98 <_vfiprintf_r+0x6fc>
  1154fc:	e59d201c 	ldr	r2, [sp, #28]
  115500:	e3540000 	cmp	r4, #0
  115504:	e5cd5037 	strb	r5, [sp, #55]	; 0x37
  115508:	e5923000 	ldr	r3, [r2]
  11550c:	e2822004 	add	r2, r2, #4
  115510:	ee803b90 	vdup.32	d16, r3
  115514:	f3e000b0 	vshr.u64	d16, d16, #32
  115518:	edcd0b02 	vstr	d16, [sp, #8]
  11551c:	ba000068 	blt	1156c4 <_vfiprintf_r+0x1328>
  115520:	e1cd00d8 	ldrd	r0, [sp, #8]
  115524:	e1803001 	orr	r3, r0, r1
  115528:	e3c66080 	bic	r6, r6, #128	; 0x80
  11552c:	e3530000 	cmp	r3, #0
  115530:	03540000 	cmpeq	r4, #0
  115534:	e58d201c 	str	r2, [sp, #28]
  115538:	13a03001 	movne	r3, #1
  11553c:	03a03000 	moveq	r3, #0
  115540:	1afffe79 	bne	114f2c <_vfiprintf_r+0xb90>
  115544:	e1a05003 	mov	r5, r3
  115548:	eafffd94 	b	114ba0 <_vfiprintf_r+0x804>
  11554c:	e58d6018 	str	r6, [sp, #24]
  115550:	e1a0900b 	mov	r9, fp
  115554:	e1cd60d8 	ldrd	r6, [sp, #8]
  115558:	e1a00006 	mov	r0, r6
  11555c:	e1a01007 	mov	r1, r7
  115560:	e3a0200a 	mov	r2, #10
  115564:	e3a03000 	mov	r3, #0
  115568:	ebffdd4f 	bl	10caac <__aeabi_uldivmod>
  11556c:	e2822030 	add	r2, r2, #48	; 0x30
  115570:	e1a00006 	mov	r0, r6
  115574:	e1a01007 	mov	r1, r7
  115578:	e5692001 	strb	r2, [r9, #-1]!
  11557c:	e3a03000 	mov	r3, #0
  115580:	e3a0200a 	mov	r2, #10
  115584:	ebffdd48 	bl	10caac <__aeabi_uldivmod>
  115588:	e1a06000 	mov	r6, r0
  11558c:	e1a07001 	mov	r7, r1
  115590:	e1963007 	orrs	r3, r6, r7
  115594:	1affffef 	bne	115558 <_vfiprintf_r+0x11bc>
  115598:	e069300b 	rsb	r3, r9, fp
  11559c:	e59d6018 	ldr	r6, [sp, #24]
  1155a0:	e58d9028 	str	r9, [sp, #40]	; 0x28
  1155a4:	e58d3018 	str	r3, [sp, #24]
  1155a8:	eafffc81 	b	1147b4 <_vfiprintf_r+0x418>
  1155ac:	e1cd20d8 	ldrd	r2, [sp, #8]
  1155b0:	e3a0502d 	mov	r5, #45	; 0x2d
  1155b4:	e5cd5037 	strb	r5, [sp, #55]	; 0x37
  1155b8:	e2722000 	rsbs	r2, r2, #0
  1155bc:	e2e33000 	rsc	r3, r3, #0
  1155c0:	e3540000 	cmp	r4, #0
  1155c4:	e1cd20f8 	strd	r2, [sp, #8]
  1155c8:	a3c66080 	bicge	r6, r6, #128	; 0x80
  1155cc:	eafffe56 	b	114f2c <_vfiprintf_r+0xb90>
  1155d0:	e3530000 	cmp	r3, #0
  1155d4:	0a000015 	beq	115630 <_vfiprintf_r+0x1294>
  1155d8:	e28d2038 	add	r2, sp, #56	; 0x38
  1155dc:	e3a03002 	mov	r3, #2
  1155e0:	e58d2070 	str	r2, [sp, #112]	; 0x70
  1155e4:	e3a00001 	mov	r0, #1
  1155e8:	e1a02003 	mov	r2, r3
  1155ec:	e58d3074 	str	r3, [sp, #116]	; 0x74
  1155f0:	e1a0a00b 	mov	sl, fp
  1155f4:	eaffff59 	b	115360 <_vfiprintf_r+0xfc4>
  1155f8:	e2890058 	add	r0, r9, #88	; 0x58
  1155fc:	eb000373 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  115600:	eafffc23 	b	114694 <_vfiprintf_r+0x2f8>
  115604:	e3160010 	tst	r6, #16
  115608:	1a00000c 	bne	115640 <_vfiprintf_r+0x12a4>
  11560c:	e3160040 	tst	r6, #64	; 0x40
  115610:	0a00000a 	beq	115640 <_vfiprintf_r+0x12a4>
  115614:	e59d201c 	ldr	r2, [sp, #28]
  115618:	e5923000 	ldr	r3, [r2]
  11561c:	e2822004 	add	r2, r2, #4
  115620:	e58d201c 	str	r2, [sp, #28]
  115624:	e1dd21b4 	ldrh	r2, [sp, #20]
  115628:	e1c320b0 	strh	r2, [r3]
  11562c:	eafffb85 	b	114448 <_vfiprintf_r+0xac>
  115630:	e1a01002 	mov	r1, r2
  115634:	e3a00001 	mov	r0, #1
  115638:	e1a0a00b 	mov	sl, fp
  11563c:	eafffe83 	b	115050 <_vfiprintf_r+0xcb4>
  115640:	e59d201c 	ldr	r2, [sp, #28]
  115644:	e5923000 	ldr	r3, [r2]
  115648:	e2822004 	add	r2, r2, #4
  11564c:	e58d201c 	str	r2, [sp, #28]
  115650:	e59d2014 	ldr	r2, [sp, #20]
  115654:	e5832000 	str	r2, [r3]
  115658:	eafffb7a 	b	114448 <_vfiprintf_r+0xac>
  11565c:	e59d101c 	ldr	r1, [sp, #28]
  115660:	e3540000 	cmp	r4, #0
  115664:	e5cd3037 	strb	r3, [sp, #55]	; 0x37
  115668:	e3a03000 	mov	r3, #0
  11566c:	e5912000 	ldr	r2, [r1]
  115670:	e2810004 	add	r0, r1, #4
  115674:	ba000014 	blt	1156cc <_vfiprintf_r+0x1330>
  115678:	13a01001 	movne	r1, #1
  11567c:	03a01000 	moveq	r1, #0
  115680:	e192c003 	orrs	ip, r2, r3
  115684:	e3c66080 	bic	r6, r6, #128	; 0x80
  115688:	13811001 	orrne	r1, r1, #1
  11568c:	e58d001c 	str	r0, [sp, #28]
  115690:	e3510000 	cmp	r1, #0
  115694:	1afffdd9 	bne	114e00 <_vfiprintf_r+0xa64>
  115698:	eafffcfe 	b	114a98 <_vfiprintf_r+0x6fc>
  11569c:	e59d201c 	ldr	r2, [sp, #28]
  1156a0:	e3540000 	cmp	r4, #0
  1156a4:	e5cd5037 	strb	r5, [sp, #55]	; 0x37
  1156a8:	e5923000 	ldr	r3, [r2]
  1156ac:	e2822004 	add	r2, r2, #4
  1156b0:	ee803b90 	vdup.32	d16, r3
  1156b4:	f3e000b0 	vshr.u64	d16, d16, #32
  1156b8:	edcd0b02 	vstr	d16, [sp, #8]
  1156bc:	ac510b30 	vmovge	r0, r1, d16
  1156c0:	aaffff97 	bge	115524 <_vfiprintf_r+0x1188>
  1156c4:	e58d201c 	str	r2, [sp, #28]
  1156c8:	eafffe17 	b	114f2c <_vfiprintf_r+0xb90>
  1156cc:	e58d001c 	str	r0, [sp, #28]
  1156d0:	eafffdca 	b	114e00 <_vfiprintf_r+0xa64>
  1156d4:	e28d203c 	add	r2, sp, #60	; 0x3c
  1156d8:	e59d1004 	ldr	r1, [sp, #4]
  1156dc:	e59d0010 	ldr	r0, [sp, #16]
  1156e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1156e4:	ebfffafc 	bl	1142dc <__sprint_r.part.0>
  1156e8:	e3500000 	cmp	r0, #0
  1156ec:	1afffee2 	bne	11527c <_vfiprintf_r+0xee0>
  1156f0:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  1156f4:	e1a0a00b 	mov	sl, fp
  1156f8:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  1156fc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  115700:	e2810001 	add	r0, r1, #1
  115704:	eafffe3b 	b	114ff8 <_vfiprintf_r+0xc5c>
  115708:	e3072078 	movw	r2, #28792	; 0x7078
  11570c:	e3866002 	orr	r6, r6, #2
  115710:	e58dc01c 	str	ip, [sp, #28]
  115714:	e3402011 	movt	r2, #17
  115718:	eafffc18 	b	114780 <_vfiprintf_r+0x3e4>
  11571c:	e1a0a00b 	mov	sl, fp
  115720:	eafffe8e 	b	115160 <_vfiprintf_r+0xdc4>
  115724:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  115728:	e59d9004 	ldr	r9, [sp, #4]
  11572c:	e3530000 	cmp	r3, #0
  115730:	1a000031 	bne	1157fc <_vfiprintf_r+0x1460>
  115734:	e3a03000 	mov	r3, #0
  115738:	e58d3040 	str	r3, [sp, #64]	; 0x40
  11573c:	eafffecf 	b	115280 <_vfiprintf_r+0xee4>
  115740:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  115744:	e3a04000 	mov	r4, #0
  115748:	e58d701c 	str	r7, [sp, #28]
  11574c:	faffddbb 	blx	10ce40 <strlen>
  115750:	e5dd5037 	ldrb	r5, [sp, #55]	; 0x37
  115754:	e58d0018 	str	r0, [sp, #24]
  115758:	eafffc15 	b	1147b4 <_vfiprintf_r+0x418>
  11575c:	e28d203c 	add	r2, sp, #60	; 0x3c
  115760:	e59d1004 	ldr	r1, [sp, #4]
  115764:	e59d0010 	ldr	r0, [sp, #16]
  115768:	ebfffadb 	bl	1142dc <__sprint_r.part.0>
  11576c:	e3500000 	cmp	r0, #0
  115770:	1afffec1 	bne	11527c <_vfiprintf_r+0xee0>
  115774:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  115778:	e1a0a00b 	mov	sl, fp
  11577c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  115780:	e2810001 	add	r0, r1, #1
  115784:	eafffe31 	b	115050 <_vfiprintf_r+0xcb4>
  115788:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  11578c:	e30771e0 	movw	r7, #29152	; 0x71e0
  115790:	e3407011 	movt	r7, #17
  115794:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
  115798:	e2811001 	add	r1, r1, #1
  11579c:	eafffc44 	b	1148b4 <_vfiprintf_r+0x518>
  1157a0:	e3540006 	cmp	r4, #6
  1157a4:	e307308c 	movw	r3, #28812	; 0x708c
  1157a8:	31a02004 	movcc	r2, r4
  1157ac:	23a02006 	movcs	r2, #6
  1157b0:	e58d2018 	str	r2, [sp, #24]
  1157b4:	e1c22fc2 	bic	r2, r2, r2, asr #31
  1157b8:	e3403011 	movt	r3, #17
  1157bc:	e58d701c 	str	r7, [sp, #28]
  1157c0:	e58d2008 	str	r2, [sp, #8]
  1157c4:	e58d3028 	str	r3, [sp, #40]	; 0x28
  1157c8:	eafffd05 	b	114be4 <_vfiprintf_r+0x848>
  1157cc:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  1157d0:	e30771e0 	movw	r7, #29152	; 0x71e0
  1157d4:	e3407011 	movt	r7, #17
  1157d8:	e2800001 	add	r0, r0, #1
  1157dc:	eafffe87 	b	115200 <_vfiprintf_r+0xe64>
  1157e0:	e58d4018 	str	r4, [sp, #24]
  1157e4:	e1a04000 	mov	r4, r0
  1157e8:	e5dd5037 	ldrb	r5, [sp, #55]	; 0x37
  1157ec:	e58d701c 	str	r7, [sp, #28]
  1157f0:	eafffbef 	b	1147b4 <_vfiprintf_r+0x418>
  1157f4:	e1a0c000 	mov	ip, r0
  1157f8:	eafffc85 	b	114a14 <_vfiprintf_r+0x678>
  1157fc:	e59d0010 	ldr	r0, [sp, #16]
  115800:	e28d203c 	add	r2, sp, #60	; 0x3c
  115804:	e1a01009 	mov	r1, r9
  115808:	ebfffab3 	bl	1142dc <__sprint_r.part.0>
  11580c:	e3500000 	cmp	r0, #0
  115810:	1afffe9a 	bne	115280 <_vfiprintf_r+0xee4>
  115814:	eaffffc6 	b	115734 <_vfiprintf_r+0x1398>
  115818:	e59d301c 	ldr	r3, [sp, #28]
  11581c:	e5934000 	ldr	r4, [r3]
  115820:	e283c004 	add	ip, r3, #4
  115824:	e58dc01c 	str	ip, [sp, #28]
  115828:	e5d83001 	ldrb	r3, [r8, #1]
  11582c:	e1a0800e 	mov	r8, lr
  115830:	e3540000 	cmp	r4, #0
  115834:	aafffb28 	bge	1144dc <_vfiprintf_r+0x140>
  115838:	eafffb26 	b	1144d8 <_vfiprintf_r+0x13c>
  11583c:	e5dd5037 	ldrb	r5, [sp, #55]	; 0x37
  115840:	eafffcd6 	b	114ba0 <_vfiprintf_r+0x804>
  115844:	001171f0 			; <UNDEFINED> instruction: 0x001171f0

00115848 <vfiprintf>:
  115848:	e92d4070 	push	{r4, r5, r6, lr}
  11584c:	e1a05001 	mov	r5, r1
  115850:	e1a06002 	mov	r6, r2
  115854:	e1a04000 	mov	r4, r0
  115858:	ebfff0ed 	bl	111c14 <__getreent>
  11585c:	e1a03006 	mov	r3, r6
  115860:	e1a02005 	mov	r2, r5
  115864:	e1a01004 	mov	r1, r4
  115868:	e8bd4070 	pop	{r4, r5, r6, lr}
  11586c:	eafffaca 	b	11439c <_vfiprintf_r>

00115870 <__sbprintf>:
  115870:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  115874:	e1a04001 	mov	r4, r1
  115878:	e1d110bc 	ldrh	r1, [r1, #12]
  11587c:	e1a07000 	mov	r7, r0
  115880:	e1a08003 	mov	r8, r3
  115884:	e1a06002 	mov	r6, r2
  115888:	e1d4c0be 	ldrh	ip, [r4, #14]
  11588c:	e24dde46 	sub	sp, sp, #1120	; 0x460
  115890:	e5940064 	ldr	r0, [r4, #100]	; 0x64
  115894:	e24dd008 	sub	sp, sp, #8
  115898:	e594301c 	ldr	r3, [r4, #28]
  11589c:	e3c11002 	bic	r1, r1, #2
  1158a0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
  1158a4:	e1cd10bc 	strh	r1, [sp, #12]
  1158a8:	e3a01b01 	mov	r1, #1024	; 0x400
  1158ac:	e1cdc0be 	strh	ip, [sp, #14]
  1158b0:	e28dc068 	add	ip, sp, #104	; 0x68
  1158b4:	e58d0064 	str	r0, [sp, #100]	; 0x64
  1158b8:	e28d0058 	add	r0, sp, #88	; 0x58
  1158bc:	e58d301c 	str	r3, [sp, #28]
  1158c0:	e3a03000 	mov	r3, #0
  1158c4:	e58d2024 	str	r2, [sp, #36]	; 0x24
  1158c8:	e58dc000 	str	ip, [sp]
  1158cc:	e58dc010 	str	ip, [sp, #16]
  1158d0:	e58d1008 	str	r1, [sp, #8]
  1158d4:	e58d1014 	str	r1, [sp, #20]
  1158d8:	e58d3018 	str	r3, [sp, #24]
  1158dc:	eb0002b7 	bl	1163c0 <__generic_gxx_recursive_mutex_init_function>
  1158e0:	e1a02006 	mov	r2, r6
  1158e4:	e1a03008 	mov	r3, r8
  1158e8:	e1a0100d 	mov	r1, sp
  1158ec:	e1a00007 	mov	r0, r7
  1158f0:	ebfffaa9 	bl	11439c <_vfiprintf_r>
  1158f4:	e2506000 	subs	r6, r0, #0
  1158f8:	ba000004 	blt	115910 <__sbprintf+0xa0>
  1158fc:	e1a0100d 	mov	r1, sp
  115900:	e1a00007 	mov	r0, r7
  115904:	ebffed42 	bl	110e14 <_fflush_r>
  115908:	e3500000 	cmp	r0, #0
  11590c:	13e06000 	mvnne	r6, #0
  115910:	e1dd30bc 	ldrh	r3, [sp, #12]
  115914:	e28d0058 	add	r0, sp, #88	; 0x58
  115918:	e3130040 	tst	r3, #64	; 0x40
  11591c:	11d430bc 	ldrhne	r3, [r4, #12]
  115920:	13833040 	orrne	r3, r3, #64	; 0x40
  115924:	11c430bc 	strhne	r3, [r4, #12]
  115928:	eb0002a6 	bl	1163c8 <__generic_gxx_recursive_mutex_destroy>
  11592c:	e1a00006 	mov	r0, r6
  115930:	e28dde46 	add	sp, sp, #1120	; 0x460
  115934:	e28dd008 	add	sp, sp, #8
  115938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0011593c <_write_r>:
  11593c:	e92d4070 	push	{r4, r5, r6, lr}
  115940:	e1a0c001 	mov	ip, r1
  115944:	e30945f0 	movw	r4, #38384	; 0x95f0
  115948:	e1a01002 	mov	r1, r2
  11594c:	e1a05000 	mov	r5, r0
  115950:	e1a02003 	mov	r2, r3
  115954:	e1a0000c 	mov	r0, ip
  115958:	e3a03000 	mov	r3, #0
  11595c:	e3404011 	movt	r4, #17
  115960:	e5843000 	str	r3, [r4]
  115964:	eb000393 	bl	1167b8 <_write>
  115968:	e3700001 	cmn	r0, #1
  11596c:	18bd8070 	popne	{r4, r5, r6, pc}
  115970:	e5943000 	ldr	r3, [r4]
  115974:	e3530000 	cmp	r3, #0
  115978:	15853000 	strne	r3, [r5]
  11597c:	e8bd8070 	pop	{r4, r5, r6, pc}

00115980 <_calloc_r>:
  115980:	e92d4010 	push	{r4, lr}
  115984:	e0010192 	mul	r1, r2, r1
  115988:	ebfff148 	bl	111eb0 <_malloc_r>
  11598c:	e2504000 	subs	r4, r0, #0
  115990:	0a000018 	beq	1159f8 <_calloc_r+0x78>
  115994:	e5142004 	ldr	r2, [r4, #-4]
  115998:	e3c22003 	bic	r2, r2, #3
  11599c:	e2422004 	sub	r2, r2, #4
  1159a0:	e3520024 	cmp	r2, #36	; 0x24
  1159a4:	8a000015 	bhi	115a00 <_calloc_r+0x80>
  1159a8:	e3520013 	cmp	r2, #19
  1159ac:	91a02004 	movls	r2, r4
  1159b0:	9a00000c 	bls	1159e8 <_calloc_r+0x68>
  1159b4:	e352001b 	cmp	r2, #27
  1159b8:	e3a03000 	mov	r3, #0
  1159bc:	e5843000 	str	r3, [r4]
  1159c0:	92842008 	addls	r2, r4, #8
  1159c4:	e5843004 	str	r3, [r4, #4]
  1159c8:	9a000006 	bls	1159e8 <_calloc_r+0x68>
  1159cc:	e3520024 	cmp	r2, #36	; 0x24
  1159d0:	e5843008 	str	r3, [r4, #8]
  1159d4:	12842010 	addne	r2, r4, #16
  1159d8:	02842018 	addeq	r2, r4, #24
  1159dc:	e584300c 	str	r3, [r4, #12]
  1159e0:	05843010 	streq	r3, [r4, #16]
  1159e4:	05843014 	streq	r3, [r4, #20]
  1159e8:	e3a03000 	mov	r3, #0
  1159ec:	e5823000 	str	r3, [r2]
  1159f0:	e5823004 	str	r3, [r2, #4]
  1159f4:	e5823008 	str	r3, [r2, #8]
  1159f8:	e1a00004 	mov	r0, r4
  1159fc:	e8bd8010 	pop	{r4, pc}
  115a00:	e3a01000 	mov	r1, #0
  115a04:	ebfff3ee 	bl	1129c4 <memset>
  115a08:	e1a00004 	mov	r0, r4
  115a0c:	e8bd8010 	pop	{r4, pc}

00115a10 <_close_r>:
  115a10:	e92d4070 	push	{r4, r5, r6, lr}
  115a14:	e30945f0 	movw	r4, #38384	; 0x95f0
  115a18:	e3a03000 	mov	r3, #0
  115a1c:	e1a05000 	mov	r5, r0
  115a20:	e3404011 	movt	r4, #17
  115a24:	e1a00001 	mov	r0, r1
  115a28:	e5843000 	str	r3, [r4]
  115a2c:	eb00029d 	bl	1164a8 <_close>
  115a30:	e3700001 	cmn	r0, #1
  115a34:	18bd8070 	popne	{r4, r5, r6, pc}
  115a38:	e5943000 	ldr	r3, [r4]
  115a3c:	e3530000 	cmp	r3, #0
  115a40:	15853000 	strne	r3, [r5]
  115a44:	e8bd8070 	pop	{r4, r5, r6, pc}

00115a48 <_fclose_r>:
  115a48:	e3510000 	cmp	r1, #0
  115a4c:	0a000044 	beq	115b64 <_fclose_r+0x11c>
  115a50:	e3500000 	cmp	r0, #0
  115a54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  115a58:	e1a05000 	mov	r5, r0
  115a5c:	e1a04001 	mov	r4, r1
  115a60:	0a000002 	beq	115a70 <_fclose_r+0x28>
  115a64:	e5903038 	ldr	r3, [r0, #56]	; 0x38
  115a68:	e3530000 	cmp	r3, #0
  115a6c:	0a000036 	beq	115b4c <_fclose_r+0x104>
  115a70:	e1d430bc 	ldrh	r3, [r4, #12]
  115a74:	e2847058 	add	r7, r4, #88	; 0x58
  115a78:	e3130c02 	tst	r3, #512	; 0x200
  115a7c:	0a000029 	beq	115b28 <_fclose_r+0xe0>
  115a80:	e1a01004 	mov	r1, r4
  115a84:	e1a00005 	mov	r0, r5
  115a88:	ebffec50 	bl	110bd0 <__sflush_r>
  115a8c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
  115a90:	e1a06000 	mov	r6, r0
  115a94:	e3530000 	cmp	r3, #0
  115a98:	0a000004 	beq	115ab0 <_fclose_r+0x68>
  115a9c:	e594101c 	ldr	r1, [r4, #28]
  115aa0:	e1a00005 	mov	r0, r5
  115aa4:	e12fff33 	blx	r3
  115aa8:	e3500000 	cmp	r0, #0
  115aac:	b3e06000 	mvnlt	r6, #0
  115ab0:	e1d430bc 	ldrh	r3, [r4, #12]
  115ab4:	e3130080 	tst	r3, #128	; 0x80
  115ab8:	1a000025 	bne	115b54 <_fclose_r+0x10c>
  115abc:	e5941030 	ldr	r1, [r4, #48]	; 0x30
  115ac0:	e3510000 	cmp	r1, #0
  115ac4:	0a000006 	beq	115ae4 <_fclose_r+0x9c>
  115ac8:	e2843040 	add	r3, r4, #64	; 0x40
  115acc:	e1510003 	cmp	r1, r3
  115ad0:	0a000001 	beq	115adc <_fclose_r+0x94>
  115ad4:	e1a00005 	mov	r0, r5
  115ad8:	ebffee2e 	bl	111398 <_free_r>
  115adc:	e3a03000 	mov	r3, #0
  115ae0:	e5843030 	str	r3, [r4, #48]	; 0x30
  115ae4:	e5941044 	ldr	r1, [r4, #68]	; 0x44
  115ae8:	e3510000 	cmp	r1, #0
  115aec:	0a000003 	beq	115b00 <_fclose_r+0xb8>
  115af0:	e1a00005 	mov	r0, r5
  115af4:	ebffee27 	bl	111398 <_free_r>
  115af8:	e3a03000 	mov	r3, #0
  115afc:	e5843044 	str	r3, [r4, #68]	; 0x44
  115b00:	ebffedb2 	bl	1111d0 <__sfp_lock_acquire>
  115b04:	e3a03000 	mov	r3, #0
  115b08:	e1a00007 	mov	r0, r7
  115b0c:	e1c430bc 	strh	r3, [r4, #12]
  115b10:	eb00022e 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  115b14:	e1a00007 	mov	r0, r7
  115b18:	eb00022a 	bl	1163c8 <__generic_gxx_recursive_mutex_destroy>
  115b1c:	ebffedae 	bl	1111dc <__sfp_lock_release>
  115b20:	e1a00006 	mov	r0, r6
  115b24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  115b28:	e1a00007 	mov	r0, r7
  115b2c:	eb000229 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  115b30:	e1d460fc 	ldrsh	r6, [r4, #12]
  115b34:	e3560000 	cmp	r6, #0
  115b38:	1affffd0 	bne	115a80 <_fclose_r+0x38>
  115b3c:	e1a00007 	mov	r0, r7
  115b40:	eb000222 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  115b44:	e1a00006 	mov	r0, r6
  115b48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  115b4c:	ebffed33 	bl	111020 <__sinit>
  115b50:	eaffffc6 	b	115a70 <_fclose_r+0x28>
  115b54:	e5941010 	ldr	r1, [r4, #16]
  115b58:	e1a00005 	mov	r0, r5
  115b5c:	ebffee0d 	bl	111398 <_free_r>
  115b60:	eaffffd5 	b	115abc <_fclose_r+0x74>
  115b64:	e1a00001 	mov	r0, r1
  115b68:	e12fff1e 	bx	lr

00115b6c <fclose>:
  115b6c:	e92d4010 	push	{r4, lr}
  115b70:	e1a04000 	mov	r4, r0
  115b74:	ebfff026 	bl	111c14 <__getreent>
  115b78:	e1a01004 	mov	r1, r4
  115b7c:	e8bd4010 	pop	{r4, lr}
  115b80:	eaffffb0 	b	115a48 <_fclose_r>

00115b84 <__fputwc>:
  115b84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  115b88:	e24dd008 	sub	sp, sp, #8
  115b8c:	e1a07000 	mov	r7, r0
  115b90:	e1a06001 	mov	r6, r1
  115b94:	e1a04002 	mov	r4, r2
  115b98:	ebfff052 	bl	111ce8 <__locale_mb_cur_max>
  115b9c:	e3500001 	cmp	r0, #1
  115ba0:	0a000035 	beq	115c7c <__fputwc+0xf8>
  115ba4:	e284305c 	add	r3, r4, #92	; 0x5c
  115ba8:	e1a02006 	mov	r2, r6
  115bac:	e28d1004 	add	r1, sp, #4
  115bb0:	e1a00007 	mov	r0, r7
  115bb4:	eb000104 	bl	115fcc <_wcrtomb_r>
  115bb8:	e3700001 	cmn	r0, #1
  115bbc:	e1a08000 	mov	r8, r0
  115bc0:	0a000028 	beq	115c68 <__fputwc+0xe4>
  115bc4:	e3500000 	cmp	r0, #0
  115bc8:	15dd1004 	ldrbne	r1, [sp, #4]
  115bcc:	0a000031 	beq	115c98 <__fputwc+0x114>
  115bd0:	e3a05000 	mov	r5, #0
  115bd4:	ea000009 	b	115c00 <__fputwc+0x7c>
  115bd8:	e5943000 	ldr	r3, [r4]
  115bdc:	e5c31000 	strb	r1, [r3]
  115be0:	e5943000 	ldr	r3, [r4]
  115be4:	e2833001 	add	r3, r3, #1
  115be8:	e5843000 	str	r3, [r4]
  115bec:	e2855001 	add	r5, r5, #1
  115bf0:	e1580005 	cmp	r8, r5
  115bf4:	9a000027 	bls	115c98 <__fputwc+0x114>
  115bf8:	e28d3004 	add	r3, sp, #4
  115bfc:	e7d31005 	ldrb	r1, [r3, r5]
  115c00:	e5943008 	ldr	r3, [r4, #8]
  115c04:	e2433001 	sub	r3, r3, #1
  115c08:	e3530000 	cmp	r3, #0
  115c0c:	e5843008 	str	r3, [r4, #8]
  115c10:	aafffff0 	bge	115bd8 <__fputwc+0x54>
  115c14:	e5942018 	ldr	r2, [r4, #24]
  115c18:	e1530002 	cmp	r3, r2
  115c1c:	ba000006 	blt	115c3c <__fputwc+0xb8>
  115c20:	e5943000 	ldr	r3, [r4]
  115c24:	e5c31000 	strb	r1, [r3]
  115c28:	e5943000 	ldr	r3, [r4]
  115c2c:	e5d31000 	ldrb	r1, [r3]
  115c30:	e2833001 	add	r3, r3, #1
  115c34:	e351000a 	cmp	r1, #10
  115c38:	1affffea 	bne	115be8 <__fputwc+0x64>
  115c3c:	e1a02004 	mov	r2, r4
  115c40:	e1a00007 	mov	r0, r7
  115c44:	eb00008f 	bl	115e88 <__swbuf_r>
  115c48:	e3700001 	cmn	r0, #1
  115c4c:	13a00000 	movne	r0, #0
  115c50:	03a00001 	moveq	r0, #1
  115c54:	e3500000 	cmp	r0, #0
  115c58:	0affffe3 	beq	115bec <__fputwc+0x68>
  115c5c:	e3e00000 	mvn	r0, #0
  115c60:	e28dd008 	add	sp, sp, #8
  115c64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  115c68:	e1d430bc 	ldrh	r3, [r4, #12]
  115c6c:	e3833040 	orr	r3, r3, #64	; 0x40
  115c70:	e1c430bc 	strh	r3, [r4, #12]
  115c74:	e28dd008 	add	sp, sp, #8
  115c78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  115c7c:	e2463001 	sub	r3, r6, #1
  115c80:	e35300fe 	cmp	r3, #254	; 0xfe
  115c84:	8affffc6 	bhi	115ba4 <__fputwc+0x20>
  115c88:	e6ef1076 	uxtb	r1, r6
  115c8c:	e1a08000 	mov	r8, r0
  115c90:	e5cd1004 	strb	r1, [sp, #4]
  115c94:	eaffffcd 	b	115bd0 <__fputwc+0x4c>
  115c98:	e1a00006 	mov	r0, r6
  115c9c:	e28dd008 	add	sp, sp, #8
  115ca0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00115ca4 <_fputwc_r>:
  115ca4:	e5923064 	ldr	r3, [r2, #100]	; 0x64
  115ca8:	e92d4030 	push	{r4, r5, lr}
  115cac:	e1a04002 	mov	r4, r2
  115cb0:	e24dd00c 	sub	sp, sp, #12
  115cb4:	e1a05000 	mov	r5, r0
  115cb8:	e3130001 	tst	r3, #1
  115cbc:	e1d230bc 	ldrh	r3, [r2, #12]
  115cc0:	e6ff2073 	uxth	r2, r3
  115cc4:	1a000001 	bne	115cd0 <_fputwc_r+0x2c>
  115cc8:	e3120c02 	tst	r2, #512	; 0x200
  115ccc:	0a000017 	beq	115d30 <_fputwc_r+0x8c>
  115cd0:	e3120a02 	tst	r2, #8192	; 0x2000
  115cd4:	e1a00005 	mov	r0, r5
  115cd8:	05942064 	ldreq	r2, [r4, #100]	; 0x64
  115cdc:	03833a02 	orreq	r3, r3, #8192	; 0x2000
  115ce0:	01c430bc 	strheq	r3, [r4, #12]
  115ce4:	03823a02 	orreq	r3, r2, #8192	; 0x2000
  115ce8:	e1a02004 	mov	r2, r4
  115cec:	05843064 	streq	r3, [r4, #100]	; 0x64
  115cf0:	ebffffa3 	bl	115b84 <__fputwc>
  115cf4:	e5943064 	ldr	r3, [r4, #100]	; 0x64
  115cf8:	e1a05000 	mov	r5, r0
  115cfc:	e3130001 	tst	r3, #1
  115d00:	1a000002 	bne	115d10 <_fputwc_r+0x6c>
  115d04:	e1d430bc 	ldrh	r3, [r4, #12]
  115d08:	e3130c02 	tst	r3, #512	; 0x200
  115d0c:	0a000002 	beq	115d1c <_fputwc_r+0x78>
  115d10:	e1a00005 	mov	r0, r5
  115d14:	e28dd00c 	add	sp, sp, #12
  115d18:	e8bd8030 	pop	{r4, r5, pc}
  115d1c:	e2840058 	add	r0, r4, #88	; 0x58
  115d20:	eb0001aa 	bl	1163d0 <__generic_gxx_recursive_mutex_unlock>
  115d24:	e1a00005 	mov	r0, r5
  115d28:	e28dd00c 	add	sp, sp, #12
  115d2c:	e8bd8030 	pop	{r4, r5, pc}
  115d30:	e2840058 	add	r0, r4, #88	; 0x58
  115d34:	e58d1004 	str	r1, [sp, #4]
  115d38:	eb0001a6 	bl	1163d8 <__generic_gxx_recursive_mutex_lock>
  115d3c:	e1d430bc 	ldrh	r3, [r4, #12]
  115d40:	e59d1004 	ldr	r1, [sp, #4]
  115d44:	e6ff2073 	uxth	r2, r3
  115d48:	eaffffe0 	b	115cd0 <_fputwc_r+0x2c>

00115d4c <fputwc>:
  115d4c:	e92d4070 	push	{r4, r5, r6, lr}
  115d50:	e1a05000 	mov	r5, r0
  115d54:	e1a06001 	mov	r6, r1
  115d58:	ebffefad 	bl	111c14 <__getreent>
  115d5c:	e2504000 	subs	r4, r0, #0
  115d60:	0a000003 	beq	115d74 <fputwc+0x28>
  115d64:	e5943038 	ldr	r3, [r4, #56]	; 0x38
  115d68:	e3530000 	cmp	r3, #0
  115d6c:	1a000000 	bne	115d74 <fputwc+0x28>
  115d70:	ebffecaa 	bl	111020 <__sinit>
  115d74:	e1a02006 	mov	r2, r6
  115d78:	e1a01005 	mov	r1, r5
  115d7c:	e1a00004 	mov	r0, r4
  115d80:	e8bd4070 	pop	{r4, r5, r6, lr}
  115d84:	eaffffc6 	b	115ca4 <_fputwc_r>

00115d88 <_fstat_r>:
  115d88:	e92d4070 	push	{r4, r5, r6, lr}
  115d8c:	e1a03001 	mov	r3, r1
  115d90:	e30945f0 	movw	r4, #38384	; 0x95f0
  115d94:	e1a05000 	mov	r5, r0
  115d98:	e1a01002 	mov	r1, r2
  115d9c:	e1a00003 	mov	r0, r3
  115da0:	e3404011 	movt	r4, #17
  115da4:	e3a03000 	mov	r3, #0
  115da8:	e5843000 	str	r3, [r4]
  115dac:	eb0001e7 	bl	116550 <_fstat>
  115db0:	e3700001 	cmn	r0, #1
  115db4:	18bd8070 	popne	{r4, r5, r6, pc}
  115db8:	e5943000 	ldr	r3, [r4]
  115dbc:	e3530000 	cmp	r3, #0
  115dc0:	15853000 	strne	r3, [r5]
  115dc4:	e8bd8070 	pop	{r4, r5, r6, pc}

00115dc8 <_isatty_r>:
  115dc8:	e92d4070 	push	{r4, r5, r6, lr}
  115dcc:	e30945f0 	movw	r4, #38384	; 0x95f0
  115dd0:	e3a03000 	mov	r3, #0
  115dd4:	e1a05000 	mov	r5, r0
  115dd8:	e3404011 	movt	r4, #17
  115ddc:	e1a00001 	mov	r0, r1
  115de0:	e5843000 	str	r3, [r4]
  115de4:	eb00020e 	bl	116624 <_isatty>
  115de8:	e3700001 	cmn	r0, #1
  115dec:	18bd8070 	popne	{r4, r5, r6, pc}
  115df0:	e5943000 	ldr	r3, [r4]
  115df4:	e3530000 	cmp	r3, #0
  115df8:	15853000 	strne	r3, [r5]
  115dfc:	e8bd8070 	pop	{r4, r5, r6, pc}

00115e00 <_lseek_r>:
  115e00:	e92d4070 	push	{r4, r5, r6, lr}
  115e04:	e1a0c001 	mov	ip, r1
  115e08:	e30945f0 	movw	r4, #38384	; 0x95f0
  115e0c:	e1a01002 	mov	r1, r2
  115e10:	e1a05000 	mov	r5, r0
  115e14:	e1a02003 	mov	r2, r3
  115e18:	e1a0000c 	mov	r0, ip
  115e1c:	e3a03000 	mov	r3, #0
  115e20:	e3404011 	movt	r4, #17
  115e24:	e5843000 	str	r3, [r4]
  115e28:	eb000210 	bl	116670 <_lseek>
  115e2c:	e3700001 	cmn	r0, #1
  115e30:	18bd8070 	popne	{r4, r5, r6, pc}
  115e34:	e5943000 	ldr	r3, [r4]
  115e38:	e3530000 	cmp	r3, #0
  115e3c:	15853000 	strne	r3, [r5]
  115e40:	e8bd8070 	pop	{r4, r5, r6, pc}

00115e44 <_read_r>:
  115e44:	e92d4070 	push	{r4, r5, r6, lr}
  115e48:	e1a0c001 	mov	ip, r1
  115e4c:	e30945f0 	movw	r4, #38384	; 0x95f0
  115e50:	e1a01002 	mov	r1, r2
  115e54:	e1a05000 	mov	r5, r0
  115e58:	e1a02003 	mov	r2, r3
  115e5c:	e1a0000c 	mov	r0, ip
  115e60:	e3a03000 	mov	r3, #0
  115e64:	e3404011 	movt	r4, #17
  115e68:	e5843000 	str	r3, [r4]
  115e6c:	eb000239 	bl	116758 <_read>
  115e70:	e3700001 	cmn	r0, #1
  115e74:	18bd8070 	popne	{r4, r5, r6, pc}
  115e78:	e5943000 	ldr	r3, [r4]
  115e7c:	e3530000 	cmp	r3, #0
  115e80:	15853000 	strne	r3, [r5]
  115e84:	e8bd8070 	pop	{r4, r5, r6, pc}

00115e88 <__swbuf_r>:
  115e88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  115e8c:	e2507000 	subs	r7, r0, #0
  115e90:	e1a06001 	mov	r6, r1
  115e94:	e1a04002 	mov	r4, r2
  115e98:	0a000002 	beq	115ea8 <__swbuf_r+0x20>
  115e9c:	e5973038 	ldr	r3, [r7, #56]	; 0x38
  115ea0:	e3530000 	cmp	r3, #0
  115ea4:	0a00003e 	beq	115fa4 <__swbuf_r+0x11c>
  115ea8:	e1d420bc 	ldrh	r2, [r4, #12]
  115eac:	e5943018 	ldr	r3, [r4, #24]
  115eb0:	e6ff1072 	uxth	r1, r2
  115eb4:	e5843008 	str	r3, [r4, #8]
  115eb8:	e3110008 	tst	r1, #8
  115ebc:	0a000020 	beq	115f44 <__swbuf_r+0xbc>
  115ec0:	e5943010 	ldr	r3, [r4, #16]
  115ec4:	e3530000 	cmp	r3, #0
  115ec8:	0a00001d 	beq	115f44 <__swbuf_r+0xbc>
  115ecc:	e3110a02 	tst	r1, #8192	; 0x2000
  115ed0:	e6ef5076 	uxtb	r5, r6
  115ed4:	05941064 	ldreq	r1, [r4, #100]	; 0x64
  115ed8:	03822a02 	orreq	r2, r2, #8192	; 0x2000
  115edc:	01c420bc 	strheq	r2, [r4, #12]
  115ee0:	03c12a02 	biceq	r2, r1, #8192	; 0x2000
  115ee4:	e5941014 	ldr	r1, [r4, #20]
  115ee8:	05842064 	streq	r2, [r4, #100]	; 0x64
  115eec:	e5942000 	ldr	r2, [r4]
  115ef0:	e0633002 	rsb	r3, r3, r2
  115ef4:	e1530001 	cmp	r3, r1
  115ef8:	b2833001 	addlt	r3, r3, #1
  115efc:	aa000020 	bge	115f84 <__swbuf_r+0xfc>
  115f00:	e5941008 	ldr	r1, [r4, #8]
  115f04:	e2820001 	add	r0, r2, #1
  115f08:	e5840000 	str	r0, [r4]
  115f0c:	e2411001 	sub	r1, r1, #1
  115f10:	e5841008 	str	r1, [r4, #8]
  115f14:	e5c26000 	strb	r6, [r2]
  115f18:	e5942014 	ldr	r2, [r4, #20]
  115f1c:	e1520003 	cmp	r2, r3
  115f20:	0a000010 	beq	115f68 <__swbuf_r+0xe0>
  115f24:	e1d430bc 	ldrh	r3, [r4, #12]
  115f28:	e355000a 	cmp	r5, #10
  115f2c:	13a03000 	movne	r3, #0
  115f30:	02033001 	andeq	r3, r3, #1
  115f34:	e3530000 	cmp	r3, #0
  115f38:	1a00000a 	bne	115f68 <__swbuf_r+0xe0>
  115f3c:	e1a00005 	mov	r0, r5
  115f40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  115f44:	e1a01004 	mov	r1, r4
  115f48:	e1a00007 	mov	r0, r7
  115f4c:	ebffe512 	bl	10f39c <__swsetup_r>
  115f50:	e3500000 	cmp	r0, #0
  115f54:	1a000008 	bne	115f7c <__swbuf_r+0xf4>
  115f58:	e1d420bc 	ldrh	r2, [r4, #12]
  115f5c:	e5943010 	ldr	r3, [r4, #16]
  115f60:	e6ff1072 	uxth	r1, r2
  115f64:	eaffffd8 	b	115ecc <__swbuf_r+0x44>
  115f68:	e1a01004 	mov	r1, r4
  115f6c:	e1a00007 	mov	r0, r7
  115f70:	ebffeba7 	bl	110e14 <_fflush_r>
  115f74:	e3500000 	cmp	r0, #0
  115f78:	0affffef 	beq	115f3c <__swbuf_r+0xb4>
  115f7c:	e3e00000 	mvn	r0, #0
  115f80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  115f84:	e1a01004 	mov	r1, r4
  115f88:	e1a00007 	mov	r0, r7
  115f8c:	ebffeba0 	bl	110e14 <_fflush_r>
  115f90:	e3500000 	cmp	r0, #0
  115f94:	1afffff8 	bne	115f7c <__swbuf_r+0xf4>
  115f98:	e5942000 	ldr	r2, [r4]
  115f9c:	e3a03001 	mov	r3, #1
  115fa0:	eaffffd6 	b	115f00 <__swbuf_r+0x78>
  115fa4:	ebffec1d 	bl	111020 <__sinit>
  115fa8:	eaffffbe 	b	115ea8 <__swbuf_r+0x20>

00115fac <__swbuf>:
  115fac:	e92d4070 	push	{r4, r5, r6, lr}
  115fb0:	e1a05001 	mov	r5, r1
  115fb4:	e1a04000 	mov	r4, r0
  115fb8:	ebffef15 	bl	111c14 <__getreent>
  115fbc:	e1a02005 	mov	r2, r5
  115fc0:	e1a01004 	mov	r1, r4
  115fc4:	e8bd4070 	pop	{r4, r5, r6, lr}
  115fc8:	eaffffae 	b	115e88 <__swbuf_r>

00115fcc <_wcrtomb_r>:
  115fcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  115fd0:	e2516000 	subs	r6, r1, #0
  115fd4:	e24dd018 	sub	sp, sp, #24
  115fd8:	e1a04000 	mov	r4, r0
  115fdc:	e1a05003 	mov	r5, r3
  115fe0:	0a000011 	beq	11602c <_wcrtomb_r+0x60>
  115fe4:	e3073c4c 	movw	r3, #31820	; 0x7c4c
  115fe8:	e1a07002 	mov	r7, r2
  115fec:	e3403011 	movt	r3, #17
  115ff0:	e5938000 	ldr	r8, [r3]
  115ff4:	ebffef38 	bl	111cdc <__locale_charset>
  115ff8:	e58d5000 	str	r5, [sp]
  115ffc:	e1a03000 	mov	r3, r0
  116000:	e1a02007 	mov	r2, r7
  116004:	e1a01006 	mov	r1, r6
  116008:	e1a00004 	mov	r0, r4
  11600c:	e12fff38 	blx	r8
  116010:	e3700001 	cmn	r0, #1
  116014:	03a02000 	moveq	r2, #0
  116018:	03a0308a 	moveq	r3, #138	; 0x8a
  11601c:	05852000 	streq	r2, [r5]
  116020:	05843000 	streq	r3, [r4]
  116024:	e28dd018 	add	sp, sp, #24
  116028:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  11602c:	e3073c4c 	movw	r3, #31820	; 0x7c4c
  116030:	e3403011 	movt	r3, #17
  116034:	e5937000 	ldr	r7, [r3]
  116038:	ebffef27 	bl	111cdc <__locale_charset>
  11603c:	e58d5000 	str	r5, [sp]
  116040:	e1a03000 	mov	r3, r0
  116044:	e1a02006 	mov	r2, r6
  116048:	e28d100c 	add	r1, sp, #12
  11604c:	e1a00004 	mov	r0, r4
  116050:	e12fff37 	blx	r7
  116054:	eaffffed 	b	116010 <_wcrtomb_r+0x44>

00116058 <wcrtomb>:
  116058:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  11605c:	e1a04000 	mov	r4, r0
  116060:	e24dd018 	sub	sp, sp, #24
  116064:	e1a07001 	mov	r7, r1
  116068:	e1a06002 	mov	r6, r2
  11606c:	ebffeee8 	bl	111c14 <__getreent>
  116070:	e3540000 	cmp	r4, #0
  116074:	e3073c4c 	movw	r3, #31820	; 0x7c4c
  116078:	e1a05000 	mov	r5, r0
  11607c:	e3403011 	movt	r3, #17
  116080:	0a00000e 	beq	1160c0 <wcrtomb+0x68>
  116084:	e5938000 	ldr	r8, [r3]
  116088:	ebffef13 	bl	111cdc <__locale_charset>
  11608c:	e58d6000 	str	r6, [sp]
  116090:	e1a03000 	mov	r3, r0
  116094:	e1a02007 	mov	r2, r7
  116098:	e1a01004 	mov	r1, r4
  11609c:	e1a00005 	mov	r0, r5
  1160a0:	e12fff38 	blx	r8
  1160a4:	e3700001 	cmn	r0, #1
  1160a8:	03a02000 	moveq	r2, #0
  1160ac:	03a0308a 	moveq	r3, #138	; 0x8a
  1160b0:	05862000 	streq	r2, [r6]
  1160b4:	05853000 	streq	r3, [r5]
  1160b8:	e28dd018 	add	sp, sp, #24
  1160bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1160c0:	e5937000 	ldr	r7, [r3]
  1160c4:	ebffef04 	bl	111cdc <__locale_charset>
  1160c8:	e58d6000 	str	r6, [sp]
  1160cc:	e1a03000 	mov	r3, r0
  1160d0:	e1a02004 	mov	r2, r4
  1160d4:	e28d100c 	add	r1, sp, #12
  1160d8:	e1a00005 	mov	r0, r5
  1160dc:	e12fff37 	blx	r7
  1160e0:	eaffffef 	b	1160a4 <wcrtomb+0x4c>

001160e4 <__ascii_wctomb>:
  1160e4:	e3510000 	cmp	r1, #0
  1160e8:	0a000005 	beq	116104 <__ascii_wctomb+0x20>
  1160ec:	e35200ff 	cmp	r2, #255	; 0xff
  1160f0:	95c12000 	strbls	r2, [r1]
  1160f4:	83e01000 	mvnhi	r1, #0
  1160f8:	93a01001 	movls	r1, #1
  1160fc:	83a0308a 	movhi	r3, #138	; 0x8a
  116100:	85803000 	strhi	r3, [r0]
  116104:	e1a00001 	mov	r0, r1
  116108:	e12fff1e 	bx	lr

0011610c <_wctomb_r>:
  11610c:	e307cc4c 	movw	ip, #31820	; 0x7c4c
  116110:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  116114:	e340c011 	movt	ip, #17
  116118:	e24dd008 	sub	sp, sp, #8
  11611c:	e1a08003 	mov	r8, r3
  116120:	e1a05000 	mov	r5, r0
  116124:	e1a06001 	mov	r6, r1
  116128:	e1a07002 	mov	r7, r2
  11612c:	e59c4000 	ldr	r4, [ip]
  116130:	ebffeee9 	bl	111cdc <__locale_charset>
  116134:	e58d8000 	str	r8, [sp]
  116138:	e1a03000 	mov	r3, r0
  11613c:	e1a02007 	mov	r2, r7
  116140:	e1a01006 	mov	r1, r6
  116144:	e1a00005 	mov	r0, r5
  116148:	e12fff34 	blx	r4
  11614c:	e28dd008 	add	sp, sp, #8
  116150:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00116154 <__aeabi_idiv>:
  116154:	e3510000 	cmp	r1, #0
  116158:	0a000081 	beq	116364 <.divsi3_skip_div0_test+0x208>

0011615c <.divsi3_skip_div0_test>:
  11615c:	e020c001 	eor	ip, r0, r1
  116160:	42611000 	rsbmi	r1, r1, #0
  116164:	e2512001 	subs	r2, r1, #1
  116168:	0a000070 	beq	116330 <.divsi3_skip_div0_test+0x1d4>
  11616c:	e1b03000 	movs	r3, r0
  116170:	42603000 	rsbmi	r3, r0, #0
  116174:	e1530001 	cmp	r3, r1
  116178:	9a00006f 	bls	11633c <.divsi3_skip_div0_test+0x1e0>
  11617c:	e1110002 	tst	r1, r2
  116180:	0a000071 	beq	11634c <.divsi3_skip_div0_test+0x1f0>
  116184:	e16f2f13 	clz	r2, r3
  116188:	e16f0f11 	clz	r0, r1
  11618c:	e0402002 	sub	r2, r0, r2
  116190:	e272201f 	rsbs	r2, r2, #31
  116194:	10822082 	addne	r2, r2, r2, lsl #1
  116198:	e3a00000 	mov	r0, #0
  11619c:	108ff102 	addne	pc, pc, r2, lsl #2
  1161a0:	e320f000 	nop	{0}
  1161a4:	e1530f81 	cmp	r3, r1, lsl #31
  1161a8:	e0a00000 	adc	r0, r0, r0
  1161ac:	20433f81 	subcs	r3, r3, r1, lsl #31
  1161b0:	e1530f01 	cmp	r3, r1, lsl #30
  1161b4:	e0a00000 	adc	r0, r0, r0
  1161b8:	20433f01 	subcs	r3, r3, r1, lsl #30
  1161bc:	e1530e81 	cmp	r3, r1, lsl #29
  1161c0:	e0a00000 	adc	r0, r0, r0
  1161c4:	20433e81 	subcs	r3, r3, r1, lsl #29
  1161c8:	e1530e01 	cmp	r3, r1, lsl #28
  1161cc:	e0a00000 	adc	r0, r0, r0
  1161d0:	20433e01 	subcs	r3, r3, r1, lsl #28
  1161d4:	e1530d81 	cmp	r3, r1, lsl #27
  1161d8:	e0a00000 	adc	r0, r0, r0
  1161dc:	20433d81 	subcs	r3, r3, r1, lsl #27
  1161e0:	e1530d01 	cmp	r3, r1, lsl #26
  1161e4:	e0a00000 	adc	r0, r0, r0
  1161e8:	20433d01 	subcs	r3, r3, r1, lsl #26
  1161ec:	e1530c81 	cmp	r3, r1, lsl #25
  1161f0:	e0a00000 	adc	r0, r0, r0
  1161f4:	20433c81 	subcs	r3, r3, r1, lsl #25
  1161f8:	e1530c01 	cmp	r3, r1, lsl #24
  1161fc:	e0a00000 	adc	r0, r0, r0
  116200:	20433c01 	subcs	r3, r3, r1, lsl #24
  116204:	e1530b81 	cmp	r3, r1, lsl #23
  116208:	e0a00000 	adc	r0, r0, r0
  11620c:	20433b81 	subcs	r3, r3, r1, lsl #23
  116210:	e1530b01 	cmp	r3, r1, lsl #22
  116214:	e0a00000 	adc	r0, r0, r0
  116218:	20433b01 	subcs	r3, r3, r1, lsl #22
  11621c:	e1530a81 	cmp	r3, r1, lsl #21
  116220:	e0a00000 	adc	r0, r0, r0
  116224:	20433a81 	subcs	r3, r3, r1, lsl #21
  116228:	e1530a01 	cmp	r3, r1, lsl #20
  11622c:	e0a00000 	adc	r0, r0, r0
  116230:	20433a01 	subcs	r3, r3, r1, lsl #20
  116234:	e1530981 	cmp	r3, r1, lsl #19
  116238:	e0a00000 	adc	r0, r0, r0
  11623c:	20433981 	subcs	r3, r3, r1, lsl #19
  116240:	e1530901 	cmp	r3, r1, lsl #18
  116244:	e0a00000 	adc	r0, r0, r0
  116248:	20433901 	subcs	r3, r3, r1, lsl #18
  11624c:	e1530881 	cmp	r3, r1, lsl #17
  116250:	e0a00000 	adc	r0, r0, r0
  116254:	20433881 	subcs	r3, r3, r1, lsl #17
  116258:	e1530801 	cmp	r3, r1, lsl #16
  11625c:	e0a00000 	adc	r0, r0, r0
  116260:	20433801 	subcs	r3, r3, r1, lsl #16
  116264:	e1530781 	cmp	r3, r1, lsl #15
  116268:	e0a00000 	adc	r0, r0, r0
  11626c:	20433781 	subcs	r3, r3, r1, lsl #15
  116270:	e1530701 	cmp	r3, r1, lsl #14
  116274:	e0a00000 	adc	r0, r0, r0
  116278:	20433701 	subcs	r3, r3, r1, lsl #14
  11627c:	e1530681 	cmp	r3, r1, lsl #13
  116280:	e0a00000 	adc	r0, r0, r0
  116284:	20433681 	subcs	r3, r3, r1, lsl #13
  116288:	e1530601 	cmp	r3, r1, lsl #12
  11628c:	e0a00000 	adc	r0, r0, r0
  116290:	20433601 	subcs	r3, r3, r1, lsl #12
  116294:	e1530581 	cmp	r3, r1, lsl #11
  116298:	e0a00000 	adc	r0, r0, r0
  11629c:	20433581 	subcs	r3, r3, r1, lsl #11
  1162a0:	e1530501 	cmp	r3, r1, lsl #10
  1162a4:	e0a00000 	adc	r0, r0, r0
  1162a8:	20433501 	subcs	r3, r3, r1, lsl #10
  1162ac:	e1530481 	cmp	r3, r1, lsl #9
  1162b0:	e0a00000 	adc	r0, r0, r0
  1162b4:	20433481 	subcs	r3, r3, r1, lsl #9
  1162b8:	e1530401 	cmp	r3, r1, lsl #8
  1162bc:	e0a00000 	adc	r0, r0, r0
  1162c0:	20433401 	subcs	r3, r3, r1, lsl #8
  1162c4:	e1530381 	cmp	r3, r1, lsl #7
  1162c8:	e0a00000 	adc	r0, r0, r0
  1162cc:	20433381 	subcs	r3, r3, r1, lsl #7
  1162d0:	e1530301 	cmp	r3, r1, lsl #6
  1162d4:	e0a00000 	adc	r0, r0, r0
  1162d8:	20433301 	subcs	r3, r3, r1, lsl #6
  1162dc:	e1530281 	cmp	r3, r1, lsl #5
  1162e0:	e0a00000 	adc	r0, r0, r0
  1162e4:	20433281 	subcs	r3, r3, r1, lsl #5
  1162e8:	e1530201 	cmp	r3, r1, lsl #4
  1162ec:	e0a00000 	adc	r0, r0, r0
  1162f0:	20433201 	subcs	r3, r3, r1, lsl #4
  1162f4:	e1530181 	cmp	r3, r1, lsl #3
  1162f8:	e0a00000 	adc	r0, r0, r0
  1162fc:	20433181 	subcs	r3, r3, r1, lsl #3
  116300:	e1530101 	cmp	r3, r1, lsl #2
  116304:	e0a00000 	adc	r0, r0, r0
  116308:	20433101 	subcs	r3, r3, r1, lsl #2
  11630c:	e1530081 	cmp	r3, r1, lsl #1
  116310:	e0a00000 	adc	r0, r0, r0
  116314:	20433081 	subcs	r3, r3, r1, lsl #1
  116318:	e1530001 	cmp	r3, r1
  11631c:	e0a00000 	adc	r0, r0, r0
  116320:	20433001 	subcs	r3, r3, r1
  116324:	e35c0000 	cmp	ip, #0
  116328:	42600000 	rsbmi	r0, r0, #0
  11632c:	e12fff1e 	bx	lr
  116330:	e13c0000 	teq	ip, r0
  116334:	42600000 	rsbmi	r0, r0, #0
  116338:	e12fff1e 	bx	lr
  11633c:	33a00000 	movcc	r0, #0
  116340:	01a00fcc 	asreq	r0, ip, #31
  116344:	03800001 	orreq	r0, r0, #1
  116348:	e12fff1e 	bx	lr
  11634c:	e16f2f11 	clz	r2, r1
  116350:	e262201f 	rsb	r2, r2, #31
  116354:	e35c0000 	cmp	ip, #0
  116358:	e1a00233 	lsr	r0, r3, r2
  11635c:	42600000 	rsbmi	r0, r0, #0
  116360:	e12fff1e 	bx	lr
  116364:	e3500000 	cmp	r0, #0
  116368:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  11636c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  116370:	eaffd9cc 	b	10caa8 <__aeabi_idiv0>

00116374 <__aeabi_idivmod>:
  116374:	e3510000 	cmp	r1, #0
  116378:	0afffff9 	beq	116364 <.divsi3_skip_div0_test+0x208>
  11637c:	e92d4003 	push	{r0, r1, lr}
  116380:	ebffff75 	bl	11615c <.divsi3_skip_div0_test>
  116384:	e8bd4006 	pop	{r1, r2, lr}
  116388:	e0030092 	mul	r3, r2, r0
  11638c:	e0411003 	sub	r1, r1, r3
  116390:	e12fff1e 	bx	lr

00116394 <__generic_gxx_active_p>:
  116394:	e3a00000 	mov	r0, #0
  116398:	e12fff1e 	bx	lr

0011639c <__generic_gxx_key_create>:
  11639c:	e3e00000 	mvn	r0, #0
  1163a0:	e12fff1e 	bx	lr

001163a4 <__generic_gxx_once>:
  1163a4:	eafffffc 	b	11639c <__generic_gxx_key_create>

001163a8 <__generic_gxx_key_delete>:
  1163a8:	e3e00000 	mvn	r0, #0
  1163ac:	e12fff1e 	bx	lr

001163b0 <__generic_gxx_getspecific>:
  1163b0:	e3a00000 	mov	r0, #0
  1163b4:	e12fff1e 	bx	lr

001163b8 <__generic_gxx_setspecific>:
  1163b8:	e3e00000 	mvn	r0, #0
  1163bc:	e12fff1e 	bx	lr

001163c0 <__generic_gxx_recursive_mutex_init_function>:
  1163c0:	e12fff1e 	bx	lr

001163c4 <__generic_gxx_mutex_init_function>:
  1163c4:	eafffffd 	b	1163c0 <__generic_gxx_recursive_mutex_init_function>

001163c8 <__generic_gxx_recursive_mutex_destroy>:
  1163c8:	e3a00000 	mov	r0, #0
  1163cc:	e12fff1e 	bx	lr

001163d0 <__generic_gxx_recursive_mutex_unlock>:
  1163d0:	eafffffc 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163d4 <__generic_gxx_recursive_mutex_trylock>:
  1163d4:	eafffffb 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163d8 <__generic_gxx_recursive_mutex_lock>:
  1163d8:	eafffffa 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163dc <__generic_gxx_mutex_unlock>:
  1163dc:	eafffff9 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163e0 <__generic_gxx_mutex_trylock>:
  1163e0:	eafffff8 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163e4 <__generic_gxx_mutex_lock>:
  1163e4:	eafffff7 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163e8 <__generic_gxx_mutex_destroy>:
  1163e8:	eafffff6 	b	1163c8 <__generic_gxx_recursive_mutex_destroy>

001163ec <__cs3_premain>:
  1163ec:	e92d4010 	push	{r4, lr}
  1163f0:	eb000216 	bl	116c50 <__libc_init_array>
  1163f4:	e309369c 	movw	r3, #38556	; 0x969c
  1163f8:	e3a02000 	mov	r2, #0
  1163fc:	e3403011 	movt	r3, #17
  116400:	e3530000 	cmp	r3, #0
  116404:	15930000 	ldrne	r0, [r3]
  116408:	01a00003 	moveq	r0, r3
  11640c:	e3093698 	movw	r3, #38552	; 0x9698
  116410:	e3403011 	movt	r3, #17
  116414:	e3530000 	cmp	r3, #0
  116418:	15931000 	ldrne	r1, [r3]
  11641c:	01a01003 	moveq	r1, r3
  116420:	ebffa8de 	bl	1007a0 <main>
  116424:	e30c3c14 	movw	r3, #52244	; 0xcc14
  116428:	e3403010 	movt	r3, #16
  11642c:	e3530000 	cmp	r3, #0
  116430:	0a000000 	beq	116438 <__cs3_premain+0x4c>
  116434:	ebffd9f6 	bl	10cc14 <exit>
  116438:	eafffffe 	b	116438 <__cs3_premain+0x4c>

0011643c <__vfp_init>:
  11643c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
  116440:	e3100702 	tst	r0, #524288	; 0x80000
  116444:	1a000006 	bne	116464 <__vfp_init+0x28>
  116448:	e2101a0f 	ands	r1, r0, #61440	; 0xf000
  11644c:	0a000009 	beq	116478 <__vfp_init+0x3c>
  116450:	e3510a07 	cmp	r1, #28672	; 0x7000
  116454:	0a000007 	beq	116478 <__vfp_init+0x3c>
  116458:	e200180f 	and	r1, r0, #983040	; 0xf0000
  11645c:	e3510807 	cmp	r1, #458752	; 0x70000
  116460:	ba000004 	blt	116478 <__vfp_init+0x3c>
  116464:	ee110f50 	mrc	15, 0, r0, cr1, cr0, {2}
  116468:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
  11646c:	ee010f50 	mcr	15, 0, r0, cr1, cr0, {2}
  116470:	e3a00000 	mov	r0, #0
  116474:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
  116478:	e3a00101 	mov	r0, #1073741824	; 0x40000000
  11647c:	eee80a10 	vmsr	fpexc, r0
  116480:	eef00a10 	vmrs	r0, fpsid
  116484:	e20014ff 	and	r1, r0, #-16777216	; 0xff000000
  116488:	e3510441 	cmp	r1, #1090519040	; 0x41000000
  11648c:	1a000004 	bne	1164a4 <__vfp_init+0x68>
  116490:	e20010f0 	and	r1, r0, #240	; 0xf0
  116494:	e35100b0 	cmp	r1, #176	; 0xb0
  116498:	ca000001 	bgt	1164a4 <__vfp_init+0x68>
  11649c:	e3a00403 	mov	r0, #50331648	; 0x3000000
  1164a0:	eee10a10 	vmsr	fpscr, r0
  1164a4:	e12fff1e 	bx	lr

001164a8 <_close>:
  1164a8:	e92d4070 	push	{r4, r5, r6, lr}
  1164ac:	e1a05000 	mov	r5, r0
  1164b0:	eb00012e 	bl	116970 <__cs3_openslot>
  1164b4:	e2504000 	subs	r4, r0, #0
  1164b8:	0a00001c 	beq	116530 <_close+0x88>
  1164bc:	e3003000 	movw	r3, #0
  1164c0:	e3403000 	movt	r3, #0
  1164c4:	e3530000 	cmp	r3, #0
  1164c8:	0a000002 	beq	1164d8 <_close+0x30>
  1164cc:	e5943000 	ldr	r3, [r4]
  1164d0:	e3530002 	cmp	r3, #2
  1164d4:	da000011 	ble	116520 <_close+0x78>
  1164d8:	e2453001 	sub	r3, r5, #1
  1164dc:	e3530001 	cmp	r3, #1
  1164e0:	9a000007 	bls	116504 <_close+0x5c>
  1164e4:	e3a00002 	mov	r0, #2
  1164e8:	e1a01004 	mov	r1, r4
  1164ec:	ef123456 	svc	0x00123456
  1164f0:	e3500000 	cmp	r0, #0
  1164f4:	03e03000 	mvneq	r3, #0
  1164f8:	05843000 	streq	r3, [r4]
  1164fc:	e8bd4070 	pop	{r4, r5, r6, lr}
  116500:	ea00014f 	b	116a44 <__cs3_checkerror>
  116504:	e3550001 	cmp	r5, #1
  116508:	e5942000 	ldr	r2, [r4]
  11650c:	03a03008 	moveq	r3, #8
  116510:	13e03007 	mvnne	r3, #7
  116514:	e7943003 	ldr	r3, [r4, r3]
  116518:	e1520003 	cmp	r2, r3
  11651c:	1afffff0 	bne	1164e4 <_close+0x3c>
  116520:	e3e03000 	mvn	r3, #0
  116524:	e3a00000 	mov	r0, #0
  116528:	e5843000 	str	r3, [r4]
  11652c:	e8bd8070 	pop	{r4, r5, r6, pc}
  116530:	e3e00000 	mvn	r0, #0
  116534:	e8bd8070 	pop	{r4, r5, r6, pc}

00116538 <_exit>:
  116538:	e3a01026 	mov	r1, #38	; 0x26
  11653c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  116540:	e3a00018 	mov	r0, #24
  116544:	e3401002 	movt	r1, #2
  116548:	ef123456 	svc	0x00123456
  11654c:	eafffffe 	b	11654c <_exit+0x14>

00116550 <_fstat>:
  116550:	e92d4070 	push	{r4, r5, r6, lr}
  116554:	e1a04001 	mov	r4, r1
  116558:	eb000104 	bl	116970 <__cs3_openslot>
  11655c:	e2505000 	subs	r5, r0, #0
  116560:	0a000018 	beq	1165c8 <_fstat+0x78>
  116564:	e3a0203c 	mov	r2, #60	; 0x3c
  116568:	e3a01000 	mov	r1, #0
  11656c:	e1a00004 	mov	r0, r4
  116570:	ebfff113 	bl	1129c4 <memset>
  116574:	e3003000 	movw	r3, #0
  116578:	e3a01a02 	mov	r1, #8192	; 0x2000
  11657c:	e3403000 	movt	r3, #0
  116580:	e3a02b01 	mov	r2, #1024	; 0x400
  116584:	e3530000 	cmp	r3, #0
  116588:	e5841004 	str	r1, [r4, #4]
  11658c:	e584202c 	str	r2, [r4, #44]	; 0x2c
  116590:	0a000002 	beq	1165a0 <_fstat+0x50>
  116594:	e5953000 	ldr	r3, [r5]
  116598:	e3530002 	cmp	r3, #2
  11659c:	da000007 	ble	1165c0 <_fstat+0x70>
  1165a0:	e1a01005 	mov	r1, r5
  1165a4:	e3a0000c 	mov	r0, #12
  1165a8:	ef123456 	svc	0x00123456
  1165ac:	e3700001 	cmn	r0, #1
  1165b0:	15840010 	strne	r0, [r4, #16]
  1165b4:	13a00000 	movne	r0, #0
  1165b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1165bc:	ea000120 	b	116a44 <__cs3_checkerror>
  1165c0:	e3a00000 	mov	r0, #0
  1165c4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1165c8:	e3e00000 	mvn	r0, #0
  1165cc:	e8bd8070 	pop	{r4, r5, r6, pc}

001165d0 <_gettimeofday>:
  1165d0:	e92d4070 	push	{r4, r5, r6, lr}
  1165d4:	e2505000 	subs	r5, r0, #0
  1165d8:	0a000009 	beq	116604 <_gettimeofday+0x34>
  1165dc:	e3510000 	cmp	r1, #0
  1165e0:	e1a04001 	mov	r4, r1
  1165e4:	1a000009 	bne	116610 <_gettimeofday+0x40>
  1165e8:	e3a00011 	mov	r0, #17
  1165ec:	ef123456 	svc	0x00123456
  1165f0:	e1a03004 	mov	r3, r4
  1165f4:	e5850000 	str	r0, [r5]
  1165f8:	e5854004 	str	r4, [r5, #4]
  1165fc:	e1a00003 	mov	r0, r3
  116600:	e8bd8070 	pop	{r4, r5, r6, pc}
  116604:	e1a03005 	mov	r3, r5
  116608:	e1a00003 	mov	r0, r3
  11660c:	e8bd8070 	pop	{r4, r5, r6, pc}
  116610:	eb00018b 	bl	116c44 <__errno>
  116614:	e3a02016 	mov	r2, #22
  116618:	e3e03000 	mvn	r3, #0
  11661c:	e5802000 	str	r2, [r0]
  116620:	eafffff5 	b	1165fc <_gettimeofday+0x2c>

00116624 <_isatty>:
  116624:	e92d4010 	push	{r4, lr}
  116628:	eb0000d0 	bl	116970 <__cs3_openslot>
  11662c:	e2501000 	subs	r1, r0, #0
  116630:	0a00000c 	beq	116668 <_isatty+0x44>
  116634:	e3003000 	movw	r3, #0
  116638:	e3403000 	movt	r3, #0
  11663c:	e3530000 	cmp	r3, #0
  116640:	0a000002 	beq	116650 <_isatty+0x2c>
  116644:	e5913000 	ldr	r3, [r1]
  116648:	e3530002 	cmp	r3, #2
  11664c:	da000003 	ble	116660 <_isatty+0x3c>
  116650:	e3a00009 	mov	r0, #9
  116654:	ef123456 	svc	0x00123456
  116658:	e8bd4010 	pop	{r4, lr}
  11665c:	ea0000f8 	b	116a44 <__cs3_checkerror>
  116660:	e3a00001 	mov	r0, #1
  116664:	e8bd8010 	pop	{r4, pc}
  116668:	e1a00001 	mov	r0, r1
  11666c:	e8bd8010 	pop	{r4, pc}

00116670 <_lseek>:
  116670:	e92d4070 	push	{r4, r5, r6, lr}
  116674:	e24dd008 	sub	sp, sp, #8
  116678:	e1a04001 	mov	r4, r1
  11667c:	e1a05002 	mov	r5, r2
  116680:	eb0000ba 	bl	116970 <__cs3_openslot>
  116684:	e2506000 	subs	r6, r0, #0
  116688:	0a000030 	beq	116750 <_lseek+0xe0>
  11668c:	e3550001 	cmp	r5, #1
  116690:	0a000026 	beq	116730 <_lseek+0xc0>
  116694:	e3550002 	cmp	r5, #2
  116698:	0a000008 	beq	1166c0 <_lseek+0x50>
  11669c:	e3550000 	cmp	r5, #0
  1166a0:	0a00000c 	beq	1166d8 <_lseek+0x68>
  1166a4:	eb000166 	bl	116c44 <__errno>
  1166a8:	e3e03000 	mvn	r3, #0
  1166ac:	e3a02016 	mov	r2, #22
  1166b0:	e5802000 	str	r2, [r0]
  1166b4:	e1a00003 	mov	r0, r3
  1166b8:	e28dd008 	add	sp, sp, #8
  1166bc:	e8bd8070 	pop	{r4, r5, r6, pc}
  1166c0:	e3a0000c 	mov	r0, #12
  1166c4:	e1a01006 	mov	r1, r6
  1166c8:	ef123456 	svc	0x00123456
  1166cc:	e3700001 	cmn	r0, #1
  1166d0:	0a000011 	beq	11671c <_lseek+0xac>
  1166d4:	e0844000 	add	r4, r4, r0
  1166d8:	e3003000 	movw	r3, #0
  1166dc:	e3403000 	movt	r3, #0
  1166e0:	e3530000 	cmp	r3, #0
  1166e4:	e5963000 	ldr	r3, [r6]
  1166e8:	0a000001 	beq	1166f4 <_lseek+0x84>
  1166ec:	e3530002 	cmp	r3, #2
  1166f0:	da000011 	ble	11673c <_lseek+0xcc>
  1166f4:	e3540000 	cmp	r4, #0
  1166f8:	e88d0018 	stm	sp, {r3, r4}
  1166fc:	baffffe8 	blt	1166a4 <_lseek+0x34>
  116700:	e3a0000a 	mov	r0, #10
  116704:	e1a0100d 	mov	r1, sp
  116708:	ef123456 	svc	0x00123456
  11670c:	e3700001 	cmn	r0, #1
  116710:	01a04000 	moveq	r4, r0
  116714:	15864004 	strne	r4, [r6, #4]
  116718:	e1a00004 	mov	r0, r4
  11671c:	eb0000c8 	bl	116a44 <__cs3_checkerror>
  116720:	e1a03000 	mov	r3, r0
  116724:	e1a00003 	mov	r0, r3
  116728:	e28dd008 	add	sp, sp, #8
  11672c:	e8bd8070 	pop	{r4, r5, r6, pc}
  116730:	e5963004 	ldr	r3, [r6, #4]
  116734:	e0844003 	add	r4, r4, r3
  116738:	eaffffe6 	b	1166d8 <_lseek+0x68>
  11673c:	eb000140 	bl	116c44 <__errno>
  116740:	e3a02009 	mov	r2, #9
  116744:	e3e03000 	mvn	r3, #0
  116748:	e5802000 	str	r2, [r0]
  11674c:	eaffffd8 	b	1166b4 <_lseek+0x44>
  116750:	e3e03000 	mvn	r3, #0
  116754:	eaffffd6 	b	1166b4 <_lseek+0x44>

00116758 <_read>:
  116758:	e92d4070 	push	{r4, r5, r6, lr}
  11675c:	e24dd010 	sub	sp, sp, #16
  116760:	e1a06001 	mov	r6, r1
  116764:	e1a05002 	mov	r5, r2
  116768:	eb000080 	bl	116970 <__cs3_openslot>
  11676c:	e2504000 	subs	r4, r0, #0
  116770:	0a00000e 	beq	1167b0 <_read+0x58>
  116774:	e5943000 	ldr	r3, [r4]
  116778:	e3a00006 	mov	r0, #6
  11677c:	e58d6008 	str	r6, [sp, #8]
  116780:	e28d1004 	add	r1, sp, #4
  116784:	e58d500c 	str	r5, [sp, #12]
  116788:	e58d3004 	str	r3, [sp, #4]
  11678c:	ef123456 	svc	0x00123456
  116790:	e3700001 	cmn	r0, #1
  116794:	15943004 	ldrne	r3, [r4, #4]
  116798:	10600005 	rsbne	r0, r0, r5
  11679c:	10833000 	addne	r3, r3, r0
  1167a0:	15843004 	strne	r3, [r4, #4]
  1167a4:	eb0000a6 	bl	116a44 <__cs3_checkerror>
  1167a8:	e28dd010 	add	sp, sp, #16
  1167ac:	e8bd8070 	pop	{r4, r5, r6, pc}
  1167b0:	e3e00000 	mvn	r0, #0
  1167b4:	eafffffb 	b	1167a8 <_read+0x50>

001167b8 <_write>:
  1167b8:	e92d4070 	push	{r4, r5, r6, lr}
  1167bc:	e24dd010 	sub	sp, sp, #16
  1167c0:	e1a06001 	mov	r6, r1
  1167c4:	e1a05002 	mov	r5, r2
  1167c8:	eb000068 	bl	116970 <__cs3_openslot>
  1167cc:	e2504000 	subs	r4, r0, #0
  1167d0:	0a00000e 	beq	116810 <_write+0x58>
  1167d4:	e5943000 	ldr	r3, [r4]
  1167d8:	e3a00005 	mov	r0, #5
  1167dc:	e58d6008 	str	r6, [sp, #8]
  1167e0:	e28d1004 	add	r1, sp, #4
  1167e4:	e58d500c 	str	r5, [sp, #12]
  1167e8:	e58d3004 	str	r3, [sp, #4]
  1167ec:	ef123456 	svc	0x00123456
  1167f0:	e3700001 	cmn	r0, #1
  1167f4:	15943004 	ldrne	r3, [r4, #4]
  1167f8:	10600005 	rsbne	r0, r0, r5
  1167fc:	10833000 	addne	r3, r3, r0
  116800:	15843004 	strne	r3, [r4, #4]
  116804:	eb00008e 	bl	116a44 <__cs3_checkerror>
  116808:	e28dd010 	add	sp, sp, #16
  11680c:	e8bd8070 	pop	{r4, r5, r6, pc}
  116810:	e3e00000 	mvn	r0, #0
  116814:	eafffffb 	b	116808 <_write+0x50>

00116818 <_sbrk>:
  116818:	e3072c50 	movw	r2, #31824	; 0x7c50
  11681c:	e3071c54 	movw	r1, #31828	; 0x7c54
  116820:	e3402011 	movt	r2, #17
  116824:	e3401011 	movt	r1, #17
  116828:	e5923000 	ldr	r3, [r2]
  11682c:	e5911000 	ldr	r1, [r1]
  116830:	e92d4010 	push	{r4, lr}
  116834:	e0830000 	add	r0, r3, r0
  116838:	e3510000 	cmp	r1, #0
  11683c:	11510000 	cmpne	r1, r0
  116840:	3a000009 	bcc	11686c <_sbrk+0x54>
  116844:	e1a0100d 	mov	r1, sp
  116848:	e1530001 	cmp	r3, r1
  11684c:	9a000002 	bls	11685c <_sbrk+0x44>
  116850:	e5820000 	str	r0, [r2]
  116854:	e1a00003 	mov	r0, r3
  116858:	e8bd8010 	pop	{r4, pc}
  11685c:	e2801c01 	add	r1, r0, #256	; 0x100
  116860:	e1a0c00d 	mov	ip, sp
  116864:	e15c0001 	cmp	ip, r1
  116868:	2afffff8 	bcs	116850 <_sbrk+0x38>
  11686c:	eb0000f4 	bl	116c44 <__errno>
  116870:	e3a0200c 	mov	r2, #12
  116874:	e3e03000 	mvn	r3, #0
  116878:	e5802000 	str	r2, [r0]
  11687c:	e1a00003 	mov	r0, r3
  116880:	e8bd8010 	pop	{r4, pc}

00116884 <initialize_monitor_handles.part.0>:
  116884:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  116888:	e30955f4 	movw	r5, #38388	; 0x95f4
  11688c:	e24dd014 	sub	sp, sp, #20
  116890:	e3a03000 	mov	r3, #0
  116894:	e3405011 	movt	r5, #17
  116898:	e3e02000 	mvn	r2, #0
  11689c:	e7852183 	str	r2, [r5, r3, lsl #3]
  1168a0:	e2833001 	add	r3, r3, #1
  1168a4:	e3530014 	cmp	r3, #20
  1168a8:	e30945f4 	movw	r4, #38388	; 0x95f4
  1168ac:	e3404011 	movt	r4, #17
  1168b0:	1afffff9 	bne	11689c <initialize_monitor_handles.part.0+0x18>
  1168b4:	e3003000 	movw	r3, #0
  1168b8:	e3403000 	movt	r3, #0
  1168bc:	e3530000 	cmp	r3, #0
  1168c0:	0a000009 	beq	1168ec <initialize_monitor_handles.part.0+0x68>
  1168c4:	e3a03002 	mov	r3, #2
  1168c8:	e3a01000 	mov	r1, #0
  1168cc:	e3a02001 	mov	r2, #1
  1168d0:	e5843010 	str	r3, [r4, #16]
  1168d4:	e3a03001 	mov	r3, #1
  1168d8:	e5841000 	str	r1, [r4]
  1168dc:	e5842008 	str	r2, [r4, #8]
  1168e0:	e58530a0 	str	r3, [r5, #160]	; 0xa0
  1168e4:	e28dd014 	add	sp, sp, #20
  1168e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1168ec:	e3076200 	movw	r6, #29184	; 0x7200
  1168f0:	e3a07003 	mov	r7, #3
  1168f4:	e3406011 	movt	r6, #17
  1168f8:	e58d3008 	str	r3, [sp, #8]
  1168fc:	e28d1004 	add	r1, sp, #4
  116900:	e58d6004 	str	r6, [sp, #4]
  116904:	e3a00001 	mov	r0, #1
  116908:	e58d700c 	str	r7, [sp, #12]
  11690c:	ef123456 	svc	0x00123456
  116910:	e3a03004 	mov	r3, #4
  116914:	e5840000 	str	r0, [r4]
  116918:	e58d6004 	str	r6, [sp, #4]
  11691c:	e08d1003 	add	r1, sp, r3
  116920:	e58d700c 	str	r7, [sp, #12]
  116924:	e3a00001 	mov	r0, #1
  116928:	e58d3008 	str	r3, [sp, #8]
  11692c:	ef123456 	svc	0x00123456
  116930:	e3a03008 	mov	r3, #8
  116934:	e5840008 	str	r0, [r4, #8]
  116938:	e58d6004 	str	r6, [sp, #4]
  11693c:	e28d1004 	add	r1, sp, #4
  116940:	e58d700c 	str	r7, [sp, #12]
  116944:	e3a00001 	mov	r0, #1
  116948:	e58d3008 	str	r3, [sp, #8]
  11694c:	ef123456 	svc	0x00123456
  116950:	e3700001 	cmn	r0, #1
  116954:	e5840010 	str	r0, [r4, #16]
  116958:	05943008 	ldreq	r3, [r4, #8]
  11695c:	05843010 	streq	r3, [r4, #16]
  116960:	e3a03001 	mov	r3, #1
  116964:	e58530a0 	str	r3, [r5, #160]	; 0xa0
  116968:	e28dd014 	add	sp, sp, #20
  11696c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00116970 <__cs3_openslot>:
  116970:	e92d4070 	push	{r4, r5, r6, lr}
  116974:	e30945f4 	movw	r4, #38388	; 0x95f4
  116978:	e3404011 	movt	r4, #17
  11697c:	e1a05000 	mov	r5, r0
  116980:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
  116984:	e3530000 	cmp	r3, #0
  116988:	0a000009 	beq	1169b4 <__cs3_openslot+0x44>
  11698c:	e3550013 	cmp	r5, #19
  116990:	8a000009 	bhi	1169bc <__cs3_openslot+0x4c>
  116994:	e7942185 	ldr	r2, [r4, r5, lsl #3]
  116998:	e30935f4 	movw	r3, #38388	; 0x95f4
  11699c:	e3403011 	movt	r3, #17
  1169a0:	e3720001 	cmn	r2, #1
  1169a4:	10833185 	addne	r3, r3, r5, lsl #3
  1169a8:	0a000003 	beq	1169bc <__cs3_openslot+0x4c>
  1169ac:	e1a00003 	mov	r0, r3
  1169b0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1169b4:	ebffffb2 	bl	116884 <initialize_monitor_handles.part.0>
  1169b8:	eafffff3 	b	11698c <__cs3_openslot+0x1c>
  1169bc:	eb0000a0 	bl	116c44 <__errno>
  1169c0:	e3a02009 	mov	r2, #9
  1169c4:	e3a03000 	mov	r3, #0
  1169c8:	e5802000 	str	r2, [r0]
  1169cc:	eafffff6 	b	1169ac <__cs3_openslot+0x3c>

001169d0 <__cs3_newslot>:
  1169d0:	e92d4070 	push	{r4, r5, r6, lr}
  1169d4:	e30945f4 	movw	r4, #38388	; 0x95f4
  1169d8:	e3404011 	movt	r4, #17
  1169dc:	e1a05000 	mov	r5, r0
  1169e0:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
  1169e4:	e3530000 	cmp	r3, #0
  1169e8:	0a000013 	beq	116a3c <__cs3_newslot+0x6c>
  1169ec:	e3a03000 	mov	r3, #0
  1169f0:	e7941183 	ldr	r1, [r4, r3, lsl #3]
  1169f4:	e30925f4 	movw	r2, #38388	; 0x95f4
  1169f8:	e3402011 	movt	r2, #17
  1169fc:	e1a0c183 	lsl	ip, r3, #3
  116a00:	e3710001 	cmn	r1, #1
  116a04:	0a000008 	beq	116a2c <__cs3_newslot+0x5c>
  116a08:	e2833001 	add	r3, r3, #1
  116a0c:	e3530014 	cmp	r3, #20
  116a10:	1afffff6 	bne	1169f0 <__cs3_newslot+0x20>
  116a14:	eb00008a 	bl	116c44 <__errno>
  116a18:	e3a02000 	mov	r2, #0
  116a1c:	e3a03018 	mov	r3, #24
  116a20:	e5803000 	str	r3, [r0]
  116a24:	e1a00002 	mov	r0, r2
  116a28:	e8bd8070 	pop	{r4, r5, r6, pc}
  116a2c:	e082200c 	add	r2, r2, ip
  116a30:	e5853000 	str	r3, [r5]
  116a34:	e1a00002 	mov	r0, r2
  116a38:	e8bd8070 	pop	{r4, r5, r6, pc}
  116a3c:	ebffff90 	bl	116884 <initialize_monitor_handles.part.0>
  116a40:	eaffffe9 	b	1169ec <__cs3_newslot+0x1c>

00116a44 <__cs3_checkerror>:
  116a44:	e3700001 	cmn	r0, #1
  116a48:	e92d4070 	push	{r4, r5, r6, lr}
  116a4c:	e1a04000 	mov	r4, r0
  116a50:	0a000001 	beq	116a5c <__cs3_checkerror+0x18>
  116a54:	e1a00004 	mov	r0, r4
  116a58:	e8bd8070 	pop	{r4, r5, r6, pc}
  116a5c:	eb000078 	bl	116c44 <__errno>
  116a60:	e3a01000 	mov	r1, #0
  116a64:	e1a05000 	mov	r5, r0
  116a68:	e3a00013 	mov	r0, #19
  116a6c:	ef123456 	svc	0x00123456
  116a70:	e5850000 	str	r0, [r5]
  116a74:	e1a00004 	mov	r0, r4
  116a78:	e8bd8070 	pop	{r4, r5, r6, pc}

00116a7c <__cs3_init_args>:
  116a7c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  116a80:	e3006000 	movw	r6, #0
  116a84:	e3406000 	movt	r6, #0
  116a88:	e24dd00c 	sub	sp, sp, #12
  116a8c:	e3560000 	cmp	r6, #0
  116a90:	0a000001 	beq	116a9c <__cs3_init_args+0x20>
  116a94:	e28dd00c 	add	sp, sp, #12
  116a98:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  116a9c:	e3a00c01 	mov	r0, #256	; 0x100
  116aa0:	ebffff5c 	bl	116818 <_sbrk>
  116aa4:	e3700001 	cmn	r0, #1
  116aa8:	e1a05000 	mov	r5, r0
  116aac:	0afffff8 	beq	116a94 <__cs3_init_args+0x18>
  116ab0:	e3a03c01 	mov	r3, #256	; 0x100
  116ab4:	e5c06000 	strb	r6, [r0]
  116ab8:	e1a0100d 	mov	r1, sp
  116abc:	e3a00015 	mov	r0, #21
  116ac0:	e58d5000 	str	r5, [sp]
  116ac4:	e58d3004 	str	r3, [sp, #4]
  116ac8:	ef123456 	svc	0x00123456
  116acc:	e309469c 	movw	r4, #38556	; 0x969c
  116ad0:	e1a00006 	mov	r0, r6
  116ad4:	e1a08006 	mov	r8, r6
  116ad8:	e3404011 	movt	r4, #17
  116adc:	e3a07001 	mov	r7, #1
  116ae0:	e1a02005 	mov	r2, r5
  116ae4:	e1a01005 	mov	r1, r5
  116ae8:	e3a09000 	mov	r9, #0
  116aec:	e5848000 	str	r8, [r4]
  116af0:	e5d1c000 	ldrb	ip, [r1]
  116af4:	e35c0000 	cmp	ip, #0
  116af8:	0a00001c 	beq	116b70 <__cs3_init_args+0xf4>
  116afc:	e3590000 	cmp	r9, #0
  116b00:	e281e001 	add	lr, r1, #1
  116b04:	1a000005 	bne	116b20 <__cs3_init_args+0xa4>
  116b08:	e5943000 	ldr	r3, [r4]
  116b0c:	e3500000 	cmp	r0, #0
  116b10:	e3a09001 	mov	r9, #1
  116b14:	17802103 	strne	r2, [r0, r3, lsl #2]
  116b18:	e0833009 	add	r3, r3, r9
  116b1c:	e5843000 	str	r3, [r4]
  116b20:	e35c0020 	cmp	ip, #32
  116b24:	0a000026 	beq	116bc4 <__cs3_init_args+0x148>
  116b28:	e35c0027 	cmp	ip, #39	; 0x27
  116b2c:	135c0022 	cmpne	ip, #34	; 0x22
  116b30:	1a00001a 	bne	116ba0 <__cs3_init_args+0x124>
  116b34:	e5d13001 	ldrb	r3, [r1, #1]
  116b38:	e3530000 	cmp	r3, #0
  116b3c:	0a000038 	beq	116c24 <__cs3_init_args+0x1a8>
  116b40:	e15c0003 	cmp	ip, r3
  116b44:	0a00001c 	beq	116bbc <__cs3_init_args+0x140>
  116b48:	e1a0100e 	mov	r1, lr
  116b4c:	ea000001 	b	116b58 <__cs3_init_args+0xdc>
  116b50:	e15c0003 	cmp	ip, r3
  116b54:	0a000017 	beq	116bb8 <__cs3_init_args+0x13c>
  116b58:	e3500000 	cmp	r0, #0
  116b5c:	15c23000 	strbne	r3, [r2]
  116b60:	12822001 	addne	r2, r2, #1
  116b64:	e5f13001 	ldrb	r3, [r1, #1]!
  116b68:	e3530000 	cmp	r3, #0
  116b6c:	1afffff7 	bne	116b50 <__cs3_init_args+0xd4>
  116b70:	e3570001 	cmp	r7, #1
  116b74:	0a00001c 	beq	116bec <__cs3_init_args+0x170>
  116b78:	e3570002 	cmp	r7, #2
  116b7c:	1a000026 	bne	116c1c <__cs3_init_args+0x1a0>
  116b80:	e3a01000 	mov	r1, #0
  116b84:	e3093698 	movw	r3, #38552	; 0x9698
  116b88:	e5c21000 	strb	r1, [r2]
  116b8c:	e3403011 	movt	r3, #17
  116b90:	e5942000 	ldr	r2, [r4]
  116b94:	e7801102 	str	r1, [r0, r2, lsl #2]
  116b98:	e5830000 	str	r0, [r3]
  116b9c:	eaffffbc 	b	116a94 <__cs3_init_args+0x18>
  116ba0:	e3500000 	cmp	r0, #0
  116ba4:	01a0100e 	moveq	r1, lr
  116ba8:	15c2c000 	strbne	ip, [r2]
  116bac:	11a0100e 	movne	r1, lr
  116bb0:	12822001 	addne	r2, r2, #1
  116bb4:	eaffffcd 	b	116af0 <__cs3_init_args+0x74>
  116bb8:	e1a0e001 	mov	lr, r1
  116bbc:	e28e1001 	add	r1, lr, #1
  116bc0:	eaffffca 	b	116af0 <__cs3_init_args+0x74>
  116bc4:	e3500000 	cmp	r0, #0
  116bc8:	0a000004 	beq	116be0 <__cs3_init_args+0x164>
  116bcc:	e5c26000 	strb	r6, [r2]
  116bd0:	e1a0100e 	mov	r1, lr
  116bd4:	e2822001 	add	r2, r2, #1
  116bd8:	e3a09000 	mov	r9, #0
  116bdc:	eaffffc3 	b	116af0 <__cs3_init_args+0x74>
  116be0:	e1a0100e 	mov	r1, lr
  116be4:	e1a09000 	mov	r9, r0
  116be8:	eaffffc0 	b	116af0 <__cs3_init_args+0x74>
  116bec:	e0650001 	rsb	r0, r5, r1
  116bf0:	e2800010 	add	r0, r0, #16
  116bf4:	e3c0000f 	bic	r0, r0, #15
  116bf8:	e2400c01 	sub	r0, r0, #256	; 0x100
  116bfc:	ebffff05 	bl	116818 <_sbrk>
  116c00:	e5940000 	ldr	r0, [r4]
  116c04:	e2800004 	add	r0, r0, #4
  116c08:	e3c00003 	bic	r0, r0, #3
  116c0c:	e1a00100 	lsl	r0, r0, #2
  116c10:	ebffff00 	bl	116818 <_sbrk>
  116c14:	e3700001 	cmn	r0, #1
  116c18:	0affff9d 	beq	116a94 <__cs3_init_args+0x18>
  116c1c:	e2877001 	add	r7, r7, #1
  116c20:	eaffffae 	b	116ae0 <__cs3_init_args+0x64>
  116c24:	e1a0100e 	mov	r1, lr
  116c28:	eaffffd0 	b	116b70 <__cs3_init_args+0xf4>

00116c2c <__cs3_isr_interrupt>:
  116c2c:	eafffffe 	b	116c2c <__cs3_isr_interrupt>

00116c30 <__cs3_isr_undef>:
  116c30:	eafffffe 	b	116c30 <__cs3_isr_undef>

00116c34 <__cs3_isr_swi>:
  116c34:	eafffffe 	b	116c34 <__cs3_isr_swi>

00116c38 <__cs3_isr_pabort>:
  116c38:	eafffffe 	b	116c38 <__cs3_isr_pabort>

00116c3c <__cs3_isr_dabort>:
  116c3c:	eafffffe 	b	116c3c <__cs3_isr_dabort>

00116c40 <__cs3_isr_fiq>:
  116c40:	eafffffe 	b	116c40 <__cs3_isr_fiq>

00116c44 <__errno>:
  116c44:	e92d4010 	push	{r4, lr}
  116c48:	ebffebf1 	bl	111c14 <__getreent>
  116c4c:	e8bd8010 	pop	{r4, pc}

00116c50 <__libc_init_array>:
  116c50:	e92d4070 	push	{r4, r5, r6, lr}
  116c54:	e3076220 	movw	r6, #29216	; 0x7220
  116c58:	e307521c 	movw	r5, #29212	; 0x721c
  116c5c:	e3406011 	movt	r6, #17
  116c60:	e3405011 	movt	r5, #17
  116c64:	e0656006 	rsb	r6, r5, r6
  116c68:	e1b06146 	asrs	r6, r6, #2
  116c6c:	13a04000 	movne	r4, #0
  116c70:	0a000004 	beq	116c88 <__libc_init_array+0x38>
  116c74:	e2844001 	add	r4, r4, #1
  116c78:	e4953004 	ldr	r3, [r5], #4
  116c7c:	e12fff33 	blx	r3
  116c80:	e1560004 	cmp	r6, r4
  116c84:	1afffffa 	bne	116c74 <__libc_init_array+0x24>
  116c88:	e307623c 	movw	r6, #29244	; 0x723c
  116c8c:	e3075220 	movw	r5, #29216	; 0x7220
  116c90:	e3406011 	movt	r6, #17
  116c94:	e3405011 	movt	r5, #17
  116c98:	e0656006 	rsb	r6, r5, r6
  116c9c:	eb000158 	bl	117204 <_init>
  116ca0:	e1b06146 	asrs	r6, r6, #2
  116ca4:	13a04000 	movne	r4, #0
  116ca8:	0a000005 	beq	116cc4 <__libc_init_array+0x74>
  116cac:	e2844001 	add	r4, r4, #1
  116cb0:	e4953004 	ldr	r3, [r5], #4
  116cb4:	e12fff33 	blx	r3
  116cb8:	e1560004 	cmp	r6, r4
  116cbc:	1afffffa 	bne	116cac <__libc_init_array+0x5c>
  116cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
  116cc4:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .eh_frame:

00116cc8 <__EH_FRAME_BEGIN__>:
  116cc8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.exidx:

00116ccc <.ARM.exidx>:
  116ccc:	7fff5e1c 	svcvc	0x00ff5e1c
  116cd0:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

00116cd8 <blanks.8204-0x35c>:
  116cd8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  116cdc:	70757272 	rsbsvc	r7, r5, r2, ror r2
  116ce0:	20646574 	rsbcs	r6, r4, r4, ror r5
  116ce4:	74206425 	strtvc	r6, [r0], #-1061	; 0xfffffbdb
  116ce8:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
  116cec:	000a2973 	andeq	r2, sl, r3, ror r9
  116cf0:	61666564 	cmnvs	r6, r4, ror #10
  116cf4:	65746c75 	ldrbvs	r6, [r4, #-3189]!	; 0xfffff38b
  116cf8:	00000064 	andeq	r0, r0, r4, rrx
  116cfc:	6c6c6568 	cfstr64vs	mvdx6, [ip], #-416	; 0xfffffe60
  116d00:	0000006f 	andeq	r0, r0, pc, rrx
  116d04:	00646572 	rsbeq	r6, r4, r2, ror r5
  116d08:	65756c62 	ldrbvs	r6, [r5, #-3170]!	; 0xfffff39e
  116d0c:	00000000 	andeq	r0, r0, r0
  116d10:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
  116d14:	0000006e 	andeq	r0, r0, lr, rrx
  116d18:	6c6c6579 	cfstr64vs	mvdx6, [ip], #-484	; 0xfffffe1c
  116d1c:	0000776f 	andeq	r7, r0, pc, ror #14
  116d20:	5f746c61 	svcpl	0x00746c61
  116d24:	5f6c6c70 	svcpl	0x006c6c70
  116d28:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116d2c:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116d30:	71657266 	cmnvc	r5, r6, ror #4
  116d34:	69614d2e 	stmdbvs	r1!, {r1, r2, r3, r5, r8, sl, fp, lr}^
  116d38:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
  116d3c:	2030435f 	eorscs	r4, r0, pc, asr r3
  116d40:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116d44:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116d48:	0000000a 	andeq	r0, r0, sl
  116d4c:	5f746c61 	svcpl	0x00746c61
  116d50:	5f6c6c70 	svcpl	0x006c6c70
  116d54:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116d58:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116d5c:	71657266 	cmnvc	r5, r6, ror #4
  116d60:	69614d2e 	stmdbvs	r1!, {r1, r2, r3, r5, r8, sl, fp, lr}^
  116d64:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
  116d68:	2031435f 	eorscs	r4, r1, pc, asr r3
  116d6c:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116d70:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116d74:	0000000a 	andeq	r0, r0, sl
  116d78:	5f746c61 	svcpl	0x00746c61
  116d7c:	5f6c6c70 	svcpl	0x006c6c70
  116d80:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116d84:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116d88:	71657266 	cmnvc	r5, r6, ror #4
  116d8c:	69614d2e 	stmdbvs	r1!, {r1, r2, r3, r5, r8, sl, fp, lr}^
  116d90:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
  116d94:	2032435f 	eorscs	r4, r2, pc, asr r3
  116d98:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116d9c:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116da0:	0000000a 	andeq	r0, r0, sl
  116da4:	5f746c61 	svcpl	0x00746c61
  116da8:	5f6c6c70 	svcpl	0x006c6c70
  116dac:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116db0:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116db4:	71657266 	cmnvc	r5, r6, ror #4
  116db8:	69614d2e 	stmdbvs	r1!, {r1, r2, r3, r5, r8, sl, fp, lr}^
  116dbc:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
  116dc0:	2033435f 	eorscs	r4, r3, pc, asr r3
  116dc4:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116dc8:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116dcc:	0000000a 	andeq	r0, r0, sl
  116dd0:	5f746c61 	svcpl	0x00746c61
  116dd4:	5f6c6c70 	svcpl	0x006c6c70
  116dd8:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116ddc:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116de0:	71657266 	cmnvc	r5, r6, ror #4
  116de4:	69614d2e 	stmdbvs	r1!, {r1, r2, r3, r5, r8, sl, fp, lr}^
  116de8:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
  116dec:	2034435f 	eorscs	r4, r4, pc, asr r3
  116df0:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116df4:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116df8:	0000000a 	andeq	r0, r0, sl
  116dfc:	5f746c61 	svcpl	0x00746c61
  116e00:	5f6c6c70 	svcpl	0x006c6c70
  116e04:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116e08:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116e0c:	71657266 	cmnvc	r5, r6, ror #4
  116e10:	69614d2e 	stmdbvs	r1!, {r1, r2, r3, r5, r8, sl, fp, lr}^
  116e14:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
  116e18:	2035435f 	eorscs	r4, r5, pc, asr r3
  116e1c:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116e20:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116e24:	0000000a 	andeq	r0, r0, sl
  116e28:	5f746c61 	svcpl	0x00746c61
  116e2c:	5f6c6c70 	svcpl	0x006c6c70
  116e30:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116e34:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116e38:	71657266 	cmnvc	r5, r6, ror #4
  116e3c:	7265502e 	rsbvc	r5, r5, #46	; 0x2e
  116e40:	50687069 	rsbpl	r7, r8, r9, rrx
  116e44:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
  116e48:	203d2030 	eorscs	r2, sp, r0, lsr r0
  116e4c:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116e50:	0000000a 	andeq	r0, r0, sl
  116e54:	5f746c61 	svcpl	0x00746c61
  116e58:	5f6c6c70 	svcpl	0x006c6c70
  116e5c:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116e60:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116e64:	71657266 	cmnvc	r5, r6, ror #4
  116e68:	7265502e 	rsbvc	r5, r5, #46	; 0x2e
  116e6c:	50687069 	rsbpl	r7, r8, r9, rrx
  116e70:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
  116e74:	203d2031 	eorscs	r2, sp, r1, lsr r0
  116e78:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116e7c:	0000000a 	andeq	r0, r0, sl
  116e80:	5f746c61 	svcpl	0x00746c61
  116e84:	5f6c6c70 	svcpl	0x006c6c70
  116e88:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116e8c:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116e90:	71657266 	cmnvc	r5, r6, ror #4
  116e94:	7265502e 	rsbvc	r5, r5, #46	; 0x2e
  116e98:	50687069 	rsbpl	r7, r8, r9, rrx
  116e9c:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
  116ea0:	203d2032 	eorscs	r2, sp, r2, lsr r0
  116ea4:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116ea8:	0000000a 	andeq	r0, r0, sl
  116eac:	5f746c61 	svcpl	0x00746c61
  116eb0:	5f6c6c70 	svcpl	0x006c6c70
  116eb4:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116eb8:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116ebc:	71657266 	cmnvc	r5, r6, ror #4
  116ec0:	7265502e 	rsbvc	r5, r5, #46	; 0x2e
  116ec4:	50687069 	rsbpl	r7, r8, r9, rrx
  116ec8:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
  116ecc:	203d2033 	eorscs	r2, sp, r3, lsr r0
  116ed0:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116ed4:	0000000a 	andeq	r0, r0, sl
  116ed8:	5f746c61 	svcpl	0x00746c61
  116edc:	5f6c6c70 	svcpl	0x006c6c70
  116ee0:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116ee4:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116ee8:	71657266 	cmnvc	r5, r6, ror #4
  116eec:	7265502e 	rsbvc	r5, r5, #46	; 0x2e
  116ef0:	50687069 	rsbpl	r7, r8, r9, rrx
  116ef4:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
  116ef8:	203d2034 	eorscs	r2, sp, r4, lsr r0
  116efc:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116f00:	0000000a 	andeq	r0, r0, sl
  116f04:	5f746c61 	svcpl	0x00746c61
  116f08:	5f6c6c70 	svcpl	0x006c6c70
  116f0c:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116f10:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116f14:	71657266 	cmnvc	r5, r6, ror #4
  116f18:	7265502e 	rsbvc	r5, r5, #46	; 0x2e
  116f1c:	50687069 	rsbpl	r7, r8, r9, rrx
  116f20:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
  116f24:	203d2035 	eorscs	r2, sp, r5, lsr r0
  116f28:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116f2c:	0000000a 	andeq	r0, r0, sl
  116f30:	5f746c61 	svcpl	0x00746c61
  116f34:	5f6c6c70 	svcpl	0x006c6c70
  116f38:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116f3c:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116f40:	71657266 	cmnvc	r5, r6, ror #4
  116f44:	5244532e 	subpl	r5, r4, #-1207959552	; 0xb8000000
  116f48:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
  116f4c:	30435f4c 	subcc	r5, r3, ip, asr #30
  116f50:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116f54:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116f58:	0000000a 	andeq	r0, r0, sl
  116f5c:	5f746c61 	svcpl	0x00746c61
  116f60:	5f6c6c70 	svcpl	0x006c6c70
  116f64:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116f68:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116f6c:	71657266 	cmnvc	r5, r6, ror #4
  116f70:	5244532e 	subpl	r5, r4, #-1207959552	; 0xb8000000
  116f74:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
  116f78:	31435f4c 	cmpcc	r3, ip, asr #30
  116f7c:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116f80:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116f84:	0000000a 	andeq	r0, r0, sl
  116f88:	5f746c61 	svcpl	0x00746c61
  116f8c:	5f6c6c70 	svcpl	0x006c6c70
  116f90:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116f94:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116f98:	71657266 	cmnvc	r5, r6, ror #4
  116f9c:	5244532e 	subpl	r5, r4, #-1207959552	; 0xb8000000
  116fa0:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
  116fa4:	32435f4c 	subcc	r5, r3, #76, 30	; 0x130
  116fa8:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116fac:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116fb0:	0000000a 	andeq	r0, r0, sl
  116fb4:	5f746c61 	svcpl	0x00746c61
  116fb8:	5f6c6c70 	svcpl	0x006c6c70
  116fbc:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
  116fc0:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  116fc4:	71657266 	cmnvc	r5, r6, ror #4
  116fc8:	5244532e 	subpl	r5, r4, #-1207959552	; 0xb8000000
  116fcc:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
  116fd0:	35435f4c 	strbcc	r5, [r3, #-3916]	; 0xfffff0b4
  116fd4:	203d2020 	eorscs	r2, sp, r0, lsr #32
  116fd8:	64303125 	ldrtvs	r3, [r0], #-293	; 0xfffffedb
  116fdc:	0000000a 	andeq	r0, r0, sl
  116fe0:	20646162 	rsbcs	r6, r4, r2, ror #2
  116fe4:	2078616d 	rsbscs	r6, r8, sp, ror #2
  116fe8:	71657266 	cmnvc	r5, r6, ror #4
  116fec:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
  116ff0:	61702079 	cmnvs	r0, r9, ror r0
  116ff4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
  116ff8:	0a726574 	beq	1db05d0 <__cs3_heap_start+0x1c96f30>
  116ffc:	00000000 	andeq	r0, r0, r0
  117000:	5b544e49 	blpl	162a92c <__cs3_heap_start+0x151128c>
  117004:	5d525349 	ldclpl	3, cr5, [r2, #-292]	; 0xfffffedc
  117008:	6e55203a 	mrcvs	0, 2, r2, cr5, cr10, {1}
  11700c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
  117010:	2064656c 	rsbcs	r6, r4, ip, ror #10
  117014:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  117018:	70757272 	rsbsvc	r7, r5, r2, ror r2
  11701c:	44492074 	strbmi	r2, [r9], #-116	; 0xffffff8c
  117020:	30203d20 	eorcc	r3, r0, r0, lsr #26
  117024:	786c2578 	stmdavc	ip!, {r3, r4, r5, r6, r8, sl, sp}^
  117028:	00000a2e 	andeq	r0, r0, lr, lsr #20
  11702c:	00000043 	andeq	r0, r0, r3, asr #32
  117030:	0000000a 	andeq	r0, r0, sl

00117034 <blanks.8204>:
  117034:	20202020 	eorcs	r2, r0, r0, lsr #32
  117038:	20202020 	eorcs	r2, r0, r0, lsr #32
  11703c:	20202020 	eorcs	r2, r0, r0, lsr #32
  117040:	20202020 	eorcs	r2, r0, r0, lsr #32

00117044 <zeroes.8205>:
  117044:	30303030 	eorscc	r3, r0, r0, lsr r0
  117048:	30303030 	eorscc	r3, r0, r0, lsr r0
  11704c:	30303030 	eorscc	r3, r0, r0, lsr r0
  117050:	30303030 	eorscc	r3, r0, r0, lsr r0
  117054:	00464e49 	subeq	r4, r6, r9, asr #28
  117058:	00666e69 	rsbeq	r6, r6, r9, ror #28
  11705c:	004e414e 	subeq	r4, lr, lr, asr #2
  117060:	006e616e 	rsbeq	r6, lr, lr, ror #2
  117064:	33323130 	teqcc	r2, #48, 2
  117068:	37363534 			; <UNDEFINED> instruction: 0x37363534
  11706c:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
  117070:	46454443 	strbmi	r4, [r5], -r3, asr #8
  117074:	00000000 	andeq	r0, r0, r0
  117078:	33323130 	teqcc	r2, #48, 2
  11707c:	37363534 			; <UNDEFINED> instruction: 0x37363534
  117080:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
  117084:	66656463 	strbtvs	r6, [r5], -r3, ror #8
  117088:	00000000 	andeq	r0, r0, r0
  11708c:	6c756e28 	ldclvs	14, cr6, [r5], #-160	; 0xffffff60
  117090:	0000296c 	andeq	r2, r0, ip, ror #18
  117094:	00000030 	andeq	r0, r0, r0, lsr r0
  117098:	69666e49 	stmdbvs	r6!, {r0, r3, r6, r9, sl, fp, sp, lr}^
  11709c:	7974696e 	ldmdbvc	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  1170a0:	00000000 	andeq	r0, r0, r0
  1170a4:	004e614e 	subeq	r6, lr, lr, asr #2
  1170a8:	49534f50 	ldmdbmi	r3, {r4, r6, r8, r9, sl, fp, lr}^
  1170ac:	00000058 	andeq	r0, r0, r8, asr r0
  1170b0:	0000002e 	andeq	r0, r0, lr, lsr #32
  1170b4:	00000000 	andeq	r0, r0, r0

001170b8 <p05.6572>:
  1170b8:	00000005 	andeq	r0, r0, r5
  1170bc:	00000019 	andeq	r0, r0, r9, lsl r0
  1170c0:	0000007d 	andeq	r0, r0, sp, ror r0
  1170c4:	00000000 	andeq	r0, r0, r0

001170c8 <__mprec_tens>:
  1170c8:	00000000 	andeq	r0, r0, r0
  1170cc:	3ff00000 	svccc	0x00f00000	; IMB
  1170d0:	00000000 	andeq	r0, r0, r0
  1170d4:	40240000 	eormi	r0, r4, r0
  1170d8:	00000000 	andeq	r0, r0, r0
  1170dc:	40590000 	subsmi	r0, r9, r0
  1170e0:	00000000 	andeq	r0, r0, r0
  1170e4:	408f4000 	addmi	r4, pc, r0
  1170e8:	00000000 	andeq	r0, r0, r0
  1170ec:	40c38800 	sbcmi	r8, r3, r0, lsl #16
  1170f0:	00000000 	andeq	r0, r0, r0
  1170f4:	40f86a00 	rscsmi	r6, r8, r0, lsl #20
  1170f8:	00000000 	andeq	r0, r0, r0
  1170fc:	412e8480 	smlawbmi	lr, r0, r4, r8
  117100:	00000000 	andeq	r0, r0, r0
  117104:	416312d0 	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
  117108:	00000000 	andeq	r0, r0, r0
  11710c:	4197d784 	orrsmi	sp, r7, r4, lsl #15
  117110:	00000000 	andeq	r0, r0, r0
  117114:	41cdcd65 	bicmi	ip, sp, r5, ror #26
  117118:	20000000 	andcs	r0, r0, r0
  11711c:	4202a05f 	andmi	sl, r2, #95	; 0x5f
  117120:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
  117124:	42374876 	eorsmi	r4, r7, #7733248	; 0x760000
  117128:	a2000000 	andge	r0, r0, #0
  11712c:	426d1a94 	rsbmi	r1, sp, #148, 20	; 0x94000
  117130:	e5400000 	strb	r0, [r0, #-0]
  117134:	42a2309c 	adcmi	r3, r2, #156	; 0x9c
  117138:	1e900000 	cdpne	0, 9, cr0, cr0, cr0, {0}
  11713c:	42d6bcc4 	sbcsmi	fp, r6, #196, 24	; 0xc400
  117140:	26340000 	ldrtcs	r0, [r4], -r0
  117144:	430c6bf5 	movwmi	r6, #52213	; 0xcbf5
  117148:	37e08000 	strbcc	r8, [r0, r0]!
  11714c:	4341c379 	movtmi	ip, #4985	; 0x1379
  117150:	85d8a000 	ldrbhi	sl, [r8]
  117154:	43763457 	cmnmi	r6, #1459617792	; 0x57000000
  117158:	674ec800 	strbvs	ip, [lr, -r0, lsl #16]
  11715c:	43abc16d 			; <UNDEFINED> instruction: 0x43abc16d
  117160:	60913d00 	addsvs	r3, r1, r0, lsl #26
  117164:	43e158e4 	mvnmi	r5, #228, 16	; 0xe40000
  117168:	78b58c40 	ldmvc	r5!, {r6, sl, fp, pc}
  11716c:	4415af1d 	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
  117170:	d6e2ef50 	usatle	lr, #2, r0, asr #30
  117174:	444b1ae4 	strbmi	r1, [fp], #-2788	; 0xfffff51c
  117178:	064dd592 			; <UNDEFINED> instruction: 0x064dd592
  11717c:	4480f0cf 	strmi	pc, [r0], #207	; 0xcf
  117180:	c7e14af6 			; <UNDEFINED> instruction: 0xc7e14af6
  117184:	44b52d02 	ldrtmi	r2, [r5], #3330	; 0xd02
  117188:	79d99db4 	ldmibvc	r9, {r2, r4, r5, r7, r8, sl, fp, ip, pc}^
  11718c:	44ea7843 	strbtmi	r7, [sl], #2115	; 0x843

00117190 <__mprec_tinytens>:
  117190:	97d889bc 			; <UNDEFINED> instruction: 0x97d889bc
  117194:	3c9cd2b2 	lfmcc	f5, 1, [ip], {178}	; 0xb2
  117198:	d5a8a733 	strle	sl, [r8, #1843]!	; 0x733
  11719c:	3949f623 	stmdbcc	r9, {r0, r1, r5, r9, sl, ip, sp, lr, pc}^
  1171a0:	44f4a73d 	ldrbtmi	sl, [r4], #1853	; 0x73d
  1171a4:	32a50ffd 	adccc	r0, r5, #1012	; 0x3f4
  1171a8:	cf8c979d 	svcgt	0x008c979d
  1171ac:	255bba08 	ldrbcs	fp, [fp, #-2568]	; 0xfffff5f8
  1171b0:	64ac6f43 	strtvs	r6, [ip], #3907	; 0xf43
  1171b4:	0ac80628 	beq	ff318a5c <__cs3_heap_end+0xbf318a5c>

001171b8 <__mprec_bigtens>:
  1171b8:	37e08000 	strbcc	r8, [r0, r0]!
  1171bc:	4341c379 	movtmi	ip, #4985	; 0x1379
  1171c0:	b5056e17 	strlt	r6, [r5, #-3607]	; 0xfffff1e9
  1171c4:	4693b8b5 			; <UNDEFINED> instruction: 0x4693b8b5
  1171c8:	e93ff9f5 	ldmdb	pc!, {r0, r2, r4, r5, r6, r7, r8, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
  1171cc:	4d384f03 	ldcmi	15, cr4, [r8, #-12]!
  1171d0:	f9301d32 			; <UNDEFINED> instruction: 0xf9301d32
  1171d4:	5a827748 	bpl	fe1b4efc <__cs3_heap_end+0xbe1b4efc>
  1171d8:	7f73bf3c 	svcvc	0x0073bf3c
  1171dc:	75154fdd 	ldrvc	r4, [r5, #-4061]	; 0xfffff023

001171e0 <blanks.8147>:
  1171e0:	20202020 	eorcs	r2, r0, r0, lsr #32
  1171e4:	20202020 	eorcs	r2, r0, r0, lsr #32
  1171e8:	20202020 	eorcs	r2, r0, r0, lsr #32
  1171ec:	20202020 	eorcs	r2, r0, r0, lsr #32

001171f0 <zeroes.8148>:
  1171f0:	30303030 	eorscc	r3, r0, r0, lsr r0
  1171f4:	30303030 	eorscc	r3, r0, r0, lsr r0
  1171f8:	30303030 	eorscc	r3, r0, r0, lsr r0
  1171fc:	30303030 	eorscc	r3, r0, r0, lsr r0
  117200:	0074743a 	rsbseq	r7, r4, sl, lsr r4

00117204 <_init>:
  117204:	e1a0c00d 	mov	ip, sp
  117208:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
  11720c:	e24cb004 	sub	fp, ip, #4
  117210:	e24bd028 	sub	sp, fp, #40	; 0x28
  117214:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
  117218:	e12fff1e 	bx	lr

0011721c <__preinit_array_start>:
  11721c:	0011643c 	andseq	r6, r1, ip, lsr r4

00117220 <__init_array_start>:
  117220:	0010f764 	andseq	pc, r0, r4, ror #14
  117224:	00111248 	andseq	r1, r1, r8, asr #4
  117228:	00111254 	andseq	r1, r1, r4, asr r2
  11722c:	00112ad4 			; <UNDEFINED> instruction: 0x00112ad4
  117230:	0010f770 	andseq	pc, r0, r0, ror r7	; <UNPREDICTABLE>

00117234 <__frame_dummy_init_array_entry>:
  117234:	00100188 	andseq	r0, r0, r8, lsl #3
  117238:	00116a7c 	andseq	r6, r1, ip, ror sl

0011723c <__libc_fini>:
  11723c:	e1a0c00d 	mov	ip, sp
  117240:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
  117244:	e24cb004 	sub	fp, ip, #4
  117248:	e24bd028 	sub	sp, fp, #40	; 0x28
  11724c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
  117250:	e12fff1e 	bx	lr

00117254 <__fini_array_start>:
  117254:	00100144 	andseq	r0, r0, r4, asr #2

00117258 <__cs3_regions>:
  117258:	00000000 	andeq	r0, r0, r0
  11725c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
  117260:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
	...
  117270:	00100000 	andseq	r0, r0, r0
  117274:	00100000 	andseq	r0, r0, r0
  117278:	00017c58 	andeq	r7, r1, r8, asr ip
  11727c:	00001a48 	andeq	r1, r0, r8, asr #20

Disassembly of section .data:

00117280 <__JCR_END__>:
  117280:	00000000 	andeq	r0, r0, r0

00117284 <__dso_handle>:
  117284:	00000000 	andeq	r0, r0, r0

00117288 <button>:
  117288:	ff200004 			; <UNDEFINED> instruction: 0xff200004

0011728c <buttonW>:
  11728c:	ff200024 			; <UNDEFINED> instruction: 0xff200024

00117290 <segDispVal4>:
  117290:	ff200014 			; <UNDEFINED> instruction: 0xff200014

00117294 <segDispVal3>:
  117294:	ff200018 			; <UNDEFINED> instruction: 0xff200018

00117298 <segDispVal2>:
  117298:	ff20001c 			; <UNDEFINED> instruction: 0xff20001c

0011729c <segDispVal1>:
  11729c:	ff200020 			; <UNDEFINED> instruction: 0xff200020

001172a0 <timerLoad>:
  1172a0:	fffec600 			; <UNDEFINED> instruction: 0xfffec600

001172a4 <timerControl>:
  1172a4:	fffec608 			; <UNDEFINED> instruction: 0xfffec608

001172a8 <timerInterrupt>:
  1172a8:	fffec60c 			; <UNDEFINED> instruction: 0xfffec60c

001172ac <lives>:
  1172ac:	00000005 	andeq	r0, r0, r5

001172b0 <alt_ext_clk_paramblok>:
  1172b0:	017d7840 	cmneq	sp, r0, asr #16
  1172b4:	00989680 	addseq	r9, r8, r0, lsl #13
  1172b8:	02faf080 	rscseq	pc, sl, #128	; 0x80
  1172bc:	00000080 	andeq	r0, r0, r0, lsl #1
  1172c0:	017d7840 	cmneq	sp, r0, asr #16
  1172c4:	00989680 	addseq	r9, r8, r0, lsl #13
  1172c8:	02faf080 	rscseq	pc, sl, #128	; 0x80
  1172cc:	00000080 	andeq	r0, r0, r0, lsl #1
  1172d0:	00000000 	andeq	r0, r0, r0
  1172d4:	00989680 	addseq	r9, r8, r0, lsl #13
  1172d8:	02faf080 	rscseq	pc, sl, #128	; 0x80
  1172dc:	00000080 	andeq	r0, r0, r0, lsl #1
  1172e0:	00000000 	andeq	r0, r0, r0
  1172e4:	00989680 	addseq	r9, r8, r0, lsl #13
  1172e8:	02faf080 	rscseq	pc, sl, #128	; 0x80
  1172ec:	00000080 	andeq	r0, r0, r0, lsl #1

001172f0 <alt_pll_clk_paramblok>:
  1172f0:	00000000 	andeq	r0, r0, r0
  1172f4:	1312d000 	tstne	r2, #0
  1172f8:	47868c00 	strmi	r8, [r6, r0, lsl #24]
  1172fc:	00000014 	andeq	r0, r0, r4, lsl r0
  117300:	00000000 	andeq	r0, r0, r0
  117304:	1312d000 	tstne	r2, #0
  117308:	35a4e900 	strcc	lr, [r4, #2304]!	; 0x900
  11730c:	00000014 	andeq	r0, r0, r4, lsl r0
  117310:	00000000 	andeq	r0, r0, r0
  117314:	1312d000 	tstne	r2, #0
  117318:	2faf0800 	svccs	0x00af0800
  11731c:	00000014 	andeq	r0, r0, r4, lsl r0
  117320:	00000000 	andeq	r0, r0, r0
  117324:	1312d000 	tstne	r2, #0
  117328:	5f5e1000 	svcpl	0x005e1000
  11732c:	00000094 	muleq	r0, r4, r0
  117330:	00000000 	andeq	r0, r0, r0
  117334:	1312d000 	tstne	r2, #0
  117338:	4a817c80 	bmi	fe176540 <__cs3_heap_end+0xbe176540>
  11733c:	00000094 	muleq	r0, r4, r0
  117340:	00000000 	andeq	r0, r0, r0
  117344:	1312d000 	tstne	r2, #0
  117348:	3f89de80 	svccc	0x0089de80
  11734c:	00000094 	muleq	r0, r4, r0

00117350 <alt_pll_cntr_maxfreq>:
  117350:	2faf0800 	svccs	0x00af0800
  117354:	17d78400 	ldrbne	r8, [r7, r0, lsl #8]
  117358:	17d78400 	ldrbne	r8, [r7, r0, lsl #8]
  11735c:	19bfcc00 	ldmibne	pc!, {sl, fp, lr, pc}	; <UNPREDICTABLE>
  117360:	0ee6b280 	cdpeq	2, 14, cr11, cr6, cr0, {4}
  117364:	07735940 	ldrbeq	r5, [r3, -r0, asr #18]!
  117368:	0ee6b280 	cdpeq	2, 14, cr11, cr6, cr0, {4}
  11736c:	0ee6b280 	cdpeq	2, 14, cr11, cr6, cr0, {4}
  117370:	19bfcc00 	ldmibne	pc!, {sl, fp, lr, pc}	; <UNPREDICTABLE>
  117374:	0ee6b280 	cdpeq	2, 14, cr11, cr6, cr0, {4}
  117378:	0bebc200 	bleq	ffc07b80 <__cs3_heap_end+0xbfc07b80>
  11737c:	05f5e100 	ldrbeq	lr, [r5, #256]!	; 0x100
  117380:	1fc4ef40 	svcne	0x00c4ef40
  117384:	3f89de80 	svccc	0x0089de80
  117388:	1fc4ef40 	svcne	0x00c4ef40
  11738c:	0bebc200 	bleq	ffc07b94 <__cs3_heap_end+0xbfc07b94>

00117390 <_global_impure_ptr>:
  117390:	00117398 	mulseq	r1, r8, r3

00117394 <_impure_ptr>:
  117394:	00117398 	mulseq	r1, r8, r3

00117398 <impure_data>:
  117398:	00000000 	andeq	r0, r0, r0
  11739c:	00117684 	andseq	r7, r1, r4, lsl #13
  1173a0:	001176ec 	andseq	r7, r1, ip, ror #13
  1173a4:	00117754 	andseq	r7, r1, r4, asr r7
	...
  1173cc:	0011702c 	andseq	r7, r1, ip, lsr #32
	...
  117440:	00000001 	andeq	r0, r0, r1
  117444:	00000000 	andeq	r0, r0, r0
  117448:	abcd330e 	blge	ff464088 <__cs3_heap_end+0xbf464088>
  11744c:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
  117450:	0005deec 	andeq	sp, r5, ip, ror #29
  117454:	0000000b 	andeq	r0, r0, fp
	...

001177c0 <lc_ctype_charset>:
  1177c0:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
  1177c4:	00000049 	andeq	r0, r0, r9, asr #32
	...

001177e0 <__mb_cur_max>:
  1177e0:	00000001 	andeq	r0, r0, r1

001177e4 <lc_message_charset>:
  1177e4:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
  1177e8:	00000049 	andeq	r0, r0, r9, asr #32
	...

00117804 <lconv>:
  117804:	001170b0 	ldrheq	r7, [r1], -r0
  117808:	00117074 	andseq	r7, r1, r4, ror r0
  11780c:	00117074 	andseq	r7, r1, r4, ror r0
  117810:	00117074 	andseq	r7, r1, r4, ror r0
  117814:	00117074 	andseq	r7, r1, r4, ror r0
  117818:	00117074 	andseq	r7, r1, r4, ror r0
  11781c:	00117074 	andseq	r7, r1, r4, ror r0
  117820:	00117074 	andseq	r7, r1, r4, ror r0
  117824:	00117074 	andseq	r7, r1, r4, ror r0
  117828:	00117074 	andseq	r7, r1, r4, ror r0
  11782c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  117830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  117834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  117838:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0011783c <__malloc_av_>:
	...
  117844:	0011783c 	andseq	r7, r1, ip, lsr r8
  117848:	0011783c 	andseq	r7, r1, ip, lsr r8
  11784c:	00117844 	andseq	r7, r1, r4, asr #16
  117850:	00117844 	andseq	r7, r1, r4, asr #16
  117854:	0011784c 	andseq	r7, r1, ip, asr #16
  117858:	0011784c 	andseq	r7, r1, ip, asr #16
  11785c:	00117854 	andseq	r7, r1, r4, asr r8
  117860:	00117854 	andseq	r7, r1, r4, asr r8
  117864:	0011785c 	andseq	r7, r1, ip, asr r8
  117868:	0011785c 	andseq	r7, r1, ip, asr r8
  11786c:	00117864 	andseq	r7, r1, r4, ror #16
  117870:	00117864 	andseq	r7, r1, r4, ror #16
  117874:	0011786c 	andseq	r7, r1, ip, ror #16
  117878:	0011786c 	andseq	r7, r1, ip, ror #16
  11787c:	00117874 	andseq	r7, r1, r4, ror r8
  117880:	00117874 	andseq	r7, r1, r4, ror r8
  117884:	0011787c 	andseq	r7, r1, ip, ror r8
  117888:	0011787c 	andseq	r7, r1, ip, ror r8
  11788c:	00117884 	andseq	r7, r1, r4, lsl #17
  117890:	00117884 	andseq	r7, r1, r4, lsl #17
  117894:	0011788c 	andseq	r7, r1, ip, lsl #17
  117898:	0011788c 	andseq	r7, r1, ip, lsl #17
  11789c:	00117894 	mulseq	r1, r4, r8
  1178a0:	00117894 	mulseq	r1, r4, r8
  1178a4:	0011789c 	mulseq	r1, ip, r8
  1178a8:	0011789c 	mulseq	r1, ip, r8
  1178ac:	001178a4 	andseq	r7, r1, r4, lsr #17
  1178b0:	001178a4 	andseq	r7, r1, r4, lsr #17
  1178b4:	001178ac 	andseq	r7, r1, ip, lsr #17
  1178b8:	001178ac 	andseq	r7, r1, ip, lsr #17
  1178bc:	001178b4 			; <UNDEFINED> instruction: 0x001178b4
  1178c0:	001178b4 			; <UNDEFINED> instruction: 0x001178b4
  1178c4:	001178bc 			; <UNDEFINED> instruction: 0x001178bc
  1178c8:	001178bc 			; <UNDEFINED> instruction: 0x001178bc
  1178cc:	001178c4 	andseq	r7, r1, r4, asr #17
  1178d0:	001178c4 	andseq	r7, r1, r4, asr #17
  1178d4:	001178cc 	andseq	r7, r1, ip, asr #17
  1178d8:	001178cc 	andseq	r7, r1, ip, asr #17
  1178dc:	001178d4 			; <UNDEFINED> instruction: 0x001178d4
  1178e0:	001178d4 			; <UNDEFINED> instruction: 0x001178d4
  1178e4:	001178dc 			; <UNDEFINED> instruction: 0x001178dc
  1178e8:	001178dc 			; <UNDEFINED> instruction: 0x001178dc
  1178ec:	001178e4 	andseq	r7, r1, r4, ror #17
  1178f0:	001178e4 	andseq	r7, r1, r4, ror #17
  1178f4:	001178ec 	andseq	r7, r1, ip, ror #17
  1178f8:	001178ec 	andseq	r7, r1, ip, ror #17
  1178fc:	001178f4 			; <UNDEFINED> instruction: 0x001178f4
  117900:	001178f4 			; <UNDEFINED> instruction: 0x001178f4
  117904:	001178fc 			; <UNDEFINED> instruction: 0x001178fc
  117908:	001178fc 			; <UNDEFINED> instruction: 0x001178fc
  11790c:	00117904 	andseq	r7, r1, r4, lsl #18
  117910:	00117904 	andseq	r7, r1, r4, lsl #18
  117914:	0011790c 	andseq	r7, r1, ip, lsl #18
  117918:	0011790c 	andseq	r7, r1, ip, lsl #18
  11791c:	00117914 	andseq	r7, r1, r4, lsl r9
  117920:	00117914 	andseq	r7, r1, r4, lsl r9
  117924:	0011791c 	andseq	r7, r1, ip, lsl r9
  117928:	0011791c 	andseq	r7, r1, ip, lsl r9
  11792c:	00117924 	andseq	r7, r1, r4, lsr #18
  117930:	00117924 	andseq	r7, r1, r4, lsr #18
  117934:	0011792c 	andseq	r7, r1, ip, lsr #18
  117938:	0011792c 	andseq	r7, r1, ip, lsr #18
  11793c:	00117934 	andseq	r7, r1, r4, lsr r9
  117940:	00117934 	andseq	r7, r1, r4, lsr r9
  117944:	0011793c 	andseq	r7, r1, ip, lsr r9
  117948:	0011793c 	andseq	r7, r1, ip, lsr r9
  11794c:	00117944 	andseq	r7, r1, r4, asr #18
  117950:	00117944 	andseq	r7, r1, r4, asr #18
  117954:	0011794c 	andseq	r7, r1, ip, asr #18
  117958:	0011794c 	andseq	r7, r1, ip, asr #18
  11795c:	00117954 	andseq	r7, r1, r4, asr r9
  117960:	00117954 	andseq	r7, r1, r4, asr r9
  117964:	0011795c 	andseq	r7, r1, ip, asr r9
  117968:	0011795c 	andseq	r7, r1, ip, asr r9
  11796c:	00117964 	andseq	r7, r1, r4, ror #18
  117970:	00117964 	andseq	r7, r1, r4, ror #18
  117974:	0011796c 	andseq	r7, r1, ip, ror #18
  117978:	0011796c 	andseq	r7, r1, ip, ror #18
  11797c:	00117974 	andseq	r7, r1, r4, ror r9
  117980:	00117974 	andseq	r7, r1, r4, ror r9
  117984:	0011797c 	andseq	r7, r1, ip, ror r9
  117988:	0011797c 	andseq	r7, r1, ip, ror r9
  11798c:	00117984 	andseq	r7, r1, r4, lsl #19
  117990:	00117984 	andseq	r7, r1, r4, lsl #19
  117994:	0011798c 	andseq	r7, r1, ip, lsl #19
  117998:	0011798c 	andseq	r7, r1, ip, lsl #19
  11799c:	00117994 	mulseq	r1, r4, r9
  1179a0:	00117994 	mulseq	r1, r4, r9
  1179a4:	0011799c 	mulseq	r1, ip, r9
  1179a8:	0011799c 	mulseq	r1, ip, r9
  1179ac:	001179a4 	andseq	r7, r1, r4, lsr #19
  1179b0:	001179a4 	andseq	r7, r1, r4, lsr #19
  1179b4:	001179ac 	andseq	r7, r1, ip, lsr #19
  1179b8:	001179ac 	andseq	r7, r1, ip, lsr #19
  1179bc:	001179b4 			; <UNDEFINED> instruction: 0x001179b4
  1179c0:	001179b4 			; <UNDEFINED> instruction: 0x001179b4
  1179c4:	001179bc 			; <UNDEFINED> instruction: 0x001179bc
  1179c8:	001179bc 			; <UNDEFINED> instruction: 0x001179bc
  1179cc:	001179c4 	andseq	r7, r1, r4, asr #19
  1179d0:	001179c4 	andseq	r7, r1, r4, asr #19
  1179d4:	001179cc 	andseq	r7, r1, ip, asr #19
  1179d8:	001179cc 	andseq	r7, r1, ip, asr #19
  1179dc:	001179d4 			; <UNDEFINED> instruction: 0x001179d4
  1179e0:	001179d4 			; <UNDEFINED> instruction: 0x001179d4
  1179e4:	001179dc 			; <UNDEFINED> instruction: 0x001179dc
  1179e8:	001179dc 			; <UNDEFINED> instruction: 0x001179dc
  1179ec:	001179e4 	andseq	r7, r1, r4, ror #19
  1179f0:	001179e4 	andseq	r7, r1, r4, ror #19
  1179f4:	001179ec 	andseq	r7, r1, ip, ror #19
  1179f8:	001179ec 	andseq	r7, r1, ip, ror #19
  1179fc:	001179f4 			; <UNDEFINED> instruction: 0x001179f4
  117a00:	001179f4 			; <UNDEFINED> instruction: 0x001179f4
  117a04:	001179fc 			; <UNDEFINED> instruction: 0x001179fc
  117a08:	001179fc 			; <UNDEFINED> instruction: 0x001179fc
  117a0c:	00117a04 	andseq	r7, r1, r4, lsl #20
  117a10:	00117a04 	andseq	r7, r1, r4, lsl #20
  117a14:	00117a0c 	andseq	r7, r1, ip, lsl #20
  117a18:	00117a0c 	andseq	r7, r1, ip, lsl #20
  117a1c:	00117a14 	andseq	r7, r1, r4, lsl sl
  117a20:	00117a14 	andseq	r7, r1, r4, lsl sl
  117a24:	00117a1c 	andseq	r7, r1, ip, lsl sl
  117a28:	00117a1c 	andseq	r7, r1, ip, lsl sl
  117a2c:	00117a24 	andseq	r7, r1, r4, lsr #20
  117a30:	00117a24 	andseq	r7, r1, r4, lsr #20
  117a34:	00117a2c 	andseq	r7, r1, ip, lsr #20
  117a38:	00117a2c 	andseq	r7, r1, ip, lsr #20
  117a3c:	00117a34 	andseq	r7, r1, r4, lsr sl
  117a40:	00117a34 	andseq	r7, r1, r4, lsr sl
  117a44:	00117a3c 	andseq	r7, r1, ip, lsr sl
  117a48:	00117a3c 	andseq	r7, r1, ip, lsr sl
  117a4c:	00117a44 	andseq	r7, r1, r4, asr #20
  117a50:	00117a44 	andseq	r7, r1, r4, asr #20
  117a54:	00117a4c 	andseq	r7, r1, ip, asr #20
  117a58:	00117a4c 	andseq	r7, r1, ip, asr #20
  117a5c:	00117a54 	andseq	r7, r1, r4, asr sl
  117a60:	00117a54 	andseq	r7, r1, r4, asr sl
  117a64:	00117a5c 	andseq	r7, r1, ip, asr sl
  117a68:	00117a5c 	andseq	r7, r1, ip, asr sl
  117a6c:	00117a64 	andseq	r7, r1, r4, ror #20
  117a70:	00117a64 	andseq	r7, r1, r4, ror #20
  117a74:	00117a6c 	andseq	r7, r1, ip, ror #20
  117a78:	00117a6c 	andseq	r7, r1, ip, ror #20
  117a7c:	00117a74 	andseq	r7, r1, r4, ror sl
  117a80:	00117a74 	andseq	r7, r1, r4, ror sl
  117a84:	00117a7c 	andseq	r7, r1, ip, ror sl
  117a88:	00117a7c 	andseq	r7, r1, ip, ror sl
  117a8c:	00117a84 	andseq	r7, r1, r4, lsl #21
  117a90:	00117a84 	andseq	r7, r1, r4, lsl #21
  117a94:	00117a8c 	andseq	r7, r1, ip, lsl #21
  117a98:	00117a8c 	andseq	r7, r1, ip, lsl #21
  117a9c:	00117a94 	mulseq	r1, r4, sl
  117aa0:	00117a94 	mulseq	r1, r4, sl
  117aa4:	00117a9c 	mulseq	r1, ip, sl
  117aa8:	00117a9c 	mulseq	r1, ip, sl
  117aac:	00117aa4 	andseq	r7, r1, r4, lsr #21
  117ab0:	00117aa4 	andseq	r7, r1, r4, lsr #21
  117ab4:	00117aac 	andseq	r7, r1, ip, lsr #21
  117ab8:	00117aac 	andseq	r7, r1, ip, lsr #21
  117abc:	00117ab4 			; <UNDEFINED> instruction: 0x00117ab4
  117ac0:	00117ab4 			; <UNDEFINED> instruction: 0x00117ab4
  117ac4:	00117abc 			; <UNDEFINED> instruction: 0x00117abc
  117ac8:	00117abc 			; <UNDEFINED> instruction: 0x00117abc
  117acc:	00117ac4 	andseq	r7, r1, r4, asr #21
  117ad0:	00117ac4 	andseq	r7, r1, r4, asr #21
  117ad4:	00117acc 	andseq	r7, r1, ip, asr #21
  117ad8:	00117acc 	andseq	r7, r1, ip, asr #21
  117adc:	00117ad4 			; <UNDEFINED> instruction: 0x00117ad4
  117ae0:	00117ad4 			; <UNDEFINED> instruction: 0x00117ad4
  117ae4:	00117adc 			; <UNDEFINED> instruction: 0x00117adc
  117ae8:	00117adc 			; <UNDEFINED> instruction: 0x00117adc
  117aec:	00117ae4 	andseq	r7, r1, r4, ror #21
  117af0:	00117ae4 	andseq	r7, r1, r4, ror #21
  117af4:	00117aec 	andseq	r7, r1, ip, ror #21
  117af8:	00117aec 	andseq	r7, r1, ip, ror #21
  117afc:	00117af4 			; <UNDEFINED> instruction: 0x00117af4
  117b00:	00117af4 			; <UNDEFINED> instruction: 0x00117af4
  117b04:	00117afc 			; <UNDEFINED> instruction: 0x00117afc
  117b08:	00117afc 			; <UNDEFINED> instruction: 0x00117afc
  117b0c:	00117b04 	andseq	r7, r1, r4, lsl #22
  117b10:	00117b04 	andseq	r7, r1, r4, lsl #22
  117b14:	00117b0c 	andseq	r7, r1, ip, lsl #22
  117b18:	00117b0c 	andseq	r7, r1, ip, lsl #22
  117b1c:	00117b14 	andseq	r7, r1, r4, lsl fp
  117b20:	00117b14 	andseq	r7, r1, r4, lsl fp
  117b24:	00117b1c 	andseq	r7, r1, ip, lsl fp
  117b28:	00117b1c 	andseq	r7, r1, ip, lsl fp
  117b2c:	00117b24 	andseq	r7, r1, r4, lsr #22
  117b30:	00117b24 	andseq	r7, r1, r4, lsr #22
  117b34:	00117b2c 	andseq	r7, r1, ip, lsr #22
  117b38:	00117b2c 	andseq	r7, r1, ip, lsr #22
  117b3c:	00117b34 	andseq	r7, r1, r4, lsr fp
  117b40:	00117b34 	andseq	r7, r1, r4, lsr fp
  117b44:	00117b3c 	andseq	r7, r1, ip, lsr fp
  117b48:	00117b3c 	andseq	r7, r1, ip, lsr fp
  117b4c:	00117b44 	andseq	r7, r1, r4, asr #22
  117b50:	00117b44 	andseq	r7, r1, r4, asr #22
  117b54:	00117b4c 	andseq	r7, r1, ip, asr #22
  117b58:	00117b4c 	andseq	r7, r1, ip, asr #22
  117b5c:	00117b54 	andseq	r7, r1, r4, asr fp
  117b60:	00117b54 	andseq	r7, r1, r4, asr fp
  117b64:	00117b5c 	andseq	r7, r1, ip, asr fp
  117b68:	00117b5c 	andseq	r7, r1, ip, asr fp
  117b6c:	00117b64 	andseq	r7, r1, r4, ror #22
  117b70:	00117b64 	andseq	r7, r1, r4, ror #22
  117b74:	00117b6c 	andseq	r7, r1, ip, ror #22
  117b78:	00117b6c 	andseq	r7, r1, ip, ror #22
  117b7c:	00117b74 	andseq	r7, r1, r4, ror fp
  117b80:	00117b74 	andseq	r7, r1, r4, ror fp
  117b84:	00117b7c 	andseq	r7, r1, ip, ror fp
  117b88:	00117b7c 	andseq	r7, r1, ip, ror fp
  117b8c:	00117b84 	andseq	r7, r1, r4, lsl #23
  117b90:	00117b84 	andseq	r7, r1, r4, lsl #23
  117b94:	00117b8c 	andseq	r7, r1, ip, lsl #23
  117b98:	00117b8c 	andseq	r7, r1, ip, lsl #23
  117b9c:	00117b94 	mulseq	r1, r4, fp
  117ba0:	00117b94 	mulseq	r1, r4, fp
  117ba4:	00117b9c 	mulseq	r1, ip, fp
  117ba8:	00117b9c 	mulseq	r1, ip, fp
  117bac:	00117ba4 	andseq	r7, r1, r4, lsr #23
  117bb0:	00117ba4 	andseq	r7, r1, r4, lsr #23
  117bb4:	00117bac 	andseq	r7, r1, ip, lsr #23
  117bb8:	00117bac 	andseq	r7, r1, ip, lsr #23
  117bbc:	00117bb4 			; <UNDEFINED> instruction: 0x00117bb4
  117bc0:	00117bb4 			; <UNDEFINED> instruction: 0x00117bb4
  117bc4:	00117bbc 			; <UNDEFINED> instruction: 0x00117bbc
  117bc8:	00117bbc 			; <UNDEFINED> instruction: 0x00117bbc
  117bcc:	00117bc4 	andseq	r7, r1, r4, asr #23
  117bd0:	00117bc4 	andseq	r7, r1, r4, asr #23
  117bd4:	00117bcc 	andseq	r7, r1, ip, asr #23
  117bd8:	00117bcc 	andseq	r7, r1, ip, asr #23
  117bdc:	00117bd4 			; <UNDEFINED> instruction: 0x00117bd4
  117be0:	00117bd4 			; <UNDEFINED> instruction: 0x00117bd4
  117be4:	00117bdc 			; <UNDEFINED> instruction: 0x00117bdc
  117be8:	00117bdc 			; <UNDEFINED> instruction: 0x00117bdc
  117bec:	00117be4 	andseq	r7, r1, r4, ror #23
  117bf0:	00117be4 	andseq	r7, r1, r4, ror #23
  117bf4:	00117bec 	andseq	r7, r1, ip, ror #23
  117bf8:	00117bec 	andseq	r7, r1, ip, ror #23
  117bfc:	00117bf4 			; <UNDEFINED> instruction: 0x00117bf4
  117c00:	00117bf4 			; <UNDEFINED> instruction: 0x00117bf4
  117c04:	00117bfc 			; <UNDEFINED> instruction: 0x00117bfc
  117c08:	00117bfc 			; <UNDEFINED> instruction: 0x00117bfc
  117c0c:	00117c04 	andseq	r7, r1, r4, lsl #24
  117c10:	00117c04 	andseq	r7, r1, r4, lsl #24
  117c14:	00117c0c 	andseq	r7, r1, ip, lsl #24
  117c18:	00117c0c 	andseq	r7, r1, ip, lsl #24
  117c1c:	00117c14 	andseq	r7, r1, r4, lsl ip
  117c20:	00117c14 	andseq	r7, r1, r4, lsl ip
  117c24:	00117c1c 	andseq	r7, r1, ip, lsl ip
  117c28:	00117c1c 	andseq	r7, r1, ip, lsl ip
  117c2c:	00117c24 	andseq	r7, r1, r4, lsr #24
  117c30:	00117c24 	andseq	r7, r1, r4, lsr #24
  117c34:	00117c2c 	andseq	r7, r1, ip, lsr #24
  117c38:	00117c2c 	andseq	r7, r1, ip, lsr #24
  117c3c:	00117c34 	andseq	r7, r1, r4, lsr ip
  117c40:	00117c34 	andseq	r7, r1, r4, lsr ip

00117c44 <__malloc_sbrk_base>:
  117c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

00117c48 <__malloc_trim_threshold>:
  117c48:	00020000 	andeq	r0, r2, r0

00117c4c <__wctomb>:
  117c4c:	001160e4 	andseq	r6, r1, r4, ror #1

00117c50 <heap.5568>:
  117c50:	001196a0 	andseq	r9, r1, r0, lsr #13

00117c54 <__cs3_heap_limit>:
  117c54:	40000000 	andmi	r0, r0, r0

Disassembly of section .bss:

00117c60 <completed.7650>:
  117c60:	00000000 	andeq	r0, r0, r0

00117c64 <object.7655>:
	...

00117c7c <n>:
  117c7c:	00000000 	andeq	r0, r0, r0

00117c80 <score>:
  117c80:	00000000 	andeq	r0, r0, r0

00117c84 <intCheck>:
  117c84:	00000000 	andeq	r0, r0, r0

00117c88 <PERIPHBASE>:
	...

00117c90 <alt_int_flag>:
	...

00117d90 <alt_int_stack_irq_block>:
	...

00118d90 <alt_int_dispatch>:
	...

00119590 <alt_int_base_dist>:
  119590:	00000000 	andeq	r0, r0, r0

00119594 <alt_int_base_cpu>:
  119594:	00000000 	andeq	r0, r0, r0

00119598 <alt_int_count_cpu>:
  119598:	00000000 	andeq	r0, r0, r0

0011959c <alt_int_count_int>:
  11959c:	00000000 	andeq	r0, r0, r0

001195a0 <__atexit_lock>:
  1195a0:	00000000 	andeq	r0, r0, r0

001195a4 <__sinit_lock>:
  1195a4:	00000000 	andeq	r0, r0, r0

001195a8 <__sfp_lock>:
  1195a8:	00000000 	andeq	r0, r0, r0

001195ac <_PathLocale>:
  1195ac:	00000000 	andeq	r0, r0, r0

001195b0 <__mlocale_changed>:
  1195b0:	00000000 	andeq	r0, r0, r0

001195b4 <__nlocale_changed>:
  1195b4:	00000000 	andeq	r0, r0, r0

001195b8 <__malloc_top_pad>:
  1195b8:	00000000 	andeq	r0, r0, r0

001195bc <__malloc_current_mallinfo>:
	...

001195e4 <__malloc_max_sbrked_mem>:
  1195e4:	00000000 	andeq	r0, r0, r0

001195e8 <__malloc_max_total_mem>:
  1195e8:	00000000 	andeq	r0, r0, r0

001195ec <__malloc_lock_object>:
  1195ec:	00000000 	andeq	r0, r0, r0

001195f0 <errno>:
  1195f0:	00000000 	andeq	r0, r0, r0

001195f4 <openfiles>:
	...

00119694 <initialized.5771>:
  119694:	00000000 	andeq	r0, r0, r0

00119698 <__cs3_argv>:
  119698:	00000000 	andeq	r0, r0, r0

0011969c <__cs3_argc>:
  11969c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	001001e4 	andseq	r0, r0, r4, ror #3
  14:	00000848 	andeq	r0, r0, r8, asr #16
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03870002 	orreq	r0, r7, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00100a2c 	andseq	r0, r0, ip, lsr #20
  34:	00000060 	andeq	r0, r0, r0, rrx
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03be0002 			; <UNDEFINED> instruction: 0x03be0002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00100a8c 	andseq	r0, r0, ip, lsl #21
  54:	0000a38c 	andeq	sl, r0, ip, lsl #7
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	27f30002 	ldrbcs	r0, [r3, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	0010ae18 	andseq	sl, r0, r8, lsl lr
  74:	00001a84 	andeq	r1, r0, r4, lsl #21
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000383 	andeq	r0, r0, r3, lsl #7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000001f4 	strdeq	r0, [r0], -r4
      10:	0001cf0c 	andeq	ip, r1, ip, lsl #30
      14:	00002800 	andeq	r2, r0, r0, lsl #16
      18:	1001e400 	andne	lr, r1, r0, lsl #8
      1c:	00084800 	andeq	r4, r8, r0, lsl #16
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000000b1 	strheq	r0, [r0], -r1
      2c:	00001e03 	andeq	r1, r0, r3, lsl #28
      30:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
      34:	02000000 	andeq	r0, r0, #0
      38:	00af0801 	adceq	r0, pc, r1, lsl #16
      3c:	02020000 	andeq	r0, r2, #0
      40:	0001e305 	andeq	lr, r1, r5, lsl #6
      44:	07020200 	streq	r0, [r2, -r0, lsl #4]
      48:	000000fd 	strdeq	r0, [r0], -sp
      4c:	a6050402 	strge	r0, [r5], -r2, lsl #8
      50:	03000000 	movweq	r0, #0
      54:	0000012f 	andeq	r0, r0, pc, lsr #2
      58:	005e4102 	subseq	r4, lr, r2, lsl #2
      5c:	04020000 	streq	r0, [r2], #-0
      60:	00016a07 	andeq	r6, r1, r7, lsl #20
      64:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
      68:	000000a1 	andeq	r0, r0, r1, lsr #1
      6c:	65070802 	strvs	r0, [r7, #-2050]	; 0xfffff7fe
      70:	04000001 	streq	r0, [r0], #-1
      74:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
      78:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
      7c:	00016f07 	andeq	r6, r1, r7, lsl #30
      80:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
      84:	0000026f 	andeq	r0, r0, pc, ror #4
      88:	04020405 	streq	r0, [r2], #-1029	; 0xfffffbfb
      8c:	0001a507 	andeq	sl, r1, r7, lsl #10
      90:	97040600 	strls	r0, [r4, -r0, lsl #12]
      94:	02000000 	andeq	r0, r0, #0
      98:	00b80801 	adcseq	r0, r8, r1, lsl #16
      9c:	20030000 	andcs	r0, r3, r0
      a0:	03000000 	movweq	r0, #0
      a4:	00002c15 	andeq	r2, r0, r5, lsl ip
      a8:	01310300 	teqeq	r1, r0, lsl #6
      ac:	2d030000 	stccs	0, cr0, [r3, #-0]
      b0:	00000053 	andeq	r0, r0, r3, asr r0
      b4:	00014a07 	andeq	r4, r1, r7, lsl #20
      b8:	00370100 	eorseq	r0, r7, r0, lsl #2
      bc:	46040000 	strmi	r0, [r4], -r0
      c0:	000000e3 	andeq	r0, r0, r3, ror #1
      c4:	00011a08 	andeq	r1, r1, r8, lsl #20
      c8:	ae080000 	cdpge	0, 0, cr0, cr8, cr0, {0}
      cc:	01000001 	tsteq	r0, r1
      d0:	0000bd08 	andeq	fp, r0, r8, lsl #26
      d4:	dd080200 	sfmle	f0, 4, [r8, #-0]
      d8:	03000000 	movweq	r0, #0
      dc:	00006d08 	andeq	r6, r0, r8, lsl #26
      e0:	09000400 	stmdbeq	r0, {sl}
      e4:	00000254 	andeq	r0, r0, r4, asr r2
      e8:	01e42d01 	mvneq	r2, r1, lsl #26
      ec:	003c0010 	eorseq	r0, ip, r0, lsl r0
      f0:	9c010000 	stcls	0, cr0, [r1], {-0}
      f4:	00000107 	andeq	r0, r0, r7, lsl #2
      f8:	002c8a0a 	eoreq	r8, ip, sl, lsl #20
      fc:	7a2e0100 	bvc	b80504 <__cs3_heap_start+0xa66e64>
     100:	02000000 	andeq	r0, r0, #0
     104:	0b007491 	bleq	1d350 <__cs3_region_init_size_ram+0x56f8>
     108:	000001d6 	ldrdeq	r0, [r0], -r6
     10c:	02204501 	eoreq	r4, r0, #4194304	; 0x400000
     110:	005c0010 	subseq	r0, ip, r0, lsl r0
     114:	9c010000 	stcls	0, cr0, [r1], {-0}
     118:	00000146 	andeq	r0, r0, r6, asr #2
     11c:	0000d60c 	andeq	sp, r0, ip, lsl #12
     120:	a9450100 	stmdbge	r5, {r8}^
     124:	02000000 	andeq	r0, r0, #0
     128:	9d0c7491 	cfstrsls	mvf7, [ip, #-580]	; 0xfffffdbc
     12c:	01000001 	tsteq	r0, r1
     130:	00008845 	andeq	r8, r0, r5, asr #16
     134:	70910200 	addsvc	r0, r1, r0, lsl #4
     138:	00027b0d 	andeq	r7, r2, sp, lsl #22
     13c:	73480100 	movtvc	r0, #33024	; 0x8100
     140:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     144:	7b0f0000 	blvc	3c014c <__cs3_heap_start+0x2a6aac>
     148:	01000002 	tsteq	r0, r2
     14c:	10027c4f 	andne	r7, r2, pc, asr #24
     150:	0000d400 	andeq	sp, r0, r0, lsl #8
     154:	6a9c0100 	bvs	fe70055c <__cs3_heap_end+0xbe70055c>
     158:	0a000001 	beq	164 <__cs3_region_num+0x162>
     15c:	0000013a 	andeq	r0, r0, sl, lsr r1
     160:	007a5001 	rsbseq	r5, sl, r1
     164:	91020000 	mrsls	r0, (UNDEF: 2)
     168:	0c100074 	ldceq	0, cr0, [r0], {116}	; 0x74
     16c:	01000000 	mrseq	r0, (UNDEF: 0)
     170:	00017f6c 	andeq	r7, r1, ip, ror #30
     174:	10035000 	andne	r5, r3, r0
     178:	00004800 	andeq	r4, r0, r0, lsl #16
     17c:	029c0100 	addseq	r0, ip, #0, 2
     180:	02870201 	addeq	r0, r7, #268435456	; 0x10000000
     184:	93110000 	tstls	r1, #0
     188:	01000000 	mrseq	r0, (UNDEF: 0)
     18c:	10039870 	andne	r9, r3, r0, ror r8
     190:	00003400 	andeq	r3, r0, r0, lsl #8
     194:	129c0100 	addsne	r0, ip, #0, 2
     198:	00000248 	andeq	r0, r0, r8, asr #4
     19c:	007a7601 	rsbseq	r7, sl, r1, lsl #12
     1a0:	03cc0000 	biceq	r0, ip, #0
     1a4:	01bc0010 			; <UNDEFINED> instruction: 0x01bc0010
     1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1ac:	000001d9 	ldrdeq	r0, [r0], -r9
     1b0:	01006e13 	tsteq	r0, r3, lsl lr
     1b4:	00007a76 	andeq	r7, r0, r6, ror sl
     1b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     1bc:	0000180c 	andeq	r1, r0, ip, lsl #16
     1c0:	7a760100 	bvc	1d805c8 <__cs3_heap_start+0x1c66f28>
     1c4:	02000000 	andeq	r0, r0, #0
     1c8:	ed0a6891 	stc	8, cr6, [sl, #-580]	; 0xfffffdbc
     1cc:	01000001 	tsteq	r0, r1
     1d0:	00007a77 	andeq	r7, r0, r7, ror sl
     1d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     1d8:	01871200 	orreq	r1, r7, r0, lsl #4
     1dc:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     1e0:	000000a9 	andeq	r0, r0, r9, lsr #1
     1e4:	00100588 	andseq	r0, r0, r8, lsl #11
     1e8:	000000dc 	ldrdeq	r0, [r0], -ip
     1ec:	020d9c01 	andeq	r9, sp, #256	; 0x100
     1f0:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
     1f4:	7a890100 	bvc	fe2405fc <__cs3_heap_end+0xbe2405fc>
     1f8:	02000000 	andeq	r0, r0, #0
     1fc:	ed0a6c91 	stc	12, cr6, [sl, #-580]	; 0xfffffdbc
     200:	01000001 	tsteq	r0, r1
     204:	0000a98a 	andeq	sl, r0, sl, lsl #19
     208:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     20c:	018f0b00 	orreq	r0, pc, r0, lsl #22
     210:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     214:	00100664 	andseq	r0, r0, r4, ror #12
     218:	000000cc 	andeq	r0, r0, ip, asr #1
     21c:	022f9c01 	eoreq	r9, pc, #256	; 0x100
     220:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
     224:	7aae0100 	bvc	feb8062c <__cs3_heap_end+0xbeb8062c>
     228:	02000000 	andeq	r0, r0, #0
     22c:	14006c91 	strne	r6, [r0], #-3217	; 0xfffff36f
     230:	00000062 	andeq	r0, r0, r2, rrx
     234:	0730b701 	ldreq	fp, [r0, -r1, lsl #14]!
     238:	00700010 	rsbseq	r0, r0, r0, lsl r0
     23c:	9c010000 	stcls	0, cr0, [r1], {-0}
     240:	00172715 	andseq	r2, r7, r5, lsl r7
     244:	73c30100 	bicvc	r0, r3, #0, 2
     248:	a0000000 	andge	r0, r0, r0
     24c:	8c001007 	stchi	0, cr1, [r0], {7}
     250:	01000002 	tsteq	r0, r2
     254:	00028e9c 	muleq	r2, ip, lr
     258:	02430c00 	subeq	r0, r3, #0, 24
     25c:	c3010000 	movwgt	r0, #4096	; 0x1000
     260:	00000073 	andeq	r0, r0, r3, ror r0
     264:	0c749102 	ldfeqp	f1, [r4], #-8
     268:	0000005d 	andeq	r0, r0, sp, asr r0
     26c:	028ec301 	addeq	ip, lr, #67108864	; 0x4000000
     270:	91020000 	mrsls	r0, (UNDEF: 2)
     274:	00f81670 	rscseq	r1, r8, r0, ror r6
     278:	d1010000 	mrsle	r0, (UNDEF: 1)
     27c:	0000007a 	andeq	r0, r0, sl, ror r0
     280:	0001820d 	andeq	r8, r1, sp, lsl #4
     284:	73d30100 	bicsvc	r0, r3, #0, 2
     288:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     28c:	04060000 	streq	r0, [r6], #-0
     290:	00000091 	muleq	r0, r1, r0
     294:	00026817 	andeq	r6, r2, r7, lsl r8
     298:	a5160100 	ldrge	r0, [r6, #-256]	; 0xffffff00
     29c:	05000002 	streq	r0, [r0, #-2]
     2a0:	11728803 	cmnne	r2, r3, lsl #16
     2a4:	a9040600 	stmdbge	r4, {r9, sl}
     2a8:	17000000 	strne	r0, [r0, -r0]
     2ac:	00000142 	andeq	r0, r0, r2, asr #2
     2b0:	02a51701 	adceq	r1, r5, #262144	; 0x40000
     2b4:	03050000 	movweq	r0, #20480	; 0x5000
     2b8:	0011728c 	andseq	r7, r1, ip, lsl #5
     2bc:	00005117 	andeq	r5, r0, r7, lsl r1
     2c0:	a5190100 	ldrge	r0, [r9, #-256]	; 0xffffff00
     2c4:	05000002 	streq	r0, [r0, #-2]
     2c8:	11729003 	cmnne	r2, r3
     2cc:	00001700 	andeq	r1, r0, r0, lsl #14
     2d0:	1a010000 	bne	402d8 <__cs3_region_init_size_ram+0x28680>
     2d4:	000002a5 	andeq	r0, r0, r5, lsr #5
     2d8:	72940305 	addsvc	r0, r4, #335544320	; 0x14000000
     2dc:	a8170011 	ldmdage	r7, {r0, r4}
     2e0:	01000002 	tsteq	r0, r2
     2e4:	0002a51b 	andeq	sl, r2, fp, lsl r5
     2e8:	98030500 	stmdals	r3, {r8, sl}
     2ec:	17001172 	smlsdxne	r0, r2, r1, r1
     2f0:	0000029c 	muleq	r0, ip, r2
     2f4:	02a51c01 	adceq	r1, r5, #256	; 0x100
     2f8:	03050000 	movweq	r0, #20480	; 0x5000
     2fc:	0011729c 	mulseq	r1, ip, r2
     300:	00011017 	andeq	r1, r1, r7, lsl r0
     304:	a51e0100 	ldrge	r0, [lr, #-256]	; 0xffffff00
     308:	05000002 	streq	r0, [r0, #-2]
     30c:	1172a003 	cmnne	r2, r3
     310:	00801700 	addeq	r1, r0, r0, lsl #14
     314:	1f010000 	svcne	0x00010000
     318:	000002a5 	andeq	r0, r0, r5, lsr #5
     31c:	72a40305 	adcvc	r0, r4, #335544320	; 0x14000000
     320:	8d170011 	ldchi	0, cr0, [r7, #-68]	; 0xffffffbc
     324:	01000002 	tsteq	r0, r2
     328:	0002a520 	andeq	sl, r2, r0, lsr #10
     32c:	a8030500 	stmdage	r3, {r8, sl}
     330:	18001172 	stmdane	r0, {r1, r4, r5, r6, r8, ip}
     334:	2201006e 	andcs	r0, r1, #110	; 0x6e
     338:	0000007a 	andeq	r0, r0, sl, ror r0
     33c:	7c7c0305 	ldclvc	3, cr0, [ip], #-20	; 0xffffffec
     340:	8d170011 	ldchi	0, cr0, [r7, #-68]	; 0xffffffbc
     344:	01000000 	mrseq	r0, (UNDEF: 0)
     348:	00007a23 	andeq	r7, r0, r3, lsr #20
     34c:	80030500 	andhi	r0, r3, r0, lsl #10
     350:	1700117c 	smlsdxne	r0, ip, r1, r1
     354:	0000017c 	andeq	r0, r0, ip, ror r1
     358:	007a2401 	rsbseq	r2, sl, r1, lsl #8
     35c:	03050000 	movweq	r0, #20480	; 0x5000
     360:	001172ac 	andseq	r7, r1, ip, lsr #5
     364:	00015c17 	andeq	r5, r1, r7, lsl ip
     368:	73250100 			; <UNDEFINED> instruction: 0x73250100
     36c:	05000000 	streq	r0, [r0, #-0]
     370:	117c8403 	cmnne	ip, r3, lsl #8
     374:	01c41700 	biceq	r1, r4, r0, lsl #14
     378:	2b010000 	blcs	40380 <__cs3_region_init_size_ram+0x28728>
     37c:	0000007a 	andeq	r0, r0, sl, ror r0
     380:	7c880305 	stcvc	3, cr0, [r8], {5}
     384:	33000011 	movwcc	r0, #17
     388:	04000000 	streq	r0, [r0], #-0
     38c:	00019b00 	andeq	r9, r1, r0, lsl #22
     390:	f4010400 	vst3.8	{d0-d2}, [r1], r0
     394:	0c000001 	stceq	0, cr0, [r0], {1}
     398:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     39c:	00000028 	andeq	r0, r0, r8, lsr #32
     3a0:	00100a2c 	andseq	r0, r0, ip, lsr #20
     3a4:	00000060 	andeq	r0, r0, r0, rrx
     3a8:	0000022d 	andeq	r0, r0, sp, lsr #4
     3ac:	0002c802 	andeq	ip, r2, r2, lsl #16
     3b0:	2c030100 	stfcss	f0, [r3], {-0}
     3b4:	6000100a 	andvs	r1, r0, sl
     3b8:	01000000 	mrseq	r0, (UNDEF: 0)
     3bc:	2431009c 	ldrtcs	r0, [r1], #-156	; 0xffffff64
     3c0:	00040000 	andeq	r0, r4, r0
     3c4:	000001c7 	andeq	r0, r0, r7, asr #3
     3c8:	01f40104 	mvnseq	r0, r4, lsl #2
     3cc:	d70c0000 	strle	r0, [ip, -r0]
     3d0:	28000012 	stmdacs	r0, {r1, r4}
     3d4:	8c000000 	stchi	0, cr0, [r0], {-0}
     3d8:	8c00100a 	stchi	0, cr1, [r0], {10}
     3dc:	740000a3 	strvc	r0, [r0], #-163	; 0xffffff5d
     3e0:	02000002 	andeq	r0, r0, #2
     3e4:	00b10601 	adcseq	r0, r1, r1, lsl #12
     3e8:	01020000 	mrseq	r0, (UNDEF: 2)
     3ec:	0000af08 	andeq	sl, r0, r8, lsl #30
     3f0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     3f4:	000001e3 	andeq	r0, r0, r3, ror #3
     3f8:	fd070202 	stc2	2, cr0, [r7, #-8]
     3fc:	03000000 	movweq	r0, #0
     400:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     404:	004c3f03 	subeq	r3, ip, r3, lsl #30
     408:	04020000 	streq	r0, [r2], #-0
     40c:	0000a605 	andeq	sl, r0, r5, lsl #12
     410:	012f0300 			; <UNDEFINED> instruction: 0x012f0300
     414:	41030000 	mrsmi	r0, (UNDEF: 3)
     418:	0000005e 	andeq	r0, r0, lr, asr r0
     41c:	6a070402 	bvs	1c142c <__cs3_heap_start+0xa7d8c>
     420:	02000001 	andeq	r0, r0, #1
     424:	00a10508 	adceq	r0, r1, r8, lsl #10
     428:	92030000 	andls	r0, r3, #0
     42c:	0300000e 	movweq	r0, #14
     430:	0000775b 	andeq	r7, r0, fp, asr r7
     434:	07080200 	streq	r0, [r8, -r0, lsl #4]
     438:	00000165 	andeq	r0, r0, r5, ror #2
     43c:	69050404 	stmdbvs	r5, {r2, sl}
     440:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     444:	016f0704 	cmneq	pc, r4, lsl #14
     448:	bc030000 	stclt	0, cr0, [r3], {-0}
     44c:	04000005 	streq	r0, [r0], #-5
     450:	0000412c 	andeq	r4, r0, ip, lsr #2
     454:	01310300 	teqeq	r1, r0, lsl #6
     458:	2d040000 	stccs	0, cr0, [r4, #-0]
     45c:	00000053 	andeq	r0, r0, r3, asr r0
     460:	000e9403 	andeq	r9, lr, r3, lsl #8
     464:	6c390400 	cfldrsvs	mvf0, [r9], #-0
     468:	02000000 	andeq	r0, r0, #0
     46c:	026f0408 	rsbeq	r0, pc, #8, 8	; 0x8000000
     470:	04050000 	streq	r0, [r5], #-0
     474:	a5070402 	strge	r0, [r7, #-1026]	; 0xfffffbfe
     478:	02000001 	andeq	r0, r0, #1
     47c:	00b80801 	adcseq	r0, r8, r1, lsl #16
     480:	04060000 	streq	r0, [r6], #-0
     484:	000000ca 	andeq	r0, r0, sl, asr #1
     488:	0000bd07 	andeq	fp, r0, r7, lsl #26
     48c:	00970700 	addseq	r0, r7, r0, lsl #14
     490:	97080000 	strls	r0, [r8, -r0]
     494:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     498:	00000097 	muleq	r0, r7, r0
     49c:	000000e9 	andeq	r0, r0, r9, ror #1
     4a0:	0000b60a 	andeq	fp, r0, sl, lsl #12
     4a4:	09000200 	stmdbeq	r0, {r9}
     4a8:	00000097 	muleq	r0, r7, r0
     4ac:	000000f9 	strdeq	r0, [r0], -r9
     4b0:	0000b60a 	andeq	fp, r0, sl, lsl #12
     4b4:	03000100 	movweq	r0, #256	; 0x100
     4b8:	00000bc8 	andeq	r0, r0, r8, asr #23
     4bc:	008c3e05 	addeq	r3, ip, r5, lsl #28
     4c0:	8c0b0000 	stchi	0, cr0, [fp], {-0}
     4c4:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
     4c8:	91056006 	tstls	r5, r6
     4cc:	0c000001 	stceq	0, cr0, [r0], {1}
     4d0:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     4d4:	97056206 	strls	r6, [r5, -r6, lsl #4]
     4d8:	04000000 	streq	r0, [r0], #-0
     4dc:	0d001f01 	stceq	15, cr1, [r0, #-4]
     4e0:	06006e65 	streq	r6, [r0], -r5, ror #28
     4e4:	00970563 	addseq	r0, r7, r3, ror #10
     4e8:	01040000 	mrseq	r0, (UNDEF: 4)
     4ec:	ba0c001e 	blt	30056c <__cs3_heap_start+0x1e6ecc>
     4f0:	06000003 	streq	r0, [r0], -r3
     4f4:	00970564 	addseq	r0, r7, r4, ror #10
     4f8:	01040000 	mrseq	r0, (UNDEF: 4)
     4fc:	8e0c001d 	mcrhi	0, 0, r0, cr12, cr13, {0}
     500:	06000005 	streq	r0, [r0], -r5
     504:	00970565 	addseq	r0, r7, r5, ror #10
     508:	0d040000 	stceq	0, cr0, [r4, #-0]
     50c:	0d0c0010 	stceq	0, cr0, [ip, #-64]	; 0xffffffc0
     510:	06000014 			; <UNDEFINED> instruction: 0x06000014
     514:	00970566 	addseq	r0, r7, r6, ror #10
     518:	06040000 	streq	r0, [r4], -r0
     51c:	df0c000a 	svcle	0x000c000a
     520:	0600000c 	streq	r0, [r0], -ip
     524:	00970568 	addseq	r0, r7, r8, ror #10
     528:	01040000 	mrseq	r0, (UNDEF: 4)
     52c:	380c0007 	stmdacc	ip, {r0, r1, r2}
     530:	06000007 	streq	r0, [r0], -r7
     534:	00970569 	addseq	r0, r7, r9, ror #10
     538:	06040000 	streq	r0, [r4], -r0
     53c:	9d0c0001 	stcls	0, cr0, [ip, #-4]
     540:	0600000b 	streq	r0, [r0], -fp
     544:	0097056a 	addseq	r0, r7, sl, ror #10
     548:	01040000 	mrseq	r0, (UNDEF: 4)
     54c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     550:	00001aa5 	andeq	r1, r0, r5, lsr #21
     554:	9d056e06 	stcls	14, cr6, [r5, #-24]	; 0xffffffe8
     558:	08000001 	stmdaeq	r0, {r0}
     55c:	00000104 	andeq	r0, r0, r4, lsl #2
     560:	000e9d0b 	andeq	r9, lr, fp, lsl #26
     564:	fb060400 	blx	18156e <__cs3_heap_start+0x67ece>
     568:	0001f005 	andeq	pc, r1, r5
     56c:	1b800c00 	blne	fe003574 <__cs3_heap_end+0xbe003574>
     570:	fd060000 	stc2	0, cr0, [r6, #-0]
     574:	00009705 	andeq	r9, r0, r5, lsl #14
     578:	1f010400 	svcne	0x00010400
     57c:	1a410c00 	bne	1043584 <__cs3_heap_start+0xf29ee4>
     580:	fe060000 	cdp2	0, 0, cr0, cr6, cr0, {0}
     584:	00009705 	andeq	r9, r0, r5, lsl #14
     588:	130c0400 	movwne	r0, #50176	; 0xc400
     58c:	13f50c00 	mvnsne	r0, #0, 24
     590:	ff060000 			; <UNDEFINED> instruction: 0xff060000
     594:	00009705 	andeq	r9, r0, r5, lsl #14
     598:	12010400 	andne	r0, r1, #0, 8
     59c:	0f2a0c00 	svceq	0x002a0c00
     5a0:	00060000 	andeq	r0, r6, r0
     5a4:	00009706 	andeq	r9, r0, r6, lsl #14
     5a8:	11010400 	tstne	r1, r0, lsl #8
     5ac:	b70e0000 	strlt	r0, [lr, -r0]
     5b0:	0600000e 	streq	r0, [r0], -lr
     5b4:	01fc0605 	mvnseq	r0, r5, lsl #12
     5b8:	a2080000 	andge	r0, r8, #0
     5bc:	0b000001 	bleq	5c8 <__cs3_region_num+0x5c6>
     5c0:	000015e2 	andeq	r1, r0, r2, ror #11
     5c4:	063f0604 	ldrteq	r0, [pc], -r4, lsl #12
     5c8:	0000021f 	andeq	r0, r0, pc, lsl r2
     5cc:	746e630d 	strbtvc	r6, [lr], #-781	; 0xfffffcf3
     5d0:	06410600 	strbeq	r0, [r1], -r0, lsl #12
     5d4:	00000097 	muleq	r0, r7, r0
     5d8:	00170904 	andseq	r0, r7, r4, lsl #18
     5dc:	15fe0e00 	ldrbne	r0, [lr, #3584]!	; 0xe00
     5e0:	46060000 	strmi	r0, [r6], -r0
     5e4:	00022b06 	andeq	r2, r2, r6, lsl #22
     5e8:	02010800 	andeq	r0, r1, #0, 16
     5ec:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
     5f0:	04000009 	streq	r0, [r0], #-9
     5f4:	4e068006 	cdpmi	0, 0, cr8, cr6, cr6, {0}
     5f8:	0d000002 	stceq	0, cr0, [r0, #-8]
     5fc:	00746e63 	rsbseq	r6, r4, r3, ror #28
     600:	97068206 	strls	r8, [r6, -r6, lsl #4]
     604:	04000000 	streq	r0, [r0], #-0
     608:	00001709 	andeq	r1, r0, r9, lsl #14
     60c:	0009250e 	andeq	r2, r9, lr, lsl #10
     610:	06870600 	streq	r0, [r7], r0, lsl #12
     614:	0000025a 	andeq	r0, r0, sl, asr r2
     618:	00023008 	andeq	r3, r2, r8
     61c:	10a80b00 	adcne	r0, r8, r0, lsl #22
     620:	06040000 	streq	r0, [r4], -r0
     624:	027d06c1 	rsbseq	r0, sp, #202375168	; 0xc100000
     628:	630d0000 	movwvs	r0, #53248	; 0xd000
     62c:	0600746e 	streq	r7, [r0], -lr, ror #8
     630:	009706c3 	addseq	r0, r7, r3, asr #13
     634:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     638:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     63c:	000010c6 	andeq	r1, r0, r6, asr #1
     640:	8906c806 	stmdbhi	r6, {r1, r2, fp, lr, pc}
     644:	08000002 	stmdaeq	r0, {r1}
     648:	0000025f 	andeq	r0, r0, pc, asr r2
     64c:	001c0c0b 	andseq	r0, ip, fp, lsl #24
     650:	02060400 	andeq	r0, r6, #0, 8
     654:	0002ac07 	andeq	sl, r2, r7, lsl #24
     658:	6e630d00 	cdpvs	13, 6, cr0, cr3, cr0, {0}
     65c:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
     660:	00009707 	andeq	r9, r0, r7, lsl #14
     664:	17090400 	strne	r0, [r9, -r0, lsl #8]
     668:	130e0000 	movwne	r0, #57344	; 0xe000
     66c:	06000014 			; <UNDEFINED> instruction: 0x06000014
     670:	02b80709 	adcseq	r0, r8, #2359296	; 0x240000
     674:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
     678:	0b000002 	bleq	688 <__cs3_region_num+0x686>
     67c:	00001dc9 	andeq	r1, r0, r9, asr #27
     680:	07430604 	strbeq	r0, [r3, -r4, lsl #12]
     684:	000002db 	ldrdeq	r0, [r0], -fp
     688:	746e630d 	strbtvc	r6, [lr], #-781	; 0xfffffcf3
     68c:	07450600 	strbeq	r0, [r5, -r0, lsl #12]
     690:	00000097 	muleq	r0, r7, r0
     694:	00170904 	andseq	r0, r7, r4, lsl #18
     698:	1def0e00 	stclne	14, cr0, [pc]	; 6a0 <__cs3_region_num+0x69e>
     69c:	4a060000 	bmi	1806a4 <__cs3_heap_start+0x67004>
     6a0:	0002e707 	andeq	lr, r2, r7, lsl #14
     6a4:	02bd0800 	adcseq	r0, sp, #0, 16
     6a8:	370b0000 	strcc	r0, [fp, -r0]
     6ac:	04000003 	streq	r0, [r0], #-3
     6b0:	0a078606 	beq	1e1ed0 <__cs3_heap_start+0xc8830>
     6b4:	0d000003 	stceq	0, cr0, [r0, #-12]
     6b8:	00746e63 	rsbseq	r6, r4, r3, ror #28
     6bc:	97078806 	strls	r8, [r7, -r6, lsl #16]
     6c0:	04000000 	streq	r0, [r0], #-0
     6c4:	00001709 	andeq	r1, r0, r9, lsl #14
     6c8:	0012380e 	andseq	r3, r2, lr, lsl #16
     6cc:	078d0600 	streq	r0, [sp, r0, lsl #12]
     6d0:	00000316 	andeq	r0, r0, r6, lsl r3
     6d4:	0002ec08 	andeq	lr, r2, r8, lsl #24
     6d8:	1a060b00 	bne	1832e0 <__cs3_heap_start+0x69c40>
     6dc:	06040000 	streq	r0, [r4], -r0
     6e0:	03c908b6 	biceq	r0, r9, #11927552	; 0xb60000
     6e4:	2d0c0000 	stccs	0, cr0, [ip, #-0]
     6e8:	06000018 			; <UNDEFINED> instruction: 0x06000018
     6ec:	009708b8 			; <UNDEFINED> instruction: 0x009708b8
     6f0:	01040000 	mrseq	r0, (UNDEF: 4)
     6f4:	700c001f 	andvc	r0, ip, pc, lsl r0
     6f8:	0600000a 	streq	r0, [r0], -sl
     6fc:	009708b9 			; <UNDEFINED> instruction: 0x009708b9
     700:	01040000 	mrseq	r0, (UNDEF: 4)
     704:	de0c001e 	mcrle	0, 0, r0, cr12, cr14, {0}
     708:	0600000a 	streq	r0, [r0], -sl
     70c:	009708ba 			; <UNDEFINED> instruction: 0x009708ba
     710:	01040000 	mrseq	r0, (UNDEF: 4)
     714:	d00c001d 	andle	r0, ip, sp, lsl r0
     718:	06000011 			; <UNDEFINED> instruction: 0x06000011
     71c:	009708bb 			; <UNDEFINED> instruction: 0x009708bb
     720:	01040000 	mrseq	r0, (UNDEF: 4)
     724:	d80c001c 	stmdale	ip, {r2, r3, r4}
     728:	0600000b 	streq	r0, [r0], -fp
     72c:	009708bc 			; <UNDEFINED> instruction: 0x009708bc
     730:	01040000 	mrseq	r0, (UNDEF: 4)
     734:	860c001b 			; <UNDEFINED> instruction: 0x860c001b
     738:	06000019 			; <UNDEFINED> instruction: 0x06000019
     73c:	009708bd 			; <UNDEFINED> instruction: 0x009708bd
     740:	01040000 	mrseq	r0, (UNDEF: 4)
     744:	250c001a 	strcs	r0, [ip, #-26]	; 0xffffffe6
     748:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
     74c:	009708be 			; <UNDEFINED> instruction: 0x009708be
     750:	01040000 	mrseq	r0, (UNDEF: 4)
     754:	2b0c0019 	blcs	3007c0 <__cs3_heap_start+0x1e7120>
     758:	06000003 	streq	r0, [r0], -r3
     75c:	009708bf 			; <UNDEFINED> instruction: 0x009708bf
     760:	01040000 	mrseq	r0, (UNDEF: 4)
     764:	d30c0018 	movwle	r0, #49176	; 0xc018
     768:	06000018 			; <UNDEFINED> instruction: 0x06000018
     76c:	009708c0 	addseq	r0, r7, r0, asr #17
     770:	01040000 	mrseq	r0, (UNDEF: 4)
     774:	5f0c0017 	svcpl	0x000c0017
     778:	06000012 			; <UNDEFINED> instruction: 0x06000012
     77c:	009708c1 	addseq	r0, r7, r1, asr #17
     780:	01040000 	mrseq	r0, (UNDEF: 4)
     784:	0e000016 	mcreq	0, 0, r0, cr0, cr6, {0}
     788:	00000424 	andeq	r0, r0, r4, lsr #8
     78c:	d508c606 	strle	ip, [r8, #-1542]	; 0xfffff9fa
     790:	08000003 	stmdaeq	r0, {r0, r1}
     794:	0000031b 	andeq	r0, r0, fp, lsl r3
     798:	0010280b 	andseq	r2, r0, fp, lsl #16
     79c:	f6060400 			; <UNDEFINED> instruction: 0xf6060400
     7a0:	00042809 	andeq	r2, r4, r9, lsl #16
     7a4:	0a700c00 	beq	1c037ac <__cs3_heap_start+0x1aea10c>
     7a8:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
     7ac:	00009709 	andeq	r9, r0, r9, lsl #14
     7b0:	1e020400 	cfcpysne	mvf0, mvf2
     7b4:	11c80c00 	bicne	r0, r8, r0, lsl #24
     7b8:	f9060000 			; <UNDEFINED> instruction: 0xf9060000
     7bc:	00009709 	andeq	r9, r0, r9, lsl #14
     7c0:	1c020400 	cfstrsne	mvf0, [r2], {-0}
     7c4:	0ade0c00 	beq	ff7837cc <__cs3_heap_end+0xbf7837cc>
     7c8:	fa060000 	blx	1807d0 <__cs3_heap_start+0x67130>
     7cc:	00009709 	andeq	r9, r0, r9, lsl #14
     7d0:	19030400 	stmdbne	r3, {sl}
     7d4:	11d00c00 	bicsne	r0, r0, r0, lsl #24
     7d8:	fb060000 	blx	1807e2 <__cs3_heap_start+0x67142>
     7dc:	00009709 	andeq	r9, r0, r9, lsl #14
     7e0:	16030400 	strne	r0, [r3], -r0, lsl #8
     7e4:	450e0000 	strmi	r0, [lr, #-0]
     7e8:	06000010 			; <UNDEFINED> instruction: 0x06000010
     7ec:	04340a00 	ldrteq	r0, [r4], #-2560	; 0xfffff600
     7f0:	da080000 	ble	2007f8 <__cs3_heap_start+0xe7158>
     7f4:	0b000003 	bleq	808 <__cs3_region_num+0x806>
     7f8:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     7fc:	0a850604 	beq	fe142014 <__cs3_heap_end+0xbe142014>
     800:	00000467 	andeq	r0, r0, r7, ror #8
     804:	000bd80c 	andeq	sp, fp, ip, lsl #16
     808:	0a870600 	beq	fe1c2010 <__cs3_heap_end+0xbe1c2010>
     80c:	00000097 	muleq	r0, r7, r0
     810:	001e0204 	andseq	r0, lr, r4, lsl #4
     814:	0019860c 	andseq	r8, r9, ip, lsl #12
     818:	0a880600 	beq	fe202020 <__cs3_heap_end+0xbe202020>
     81c:	00000097 	muleq	r0, r7, r0
     820:	001c0204 	andseq	r0, ip, r4, lsl #4
     824:	0fb40e00 	svceq	0x00b40e00
     828:	8d060000 	stchi	0, cr0, [r6, #-0]
     82c:	0004730a 	andeq	r7, r4, sl, lsl #6
     830:	04390800 	ldrteq	r0, [r9], #-2048	; 0xfffff800
     834:	ab0b0000 	blge	2c083c <__cs3_heap_start+0x1a719c>
     838:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
     83c:	960b0606 	strls	r0, [fp], -r6, lsl #12
     840:	0c000004 	stceq	0, cr0, [r0], {4}
     844:	00001d28 	andeq	r1, r0, r8, lsr #26
     848:	970b0806 	strls	r0, [fp, -r6, lsl #16]
     84c:	04000000 	streq	r0, [r0], #-0
     850:	00001d03 	andeq	r1, r0, r3, lsl #26
     854:	0014af0e 	andseq	sl, r4, lr, lsl #30
     858:	0b0d0600 	bleq	342060 <__cs3_heap_start+0x2289c0>
     85c:	000004a2 	andeq	r0, r0, r2, lsr #9
     860:	00047808 	andeq	r7, r4, r8, lsl #16
     864:	09f40b00 	ldmibeq	r4!, {r8, r9, fp}^
     868:	06040000 	streq	r0, [r4], -r0
     86c:	04d50b88 	ldrbeq	r0, [r5], #2952	; 0xb88
     870:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
     874:	06000018 			; <UNDEFINED> instruction: 0x06000018
     878:	00970b8a 	addseq	r0, r7, sl, lsl #23
     87c:	01040000 	mrseq	r0, (UNDEF: 4)
     880:	190c001f 	stmdbne	ip, {r0, r1, r2, r3, r4}
     884:	06000007 	streq	r0, [r0], -r7
     888:	00970b8b 	addseq	r0, r7, fp, lsl #23
     88c:	01040000 	mrseq	r0, (UNDEF: 4)
     890:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
     894:	00001455 	andeq	r1, r0, r5, asr r4
     898:	e10b9006 	tst	fp, r6
     89c:	08000004 	stmdaeq	r0, {r2}
     8a0:	000004a7 	andeq	r0, r0, r7, lsr #9
     8a4:	00137c0b 	andseq	r7, r3, fp, lsl #24
     8a8:	e7060400 	str	r0, [r6, -r0, lsl #8]
     8ac:	0005040b 	andeq	r0, r5, fp, lsl #8
     8b0:	193c0c00 	ldmdbne	ip!, {sl, fp}
     8b4:	e9060000 	stmdb	r6, {}	; <UNPREDICTABLE>
     8b8:	0000cf0b 	andeq	ip, r0, fp, lsl #30
     8bc:	1a060400 	bne	1818c4 <__cs3_heap_start+0x68224>
     8c0:	960e0000 	strls	r0, [lr], -r0
     8c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     8c8:	05100bee 	ldreq	r0, [r0, #-3054]	; 0xfffff412
     8cc:	e6080000 	str	r0, [r8], -r0
     8d0:	0b000004 	bleq	8e8 <__cs3_region_num+0x8e6>
     8d4:	00001b9e 	muleq	r0, lr, fp
     8d8:	0bff0640 	bleq	fffc21e0 <__cs3_heap_end+0xbffc21e0>
     8dc:	000005e5 	andeq	r0, r0, r5, ror #11
     8e0:	6f63760f 	svcvs	0x0063760f
     8e4:	0c010600 	stceq	6, cr0, [r1], {-0}
     8e8:	00000191 	muleq	r0, r1, r1
     8ec:	179c1000 	ldrne	r1, [ip, r0]
     8f0:	02060000 	andeq	r0, r6, #0
     8f4:	0001f00c 	andeq	pc, r1, ip
     8f8:	77100400 	ldrvc	r0, [r0, -r0, lsl #8]
     8fc:	0600000e 	streq	r0, [r0], -lr
     900:	021f0c03 	andseq	r0, pc, #768	; 0x300
     904:	10080000 	andne	r0, r8, r0
     908:	0000182f 	andeq	r1, r0, pc, lsr #16
     90c:	4e0c0406 	cdpmi	4, 0, cr0, cr12, cr6, {0}
     910:	0c000002 	stceq	0, cr0, [r0], {2}
     914:	000bd810 	andeq	sp, fp, r0, lsl r8
     918:	0c050600 	stceq	6, cr0, [r5], {-0}
     91c:	0000027d 	andeq	r0, r0, sp, ror r2
     920:	14491010 	strbne	r1, [r9], #-16
     924:	06060000 	streq	r0, [r6], -r0
     928:	0002ac0c 	andeq	sl, r2, ip, lsl #24
     92c:	ce101400 	cfmulsgt	mvf1, mvf0, mvf0
     930:	0600000c 	streq	r0, [r0], -ip
     934:	02db0c07 	sbcseq	r0, fp, #1792	; 0x700
     938:	10180000 	andsne	r0, r8, r0
     93c:	0000125c 	andeq	r1, r0, ip, asr r2
     940:	0a0c0806 	beq	302960 <__cs3_heap_start+0x1e92c0>
     944:	1c000003 	stcne	0, cr0, [r0], {3}
     948:	006e650f 	rsbeq	r6, lr, pc, lsl #10
     94c:	c90c0906 	stmdbgt	ip, {r1, r2, r8, fp}
     950:	20000003 	andcs	r0, r0, r3
     954:	0011d810 	andseq	sp, r1, r0, lsl r8
     958:	0c0a0600 	stceq	6, cr0, [sl], {-0}
     95c:	00000428 	andeq	r0, r0, r8, lsr #8
     960:	03101024 	tsteq	r0, #36	; 0x24
     964:	0b060000 	bleq	18096c <__cs3_heap_start+0x672cc>
     968:	0004670c 	andeq	r6, r4, ip, lsl #14
     96c:	eb102800 	bl	40a974 <__cs3_heap_start+0x2f12d4>
     970:	0600000a 	streq	r0, [r0], -sl
     974:	04960c0c 	ldreq	r0, [r6], #3084	; 0xc0c
     978:	102c0000 	eorne	r0, ip, r0
     97c:	00000e0f 	andeq	r0, r0, pc, lsl #28
     980:	d50c0d06 	strle	r0, [ip, #-3334]	; 0xfffff2fa
     984:	30000004 	andcc	r0, r0, r4
     988:	000b3410 	andeq	r3, fp, r0, lsl r4
     98c:	0c0e0600 	stceq	6, cr0, [lr], {-0}
     990:	00000504 	andeq	r0, r0, r4, lsl #10
     994:	10621034 	rsbne	r1, r2, r4, lsr r0
     998:	0f060000 	svceq	0x00060000
     99c:	0005e50c 	andeq	lr, r5, ip, lsl #10
     9a0:	08003800 	stmdaeq	r0, {fp, ip, sp}
     9a4:	000000e9 	andeq	r0, r0, r9, ror #1
     9a8:	001bb30e 	andseq	fp, fp, lr, lsl #6
     9ac:	0c130600 	ldceq	6, cr0, [r3], {-0}
     9b0:	000005f6 	strdeq	r0, [r0], -r6
     9b4:	00051508 	andeq	r1, r5, r8, lsl #10
     9b8:	0a800b00 	beq	fe0035c0 <__cs3_heap_end+0xbe0035c0>
     9bc:	06400000 	strbeq	r0, [r0], -r0
     9c0:	06cb0c15 			; <UNDEFINED> instruction: 0x06cb0c15
     9c4:	760f0000 	strvc	r0, [pc], -r0
     9c8:	06006f63 	streq	r6, [r0], -r3, ror #30
     9cc:	00d40c17 	sbcseq	r0, r4, r7, lsl ip
     9d0:	10000000 	andne	r0, r0, r0
     9d4:	0000179c 	muleq	r0, ip, r7
     9d8:	d40c1806 	strle	r1, [ip], #-2054	; 0xfffff7fa
     9dc:	04000000 	streq	r0, [r0], #-0
     9e0:	000e7710 	andeq	r7, lr, r0, lsl r7
     9e4:	0c190600 	ldceq	6, cr0, [r9], {-0}
     9e8:	000000d4 	ldrdeq	r0, [r0], -r4
     9ec:	182f1008 	stmdane	pc!, {r3, ip}	; <UNPREDICTABLE>
     9f0:	1a060000 	bne	1809f8 <__cs3_heap_start+0x67358>
     9f4:	0000d40c 	andeq	sp, r0, ip, lsl #8
     9f8:	d8100c00 	ldmdale	r0, {sl, fp}
     9fc:	0600000b 	streq	r0, [r0], -fp
     a00:	00d40c1b 	sbcseq	r0, r4, fp, lsl ip
     a04:	10100000 	andsne	r0, r0, r0
     a08:	00001449 	andeq	r1, r0, r9, asr #8
     a0c:	d40c1c06 	strle	r1, [ip], #-3078	; 0xfffff3fa
     a10:	14000000 	strne	r0, [r0], #-0
     a14:	000cce10 	andeq	ip, ip, r0, lsl lr
     a18:	0c1d0600 	ldceq	6, cr0, [sp], {-0}
     a1c:	000000d4 	ldrdeq	r0, [r0], -r4
     a20:	125c1018 	subsne	r1, ip, #24
     a24:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
     a28:	0000d40c 	andeq	sp, r0, ip, lsl #8
     a2c:	650f1c00 	strvs	r1, [pc, #-3072]	; fffffe34 <__cs3_region_init_oc_ram+0xfe34>
     a30:	1f06006e 	svcne	0x0006006e
     a34:	0000d40c 	andeq	sp, r0, ip, lsl #8
     a38:	d8102000 	ldmdale	r0, {sp}
     a3c:	06000011 			; <UNDEFINED> instruction: 0x06000011
     a40:	00d40c20 	sbcseq	r0, r4, r0, lsr #24
     a44:	10240000 	eorne	r0, r4, r0
     a48:	00000310 	andeq	r0, r0, r0, lsl r3
     a4c:	d40c2106 	strle	r2, [ip], #-262	; 0xfffffefa
     a50:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     a54:	000aeb10 	andeq	lr, sl, r0, lsl fp
     a58:	0c220600 	stceq	6, cr0, [r2], #-0
     a5c:	000000d4 	ldrdeq	r0, [r0], -r4
     a60:	0e0f102c 	cdpeq	0, 0, cr1, cr15, cr12, {1}
     a64:	23060000 	movwcs	r0, #24576	; 0x6000
     a68:	0000d40c 	andeq	sp, r0, ip, lsl #8
     a6c:	34103000 	ldrcc	r3, [r0], #-0
     a70:	0600000b 	streq	r0, [r0], -fp
     a74:	00d40c24 	sbcseq	r0, r4, r4, lsr #24
     a78:	10340000 	eorsne	r0, r4, r0
     a7c:	00001062 	andeq	r1, r0, r2, rrx
     a80:	e90c2506 	stmdb	ip, {r1, r2, r8, sl, sp}
     a84:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     a88:	05a10e00 	streq	r0, [r1, #3584]!	; 0xe00
     a8c:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
     a90:	0006d70c 	andeq	sp, r6, ip, lsl #14
     a94:	05fb0800 	ldrbeq	r0, [fp, #2048]!	; 0x800
     a98:	270b0000 	strcs	r0, [fp, -r0]
     a9c:	0400000a 	streq	r0, [r0], #-10
     aa0:	790d7e06 	stmdbvc	sp, {r1, r2, r9, sl, fp, ip, sp, lr}
     aa4:	0c000007 	stceq	0, cr0, [r0], {7}
     aa8:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     aac:	970d8006 	strls	r8, [sp, -r6]
     ab0:	04000000 	streq	r0, [r0], #-0
     ab4:	0d001f01 	stceq	15, cr1, [r0, #-4]
     ab8:	06006e65 	streq	r6, [r0], -r5, ror #28
     abc:	00970d81 	addseq	r0, r7, r1, lsl #27
     ac0:	01040000 	mrseq	r0, (UNDEF: 4)
     ac4:	ba0c001e 	blt	300b44 <__cs3_heap_start+0x1e74a4>
     ac8:	06000003 	streq	r0, [r0], -r3
     acc:	00970d82 	addseq	r0, r7, r2, lsl #27
     ad0:	01040000 	mrseq	r0, (UNDEF: 4)
     ad4:	8e0c001d 	mcrhi	0, 0, r0, cr12, cr13, {0}
     ad8:	06000005 	streq	r0, [r0], -r5
     adc:	00970d83 	addseq	r0, r7, r3, lsl #27
     ae0:	0d040000 	stceq	0, cr0, [r4, #-0]
     ae4:	0d0c0010 	stceq	0, cr0, [ip, #-64]	; 0xffffffc0
     ae8:	06000014 			; <UNDEFINED> instruction: 0x06000014
     aec:	00970d84 	addseq	r0, r7, r4, lsl #27
     af0:	06040000 	streq	r0, [r4], -r0
     af4:	ae0c000a 	cdpge	0, 0, cr0, cr12, cr10, {0}
     af8:	0600000c 	streq	r0, [r0], -ip
     afc:	00970d85 	addseq	r0, r7, r5, lsl #27
     b00:	02040000 	andeq	r0, r4, #0
     b04:	df0c0008 	svcle	0x000c0008
     b08:	0600000c 	streq	r0, [r0], -ip
     b0c:	00970d86 	addseq	r0, r7, r6, lsl #27
     b10:	01040000 	mrseq	r0, (UNDEF: 4)
     b14:	380c0007 	stmdacc	ip, {r0, r1, r2}
     b18:	06000007 	streq	r0, [r0], -r7
     b1c:	00970d87 	addseq	r0, r7, r7, lsl #27
     b20:	06040000 	streq	r0, [r4], -r0
     b24:	9d0c0001 	stcls	0, cr0, [ip, #-4]
     b28:	0600000b 	streq	r0, [r0], -fp
     b2c:	00970d88 	addseq	r0, r7, r8, lsl #27
     b30:	01040000 	mrseq	r0, (UNDEF: 4)
     b34:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     b38:	00000a3f 	andeq	r0, r0, pc, lsr sl
     b3c:	850d8c06 	strhi	r8, [sp, #-3078]	; 0xfffff3fa
     b40:	08000007 	stmdaeq	r0, {r0, r1, r2}
     b44:	000006dc 	ldrdeq	r0, [r0], -ip
     b48:	00098b0b 	andeq	r8, r9, fp, lsl #22
     b4c:	19060400 	stmdbne	r6, {sl}
     b50:	0007d80e 	andeq	sp, r7, lr, lsl #16
     b54:	1b800c00 	blne	fe003b5c <__cs3_heap_end+0xbe003b5c>
     b58:	1b060000 	blne	180b60 <__cs3_heap_start+0x674c0>
     b5c:	0000970e 	andeq	r9, r0, lr, lsl #14
     b60:	1f010400 	svcne	0x00010400
     b64:	1a410c00 	bne	1043b6c <__cs3_heap_start+0xf2a4cc>
     b68:	1c060000 	stcne	0, cr0, [r6], {-0}
     b6c:	0000970e 	andeq	r9, r0, lr, lsl #14
     b70:	130c0400 	movwne	r0, #50176	; 0xc400
     b74:	13f50c00 	mvnsne	r0, #0, 24
     b78:	1d060000 	stcne	0, cr0, [r6, #-0]
     b7c:	0000970e 	andeq	r9, r0, lr, lsl #14
     b80:	12010400 	andne	r0, r1, #0, 8
     b84:	0f2a0c00 	svceq	0x002a0c00
     b88:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
     b8c:	0000970e 	andeq	r9, r0, lr, lsl #14
     b90:	11010400 	tstne	r1, r0, lsl #8
     b94:	a40e0000 	strge	r0, [lr], #-0
     b98:	06000009 	streq	r0, [r0], -r9
     b9c:	07e40e23 	strbeq	r0, [r4, r3, lsr #28]!
     ba0:	8a080000 	bhi	200ba8 <__cs3_heap_start+0xe7508>
     ba4:	0b000007 	bleq	bc8 <__cs3_region_num+0xbc6>
     ba8:	0000121b 	andeq	r1, r0, fp, lsl r2
     bac:	0e5d0604 	cdpeq	6, 5, cr0, cr13, cr4, {0}
     bb0:	00000807 	andeq	r0, r0, r7, lsl #16
     bb4:	746e630d 	strbtvc	r6, [lr], #-781	; 0xfffffcf3
     bb8:	0e5f0600 	cdpeq	6, 5, cr0, cr15, cr0, {0}
     bbc:	00000097 	muleq	r0, r7, r0
     bc0:	00170904 	andseq	r0, r7, r4, lsl #18
     bc4:	0ef80e00 	cdpeq	14, 15, cr0, cr8, cr0, {0}
     bc8:	64060000 	strvs	r0, [r6], #-0
     bcc:	0008130e 	andeq	r1, r8, lr, lsl #6
     bd0:	07e90800 	strbeq	r0, [r9, r0, lsl #16]!
     bd4:	050b0000 	streq	r0, [fp, #-0]
     bd8:	04000006 	streq	r0, [r0], #-6
     bdc:	360e9e06 	strcc	r9, [lr], -r6, lsl #28
     be0:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
     be4:	00746e63 	rsbseq	r6, r4, r3, ror #28
     be8:	970ea006 	strls	sl, [lr, -r6]
     bec:	04000000 	streq	r0, [r0], #-0
     bf0:	00001709 	andeq	r1, r0, r9, lsl #14
     bf4:	0006220e 	andeq	r2, r6, lr, lsl #4
     bf8:	0ea50600 	cdpeq	6, 10, cr0, cr5, cr0, {0}
     bfc:	00000842 	andeq	r0, r0, r2, asr #16
     c00:	00081808 	andeq	r1, r8, r8, lsl #16
     c04:	069c0b00 	ldreq	r0, [ip], r0, lsl #22
     c08:	06040000 	streq	r0, [r4], -r0
     c0c:	08650edf 	stmdaeq	r5!, {r0, r1, r2, r3, r4, r6, r7, r9, sl, fp}^
     c10:	630d0000 	movwvs	r0, #53248	; 0xd000
     c14:	0600746e 	streq	r7, [r0], -lr, ror #8
     c18:	00970ee1 	addseq	r0, r7, r1, ror #29
     c1c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     c20:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     c24:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
     c28:	710ee606 	tstvc	lr, r6, lsl #12
     c2c:	08000008 	stmdaeq	r0, {r3}
     c30:	00000847 	andeq	r0, r0, r7, asr #16
     c34:	00081a0b 	andeq	r1, r8, fp, lsl #20
     c38:	20060400 	andcs	r0, r6, r0, lsl #8
     c3c:	0008940f 	andeq	r9, r8, pc, lsl #8
     c40:	6e630d00 	cdpvs	13, 6, cr0, cr3, cr0, {0}
     c44:	22060074 	andcs	r0, r6, #116	; 0x74
     c48:	0000970f 	andeq	r9, r0, pc, lsl #14
     c4c:	17090400 	strne	r0, [r9, -r0, lsl #8]
     c50:	520e0000 	andpl	r0, lr, #0
     c54:	06000019 			; <UNDEFINED> instruction: 0x06000019
     c58:	08a00f27 	stmiaeq	r0!, {r0, r1, r2, r5, r8, r9, sl, fp}
     c5c:	76080000 	strvc	r0, [r8], -r0
     c60:	0b000008 	bleq	c88 <__cs3_region_num+0xc86>
     c64:	00001118 	andeq	r1, r0, r8, lsl r1
     c68:	0f610604 	svceq	0x00610604
     c6c:	000008c3 	andeq	r0, r0, r3, asr #17
     c70:	746e630d 	strbtvc	r6, [lr], #-781	; 0xfffffcf3
     c74:	0f630600 	svceq	0x00630600
     c78:	00000097 	muleq	r0, r7, r0
     c7c:	00170904 	andseq	r0, r7, r4, lsl #18
     c80:	1b610e00 	blne	1844488 <__cs3_heap_start+0x172ade8>
     c84:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     c88:	0008cf0f 	andeq	ip, r8, pc, lsl #30
     c8c:	08a50800 	stmiaeq	r5!, {fp}
     c90:	5a0b0000 	bpl	2c0c98 <__cs3_heap_start+0x1a75f8>
     c94:	04000008 	streq	r0, [r0], #-8
     c98:	f20fa406 	vshl.s8	d10, d6, d15
     c9c:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
     ca0:	00746e63 	rsbseq	r6, r4, r3, ror #28
     ca4:	970fa606 	strls	sl, [pc, -r6, lsl #12]
     ca8:	04000000 	streq	r0, [r0], #-0
     cac:	00001709 	andeq	r1, r0, r9, lsl #14
     cb0:	000dd60e 	andeq	sp, sp, lr, lsl #12
     cb4:	0fab0600 	svceq	0x00ab0600
     cb8:	000008fe 	strdeq	r0, [r0], -lr
     cbc:	0008d408 	andeq	sp, r8, r8, lsl #8
     cc0:	16de0b00 	ldrbne	r0, [lr], r0, lsl #22
     cc4:	06040000 	streq	r0, [r4], -r0
     cc8:	09d11113 	ldmibeq	r1, {r0, r1, r4, r8, ip}^
     ccc:	930c0000 	movwls	r0, #49152	; 0xc000
     cd0:	06000006 	streq	r0, [r0], -r6
     cd4:	00971115 	addseq	r1, r7, r5, lsl r1
     cd8:	01040000 	mrseq	r0, (UNDEF: 4)
     cdc:	520c001f 	andpl	r0, ip, #31
     ce0:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
     ce4:	00971116 	addseq	r1, r7, r6, lsl r1
     ce8:	01040000 	mrseq	r0, (UNDEF: 4)
     cec:	ae0c001e 	mcrge	0, 0, r0, cr12, cr14, {0}
     cf0:	06000008 	streq	r0, [r0], -r8
     cf4:	00971117 	addseq	r1, r7, r7, lsl r1
     cf8:	01040000 	mrseq	r0, (UNDEF: 4)
     cfc:	3e0c001d 	mcrcc	0, 0, r0, cr12, cr13, {0}
     d00:	06000008 	streq	r0, [r0], -r8
     d04:	00971118 	addseq	r1, r7, r8, lsl r1
     d08:	01040000 	mrseq	r0, (UNDEF: 4)
     d0c:	ba0c001c 	blt	300d84 <__cs3_heap_start+0x1e76e4>
     d10:	06000007 	streq	r0, [r0], -r7
     d14:	00971119 	addseq	r1, r7, r9, lsl r1
     d18:	01040000 	mrseq	r0, (UNDEF: 4)
     d1c:	370c001b 	smladcc	ip, fp, r0, r0
     d20:	06000018 			; <UNDEFINED> instruction: 0x06000018
     d24:	0097111a 	addseq	r1, r7, sl, lsl r1
     d28:	01040000 	mrseq	r0, (UNDEF: 4)
     d2c:	f00c001a 			; <UNDEFINED> instruction: 0xf00c001a
     d30:	06000014 			; <UNDEFINED> instruction: 0x06000014
     d34:	0097111b 	addseq	r1, r7, fp, lsl r1
     d38:	01040000 	mrseq	r0, (UNDEF: 4)
     d3c:	5b0c0019 	blpl	300da8 <__cs3_heap_start+0x1e7708>
     d40:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
     d44:	0097111c 	addseq	r1, r7, ip, lsl r1
     d48:	01040000 	mrseq	r0, (UNDEF: 4)
     d4c:	d60c0018 			; <UNDEFINED> instruction: 0xd60c0018
     d50:	0600000c 	streq	r0, [r0], -ip
     d54:	0097111d 	addseq	r1, r7, sp, lsl r1
     d58:	01040000 	mrseq	r0, (UNDEF: 4)
     d5c:	850c0017 	strhi	r0, [ip, #-23]	; 0xffffffe9
     d60:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
     d64:	0097111e 	addseq	r1, r7, lr, lsl r1
     d68:	01040000 	mrseq	r0, (UNDEF: 4)
     d6c:	a30c0016 	movwge	r0, #49174	; 0xc016
     d70:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
     d74:	0097111f 	addseq	r1, r7, pc, lsl r1
     d78:	01040000 	mrseq	r0, (UNDEF: 4)
     d7c:	4d0c0015 	stcmi	0, cr0, [ip, #-84]	; 0xffffffac
     d80:	06000014 			; <UNDEFINED> instruction: 0x06000014
     d84:	00971120 	addseq	r1, r7, r0, lsr #2
     d88:	01040000 	mrseq	r0, (UNDEF: 4)
     d8c:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
     d90:	000016f5 	strdeq	r1, [r0], -r5
     d94:	dd112506 	cfldr32le	mvfx2, [r1, #-24]	; 0xffffffe8
     d98:	08000009 	stmdaeq	r0, {r0, r3}
     d9c:	00000903 	andeq	r0, r0, r3, lsl #18
     da0:	0018530b 	andseq	r5, r8, fp, lsl #6
     da4:	a9060400 	stmdbge	r6, {sl}
     da8:	000a3012 	andeq	r3, sl, r2, lsl r0
     dac:	08ae0c00 	stmiaeq	lr!, {sl, fp}
     db0:	ab060000 	blge	180db8 <__cs3_heap_start+0x67718>
     db4:	00009712 	andeq	r9, r0, r2, lsl r7
     db8:	1d030400 	cfstrsne	mvf0, [r3, #-0]
     dbc:	083e0c00 	ldmdaeq	lr!, {sl, fp}
     dc0:	ac060000 	stcge	0, cr0, [r6], {-0}
     dc4:	00009712 	andeq	r9, r0, r2, lsl r7
     dc8:	1a030400 	bne	c1dd0 <__cs3_region_init_size_ram+0xaa178>
     dcc:	07ba0c00 	ldreq	r0, [sl, r0, lsl #24]!
     dd0:	ad060000 	stcge	0, cr0, [r6, #-0]
     dd4:	00009712 	andeq	r9, r0, r2, lsl r7
     dd8:	17030400 	strne	r0, [r3, -r0, lsl #8]
     ddc:	18370c00 	ldmdane	r7!, {sl, fp}
     de0:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
     de4:	00009712 	andeq	r9, r0, r2, lsl r7
     de8:	14030400 	strne	r0, [r3], #-1024	; 0xfffffc00
     dec:	6b0e0000 	blvs	380df4 <__cs3_heap_start+0x267754>
     df0:	06000018 			; <UNDEFINED> instruction: 0x06000018
     df4:	0a3c12b3 	beq	f058c8 <__cs3_heap_start+0xdec228>
     df8:	e2080000 	and	r0, r8, #0
     dfc:	0b000009 	bleq	e28 <__cs3_region_num+0xe26>
     e00:	000004c5 	andeq	r0, r0, r5, asr #9
     e04:	12ee0604 	rscne	r0, lr, #4, 12	; 0x400000
     e08:	00000a5f 	andeq	r0, r0, pc, asr sl
     e0c:	00077c0c 	andeq	r7, r7, ip, lsl #24
     e10:	12f00600 	rscsne	r0, r0, #0, 12
     e14:	00000097 	muleq	r0, r7, r0
     e18:	00081804 	andeq	r1, r8, r4, lsl #16
     e1c:	04e10e00 	strbteq	r0, [r1], #3584	; 0xe00
     e20:	f5060000 			; <UNDEFINED> instruction: 0xf5060000
     e24:	000a6b12 	andeq	r6, sl, r2, lsl fp
     e28:	0a410800 	beq	1042e30 <__cs3_heap_start+0xf29790>
     e2c:	ea0b0000 	b	2c0e34 <__cs3_heap_start+0x1a7794>
     e30:	04000007 	streq	r0, [r0], #-7
     e34:	ae13b906 	cdpge	9, 1, cr11, cr3, cr6, {0}
     e38:	0c00000a 	stceq	0, cr0, [r0], {10}
     e3c:	000019a7 	andeq	r1, r0, r7, lsr #19
     e40:	9713bb06 	ldrls	fp, [r3, -r6, lsl #22]
     e44:	04000000 	streq	r0, [r0], #-0
     e48:	0c001e02 	stceq	14, cr1, [r0], {2}
     e4c:	000019e9 	andeq	r1, r0, r9, ror #19
     e50:	9713bc06 	ldrls	fp, [r3, -r6, lsl #24]
     e54:	04000000 	streq	r0, [r0], #-0
     e58:	0c001c02 	stceq	12, cr1, [r0], {2}
     e5c:	0000171c 	andeq	r1, r0, ip, lsl r7
     e60:	9713bd06 	ldrls	fp, [r3, -r6, lsl #26]
     e64:	04000000 	streq	r0, [r0], #-0
     e68:	00001a02 	andeq	r1, r0, r2, lsl #20
     e6c:	0008020e 	andeq	r0, r8, lr, lsl #4
     e70:	13c20600 	bicne	r0, r2, #0, 12
     e74:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     e78:	000a7008 	andeq	r7, sl, r8
     e7c:	0fd00b00 	svceq	0x00d00b00
     e80:	06040000 	streq	r0, [r4], -r0
     e84:	0add1419 	beq	ff745ef0 <__cs3_heap_end+0xbf745ef0>
     e88:	3c0c0000 	stccc	0, cr0, [ip], {-0}
     e8c:	06000019 			; <UNDEFINED> instruction: 0x06000019
     e90:	00cf141b 	sbceq	r1, pc, fp, lsl r4	; <UNPREDICTABLE>
     e94:	06040000 	streq	r0, [r4], -r0
     e98:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
     e9c:	00000fe9 	andeq	r0, r0, r9, ror #31
     ea0:	e9142006 	ldmdb	r4, {r1, r2, sp}
     ea4:	0800000a 	stmdaeq	r0, {r1, r3}
     ea8:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
     eac:	000b390b 	andeq	r3, fp, fp, lsl #18
     eb0:	31064000 	mrscc	r4, (UNDEF: 6)
     eb4:	000bb114 	andeq	fp, fp, r4, lsl r1
     eb8:	63760f00 	cmnvs	r6, #0, 30
     ebc:	3306006f 	movwcc	r0, #24687	; 0x606f
     ec0:	00077914 	andeq	r7, r7, r4, lsl r9
     ec4:	9c100000 	ldcls	0, cr0, [r0], {-0}
     ec8:	06000017 			; <UNDEFINED> instruction: 0x06000017
     ecc:	07d81434 			; <UNDEFINED> instruction: 0x07d81434
     ed0:	10040000 	andne	r0, r4, r0
     ed4:	00000693 	muleq	r0, r3, r6
     ed8:	07143506 	ldreq	r3, [r4, -r6, lsl #10]
     edc:	08000008 	stmdaeq	r0, {r3}
     ee0:	001a5210 	andseq	r5, sl, r0, lsl r2
     ee4:	14360600 	ldrtne	r0, [r6], #-1536	; 0xfffffa00
     ee8:	00000836 	andeq	r0, r0, r6, lsr r8
     eec:	1a1e100c 	bne	784f24 <__cs3_heap_start+0x66b884>
     ef0:	37060000 	strcc	r0, [r6, -r0]
     ef4:	00086514 	andeq	r6, r8, r4, lsl r5
     ef8:	76101000 	ldrvc	r1, [r0], -r0
     efc:	06000019 			; <UNDEFINED> instruction: 0x06000019
     f00:	08941438 	ldmeq	r4, {r3, r4, r5, sl, ip}
     f04:	10140000 	andsne	r0, r4, r0
     f08:	0000070e 	andeq	r0, r0, lr, lsl #14
     f0c:	c3143906 	tstgt	r4, #98304	; 0x18000
     f10:	18000008 	stmdane	r0, {r3}
     f14:	001a5b10 	andseq	r5, sl, r0, lsl fp
     f18:	143a0600 	ldrtne	r0, [sl], #-1536	; 0xfffffa00
     f1c:	000008f2 	strdeq	r0, [r0], -r2
     f20:	6e650f1c 	mcrvs	15, 3, r0, cr5, cr12, {0}
     f24:	143b0600 	ldrtne	r0, [fp], #-1536	; 0xfffffa00
     f28:	000009d1 	ldrdeq	r0, [r0], -r1
     f2c:	69640f20 	stmdbvs	r4!, {r5, r8, r9, sl, fp}^
     f30:	3c060076 	stccc	0, cr0, [r6], {118}	; 0x76
     f34:	000a3014 	andeq	r3, sl, r4, lsl r0
     f38:	2a102400 	bcs	409f40 <__cs3_heap_start+0x2f08a0>
     f3c:	06000019 			; <UNDEFINED> instruction: 0x06000019
     f40:	0a5f143d 	beq	17c603c <__cs3_heap_start+0x16ac99c>
     f44:	0f280000 	svceq	0x00280000
     f48:	00637273 	rsbeq	r7, r3, r3, ror r2
     f4c:	ae143e06 	cdpge	14, 1, cr3, cr4, cr6, {0}
     f50:	2c00000a 	stccs	0, cr0, [r0], {10}
     f54:	000b3410 	andeq	r3, fp, r0, lsl r4
     f58:	143f0600 	ldrtne	r0, [pc], #-1536	; f60 <__cs3_region_num+0xf5e>
     f5c:	00000add 	ldrdeq	r0, [r0], -sp
     f60:	071e1030 			; <UNDEFINED> instruction: 0x071e1030
     f64:	40060000 	andmi	r0, r6, r0
     f68:	000bb114 	andeq	fp, fp, r4, lsl r1
     f6c:	08003400 	stmdaeq	r0, {sl, ip, sp}
     f70:	000000d9 	ldrdeq	r0, [r0], -r9
     f74:	000b4d0e 	andeq	r4, fp, lr, lsl #26
     f78:	14440600 	strbne	r0, [r4], #-1536	; 0xfffffa00
     f7c:	00000bc2 	andeq	r0, r0, r2, asr #23
     f80:	000aee08 	andeq	lr, sl, r8, lsl #28
     f84:	14f80b00 	ldrbtne	r0, [r8], #2816	; 0xb00
     f88:	06400000 	strbeq	r0, [r0], -r0
     f8c:	0c8a1446 	cfstrseq	mvf1, [sl], {70}	; 0x46
     f90:	760f0000 	strvc	r0, [pc], -r0
     f94:	06006f63 	streq	r6, [r0], -r3, ror #30
     f98:	00d41448 	sbcseq	r1, r4, r8, asr #8
     f9c:	10000000 	andne	r0, r0, r0
     fa0:	0000179c 	muleq	r0, ip, r7
     fa4:	d4144906 	ldrle	r4, [r4], #-2310	; 0xfffff6fa
     fa8:	04000000 	streq	r0, [r0], #-0
     fac:	00069310 	andeq	r9, r6, r0, lsl r3
     fb0:	144a0600 	strbne	r0, [sl], #-1536	; 0xfffffa00
     fb4:	000000d4 	ldrdeq	r0, [r0], -r4
     fb8:	1a521008 	bne	1484fe0 <__cs3_heap_start+0x136b940>
     fbc:	4b060000 	blmi	180fc4 <__cs3_heap_start+0x67924>
     fc0:	0000d414 	andeq	sp, r0, r4, lsl r4
     fc4:	1e100c00 	cdpne	12, 1, cr0, cr0, cr0, {0}
     fc8:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
     fcc:	00d4144c 	sbcseq	r1, r4, ip, asr #8
     fd0:	10100000 	andsne	r0, r0, r0
     fd4:	00001976 	andeq	r1, r0, r6, ror r9
     fd8:	d4144d06 	ldrle	r4, [r4], #-3334	; 0xfffff2fa
     fdc:	14000000 	strne	r0, [r0], #-0
     fe0:	00070e10 	andeq	r0, r7, r0, lsl lr
     fe4:	144e0600 	strbne	r0, [lr], #-1536	; 0xfffffa00
     fe8:	000000d4 	ldrdeq	r0, [r0], -r4
     fec:	1a5b1018 	bne	16c5054 <__cs3_heap_start+0x15ab9b4>
     ff0:	4f060000 	svcmi	0x00060000
     ff4:	0000d414 	andeq	sp, r0, r4, lsl r4
     ff8:	650f1c00 	strvs	r1, [pc, #-3072]	; 400 <__cs3_region_num+0x3fe>
     ffc:	5006006e 	andpl	r0, r6, lr, rrx
    1000:	0000d414 	andeq	sp, r0, r4, lsl r4
    1004:	640f2000 	strvs	r2, [pc], #-0	; 100c <__cs3_region_num+0x100a>
    1008:	06007669 	streq	r7, [r0], -r9, ror #12
    100c:	00d41451 	sbcseq	r1, r4, r1, asr r4
    1010:	10240000 	eorne	r0, r4, r0
    1014:	0000192a 	andeq	r1, r0, sl, lsr #18
    1018:	d4145206 	ldrle	r5, [r4], #-518	; 0xfffffdfa
    101c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1020:	6372730f 	cmnvs	r2, #1006632960	; 0x3c000000
    1024:	14530600 	ldrbne	r0, [r3], #-1536	; 0xfffffa00
    1028:	000000d4 	ldrdeq	r0, [r0], -r4
    102c:	0b34102c 	bleq	d050e4 <__cs3_heap_start+0xbeba44>
    1030:	54060000 	strpl	r0, [r6], #-0
    1034:	0000d414 	andeq	sp, r0, r4, lsl r4
    1038:	1e103000 	cdpne	0, 1, cr3, cr0, cr0, {0}
    103c:	06000007 	streq	r0, [r0], -r7
    1040:	00d91455 	sbcseq	r1, r9, r5, asr r4
    1044:	00340000 	eorseq	r0, r4, r0
    1048:	0015100e 	andseq	r1, r5, lr
    104c:	14590600 	ldrbne	r0, [r9], #-1536	; 0xfffffa00
    1050:	00000c96 	muleq	r0, r6, ip
    1054:	000bc708 	andeq	ip, fp, r8, lsl #14
    1058:	0f680b00 	svceq	0x00680b00
    105c:	06040000 	streq	r0, [r4], -r0
    1060:	0d3815af 	cfldr32eq	mvfx1, [r8, #-700]!	; 0xfffffd44
    1064:	b80c0000 	stmdalt	ip, {}	; <UNPREDICTABLE>
    1068:	06000003 	streq	r0, [r0], -r3
    106c:	009715b1 			; <UNDEFINED> instruction: 0x009715b1
    1070:	01040000 	mrseq	r0, (UNDEF: 4)
    1074:	650d001f 	strvs	r0, [sp, #-31]	; 0xffffffe1
    1078:	b206006e 	andlt	r0, r6, #110	; 0x6e
    107c:	00009715 	andeq	r9, r0, r5, lsl r7
    1080:	1e010400 	cfcpysne	mvf0, mvf1
    1084:	03ba0c00 			; <UNDEFINED> instruction: 0x03ba0c00
    1088:	b3060000 	movwlt	r0, #24576	; 0x6000
    108c:	00009715 	andeq	r9, r0, r5, lsl r7
    1090:	1d010400 	cfstrsne	mvf0, [r1, #-0]
    1094:	058e0c00 	streq	r0, [lr, #3072]	; 0xc00
    1098:	b4060000 	strlt	r0, [r6], #-0
    109c:	00009715 	andeq	r9, r0, r5, lsl r7
    10a0:	100d0400 	andne	r0, sp, r0, lsl #8
    10a4:	140d0c00 	strne	r0, [sp], #-3072	; 0xfffff400
    10a8:	b5060000 	strlt	r0, [r6, #-0]
    10ac:	00009715 	andeq	r9, r0, r5, lsl r7
    10b0:	0a060400 	beq	1820b8 <__cs3_heap_start+0x68a18>
    10b4:	1e930c00 	cdpne	12, 9, cr0, cr3, cr0, {0}
    10b8:	b6060000 	strlt	r0, [r6], -r0
    10bc:	00009715 	andeq	r9, r0, r5, lsl r7
    10c0:	08020400 	stmdaeq	r2, {sl}
    10c4:	0cdf0c00 	ldcleq	12, cr0, [pc], {0}
    10c8:	b7060000 	strlt	r0, [r6, -r0]
    10cc:	00009715 	andeq	r9, r0, r5, lsl r7
    10d0:	07010400 	streq	r0, [r1, -r0, lsl #8]
    10d4:	07380c00 	ldreq	r0, [r8, -r0, lsl #24]!
    10d8:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    10dc:	00009715 	andeq	r9, r0, r5, lsl r7
    10e0:	01060400 	tsteq	r6, r0, lsl #8
    10e4:	0b9d0c00 	bleq	fe7440ec <__cs3_heap_end+0xbe7440ec>
    10e8:	b9060000 	stmdblt	r6, {}	; <UNPREDICTABLE>
    10ec:	00009715 	andeq	r9, r0, r5, lsl r7
    10f0:	00010400 	andeq	r0, r1, r0, lsl #8
    10f4:	800e0000 	andhi	r0, lr, r0
    10f8:	0600000f 	streq	r0, [r0], -pc
    10fc:	0d4415bd 	cfstr64eq	mvdx1, [r4, #-756]	; 0xfffffd0c
    1100:	9b080000 	blls	201108 <__cs3_heap_start+0xe7a68>
    1104:	0b00000c 	bleq	113c <__cs3_region_num+0x113a>
    1108:	0000172c 	andeq	r1, r0, ip, lsr #14
    110c:	164a0604 	strbne	r0, [sl], -r4, lsl #12
    1110:	00000d97 	muleq	r0, r7, sp
    1114:	001b800c 	andseq	r8, fp, ip
    1118:	164c0600 	strbne	r0, [ip], -r0, lsl #12
    111c:	00000097 	muleq	r0, r7, r0
    1120:	001f0104 	andseq	r0, pc, r4, lsl #2
    1124:	001a410c 	andseq	r4, sl, ip, lsl #2
    1128:	164d0600 	strbne	r0, [sp], -r0, lsl #12
    112c:	00000097 	muleq	r0, r7, r0
    1130:	00130c04 	andseq	r0, r3, r4, lsl #24
    1134:	0013f50c 	andseq	pc, r3, ip, lsl #10
    1138:	164e0600 	strbne	r0, [lr], -r0, lsl #12
    113c:	00000097 	muleq	r0, r7, r0
    1140:	00120104 	andseq	r0, r2, r4, lsl #2
    1144:	000f2a0c 	andeq	r2, pc, ip, lsl #20
    1148:	164f0600 	strbne	r0, [pc], -r0, lsl #12
    114c:	00000097 	muleq	r0, r7, r0
    1150:	00110104 	andseq	r0, r1, r4, lsl #2
    1154:	17440e00 	strbne	r0, [r4, -r0, lsl #28]
    1158:	54060000 	strpl	r0, [r6], #-0
    115c:	000da316 	andeq	sl, sp, r6, lsl r3
    1160:	0d490800 	stcleq	8, cr0, [r9, #-0]
    1164:	020b0000 	andeq	r0, fp, #0
    1168:	0400000d 	streq	r0, [r0], #-13
    116c:	d616b006 	ldrle	fp, [r6], -r6
    1170:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    1174:	00746e63 	rsbseq	r6, r4, r3, ror #28
    1178:	9716b206 	ldrls	fp, [r6, -r6, lsl #4]
    117c:	04000000 	streq	r0, [r0], #-0
    1180:	0c001709 	stceq	7, cr1, [r0], {9}
    1184:	000003cc 	andeq	r0, r0, ip, asr #7
    1188:	9716b306 	ldrls	fp, [r6, -r6, lsl #6]
    118c:	04000000 	streq	r0, [r0], #-0
    1190:	00000b0c 	andeq	r0, r0, ip, lsl #22
    1194:	000d200e 	andeq	r2, sp, lr
    1198:	16b80600 	ldrtne	r0, [r8], r0, lsl #12
    119c:	00000de2 	andeq	r0, r0, r2, ror #27
    11a0:	000da808 	andeq	sl, sp, r8, lsl #16
    11a4:	08c80b00 	stmiaeq	r8, {r8, r9, fp}^
    11a8:	06040000 	streq	r0, [r4], -r0
    11ac:	0e151714 	mrceq	7, 0, r1, cr5, cr4, {0}
    11b0:	630d0000 	movwvs	r0, #53248	; 0xd000
    11b4:	0600746e 	streq	r7, [r0], -lr, ror #8
    11b8:	00971716 	addseq	r1, r7, r6, lsl r7
    11bc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    11c0:	cc0c0017 	stcgt	0, cr0, [ip], {23}
    11c4:	06000003 	streq	r0, [r0], -r3
    11c8:	00971717 	addseq	r1, r7, r7, lsl r7
    11cc:	0c040000 	stceq	0, cr0, [r4], {-0}
    11d0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    11d4:	000008e8 	andeq	r0, r0, r8, ror #17
    11d8:	21171c06 	tstcs	r7, r6, lsl #24
    11dc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    11e0:	00000de7 	andeq	r0, r0, r7, ror #27
    11e4:	001a6f0b 	andseq	r6, sl, fp, lsl #30
    11e8:	78060400 	stmdavc	r6, {sl}
    11ec:	000e5417 	andeq	r5, lr, r7, lsl r4
    11f0:	6e630d00 	cdpvs	13, 6, cr0, cr3, cr0, {0}
    11f4:	7a060074 	bvc	1813cc <__cs3_heap_start+0x67d2c>
    11f8:	00009717 	andeq	r9, r0, r7, lsl r7
    11fc:	17090400 	strne	r0, [r9, -r0, lsl #8]
    1200:	03cc0c00 	biceq	r0, ip, #0, 24
    1204:	7b060000 	blvc	18120c <__cs3_heap_start+0x67b6c>
    1208:	00009717 	andeq	r9, r0, r7, lsl r7
    120c:	0b0c0400 	bleq	302214 <__cs3_heap_start+0x1e8b74>
    1210:	4a0e0000 	bmi	381218 <__cs3_heap_start+0x267b78>
    1214:	06000009 	streq	r0, [r0], -r9
    1218:	0e601780 	cdpeq	7, 6, cr1, cr0, cr0, {4}
    121c:	26080000 	strcs	r0, [r8], -r0
    1220:	0b00000e 	bleq	1260 <__cs3_region_num+0x125e>
    1224:	000007ca 	andeq	r0, r0, sl, asr #15
    1228:	17de0604 	ldrbne	r0, [lr, r4, lsl #12]
    122c:	00000e93 	muleq	r0, r3, lr
    1230:	746e630d 	strbtvc	r6, [lr], #-781	; 0xfffffcf3
    1234:	17e00600 	strbne	r0, [r0, r0, lsl #12]!
    1238:	00000097 	muleq	r0, r7, r0
    123c:	00170904 	andseq	r0, r7, r4, lsl #18
    1240:	0003cc0c 	andeq	ip, r3, ip, lsl #24
    1244:	17e10600 	strbne	r0, [r1, r0, lsl #12]!
    1248:	00000097 	muleq	r0, r7, r0
    124c:	000b0c04 	andeq	r0, fp, r4, lsl #24
    1250:	07410e00 	strbeq	r0, [r1, -r0, lsl #28]
    1254:	e6060000 	str	r0, [r6], -r0
    1258:	000e9f17 	andeq	r9, lr, r7, lsl pc
    125c:	0e650800 	cdpeq	8, 6, cr0, cr5, cr0, {0}
    1260:	750b0000 	strvc	r0, [fp, #-0]
    1264:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    1268:	f2187406 	vshl.s16	d7, d6, d8
    126c:	0c00000e 	stceq	0, cr0, [r0], {14}
    1270:	00001211 	andeq	r1, r0, r1, lsl r2
    1274:	97187606 	ldrls	r7, [r8, -r6, lsl #12]
    1278:	04000000 	streq	r0, [r0], #-0
    127c:	0c001f01 	stceq	15, cr1, [r0], {1}
    1280:	000003c0 	andeq	r0, r0, r0, asr #7
    1284:	97187706 	ldrls	r7, [r8, -r6, lsl #14]
    1288:	04000000 	streq	r0, [r0], #-0
    128c:	0c001e01 	stceq	14, cr1, [r0], {1}
    1290:	00000d66 	andeq	r0, r0, r6, ror #26
    1294:	97187806 	ldrls	r7, [r8, -r6, lsl #16]
    1298:	04000000 	streq	r0, [r0], #-0
    129c:	0c001d01 	stceq	13, cr1, [r0], {1}
    12a0:	00000e54 	andeq	r0, r0, r4, asr lr
    12a4:	97187906 	ldrls	r7, [r8, -r6, lsl #18]
    12a8:	04000000 	streq	r0, [r0], #-0
    12ac:	00001c01 	andeq	r1, r0, r1, lsl #24
    12b0:	001d8c0e 	andseq	r8, sp, lr, lsl #24
    12b4:	187e0600 	ldmdane	lr!, {r9, sl}^
    12b8:	00000efe 	strdeq	r0, [r0], -lr
    12bc:	000ea408 	andeq	sl, lr, r8, lsl #8
    12c0:	0dbd0b00 	ldceq	11, cr0, [sp]
    12c4:	06040000 	streq	r0, [r4], -r0
    12c8:	0f2118d5 	svceq	0x002118d5
    12cc:	3c0c0000 	stccc	0, cr0, [ip], {-0}
    12d0:	06000019 			; <UNDEFINED> instruction: 0x06000019
    12d4:	00cf18d7 	ldrdeq	r1, [pc], #135	; <UNPREDICTABLE>
    12d8:	06040000 	streq	r0, [r4], -r0
    12dc:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    12e0:	0000113f 	andeq	r1, r0, pc, lsr r1
    12e4:	2d18dc06 	ldccs	12, cr13, [r8, #-24]	; 0xffffffe8
    12e8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    12ec:	00000f03 	andeq	r0, r0, r3, lsl #30
    12f0:	001adb0b 	andseq	sp, sl, fp, lsl #22
    12f4:	ed062000 	stc	0, cr2, [r6, #-0]
    12f8:	000fa718 	andeq	sl, pc, r8, lsl r7	; <UNPREDICTABLE>
    12fc:	63760f00 	cmnvs	r6, #0, 30
    1300:	ef06006f 	svc	0x0006006f
    1304:	000d3818 	andeq	r3, sp, r8, lsl r8
    1308:	e6100000 	ldr	r0, [r0], -r0
    130c:	0600000a 	streq	r0, [r0], -sl
    1310:	0d9718f0 	ldceq	8, cr1, [r7, #960]	; 0x3c0
    1314:	10040000 	andne	r0, r4, r0
    1318:	00001211 	andeq	r1, r0, r1, lsl r2
    131c:	d618f106 	ldrle	pc, [r8], -r6, lsl #2
    1320:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    1324:	0003c010 	andeq	ip, r3, r0, lsl r0
    1328:	18f20600 	ldmne	r2!, {r9, sl}^
    132c:	00000e15 	andeq	r0, r0, r5, lsl lr
    1330:	0d66100c 	stcleq	0, cr1, [r6, #-48]!	; 0xffffffd0
    1334:	f3060000 	vhadd.u8	d0, d6, d0
    1338:	000e5418 	andeq	r5, lr, r8, lsl r4
    133c:	54101000 	ldrpl	r1, [r0], #-0
    1340:	0600000e 	streq	r0, [r0], -lr
    1344:	0e9318f4 	mrceq	8, 4, r1, cr3, cr4, {7}
    1348:	0f140000 	svceq	0x00140000
    134c:	06006e65 	streq	r6, [r0], -r5, ror #28
    1350:	0ef218f5 	mrceq	8, 7, r1, cr2, cr5, {7}
    1354:	10180000 	andsne	r0, r8, r0
    1358:	00000b34 	andeq	r0, r0, r4, lsr fp
    135c:	2118f606 	tstcs	r8, r6, lsl #12	; <UNPREDICTABLE>
    1360:	1c00000f 	stcne	0, cr0, [r0], {15}
    1364:	1aef0e00 	bne	ffbc4b6c <__cs3_heap_end+0xbfbc4b6c>
    1368:	fa060000 	blx	181370 <__cs3_heap_start+0x67cd0>
    136c:	000fb318 	andeq	fp, pc, r8, lsl r3	; <UNPREDICTABLE>
    1370:	0f320800 	svceq	0x00320800
    1374:	410b0000 	mrsmi	r0, (UNDEF: 11)
    1378:	20000005 	andcs	r0, r0, r5
    137c:	2d18fc06 	ldccs	12, cr15, [r8, #-24]	; 0xffffffe8
    1380:	0f000010 	svceq	0x00000010
    1384:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
    1388:	d418fe06 	ldrle	pc, [r8], #-3590	; 0xfffff1fa
    138c:	00000000 	andeq	r0, r0, r0
    1390:	000ae610 	andeq	lr, sl, r0, lsl r6
    1394:	18ff0600 	ldmne	pc!, {r9, sl}^	; <UNPREDICTABLE>
    1398:	000000d4 	ldrdeq	r0, [r0], -r4
    139c:	12111004 	andsne	r1, r1, #4
    13a0:	00060000 	andeq	r0, r6, r0
    13a4:	0000d419 	andeq	sp, r0, r9, lsl r4
    13a8:	c0100800 	andsgt	r0, r0, r0, lsl #16
    13ac:	06000003 	streq	r0, [r0], -r3
    13b0:	00d41901 	sbcseq	r1, r4, r1, lsl #18
    13b4:	100c0000 	andne	r0, ip, r0
    13b8:	00000d66 	andeq	r0, r0, r6, ror #26
    13bc:	d4190206 	ldrle	r0, [r9], #-518	; 0xfffffdfa
    13c0:	10000000 	andne	r0, r0, r0
    13c4:	000e5410 	andeq	r5, lr, r0, lsl r4
    13c8:	19030600 	stmdbne	r3, {r9, sl}
    13cc:	000000d4 	ldrdeq	r0, [r0], -r4
    13d0:	6e650f14 	mcrvs	15, 3, r0, cr5, cr4, {0}
    13d4:	19040600 	stmdbne	r4, {r9, sl}
    13d8:	000000d4 	ldrdeq	r0, [r0], -r4
    13dc:	0b341018 	bleq	d05444 <__cs3_heap_start+0xbebda4>
    13e0:	05060000 	streq	r0, [r6, #-0]
    13e4:	0000d419 	andeq	sp, r0, r9, lsl r4
    13e8:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
    13ec:	00001bc8 	andeq	r1, r0, r8, asr #23
    13f0:	39190906 	ldmdbcc	r9, {r1, r2, r8, fp}
    13f4:	08000010 	stmdaeq	r0, {r4}
    13f8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    13fc:	0003aa11 	andeq	sl, r3, r1, lsl sl
    1400:	002c0100 	eoreq	r0, ip, r0, lsl #2
    1404:	3a070000 	bcc	1c140c <__cs3_heap_start+0xa7d6c>
    1408:	00001061 	andeq	r1, r0, r1, rrx
    140c:	0014cd12 	andseq	ip, r4, r2, lsl sp
    1410:	4a120000 	bmi	481418 <__cs3_heap_start+0x367d78>
    1414:	0100001d 	tsteq	r0, sp, lsl r0
    1418:	0011b212 	andseq	fp, r1, r2, lsl r2
    141c:	03000200 	movweq	r0, #512	; 0x200
    1420:	000003e9 	andeq	r0, r0, r9, ror #7
    1424:	103e4207 	eorsne	r4, lr, r7, lsl #4
    1428:	40130000 	andsmi	r0, r3, r0
    142c:	108b5e07 	addne	r5, fp, r7, lsl #28
    1430:	66140000 	ldrvs	r0, [r4], -r0
    1434:	0700646c 	streq	r6, [r0, -ip, ror #8]
    1438:	0005ea60 	andeq	lr, r5, r0, ror #20
    143c:	61721400 	cmnvs	r2, r0, lsl #8
    1440:	61070077 	tstvs	r7, r7, ror r0
    1444:	000006cb 	andeq	r0, r0, fp, asr #13
    1448:	07401300 	strbeq	r1, [r0, -r0, lsl #6]
    144c:	0010aa65 	andseq	sl, r0, r5, ror #20
    1450:	6c661400 	cfstrdvs	mvd1, [r6], #-0
    1454:	67070064 	strvs	r0, [r7, -r4, rrx]
    1458:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
    145c:	77617214 			; <UNDEFINED> instruction: 0x77617214
    1460:	8a680700 	bhi	1a03068 <__cs3_heap_start+0x18e99c8>
    1464:	0000000c 	andeq	r0, r0, ip
    1468:	6c072013 	stcvs	0, cr2, [r7], {19}
    146c:	000010c9 	andeq	r1, r0, r9, asr #1
    1470:	646c6614 	strbtvs	r6, [ip], #-1556	; 0xfffff9ec
    1474:	a76e0700 	strbge	r0, [lr, -r0, lsl #14]!
    1478:	1400000f 	strne	r0, [r0], #-15
    147c:	00776172 	rsbseq	r6, r7, r2, ror r1
    1480:	102d6f07 	eorne	r6, sp, r7, lsl #30
    1484:	15000000 	strne	r0, [r0, #-0]
    1488:	000012bf 			; <UNDEFINED> instruction: 0x000012bf
    148c:	f75b0740 			; <UNDEFINED> instruction: 0xf75b0740
    1490:	16000010 			; <UNDEFINED> instruction: 0x16000010
    1494:	00000be1 	andeq	r0, r0, r1, ror #23
    1498:	106c6207 	rsbne	r6, ip, r7, lsl #4
    149c:	61160000 	tstvs	r6, r0
    14a0:	0700000b 	streq	r0, [r0, -fp]
    14a4:	00108b69 	andseq	r8, r0, r9, ror #22
    14a8:	19481600 	stmdbne	r8, {r9, sl, ip}^
    14ac:	70070000 	andvc	r0, r7, r0
    14b0:	000010aa 	andeq	r1, r0, sl, lsr #1
    14b4:	128f1700 	addne	r1, pc, #0, 14
    14b8:	074c0000 	strbeq	r0, [ip, -r0]
    14bc:	00113448 	andseq	r3, r1, r8, asr #8
    14c0:	06da1800 	ldrbeq	r1, [sl], r0, lsl #16
    14c4:	4a070000 	bmi	1c14cc <__cs3_heap_start+0xa7e2c>
    14c8:	00000097 	muleq	r0, r7, r0
    14cc:	13d41800 	bicsne	r1, r4, #0, 16
    14d0:	51070000 	mrspl	r0, (UNDEF: 7)
    14d4:	00000097 	muleq	r0, r7, r0
    14d8:	1ce51804 	stclne	8, cr1, [r5], #16
    14dc:	54070000 	strpl	r0, [r7], #-0
    14e0:	00001061 	andeq	r1, r0, r1, rrx
    14e4:	1e151808 	cdpne	8, 1, cr1, cr5, cr8, {0}
    14e8:	72070000 	andvc	r0, r7, #0
    14ec:	000010c9 	andeq	r1, r0, r9, asr #1
    14f0:	a703000c 	strge	r0, [r3, -ip]
    14f4:	07000012 	smladeq	r0, r2, r0, r0
    14f8:	0010f773 	andseq	pc, r0, r3, ror r7	; <UNPREDICTABLE>
    14fc:	17a10300 	strne	r0, [r1, r0, lsl #6]!
    1500:	42080000 	andmi	r0, r8, #0
    1504:	00000097 	muleq	r0, r7, r0
    1508:	00140311 	andseq	r0, r4, r1, lsl r3
    150c:	002c0100 	eoreq	r0, ip, r0, lsl #2
    1510:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
    1514:	00001323 	andeq	r1, r0, r3, lsr #6
    1518:	001cd112 	andseq	sp, ip, r2, lsl r1
    151c:	9e120000 	cdpls	0, 1, cr0, cr2, cr0, {0}
    1520:	01000011 	tsteq	r0, r1, lsl r0
    1524:	00136512 	andseq	r6, r3, r2, lsl r5
    1528:	76120200 	ldrvc	r0, [r2], -r0, lsl #4
    152c:	03000017 	movweq	r0, #23
    1530:	00126b12 	andseq	r6, r2, r2, lsl fp
    1534:	4b120400 	blmi	48253c <__cs3_heap_start+0x368e9c>
    1538:	0500000c 	streq	r0, [r0, #-12]
    153c:	000c6012 	andeq	r6, ip, r2, lsl r0
    1540:	0f120600 	svceq	0x00120600
    1544:	0700000a 	streq	r0, [r0, -sl]
    1548:	0019ee12 	andseq	lr, r9, r2, lsl lr
    154c:	17120800 	ldrne	r0, [r2, -r0, lsl #16]
    1550:	09000010 	stmdbeq	r0, {r4}
    1554:	000d4f12 	andeq	r4, sp, r2, lsl pc
    1558:	3c120a00 	ldccc	10, cr0, [r2], {-0}
    155c:	0b000004 	bleq	1574 <__cs3_region_num+0x1572>
    1560:	0004a012 	andeq	sl, r4, r2, lsl r0
    1564:	83120c00 	tsthi	r2, #0, 24
    1568:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    156c:	00189712 	andseq	r9, r8, r2, lsl r7
    1570:	ab120e00 	blge	484d78 <__cs3_heap_start+0x36b6d8>
    1574:	0f000018 	svceq	0x00000018
    1578:	0018bf12 	andseq	fp, r8, r2, lsl pc
    157c:	f1121000 			; <UNDEFINED> instruction: 0xf1121000
    1580:	11000005 	tstne	r0, r5
    1584:	001cbd12 	andseq	fp, ip, r2, lsl sp
    1588:	86121200 	ldrhi	r1, [r2], -r0, lsl #4
    158c:	13000007 	movwne	r0, #7
    1590:	00041112 	andeq	r1, r4, r2, lsl r1
    1594:	17121400 	ldrne	r1, [r2, -r0, lsl #8]
    1598:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    159c:	00079212 	andeq	r9, r7, r2, lsl r2
    15a0:	00121600 	andseq	r1, r2, r0, lsl #12
    15a4:	17000007 	strne	r0, [r0, -r7]
    15a8:	0011e012 	andseq	lr, r1, r2, lsl r0
    15ac:	0c121800 	ldceq	8, cr1, [r2], {-0}
    15b0:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    15b4:	0014e212 	andseq	lr, r4, r2, lsl r2
    15b8:	85121a00 	ldrhi	r1, [r2, #-2560]	; 0xfffff600
    15bc:	1b000006 	blne	15dc <__cs3_region_num+0x15da>
    15c0:	000ee712 	andeq	lr, lr, r2, lsl r7
    15c4:	2d121c00 	ldccs	12, cr1, [r2, #-0]
    15c8:	1d00001c 	stcne	0, cr0, [r0, #-112]	; 0xffffff90
    15cc:	00107112 	andseq	r7, r0, r2, lsl r1
    15d0:	67121e00 	ldrvs	r1, [r2, -r0, lsl #28]
    15d4:	1f000009 	svcne	0x00000009
    15d8:	000e8612 	andeq	r8, lr, r2, lsl r6
    15dc:	90122000 	andsls	r2, r2, r0
    15e0:	21000003 	tstcs	r0, r3
    15e4:	0005c412 	andeq	ip, r5, r2, lsl r4
    15e8:	0b122200 	bleq	489df0 <__cs3_heap_start+0x370750>
    15ec:	23000019 	movwcs	r0, #25
    15f0:	00055912 	andeq	r5, r5, r2, lsl r9
    15f4:	92122400 	andsls	r2, r2, #0, 8
    15f8:	25000016 	strcs	r0, [r0, #-22]	; 0xffffffea
    15fc:	00154312 	andseq	r4, r5, r2, lsl r3
    1600:	5d122600 	ldcpl	6, cr2, [r2, #-0]
    1604:	27000015 	smladcs	r0, r5, r0, r0
    1608:	00157712 	andseq	r7, r5, r2, lsl r7
    160c:	91122800 	tstls	r2, r0, lsl #16
    1610:	29000015 	stmdbcs	r0, {r0, r2, r4}
    1614:	0015ab12 	andseq	sl, r5, r2, lsl fp
    1618:	55122a00 	ldrpl	r2, [r2, #-2560]	; 0xfffff600
    161c:	2b000006 	blcs	163c <__cs3_region_num+0x163a>
    1620:	001b9012 	andseq	r9, fp, r2, lsl r0
    1624:	56122c00 	ldrpl	r2, [r2], -r0, lsl #24
    1628:	2d000016 	stccs	0, cr0, [r0, #-88]	; 0xffffffa8
    162c:	00147012 	andseq	r7, r4, r2, lsl r0
    1630:	94122e00 	ldrls	r2, [r2], #-3584	; 0xfffff200
    1634:	2f000005 	svccs	0x00000005
    1638:	000c7512 	andeq	r7, ip, r2, lsl r5
    163c:	df123000 	svcle	0x00123000
    1640:	31000002 	tstcc	r0, r2
    1644:	0002ed12 	andeq	lr, r2, r2, lsl sp
    1648:	5c123200 	lfmpl	f3, 4, [r2], {-0}
    164c:	33000017 	movwcc	r0, #23
    1650:	00176912 	andseq	r6, r7, r2, lsl r9
    1654:	d9123400 	ldmdble	r2, {sl, ip, sp}
    1658:	35000003 	strcc	r0, [r0, #-3]
    165c:	0016c512 	andseq	ip, r6, r2, lsl r5
    1660:	4e123600 	cfmsub32mi	mvax0, mvfx3, mvfx2, mvfx0
    1664:	37000004 	strcc	r0, [r0, -r4]
    1668:	00046312 	andeq	r6, r4, r2, lsl r3
    166c:	99123800 	ldmdbls	r2, {fp, ip, sp}
    1670:	3900000c 	stmdbcc	r0, {r2, r3}
    1674:	00180312 	andseq	r0, r8, r2, lsl r3
    1678:	18123a00 	ldmdane	r2, {r9, fp, ip, sp}
    167c:	3b000018 	blcc	16e4 <__cs3_region_num+0x16e2>
    1680:	00048b12 	andeq	r8, r4, r2, lsl fp
    1684:	8c123c00 	ldchi	12, cr3, [r2], {-0}
    1688:	3d000017 	stccc	0, cr0, [r0, #-92]	; 0xffffffa4
    168c:	001c5912 	andseq	r5, ip, r2, lsl r9
    1690:	3f123e00 	svccc	0x00123e00
    1694:	3f000018 	svccc	0x00000018
    1698:	00057c12 	andeq	r7, r5, r2, lsl ip
    169c:	e0124000 	ands	r4, r2, r0
    16a0:	4100001b 	tstmi	r0, fp, lsl r0
    16a4:	000df612 	andeq	pc, sp, r2, lsl r6	; <UNPREDICTABLE>
    16a8:	c5124200 	ldrgt	r4, [r2, #-512]	; 0xfffffe00
    16ac:	43000019 	movwmi	r0, #25
    16b0:	000b1b12 	andeq	r1, fp, r2, lsl fp
    16b4:	31124400 	tstcc	r2, r0, lsl #8
    16b8:	4500001d 	strmi	r0, [r0, #-29]	; 0xffffffe3
    16bc:	0013dc12 	andseq	sp, r3, r2, lsl ip
    16c0:	57124600 	ldrpl	r4, [r2, -r0, lsl #12]
    16c4:	4700000a 	strmi	r0, [r0, -sl]
    16c8:	000f3012 	andeq	r3, pc, r2, lsl r0	; <UNPREDICTABLE>
    16cc:	46124800 	ldrmi	r4, [r2], -r0, lsl #16
    16d0:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    16d4:	00100212 	andseq	r0, r0, r2, lsl r2
    16d8:	7f124a00 	svcvc	0x00124a00
    16dc:	4b000012 	blmi	172c <__cs3_region_num+0x172a>
    16e0:	0b930e00 	bleq	fe4c4ee8 <__cs3_heap_end+0xbe4c4ee8>
    16e4:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
    16e8:	00114a01 	andseq	r4, r1, r1, lsl #20
    16ec:	1e2c1900 	cdpne	9, 2, cr1, cr12, cr0, {0}
    16f0:	2c010000 	stccs	0, cr0, [r1], {-0}
    16f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16f8:	13650208 	cmnne	r5, #8, 4	; 0x80000000
    16fc:	60120000 	andsvs	r0, r2, r0
    1700:	0100000e 	tsteq	r0, lr
    1704:	001b0b12 	andseq	r0, fp, r2, lsl fp
    1708:	64120200 	ldrvs	r0, [r2], #-512	; 0xfffffe00
    170c:	04000006 	streq	r0, [r0], #-6
    1710:	000ceb12 	andeq	lr, ip, r2, lsl fp
    1714:	ac120800 	ldcge	8, cr0, [r2], {-0}
    1718:	10000016 	andne	r0, r0, r6, lsl r0
    171c:	001d0f12 	andseq	r0, sp, r2, lsl pc
    1720:	0e002000 	cdpeq	0, 0, cr2, cr0, cr0, {0}
    1724:	00001e79 	andeq	r1, r0, r9, ror lr
    1728:	2f022808 	svccs	0x00022808
    172c:	19000013 	stmdbne	r0, {r0, r1, r4}
    1730:	00000898 	muleq	r0, r8, r8
    1734:	00002c01 	andeq	r2, r0, r1, lsl #24
    1738:	028f0800 	addeq	r0, pc, #0, 16
    173c:	0000138f 	andeq	r1, r0, pc, lsl #7
    1740:	000ed112 	andeq	sp, lr, r2, lsl r1
    1744:	fb120000 	blx	48174e <__cs3_heap_start+0x3680ae>
    1748:	01000002 	tsteq	r0, r2
    174c:	0c830e00 	stceq	14, cr0, [r3], {0}
    1750:	9b080000 	blls	201758 <__cs3_heap_start+0xe80b8>
    1754:	00137102 	andseq	r7, r3, r2, lsl #2
    1758:	16320b00 	ldrtne	r0, [r2], -r0, lsl #22
    175c:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
    1760:	13ea0400 	mvnne	r0, #0, 8
    1764:	88100000 	ldmdahi	r0, {}	; <UNPREDICTABLE>
    1768:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    176c:	13230402 			; <UNDEFINED> instruction: 0x13230402
    1770:	10000000 	andne	r0, r0, r0
    1774:	00000979 	andeq	r0, r0, r9, ror r9
    1778:	97040308 	strls	r0, [r4, -r8, lsl #6]
    177c:	04000000 	streq	r0, [r0], #-0
    1780:	7669640f 	strbtvc	r6, [r9], -pc, lsl #8
    1784:	04060800 	streq	r0, [r6], #-2048	; 0xfffff800
    1788:	00000097 	muleq	r0, r7, r0
    178c:	10a21008 	adcne	r1, r2, r8
    1790:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    1794:	0013ea04 	andseq	lr, r3, r4, lsl #20
    1798:	2b100c00 	blcs	4047a0 <__cs3_heap_start+0x2eb100>
    179c:	08000016 	stmdaeq	r0, {r1, r2, r4}
    17a0:	13ea040c 	mvnne	r0, #12, 8	; 0xc000000
    17a4:	00240000 	eoreq	r0, r4, r0
    17a8:	00009709 	andeq	r9, r0, r9, lsl #14
    17ac:	0013fa00 	andseq	pc, r3, r0, lsl #20
    17b0:	00b60a00 	adcseq	r0, r6, r0, lsl #20
    17b4:	00050000 	andeq	r0, r5, r0
    17b8:	0016440e 	andseq	r4, r6, lr, lsl #8
    17bc:	04100800 	ldreq	r0, [r0], #-2048	; 0xfffff800
    17c0:	0000139b 	muleq	r0, fp, r3
    17c4:	000aad17 	andeq	sl, sl, r7, lsl sp
    17c8:	42021000 	andmi	r1, r2, #0
    17cc:	00001455 	andeq	r1, r0, r5, asr r4
    17d0:	000e7e18 	andeq	r7, lr, r8, lsl lr
    17d4:	3f440200 	svccc	0x00440200
    17d8:	00000011 	andeq	r0, r0, r1, lsl r0
    17dc:	0007c218 	andeq	ip, r7, r8, lsl r2
    17e0:	3f450200 	svccc	0x00450200
    17e4:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    17e8:	00094218 	andeq	r4, r9, r8, lsl r2
    17ec:	3f460200 	svccc	0x00460200
    17f0:	08000011 	stmdaeq	r0, {r0, r4}
    17f4:	0015d81a 	andseq	sp, r5, sl, lsl r8
    17f8:	97470200 	strbls	r0, [r7, -r0, lsl #4]
    17fc:	04000000 	streq	r0, [r0], #-0
    1800:	1a0c1907 	bne	307c24 <__cs3_heap_start+0x1ee584>
    1804:	00003978 	andeq	r3, r0, r8, ror r9
    1808:	00974902 	addseq	r4, r7, r2, lsl #18
    180c:	01040000 	mrseq	r0, (UNDEF: 4)
    1810:	03000c18 	movweq	r0, #3096	; 0xc18
    1814:	0000161a 	andeq	r1, r0, sl, lsl r6
    1818:	14064a02 	strne	r4, [r6], #-2562	; 0xfffff5fe
    181c:	6e170000 	cdpvs	0, 1, cr0, cr7, cr0, {0}
    1820:	40000011 	andmi	r0, r0, r1, lsl r0
    1824:	149d4d02 	ldrne	r4, [sp], #3330	; 0xd02
    1828:	1c180000 	ldcne	0, cr0, [r8], {-0}
    182c:	0200001e 	andeq	r0, r0, #30
    1830:	0014554f 	andseq	r5, r4, pc, asr #10
    1834:	24180000 	ldrcs	r0, [r8], #-0
    1838:	0200001e 	andeq	r0, r0, #30
    183c:	00145550 	andseq	r5, r4, r0, asr r5
    1840:	fc181000 	ldc2	0, cr1, [r8], {-0}
    1844:	02000013 	andeq	r0, r0, #19
    1848:	00145551 	andseq	r5, r4, r1, asr r5
    184c:	e0182000 	ands	r2, r8, r0
    1850:	02000006 	andeq	r0, r0, #6
    1854:	00145552 	andseq	r5, r4, r2, asr r5
    1858:	03003000 	movweq	r3, #0
    185c:	00001186 	andeq	r1, r0, r6, lsl #3
    1860:	14605302 	strbtne	r5, [r0], #-770	; 0xfffffcfe
    1864:	f4170000 			; <UNDEFINED> instruction: 0xf4170000
    1868:	6000000a 	andvs	r0, r0, sl
    186c:	14fd6702 	ldrbtne	r6, [sp], #1794	; 0x702
    1870:	e5180000 	ldr	r0, [r8, #-0]
    1874:	02000005 	andeq	r0, r0, #5
    1878:	00145569 	andseq	r5, r4, r9, ror #10
    187c:	75180000 	ldrvc	r0, [r8, #-0]
    1880:	02000003 	andeq	r0, r0, #3
    1884:	0014556a 	andseq	r5, r4, sl, ror #10
    1888:	7e181000 	cdpvc	0, 1, cr1, cr8, cr0, {0}
    188c:	02000009 	andeq	r0, r0, #9
    1890:	0014556b 	andseq	r5, r4, fp, ror #10
    1894:	3a182000 	bcc	60989c <__cs3_heap_start+0x4f01fc>
    1898:	0200001b 	andeq	r0, r0, #27
    189c:	0014556c 	andseq	r5, r4, ip, ror #10
    18a0:	db183000 	blle	60d8a8 <__cs3_heap_start+0x4f4208>
    18a4:	02000019 	andeq	r0, r0, #25
    18a8:	0014556d 	andseq	r5, r4, sp, ror #10
    18ac:	83184000 	tsthi	r8, #0
    18b0:	02000003 	andeq	r0, r0, #3
    18b4:	0014556e 	andseq	r5, r4, lr, ror #10
    18b8:	03005000 	movweq	r5, #0
    18bc:	000004fd 	strdeq	r0, [r0], -sp
    18c0:	14a86f02 	strtne	r6, [r8], #3842	; 0xf02
    18c4:	50170000 	andspl	r0, r7, r0
    18c8:	4000001e 	andmi	r0, r0, lr, lsl r0
    18cc:	15d58702 	ldrbne	r8, [r5, #1794]	; 0x702
    18d0:	c1180000 	tstgt	r8, r0
    18d4:	02000017 	andeq	r0, r0, #23
    18d8:	00113f89 	andseq	r3, r1, r9, lsl #31
    18dc:	cc180000 	ldcgt	0, cr0, [r8], {-0}
    18e0:	02000017 	andeq	r0, r0, #23
    18e4:	00113f8a 	andseq	r3, r1, sl, lsl #31
    18e8:	d7180400 	ldrle	r0, [r8, -r0, lsl #8]
    18ec:	02000017 	andeq	r0, r0, #23
    18f0:	00113f8b 	andseq	r3, r1, fp, lsl #31
    18f4:	e2180800 	ands	r0, r8, #0, 16
    18f8:	02000017 	andeq	r0, r0, #23
    18fc:	00113f8c 	andseq	r3, r1, ip, lsl #31
    1900:	ed180c00 	ldc	12, cr0, [r8, #-0]
    1904:	02000017 	andeq	r0, r0, #23
    1908:	00113f8d 	andseq	r3, r1, sp, lsl #31
    190c:	f8181000 			; <UNDEFINED> instruction: 0xf8181000
    1910:	02000017 	andeq	r0, r0, #23
    1914:	00113f8e 	andseq	r3, r1, lr, lsl #31
    1918:	e4181400 	ldr	r1, [r8], #-1024	; 0xfffffc00
    191c:	02000010 	andeq	r0, r0, #16
    1920:	00113f8f 	andseq	r3, r1, pc, lsl #31
    1924:	f1181800 			; <UNDEFINED> instruction: 0xf1181800
    1928:	02000010 	andeq	r0, r0, #16
    192c:	00113f90 	mulseq	r1, r0, pc	; <UNPREDICTABLE>
    1930:	fe181c00 	cdp2	12, 1, cr1, cr8, cr0, {0}
    1934:	02000010 	andeq	r0, r0, #16
    1938:	00113f91 	mulseq	r1, r1, pc	; <UNPREDICTABLE>
    193c:	0b182000 	bleq	609944 <__cs3_heap_start+0x4f02a4>
    1940:	02000011 	andeq	r0, r0, #17
    1944:	00113f92 	mulseq	r1, r2, pc	; <UNPREDICTABLE>
    1948:	da182400 	ble	60a950 <__cs3_heap_start+0x4f12b0>
    194c:	02000018 	andeq	r0, r0, #24
    1950:	00113f93 	mulseq	r1, r3, pc	; <UNPREDICTABLE>
    1954:	fe182800 	cdp2	8, 1, cr2, cr8, cr0, {0}
    1958:	02000018 	andeq	r0, r0, #24
    195c:	00113f94 	mulseq	r1, r4, pc	; <UNPREDICTABLE>
    1960:	b0182c00 	andslt	r2, r8, r0, lsl #24
    1964:	02000013 	andeq	r0, r0, #19
    1968:	00113f95 	mulseq	r1, r5, pc	; <UNPREDICTABLE>
    196c:	bc183000 	ldclt	0, cr3, [r8], {-0}
    1970:	02000013 	andeq	r0, r0, #19
    1974:	00113f96 	mulseq	r1, r6, pc	; <UNPREDICTABLE>
    1978:	c8183400 	ldmdagt	r8, {sl, ip, sp}
    197c:	02000013 	andeq	r0, r0, #19
    1980:	00113f97 	mulseq	r1, r7, pc	; <UNPREDICTABLE>
    1984:	15183800 	ldrne	r3, [r8, #-2048]	; 0xfffff800
    1988:	0200000f 	andeq	r0, r0, #15
    198c:	00113f98 	mulseq	r1, r8, pc	; <UNPREDICTABLE>
    1990:	03003c00 	movweq	r3, #3072	; 0xc00
    1994:	000018e7 	andeq	r1, r0, r7, ror #17
    1998:	15089902 	strne	r9, [r8, #-2306]	; 0xfffff6fe
    199c:	3c190000 	ldccc	0, cr0, [r9], {-0}
    19a0:	0200001c 	andeq	r0, r0, #28
    19a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    19a8:	2f084a02 	svccs	0x00084a02
    19ac:	12000016 	andne	r0, r0, #22
    19b0:	0000134e 	andeq	r1, r0, lr, asr #6
    19b4:	14341200 	ldrtne	r1, [r4], #-512	; 0xfffffe00
    19b8:	12010000 	andne	r0, r1, #0
    19bc:	00000c3b 	andeq	r0, r0, fp, lsr ip
    19c0:	03171202 	tsteq	r7, #536870912	; 0x20000000
    19c4:	12040000 	andne	r0, r4, #0
    19c8:	00001e67 	andeq	r1, r0, r7, ror #28
    19cc:	1abe1208 	bne	fef861f4 <__cs3_heap_end+0xbef861f4>
    19d0:	12100000 	andsne	r0, r0, #0
    19d4:	00001b24 	andeq	r1, r0, r4, lsr #22
    19d8:	03f71220 	mvnseq	r1, #32, 4
    19dc:	12400000 	subne	r0, r0, #0
    19e0:	00000bf6 	strdeq	r0, [r0], -r6
    19e4:	09da1b80 	ldmibeq	sl, {r7, r8, r9, fp, ip}^
    19e8:	01000000 	mrseq	r0, (UNDEF: 0)
    19ec:	09bd0e00 	ldmibeq	sp!, {r9, sl, fp}
    19f0:	62020000 	andvs	r0, r2, #0
    19f4:	0015e008 	andseq	lr, r5, r8
    19f8:	0f5c1c00 	svceq	0x005c1c00
    19fc:	5b010000 	blpl	41a04 <__cs3_region_init_size_ram+0x29dac>
    1a00:	0000007e 	andeq	r0, r0, lr, ror r0
    1a04:	00100a8c 	andseq	r0, r0, ip, lsl #21
    1a08:	00000024 	andeq	r0, r0, r4, lsr #32
    1a0c:	16649c01 	strbtne	r9, [r4], -r1, lsl #24
    1a10:	d21d0000 	andsle	r0, sp, #0
    1a14:	01000003 	tsteq	r0, r3
    1a18:	0000c45b 	andeq	ip, r0, fp, asr r4
    1a1c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a20:	3e1f001e 	mrccc	0, 0, r0, cr15, cr14, {0}
    1a24:	0200000d 	andeq	r0, r0, #13
    1a28:	0ab00107 	beq	fec01e4c <__cs3_heap_end+0xbec01e4c>
    1a2c:	00480010 	subeq	r0, r8, r0, lsl r0
    1a30:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a34:	00001699 	muleq	r0, r9, r6
    1a38:	67657220 	strbvs	r7, [r5, -r0, lsr #4]!
    1a3c:	01070200 	mrseq	r0, (UNDEF: 39)
    1a40:	000000b4 	strheq	r0, [r0], -r4
    1a44:	20749102 	rsbscs	r9, r4, r2, lsl #2
    1a48:	00746e63 	rsbseq	r6, r4, r3, ror #28
    1a4c:	97010702 	strls	r0, [r1, -r2, lsl #14]
    1a50:	02000000 	andeq	r0, r0, #0
    1a54:	21007091 	swpcs	r7, r1, [r0]
    1a58:	00001c6c 	andeq	r1, r0, ip, ror #24
    1a5c:	f9011f02 			; <UNDEFINED> instruction: 0xf9011f02
    1a60:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1a64:	7c00100a 	stcvc	0, cr1, [r0], {10}
    1a68:	01000000 	mrseq	r0, (UNDEF: 0)
    1a6c:	0016d09c 	mulseq	r6, ip, r0
    1a70:	00692200 	rsbeq	r2, r9, r0, lsl #4
    1a74:	8c012102 	stfhis	f2, [r1], {2}
    1a78:	02000000 	andeq	r0, r0, #0
    1a7c:	61237491 			; <UNDEFINED> instruction: 0x61237491
    1a80:	02000007 	andeq	r0, r0, #7
    1a84:	16d00122 	ldrbne	r0, [r0], r2, lsr #2
    1a88:	91020000 	mrsls	r0, (UNDEF: 2)
    1a8c:	01020073 	tsteq	r2, r3, ror r0
    1a90:	00028702 	andeq	r8, r2, r2, lsl #14
    1a94:	108c2400 	addne	r2, ip, r0, lsl #8
    1a98:	2c020000 	stccs	0, cr0, [r2], {-0}
    1a9c:	0000f901 	andeq	pc, r0, r1, lsl #18
    1aa0:	100b7400 	andne	r7, fp, r0, lsl #8
    1aa4:	0000c400 	andeq	ip, r0, r0, lsl #8
    1aa8:	389c0100 	ldmcc	ip, {r8}
    1aac:	20000017 	andcs	r0, r0, r7, lsl r0
    1ab0:	006c6c70 	rsbeq	r6, ip, r0, ror ip
    1ab4:	23012c02 	movwcs	r2, #7170	; 0x1c02
    1ab8:	02000013 	andeq	r0, r0, #19
    1abc:	67256f91 			; <UNDEFINED> instruction: 0x67256f91
    1ac0:	0200001a 	andeq	r0, r0, #26
    1ac4:	0097012c 	addseq	r0, r7, ip, lsr #2
    1ac8:	91020000 	mrsls	r0, (UNDEF: 2)
    1acc:	0d992368 	ldceq	3, cr2, [r9, #416]	; 0x1a0
    1ad0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    1ad4:	00009701 	andeq	r9, r0, r1, lsl #14
    1ad8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1adc:	100be426 	andne	lr, fp, r6, lsr #8
    1ae0:	00002c00 	andeq	r2, r0, r0, lsl #24
    1ae4:	0d8e2300 	stceq	3, cr2, [lr]
    1ae8:	3a020000 	bcc	81af0 <__cs3_region_init_size_ram+0x69e98>
    1aec:	00009701 	andeq	r9, r0, r1, lsl #14
    1af0:	70910200 	addsvc	r0, r1, r0, lsl #4
    1af4:	151f0000 	ldrne	r0, [pc, #-0]	; 1afc <__cs3_region_zero_size_ram+0xb4>
    1af8:	0200000e 	andeq	r0, r0, #14
    1afc:	0c380163 	ldfeqs	f0, [r8], #-396	; 0xfffffe74
    1b00:	009c0010 	addseq	r0, ip, r0, lsl r0
    1b04:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b08:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    1b0c:	001b0325 	andseq	r0, fp, r5, lsr #6
    1b10:	01630200 	cmneq	r3, r0, lsl #4
    1b14:	000000b4 	strheq	r0, [r0], -r4
    1b18:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    1b1c:	00000f21 	andeq	r0, r0, r1, lsr #30
    1b20:	b4016302 	strlt	r6, [r1], #-770	; 0xfffffcfe
    1b24:	02000000 	andeq	r0, r0, #0
    1b28:	83256891 			; <UNDEFINED> instruction: 0x83256891
    1b2c:	02000010 	andeq	r0, r0, #16
    1b30:	00b40163 	adcseq	r0, r4, r3, ror #2
    1b34:	91020000 	mrsls	r0, (UNDEF: 2)
    1b38:	61762064 	cmnvs	r6, r4, rrx
    1b3c:	6402006c 	strvs	r0, [r2], #-108	; 0xffffff94
    1b40:	00009701 	andeq	r9, r0, r1, lsl #14
    1b44:	60910200 	addsvs	r0, r1, r0, lsl #4
    1b48:	6b736d20 	blvs	1cdcfd0 <__cs3_heap_start+0x1bc3930>
    1b4c:	01640200 	cmneq	r4, r0, lsl #4
    1b50:	00000097 	muleq	r0, r7, r0
    1b54:	25009102 	strcs	r9, [r0, #-258]	; 0xfffffefe
    1b58:	0000067f 	andeq	r0, r0, pc, ror r6
    1b5c:	97016402 	strls	r6, [r1, -r2, lsl #8]
    1b60:	02000000 	andeq	r0, r0, #0
    1b64:	f8230491 			; <UNDEFINED> instruction: 0xf8230491
    1b68:	02000000 	andeq	r0, r0, #0
    1b6c:	00d40169 	sbcseq	r0, r4, r9, ror #2
    1b70:	91020000 	mrsls	r0, (UNDEF: 2)
    1b74:	15210074 	strne	r0, [r1, #-116]!	; 0xffffff8c
    1b78:	02000005 	andeq	r0, r0, #5
    1b7c:	00f90184 	rscseq	r0, r9, r4, lsl #3
    1b80:	0cd40000 	ldcleq	0, cr0, [r4], {0}
    1b84:	00600010 	rsbeq	r0, r0, r0, lsl r0
    1b88:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b8c:	000017e2 	andeq	r1, r0, r2, ror #15
    1b90:	000b0c25 	andeq	r0, fp, r5, lsr #24
    1b94:	01840200 	orreq	r0, r4, r0, lsl #4
    1b98:	00001365 	andeq	r1, r0, r5, ror #6
    1b9c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1ba0:	000da527 	andeq	sl, sp, r7, lsr #10
    1ba4:	019c0200 	orrseq	r0, ip, r0, lsl #4
    1ba8:	00000097 	muleq	r0, r7, r0
    1bac:	00100d34 	andseq	r0, r0, r4, lsr sp
    1bb0:	00000028 	andeq	r0, r0, r8, lsr #32
    1bb4:	3f219c01 	svccc	0x00219c01
    1bb8:	02000006 	andeq	r0, r0, #6
    1bbc:	00f901af 	rscseq	r0, r9, pc, lsr #3
    1bc0:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    1bc4:	00c80010 	sbceq	r0, r8, r0, lsl r0
    1bc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bcc:	00001831 	andeq	r1, r0, r1, lsr r8
    1bd0:	6c6c7020 	stclvs	0, cr7, [ip], #-128	; 0xffffff80
    1bd4:	01af0200 			; <UNDEFINED> instruction: 0x01af0200
    1bd8:	00001323 	andeq	r1, r0, r3, lsr #6
    1bdc:	236f9102 	cmncs	pc, #-2147483648	; 0x80000000
    1be0:	00000d92 	muleq	r0, r2, sp
    1be4:	f901b102 			; <UNDEFINED> instruction: 0xf901b102
    1be8:	02000000 	andeq	r0, r0, #0
    1bec:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1bf0:	000007a2 	andeq	r0, r0, r2, lsr #15
    1bf4:	f901cb02 			; <UNDEFINED> instruction: 0xf901cb02
    1bf8:	24000000 	strcs	r0, [r0], #-0
    1bfc:	9400100e 	strls	r1, [r0], #-14
    1c00:	01000000 	mrseq	r0, (UNDEF: 0)
    1c04:	00186a9c 	mulseq	r8, ip, sl
    1c08:	0d922300 	ldceq	3, cr2, [r2]
    1c0c:	cd020000 	stcgt	0, cr0, [r2, #-0]
    1c10:	0000f901 	andeq	pc, r0, r1, lsl #18
    1c14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c18:	0000f823 	andeq	pc, r0, r3, lsr #16
    1c1c:	01cf0200 	biceq	r0, pc, r0, lsl #4
    1c20:	00000097 	muleq	r0, r7, r0
    1c24:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1c28:	0019ad21 	andseq	sl, r9, r1, lsr #26
    1c2c:	01ed0200 	mvneq	r0, r0, lsl #4
    1c30:	000016d0 	ldrdeq	r1, [r0], -r0
    1c34:	00100eb8 			; <UNDEFINED> instruction: 0x00100eb8
    1c38:	000000c8 	andeq	r0, r0, r8, asr #1
    1c3c:	18b29c01 	ldmne	r2!, {r0, sl, fp, ip, pc}
    1c40:	21250000 			; <UNDEFINED> instruction: 0x21250000
    1c44:	02000017 	andeq	r0, r0, #23
    1c48:	138f01ed 	orrne	r0, pc, #1073741883	; 0x4000003b
    1c4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c50:	6572226f 	ldrbvs	r2, [r2, #-623]!	; 0xfffffd91
    1c54:	ef020074 	svc	0x00020074
    1c58:	0016d001 	andseq	sp, r6, r1
    1c5c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1c60:	0000f823 	andeq	pc, r0, r3, lsr #16
    1c64:	01f00200 	mvnseq	r0, r0, lsl #4
    1c68:	00000097 	muleq	r0, r7, r0
    1c6c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1c70:	000cb328 	andeq	fp, ip, r8, lsr #6
    1c74:	020e0200 	andeq	r0, lr, #0, 4
    1c78:	000000f9 	strdeq	r0, [r0], -r9
    1c7c:	00100f80 	andseq	r0, r0, r0, lsl #31
    1c80:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1c84:	19279c01 	stmdbne	r7!, {r0, sl, fp, ip, pc}
    1c88:	70200000 	eorvc	r0, r0, r0
    1c8c:	02006c6c 	andeq	r6, r0, #108, 24	; 0x6c00
    1c90:	1323020e 			; <UNDEFINED> instruction: 0x1323020e
    1c94:	91020000 	mrsls	r0, (UNDEF: 2)
    1c98:	0d922367 	ldceq	3, cr2, [r2, #412]	; 0x19c
    1c9c:	10020000 	andne	r0, r2, r0
    1ca0:	0000f902 	andeq	pc, r0, r2, lsl #18
    1ca4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ca8:	0000f823 	andeq	pc, r0, r3, lsr #16
    1cac:	02110200 	andseq	r0, r1, #0, 4
    1cb0:	00000097 	muleq	r0, r7, r0
    1cb4:	23709102 	cmncs	r0, #-2147483648	; 0x80000000
    1cb8:	00000ba7 	andeq	r0, r0, r7, lsr #23
    1cbc:	97021302 	strls	r1, [r2, -r2, lsl #6]
    1cc0:	02000000 	andeq	r0, r0, #0
    1cc4:	7a236891 	bvc	8dbf10 <__cs3_heap_start+0x7c2870>
    1cc8:	02000008 	andeq	r0, r0, #8
    1ccc:	16d00214 			; <UNDEFINED> instruction: 0x16d00214
    1cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd4:	0884236f 	stmeq	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sp}
    1cd8:	15020000 	strne	r0, [r2, #-0]
    1cdc:	0016d002 	andseq	sp, r6, r2
    1ce0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1ce4:	06e62800 	strbteq	r2, [r6], r0, lsl #16
    1ce8:	90020000 	andls	r0, r2, r0
    1cec:	0000f902 	andeq	pc, r0, r2, lsl #18
    1cf0:	10133c00 	andsne	r3, r3, r0, lsl #24
    1cf4:	00036000 	andeq	r6, r3, r0
    1cf8:	ab9c0100 	blge	fe702100 <__cs3_heap_end+0xbe702100>
    1cfc:	20000019 	andcs	r0, r0, r9, lsl r0
    1d00:	006c6c70 	rsbeq	r6, ip, r0, ror ip
    1d04:	23029002 	movwcs	r9, #8194	; 0x2002
    1d08:	02000013 	andeq	r0, r0, #19
    1d0c:	85256791 	strhi	r6, [r5, #-1937]!	; 0xfffff86f
    1d10:	0200000b 	andeq	r0, r0, #11
    1d14:	16d00290 			; <UNDEFINED> instruction: 0x16d00290
    1d18:	91020000 	mrsls	r0, (UNDEF: 2)
    1d1c:	0d922366 	ldceq	3, cr2, [r2, #408]	; 0x198
    1d20:	92020000 	andls	r0, r2, #0
    1d24:	0000f902 	andeq	pc, r0, r2, lsl #18
    1d28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d2c:	0000f823 	andeq	pc, r0, r3, lsr #16
    1d30:	02930200 	addseq	r0, r3, #0, 4
    1d34:	00000097 	muleq	r0, r7, r0
    1d38:	23709102 	cmncs	r0, #-2147483648	; 0x80000000
    1d3c:	00000ba7 	andeq	r0, r0, r7, lsr #23
    1d40:	97029502 	strls	r9, [r2, -r2, lsl #10]
    1d44:	02000000 	andeq	r0, r0, #0
    1d48:	7a236891 	bvc	8dbf94 <__cs3_heap_start+0x7c28f4>
    1d4c:	02000008 	andeq	r0, r0, #8
    1d50:	16d00296 			; <UNDEFINED> instruction: 0x16d00296
    1d54:	91020000 	mrsls	r0, (UNDEF: 2)
    1d58:	0884236f 	stmeq	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sp}
    1d5c:	97020000 	strls	r0, [r2, -r0]
    1d60:	0016d002 	andseq	sp, r6, r2
    1d64:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1d68:	0c0c2100 	stfeqs	f2, [ip], {-0}
    1d6c:	06020000 	streq	r0, [r2], -r0
    1d70:	0000f903 	andeq	pc, r0, r3, lsl #18
    1d74:	10169c00 	andsne	r9, r6, r0, lsl #24
    1d78:	00012400 	andeq	r2, r1, r0, lsl #8
    1d7c:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    1d80:	20000019 	andcs	r0, r0, r9, lsl r0
    1d84:	006c6c70 	rsbeq	r6, ip, r0, ror ip
    1d88:	23030602 	movwcs	r0, #13826	; 0x3602
    1d8c:	02000013 	andeq	r0, r0, #19
    1d90:	92236f91 	eorls	r6, r3, #580	; 0x244
    1d94:	0200000d 	andeq	r0, r0, #13
    1d98:	00f90308 	rscseq	r0, r9, r8, lsl #6
    1d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1da0:	24210074 	strtcs	r0, [r1], #-116	; 0xffffff8c
    1da4:	0200000c 	andeq	r0, r0, #12
    1da8:	13230324 			; <UNDEFINED> instruction: 0x13230324
    1dac:	17c00000 	strbne	r0, [r0, r0]
    1db0:	011c0010 	tsteq	ip, r0, lsl r0
    1db4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1db8:	00001a2c 	andeq	r1, r0, ip, lsr #20
    1dbc:	6c6c7020 	stclvs	0, cr7, [ip], #-128	; 0xffffff80
    1dc0:	03240200 			; <UNDEFINED> instruction: 0x03240200
    1dc4:	00001323 	andeq	r1, r0, r3, lsr #6
    1dc8:	226f9102 	rsbcs	r9, pc, #-2147483648	; 0x80000000
    1dcc:	00746572 	rsbseq	r6, r4, r2, ror r5
    1dd0:	23032602 	movwcs	r2, #13826	; 0x3602
    1dd4:	02000013 	andeq	r0, r0, #19
    1dd8:	f8237791 			; <UNDEFINED> instruction: 0xf8237791
    1ddc:	02000000 	andeq	r0, r0, #0
    1de0:	00970327 	addseq	r0, r7, r7, lsr #6
    1de4:	91020000 	mrsls	r0, (UNDEF: 2)
    1de8:	58280070 	stmdapl	r8!, {r4, r5, r6}
    1dec:	02000011 	andeq	r0, r0, #17
    1df0:	00f90357 	rscseq	r0, r9, r7, asr r3
    1df4:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
    1df8:	04b00010 	ldrteq	r0, [r0], #16
    1dfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e00:	00001a65 	andeq	r1, r0, r5, ror #20
    1e04:	6b6c6320 	blvs	1b1aa8c <__cs3_heap_start+0x1a013ec>
    1e08:	03570200 	cmpeq	r7, #0, 4
    1e0c:	00001323 	andeq	r1, r0, r3, lsr #6
    1e10:	236f9102 	cmncs	pc, #-2147483648	; 0x80000000
    1e14:	00000d92 	muleq	r0, r2, sp
    1e18:	f9035902 			; <UNDEFINED> instruction: 0xf9035902
    1e1c:	02000000 	andeq	r0, r0, #0
    1e20:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    1e24:	0000149a 	muleq	r0, sl, r4
    1e28:	f903c802 			; <UNDEFINED> instruction: 0xf903c802
    1e2c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1e30:	bc00101d 	stclt	0, cr1, [r0], {29}
    1e34:	01000004 	tsteq	r0, r4
    1e38:	001a9e9c 	mulseq	sl, ip, lr
    1e3c:	6c632000 	stclvs	0, cr2, [r3], #-0
    1e40:	c802006b 	stmdagt	r2, {r0, r1, r3, r5, r6}
    1e44:	00132303 	andseq	r2, r3, r3, lsl #6
    1e48:	6f910200 	svcvs	0x00910200
    1e4c:	000d9223 	andeq	r9, sp, r3, lsr #4
    1e50:	03ca0200 	biceq	r0, sl, #0, 4
    1e54:	000000f9 	strdeq	r0, [r0], -r9
    1e58:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e5c:	0008b528 	andeq	fp, r8, r8, lsr #10
    1e60:	043b0200 	ldrteq	r0, [fp], #-512	; 0xfffffe00
    1e64:	000000f9 	strdeq	r0, [r0], -r9
    1e68:	00102248 	andseq	r2, r0, r8, asr #4
    1e6c:	000005cc 	andeq	r0, r0, ip, asr #11
    1e70:	1ad79c01 	bne	ff5e8e7c <__cs3_heap_end+0xbf5e8e7c>
    1e74:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    1e78:	02006b6c 	andeq	r6, r0, #108, 22	; 0x1b000
    1e7c:	1323043b 			; <UNDEFINED> instruction: 0x1323043b
    1e80:	91020000 	mrsls	r0, (UNDEF: 2)
    1e84:	0d92236f 	ldceq	3, cr2, [r2, #444]	; 0x1bc
    1e88:	3d020000 	stccc	0, cr0, [r2, #-0]
    1e8c:	0000f904 	andeq	pc, r0, r4, lsl #18
    1e90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e94:	1bf92800 	blne	ffe4be9c <__cs3_heap_end+0xbfe4be9c>
    1e98:	e1020000 	mrs	r0, (UNDEF: 2)
    1e9c:	00132304 	andseq	r2, r3, r4, lsl #6
    1ea0:	10281400 	eorne	r1, r8, r0, lsl #8
    1ea4:	00078c00 	andeq	r8, r7, r0, lsl #24
    1ea8:	1f9c0100 	svcne	0x009c0100
    1eac:	2000001b 	andcs	r0, r0, fp, lsl r0
    1eb0:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    1eb4:	2304e102 	movwcs	lr, #16642	; 0x4102
    1eb8:	02000013 	andeq	r0, r0, #19
    1ebc:	72226f91 	eorvc	r6, r2, #580	; 0x244
    1ec0:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
    1ec4:	132304e3 			; <UNDEFINED> instruction: 0x132304e3
    1ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ecc:	00f82377 	rscseq	r2, r8, r7, ror r3
    1ed0:	e4020000 	str	r0, [r2], #-0
    1ed4:	00009704 	andeq	r9, r0, r4, lsl #14
    1ed8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1edc:	15c52100 	strbne	r2, [r5, #256]	; 0x100
    1ee0:	e6020000 	str	r0, [r2], -r0
    1ee4:	0000f905 	andeq	pc, r0, r5, lsl #18
    1ee8:	102fa000 	eorne	sl, pc, r0
    1eec:	0004ec00 	andeq	lr, r4, r0, lsl #24
    1ef0:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    1ef4:	2000001b 	andcs	r0, r0, fp, lsl r0
    1ef8:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    1efc:	2305e602 	movwcs	lr, #22018	; 0x5602
    1f00:	02000013 	andeq	r0, r0, #19
    1f04:	88256f91 	stmdahi	r5!, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    1f08:	0200001b 	andeq	r0, r0, #27
    1f0c:	132305e6 			; <UNDEFINED> instruction: 0x132305e6
    1f10:	91020000 	mrsls	r0, (UNDEF: 2)
    1f14:	0d92236e 	ldceq	3, cr2, [r2, #440]	; 0x1b8
    1f18:	e8020000 	stmda	r2, {}	; <UNPREDICTABLE>
    1f1c:	0000f905 	andeq	pc, r0, r5, lsl #18
    1f20:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f24:	0000f823 	andeq	pc, r0, r3, lsr #16
    1f28:	05e90200 	strbeq	r0, [r9, #512]!	; 0x200
    1f2c:	00000097 	muleq	r0, r7, r0
    1f30:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1f34:	00166321 	andseq	r6, r6, r1, lsr #6
    1f38:	069d0200 	ldreq	r0, [sp], r0, lsl #4
    1f3c:	000000f9 	strdeq	r0, [r0], -r9
    1f40:	0010348c 	andseq	r3, r0, ip, lsl #9
    1f44:	000001d8 	ldrdeq	r0, [r0], -r8
    1f48:	1bbe9c01 	blne	fefa8f54 <__cs3_heap_end+0xbefa8f54>
    1f4c:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    1f50:	02006b6c 	andeq	r6, r0, #108, 22	; 0x1b000
    1f54:	1323069d 			; <UNDEFINED> instruction: 0x1323069d
    1f58:	91020000 	mrsls	r0, (UNDEF: 2)
    1f5c:	1937256f 	ldmdbne	r7!, {r0, r1, r2, r3, r5, r6, r8, sl, sp}
    1f60:	9d020000 	stcls	0, cr0, [r2, #-0]
    1f64:	00113f06 	andseq	r3, r1, r6, lsl #30
    1f68:	68910200 	ldmvs	r1, {r9}
    1f6c:	000d9223 	andeq	r9, sp, r3, lsr #4
    1f70:	069f0200 	ldreq	r0, [pc], r0, lsl #4
    1f74:	000000f9 	strdeq	r0, [r0], -r9
    1f78:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f7c:	001ca421 	andseq	sl, ip, r1, lsr #8
    1f80:	06de0200 	ldrbeq	r0, [lr], r0, lsl #4
    1f84:	0000113f 	andeq	r1, r0, pc, lsr r1
    1f88:	00103664 	andseq	r3, r0, r4, ror #12
    1f8c:	000000b8 	strheq	r0, [r0], -r8
    1f90:	1bf79c01 	blne	ffde8f9c <__cs3_heap_end+0xbfde8f9c>
    1f94:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    1f98:	02006b6c 	andeq	r6, r0, #108, 22	; 0x1b000
    1f9c:	132306de 			; <UNDEFINED> instruction: 0x132306de
    1fa0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fa4:	6572226f 	ldrbvs	r2, [r2, #-623]!	; 0xfffffd91
    1fa8:	e0020074 	and	r0, r2, r4, ror r0
    1fac:	00009706 	andeq	r9, r0, r6, lsl #14
    1fb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fb4:	0a992100 	beq	fe64a3bc <__cs3_heap_end+0xbe64a3bc>
    1fb8:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    1fbc:	0000f906 	andeq	pc, r0, r6, lsl #18
    1fc0:	10371c00 	eorsne	r1, r7, r0, lsl #24
    1fc4:	00054000 	andeq	r4, r5, r0
    1fc8:	4e9c0100 	fmlmie	f0, f4, f0
    1fcc:	2000001c 	andcs	r0, r0, ip, lsl r0
    1fd0:	006c6c70 	rsbeq	r6, ip, r0, ror ip
    1fd4:	2306f902 	movwcs	pc, #26882	; 0x6902	; <UNPREDICTABLE>
    1fd8:	02000013 	andeq	r0, r0, #19
    1fdc:	37256f91 			; <UNDEFINED> instruction: 0x37256f91
    1fe0:	02000011 	andeq	r0, r0, #17
    1fe4:	1c4e06f9 	mcrrne	6, 15, r0, lr, cr9
    1fe8:	91020000 	mrsls	r0, (UNDEF: 2)
    1fec:	65722268 	ldrbvs	r2, [r2, #-616]!	; 0xfffffd98
    1ff0:	fb020074 	blx	821ca <__cs3_region_init_size_ram+0x6a572>
    1ff4:	0000f906 	andeq	pc, r0, r6, lsl #18
    1ff8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ffc:	0000f823 	andeq	pc, r0, r3, lsr #16
    2000:	06fc0200 	ldrbteq	r0, [ip], r0, lsl #4
    2004:	00000097 	muleq	r0, r7, r0
    2008:	00709102 	rsbseq	r9, r0, r2, lsl #2
    200c:	13fa0406 	mvnsne	r0, #100663296	; 0x6000000
    2010:	61280000 			; <UNDEFINED> instruction: 0x61280000
    2014:	02000003 	andeq	r0, r0, #3
    2018:	00f90787 	rscseq	r0, r9, r7, lsl #15
    201c:	3c5c0000 	mracc	r0, ip, acc0
    2020:	055c0010 	ldrbeq	r0, [ip, #-16]
    2024:	9c010000 	stcls	0, cr0, [r1], {-0}
    2028:	00001cab 	andeq	r1, r0, fp, lsr #25
    202c:	6c6c7020 	stclvs	0, cr7, [ip], #-128	; 0xffffff80
    2030:	07870200 	streq	r0, [r7, r0, lsl #4]
    2034:	00001323 	andeq	r1, r0, r3, lsr #6
    2038:	256f9102 	strbcs	r9, [pc, #-258]!	; 1f3e <__cs3_region_zero_size_ram+0x4f6>
    203c:	00001137 	andeq	r1, r0, r7, lsr r1
    2040:	ab078702 	blge	1e3c50 <__cs3_heap_start+0xca5b0>
    2044:	0200001c 	andeq	r0, r0, #28
    2048:	72226891 	eorvc	r6, r2, #9502720	; 0x910000
    204c:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
    2050:	00f90789 	rscseq	r0, r9, r9, lsl #15
    2054:	91020000 	mrsls	r0, (UNDEF: 2)
    2058:	00f82374 	rscseq	r2, r8, r4, ror r3
    205c:	8a020000 	bhi	82064 <__cs3_region_init_size_ram+0x6a40c>
    2060:	00009707 	andeq	r9, r0, r7, lsl #14
    2064:	70910200 	addsvc	r0, r1, r0, lsl #4
    2068:	b1040600 	tstlt	r4, r0, lsl #12
    206c:	0700001c 	smladeq	r0, ip, r0, r0
    2070:	000013fa 	strdeq	r1, [r0], -sl
    2074:	0004ad21 	andeq	sl, r4, r1, lsr #26
    2078:	08200200 	stmdaeq	r0!, {r9}
    207c:	000000f9 	strdeq	r0, [r0], -r9
    2080:	001041b8 			; <UNDEFINED> instruction: 0x001041b8
    2084:	0000015c 	andeq	r0, r0, ip, asr r1
    2088:	1d1c9c01 	ldcne	12, cr9, [ip, #-4]
    208c:	70200000 	eorvc	r0, r0, r0
    2090:	02006c6c 	andeq	r6, r0, #108, 24	; 0x6c00
    2094:	13230820 			; <UNDEFINED> instruction: 0x13230820
    2098:	91020000 	mrsls	r0, (UNDEF: 2)
    209c:	0979256f 	ldmdbeq	r9!, {r0, r1, r2, r3, r5, r6, r8, sl, sp}^
    20a0:	20020000 	andcs	r0, r2, r0
    20a4:	001d1c08 	andseq	r1, sp, r8, lsl #24
    20a8:	68910200 	ldmvs	r1, {r9}
    20ac:	76696420 	strbtvc	r6, [r9], -r0, lsr #8
    20b0:	08200200 	stmdaeq	r0!, {r9}
    20b4:	00001d1c 	andeq	r1, r0, ip, lsl sp
    20b8:	23649102 	cmncs	r4, #-2147483648	; 0x80000000
    20bc:	00000d92 	muleq	r0, r2, sp
    20c0:	f9082202 			; <UNDEFINED> instruction: 0xf9082202
    20c4:	02000000 	andeq	r0, r0, #0
    20c8:	f8237491 			; <UNDEFINED> instruction: 0xf8237491
    20cc:	02000000 	andeq	r0, r0, #0
    20d0:	00970823 	addseq	r0, r7, r3, lsr #16
    20d4:	91020000 	mrsls	r0, (UNDEF: 2)
    20d8:	04060070 	streq	r0, [r6], #-112	; 0xffffff90
    20dc:	00000097 	muleq	r0, r7, r0
    20e0:	001cef29 	andseq	lr, ip, r9, lsr #30
    20e4:	08750200 	ldmdaeq	r5!, {r9}^
    20e8:	0000162f 	andeq	r1, r0, pc, lsr #12
    20ec:	00104314 	andseq	r4, r0, r4, lsl r3
    20f0:	000007f4 	strdeq	r0, [r0], -r4
    20f4:	1e0f9c01 	cdpne	12, 0, cr9, cr15, cr1, {0}
    20f8:	70200000 	eorvc	r0, r0, r0
    20fc:	02006c6c 	andeq	r6, r0, #108, 24	; 0x6c00
    2100:	13230875 			; <UNDEFINED> instruction: 0x13230875
    2104:	91020000 	mrsls	r0, (UNDEF: 2)
    2108:	0979254f 	ldmdbeq	r9!, {r0, r1, r2, r3, r6, r8, sl, sp}^
    210c:	76020000 	strvc	r0, [r2], -r0
    2110:	00009708 	andeq	r9, r0, r8, lsl #14
    2114:	48910200 	ldmmi	r1, {r9}
    2118:	76696420 	strbtvc	r6, [r9], -r0, lsr #8
    211c:	08760200 	ldmdaeq	r6!, {r9}^
    2120:	00000097 	muleq	r0, r7, r0
    2124:	22449102 	subcs	r9, r4, #-2147483648	; 0x80000000
    2128:	00746572 	rsbseq	r6, r4, r2, ror r5
    212c:	2f087e02 	svccs	0x00087e02
    2130:	02000016 	andeq	r0, r0, #22
    2134:	f8237691 			; <UNDEFINED> instruction: 0xf8237691
    2138:	02000000 	andeq	r0, r0, #0
    213c:	0097087f 	addseq	r0, r7, pc, ror r8
    2140:	91020000 	mrsls	r0, (UNDEF: 2)
    2144:	058e2354 	streq	r2, [lr, #852]	; 0x354
    2148:	80020000 	andhi	r0, r2, r0
    214c:	00009708 	andeq	r9, r0, r8, lsl #14
    2150:	70910200 	addsvc	r0, r1, r0, lsl #4
    2154:	00140d23 	andseq	r0, r4, r3, lsr #26
    2158:	08810200 	stmeq	r1, {r9}
    215c:	00000097 	muleq	r0, r7, r0
    2160:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
    2164:	00000942 	andeq	r0, r0, r2, asr #18
    2168:	97088202 	strls	r8, [r8, -r2, lsl #4]
    216c:	02000000 	andeq	r0, r0, #0
    2170:	c2236891 	eorgt	r6, r3, #9502720	; 0x910000
    2174:	02000007 	andeq	r0, r0, #7
    2178:	00970883 	addseq	r0, r7, r3, lsl #17
    217c:	91020000 	mrsls	r0, (UNDEF: 2)
    2180:	19322364 	ldmdbne	r2!, {r2, r5, r6, r8, r9, sp}
    2184:	84020000 	strhi	r0, [r2], #-0
    2188:	00009708 	andeq	r9, r0, r8, lsl #14
    218c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2190:	0015d823 	andseq	sp, r5, r3, lsr #16
    2194:	08850200 	stmeq	r5, {r9}
    2198:	00000097 	muleq	r0, r7, r0
    219c:	235c9102 	cmpcs	ip, #-2147483648	; 0x80000000
    21a0:	00000d85 	andeq	r0, r0, r5, lsl #27
    21a4:	d0088602 	andle	r8, r8, r2, lsl #12
    21a8:	02000016 	andeq	r0, r0, #22
    21ac:	dc235b91 	stcle	11, cr5, [r3], #-580	; 0xfffffdbc
    21b0:	02000005 	andeq	r0, r0, #5
    21b4:	16d00887 	ldrbne	r0, [r0], r7, lsl #17
    21b8:	91020000 	mrsls	r0, (UNDEF: 2)
    21bc:	0bec235a 	bleq	ffb0af2c <__cs3_heap_end+0xbfb0af2c>
    21c0:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    21c4:	0016d008 	andseq	sp, r6, r8
    21c8:	53910200 	orrspl	r0, r1, #0, 4
    21cc:	1a292800 	bne	a4c1d4 <__cs3_heap_start+0x932b34>
    21d0:	2d020000 	stccs	0, cr0, [r2, #-0]
    21d4:	0000f909 	andeq	pc, r0, r9, lsl #18
    21d8:	104b0800 	subne	r0, fp, r0, lsl #16
    21dc:	00040800 	andeq	r0, r4, r0, lsl #16
    21e0:	cf9c0100 	svcgt	0x009c0100
    21e4:	2000001e 	andcs	r0, r0, lr, lsl r0
    21e8:	006c6c70 	rsbeq	r6, ip, r0, ror ip
    21ec:	23092d02 	movwcs	r2, #40194	; 0x9d02
    21f0:	02000013 	andeq	r0, r0, #19
    21f4:	79255791 	stmdbvc	r5!, {r0, r4, r7, r8, r9, sl, ip, lr}
    21f8:	02000009 	andeq	r0, r0, #9
    21fc:	0097092d 	addseq	r0, r7, sp, lsr #18
    2200:	91020000 	mrsls	r0, (UNDEF: 2)
    2204:	69642050 	stmdbvs	r4!, {r4, r6, sp}^
    2208:	2d020076 	stccs	0, cr0, [r2, #-472]	; 0xfffffe28
    220c:	00009709 	andeq	r9, r0, r9, lsl #14
    2210:	4c910200 	lfmmi	f0, 4, [r1], {0}
    2214:	74657222 	strbtvc	r7, [r5], #-546	; 0xfffffdde
    2218:	092f0200 	stmdbeq	pc!, {r9}	; <UNPREDICTABLE>
    221c:	000000f9 	strdeq	r0, [r0], -r9
    2220:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
    2224:	00001ad4 	ldrdeq	r1, [r0], -r4
    2228:	2f093002 	svccs	0x00093002
    222c:	02000016 	andeq	r0, r0, #22
    2230:	62225a91 	eorvs	r5, r2, #593920	; 0x91000
    2234:	02007079 	andeq	r7, r0, #121	; 0x79
    2238:	16d00931 			; <UNDEFINED> instruction: 0x16d00931
    223c:	91020000 	mrsls	r0, (UNDEF: 2)
    2240:	035b2373 	cmpeq	fp, #-872415231	; 0xcc000001
    2244:	32020000 	andcc	r0, r2, #0
    2248:	0000b409 	andeq	fp, r0, r9, lsl #8
    224c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2250:	000ad423 	andeq	sp, sl, r3, lsr #8
    2254:	09330200 	ldmdbeq	r3!, {r9}
    2258:	00000097 	muleq	r0, r7, r0
    225c:	23689102 	cmncs	r8, #-2147483648	; 0x80000000
    2260:	00001e46 	andeq	r1, r0, r6, asr #28
    2264:	97093302 	strls	r3, [r9, -r2, lsl #6]
    2268:	02000000 	andeq	r0, r0, #0
    226c:	2d236491 	cfstrscs	mvf6, [r3, #-580]!	; 0xfffffdbc
    2270:	02000007 	andeq	r0, r0, #7
    2274:	00970934 	addseq	r0, r7, r4, lsr r9
    2278:	91020000 	mrsls	r0, (UNDEF: 2)
    227c:	067a2360 	ldrbteq	r2, [sl], -r0, ror #6
    2280:	34020000 	strcc	r0, [r2], #-0
    2284:	00009709 	andeq	r9, r0, r9, lsl #14
    2288:	5c910200 	lfmpl	f0, 4, [r1], {0}
    228c:	11ee2800 	mvnne	r2, r0, lsl #16
    2290:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
    2294:	0000f909 	andeq	pc, r0, r9, lsl #18
    2298:	104f1000 	subne	r1, pc, r0
    229c:	00057c00 	andeq	r7, r5, r0, lsl #24
    22a0:	539c0100 	orrspl	r0, ip, #0, 2
    22a4:	2000001f 	andcs	r0, r0, pc, lsl r0
    22a8:	006c6c70 	rsbeq	r6, ip, r0, ror ip
    22ac:	2309a802 	movwcs	sl, #38914	; 0x9802
    22b0:	02000013 	andeq	r0, r0, #19
    22b4:	37255f91 			; <UNDEFINED> instruction: 0x37255f91
    22b8:	02000019 	andeq	r0, r0, #25
    22bc:	1f5309a8 	svcne	0x005309a8
    22c0:	91020000 	mrsls	r0, (UNDEF: 2)
    22c4:	0ba72358 	bleq	fe9cb02c <__cs3_heap_end+0xbe9cb02c>
    22c8:	aa020000 	bge	822d0 <__cs3_region_init_size_ram+0x6a678>
    22cc:	0000a209 	andeq	sl, r0, r9, lsl #4
    22d0:	70910200 	addsvc	r0, r1, r0, lsl #4
    22d4:	0000f823 	andeq	pc, r0, r3, lsr #16
    22d8:	09ab0200 	stmibeq	fp!, {r9}
    22dc:	00000097 	muleq	r0, r7, r0
    22e0:	23689102 	cmncs	r8, #-2147483648	; 0x80000000
    22e4:	0000058e 	andeq	r0, r0, lr, lsl #11
    22e8:	9709ac02 	strls	sl, [r9, -r2, lsl #24]
    22ec:	02000000 	andeq	r0, r0, #0
    22f0:	0d236491 	cfstrseq	mvf6, [r3, #-580]!	; 0xfffffdbc
    22f4:	02000014 	andeq	r0, r0, #20
    22f8:	009709ad 	addseq	r0, r7, sp, lsr #19
    22fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2300:	65722260 	ldrbvs	r2, [r2, #-608]!	; 0xfffffda0
    2304:	ae020074 	mcrge	0, 0, r0, cr2, cr4, {3}
    2308:	0000f909 	andeq	pc, r0, r9, lsl #18
    230c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2310:	3f040600 	svccc	0x00040600
    2314:	21000011 	tstcs	r0, r1, lsl r0
    2318:	00001b46 	andeq	r1, r0, r6, asr #22
    231c:	970a4202 	strls	r4, [sl, -r2, lsl #4]
    2320:	8c000000 	stchi	0, cr0, [r0], {-0}
    2324:	a4001054 	strge	r1, [r0], #-84	; 0xffffffac
    2328:	01000000 	mrseq	r0, (UNDEF: 0)
    232c:	001f929c 	mulseq	pc, ip, r2	; <UNPREDICTABLE>
    2330:	6c702000 	ldclvs	0, cr2, [r0], #-0
    2334:	4202006c 	andmi	r0, r2, #108	; 0x6c
    2338:	0013230a 	andseq	r2, r3, sl, lsl #6
    233c:	6f910200 	svcvs	0x00910200
    2340:	74657222 	strbtvc	r7, [r5], #-546	; 0xfffffdde
    2344:	0a440200 	beq	1102b4c <__cs3_heap_start+0xfe94ac>
    2348:	00000097 	muleq	r0, r7, r0
    234c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2350:	00147f21 	andseq	r7, r4, r1, lsr #30
    2354:	0a5a0200 	beq	1682b5c <__cs3_heap_start+0x15694bc>
    2358:	000000f9 	strdeq	r0, [r0], -r9
    235c:	00105530 	andseq	r5, r0, r0, lsr r5
    2360:	00000104 	andeq	r0, r0, r4, lsl #2
    2364:	1fda9c01 	svcne	0x00da9c01
    2368:	70200000 	eorvc	r0, r0, r0
    236c:	02006c6c 	andeq	r6, r0, #108, 24	; 0x6c00
    2370:	13230a5a 			; <UNDEFINED> instruction: 0x13230a5a
    2374:	91020000 	mrsls	r0, (UNDEF: 2)
    2378:	1a47256f 	bne	11cb93c <__cs3_heap_start+0x10b229c>
    237c:	5a020000 	bpl	82384 <__cs3_region_init_size_ram+0x6a72c>
    2380:	0000970a 	andeq	r9, r0, sl, lsl #14
    2384:	68910200 	ldmvs	r1, {r9}
    2388:	000d9223 	andeq	r9, sp, r3, lsr #4
    238c:	0a5c0200 	beq	1702b94 <__cs3_heap_start+0x15e94f4>
    2390:	000000f9 	strdeq	r0, [r0], -r9
    2394:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2398:	00084621 	andeq	r4, r8, r1, lsr #12
    239c:	0a800200 	beq	fe002ba4 <__cs3_heap_end+0xbe002ba4>
    23a0:	000000f9 	strdeq	r0, [r0], -r9
    23a4:	00105634 	andseq	r5, r0, r4, lsr r6
    23a8:	000006fc 	strdeq	r0, [r0], -ip
    23ac:	20319c01 	eorscs	r9, r1, r1, lsl #24
    23b0:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    23b4:	02006b6c 	andeq	r6, r0, #108, 22	; 0x1b000
    23b8:	13230a80 			; <UNDEFINED> instruction: 0x13230a80
    23bc:	91020000 	mrsls	r0, (UNDEF: 2)
    23c0:	6964206f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, sp}^
    23c4:	80020076 	andhi	r0, r2, r6, ror r0
    23c8:	001d1c0a 	andseq	r1, sp, sl, lsl #24
    23cc:	68910200 	ldmvs	r1, {r9}
    23d0:	000d9223 	andeq	r9, sp, r3, lsr #4
    23d4:	0a820200 	beq	fe082bdc <__cs3_heap_end+0xbe082bdc>
    23d8:	000000f9 	strdeq	r0, [r0], -r9
    23dc:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
    23e0:	000000f8 	strdeq	r0, [r0], -r8
    23e4:	970a8302 	strls	r8, [sl, -r2, lsl #6]
    23e8:	02000000 	andeq	r0, r0, #0
    23ec:	29007091 	stmdbcs	r0, {r0, r4, r7, ip, sp, lr}
    23f0:	00000bad 	andeq	r0, r0, sp, lsr #23
    23f4:	f90b8802 			; <UNDEFINED> instruction: 0xf90b8802
    23f8:	30000000 	andcc	r0, r0, r0
    23fc:	bc00105d 	stclt	0, cr1, [r0], {93}	; 0x5d
    2400:	01000004 	tsteq	r0, r4
    2404:	0020a69c 	mlaeq	r0, ip, r6, sl
    2408:	6c632000 	stclvs	0, cr2, [r3], #-0
    240c:	8802006b 	stmdahi	r2, {r0, r1, r3, r5, r6}
    2410:	0013230b 	andseq	r2, r3, fp, lsl #6
    2414:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    2418:	76696420 	strbtvc	r6, [r9], -r0, lsr #8
    241c:	0b880200 	bleq	fe202c24 <__cs3_heap_end+0xbe202c24>
    2420:	00000097 	muleq	r0, r7, r0
    2424:	23609102 	cmncs	r0, #-2147483648	; 0x80000000
    2428:	00000d92 	muleq	r0, r2, sp
    242c:	f90b8d02 			; <UNDEFINED> instruction: 0xf90b8d02
    2430:	02000000 	andeq	r0, r0, #0
    2434:	8e237491 	mcrhi	4, 1, r7, cr3, cr1, {4}
    2438:	02000005 	andeq	r0, r0, #5
    243c:	00970b8e 	addseq	r0, r7, lr, lsl #23
    2440:	91020000 	mrsls	r0, (UNDEF: 2)
    2444:	0a782368 	beq	1e0b1ec <__cs3_heap_start+0x1cf1b4c>
    2448:	8f020000 	svchi	0x00020000
    244c:	0000970b 	andeq	r9, r0, fp, lsl #14
    2450:	70910200 	addsvc	r0, r1, r0, lsl #4
    2454:	0003a223 	andeq	sl, r3, r3, lsr #4
    2458:	0b900200 	bleq	fe402c60 <__cs3_heap_end+0xbe402c60>
    245c:	00000097 	muleq	r0, r7, r0
    2460:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2464:	00152829 	andseq	r2, r5, r9, lsr #16
    2468:	0c050200 	sfmeq	f0, 4, [r5], {-0}
    246c:	000016d0 	ldrdeq	r1, [r0], -r0
    2470:	001061ec 	andseq	r6, r0, ip, ror #3
    2474:	000000a8 	andeq	r0, r0, r8, lsr #1
    2478:	20df9c01 	sbcscs	r9, pc, r1, lsl #24
    247c:	64200000 	strtvs	r0, [r0], #-0
    2480:	02007669 	andeq	r7, r0, #110100480	; 0x6900000
    2484:	00970c05 	addseq	r0, r7, r5, lsl #24
    2488:	91020000 	mrsls	r0, (UNDEF: 2)
    248c:	6f6d2074 	svcvs	0x006d2074
    2490:	05020064 	streq	r0, [r2, #-100]	; 0xffffff9c
    2494:	0000970c 	andeq	r9, r0, ip, lsl #14
    2498:	70910200 	addsvc	r0, r1, r0, lsl #4
    249c:	1d612800 	stclne	8, cr2, [r1, #-0]
    24a0:	1f020000 	svcne	0x00020000
    24a4:	0000f90c 	andeq	pc, r0, ip, lsl #18
    24a8:	10629400 	rsbne	r9, r2, r0, lsl #8
    24ac:	0021cc00 	eoreq	ip, r1, r0, lsl #24
    24b0:	c89c0100 	ldmgt	ip, {r8}
    24b4:	20000021 	andcs	r0, r0, r1, lsr #32
    24b8:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    24bc:	230c1f02 	movwcs	r1, #52994	; 0xcf02
    24c0:	02000013 	andeq	r0, r0, #19
    24c4:	64205791 	strtvs	r5, [r0], #-1937	; 0xfffff86f
    24c8:	02007669 	andeq	r7, r0, #110100480	; 0x6900000
    24cc:	00970c1f 	addseq	r0, r7, pc, lsl ip
    24d0:	91020000 	mrsls	r0, (UNDEF: 2)
    24d4:	65722250 	ldrbvs	r2, [r2, #-592]!	; 0xfffffdb0
    24d8:	21020074 	tstcs	r2, r4, ror r0
    24dc:	0000f90c 	andeq	pc, r0, ip, lsl #18
    24e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24e4:	0000f823 	andeq	pc, r0, r3, lsr #16
    24e8:	0c220200 	sfmeq	f0, 4, [r2], #-0
    24ec:	000000d4 	ldrdeq	r0, [r0], -r4
    24f0:	235c9102 	cmpcs	ip, #-2147483648	; 0x80000000
    24f4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    24f8:	d40c2202 	strle	r2, [ip], #-514	; 0xfffffdfe
    24fc:	02000000 	andeq	r0, r0, #0
    2500:	2e235891 	mcrcs	8, 1, r5, cr3, cr1, {4}
    2504:	0200000e 	andeq	r0, r0, #14
    2508:	00970c23 	addseq	r0, r7, r3, lsr #24
    250c:	91020000 	mrsls	r0, (UNDEF: 2)
    2510:	087a2370 	ldmdaeq	sl!, {r4, r5, r6, r8, r9, sp}^
    2514:	24020000 	strcs	r0, [r2], #-0
    2518:	0016d00c 	andseq	sp, r6, ip
    251c:	6f910200 	svcvs	0x00910200
    2520:	00088423 	andeq	r8, r8, r3, lsr #8
    2524:	0c250200 	sfmeq	f0, 4, [r5], #-0
    2528:	000016d0 	ldrdeq	r1, [r0], -r0
    252c:	236e9102 	cmncs	lr, #-2147483648	; 0x80000000
    2530:	0000088e 	andeq	r0, r0, lr, lsl #17
    2534:	d00c2602 	andle	r2, ip, r2, lsl #12
    2538:	02000016 	andeq	r0, r0, #22
    253c:	002a6d91 	mlaeq	sl, r1, sp, r6
    2540:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    2544:	23000021 	movwcs	r0, #33	; 0x21
    2548:	000016d7 	ldrdeq	r1, [r0], -r7
    254c:	970c2e02 	strls	r2, [ip, -r2, lsl #28]
    2550:	02000000 	andeq	r0, r0, #0
    2554:	2a006891 	bcs	1c7a0 <__cs3_region_init_size_ram+0x4b48>
    2558:	00000018 	andeq	r0, r0, r8, lsl r0
    255c:	000021b2 			; <UNDEFINED> instruction: 0x000021b2
    2560:	0016d723 	andseq	sp, r6, r3, lsr #14
    2564:	0c450200 	sfmeq	f0, 2, [r5], {-0}
    2568:	00000097 	muleq	r0, r7, r0
    256c:	00649102 	rsbeq	r9, r4, r2, lsl #2
    2570:	0000302b 	andeq	r3, r0, fp, lsr #32
    2574:	16d72300 	ldrbne	r2, [r7], r0, lsl #6
    2578:	77020000 	strvc	r0, [r2, -r0]
    257c:	0000970c 	andeq	r9, r0, ip, lsl #14
    2580:	60910200 	addsvs	r0, r1, r0, lsl #4
    2584:	6b280000 	blvs	a0258c <__cs3_heap_start+0x8e8eec>
    2588:	02000005 	andeq	r0, r0, #5
    258c:	00f91047 	rscseq	r1, r9, r7, asr #32
    2590:	84600000 	strbthi	r0, [r0], #-0
    2594:	1b400010 	blne	10025dc <__cs3_heap_start+0xee8f3c>
    2598:	9c010000 	stcls	0, cr0, [r1], {-0}
    259c:	0000223d 	andeq	r2, r0, sp, lsr r2
    25a0:	6b6c6320 	blvs	1b1b228 <__cs3_heap_start+0x1a01b88>
    25a4:	10470200 	subne	r0, r7, r0, lsl #4
    25a8:	00001323 	andeq	r1, r0, r3, lsr #6
    25ac:	25579102 	ldrbcs	r9, [r7, #-258]	; 0xfffffefe
    25b0:	00001937 	andeq	r1, r0, r7, lsr r9
    25b4:	53104702 	tstpl	r0, #524288	; 0x80000
    25b8:	0200001f 	andeq	r0, r0, #31
    25bc:	72225091 	eorvc	r5, r2, #145	; 0x91
    25c0:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
    25c4:	00f91049 	rscseq	r1, r9, r9, asr #32
    25c8:	91020000 	mrsls	r0, (UNDEF: 2)
    25cc:	00f82374 	rscseq	r2, r8, r4, ror r3
    25d0:	4a020000 	bmi	825d8 <__cs3_region_init_size_ram+0x6a980>
    25d4:	00009710 	andeq	r9, r0, r0, lsl r7
    25d8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    25dc:	00058e23 	andeq	r8, r5, r3, lsr #28
    25e0:	104b0200 	subne	r0, fp, r0, lsl #4
    25e4:	000000a2 	andeq	r0, r0, r2, lsr #1
    25e8:	23689102 	cmncs	r8, #-2147483648	; 0x80000000
    25ec:	0000140d 	andeq	r1, r0, sp, lsl #8
    25f0:	a2104c02 	andsge	r4, r0, #512	; 0x200
    25f4:	02000000 	andeq	r0, r0, #0
    25f8:	21006091 	swpcs	r6, r1, [r0]
    25fc:	00000768 	andeq	r0, r0, r8, ror #14
    2600:	f9131402 			; <UNDEFINED> instruction: 0xf9131402
    2604:	a0000000 	andge	r0, r0, r0
    2608:	6400109f 	strvs	r1, [r0], #-159	; 0xffffff61
    260c:	01000000 	mrseq	r0, (UNDEF: 0)
    2610:	0022679c 	mlaeq	r2, ip, r7, r6
    2614:	0b0c2500 	bleq	30ba1c <__cs3_heap_start+0x1f237c>
    2618:	14020000 	strne	r0, [r2], #-0
    261c:	00136513 	andseq	r6, r3, r3, lsl r5
    2620:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2624:	04782100 	ldrbteq	r2, [r8], #-256	; 0xffffff00
    2628:	25020000 	strcs	r0, [r2, #-0]
    262c:	0000f913 	andeq	pc, r0, r3, lsl r9	; <UNPREDICTABLE>
    2630:	10a00400 	adcne	r0, r0, r0, lsl #8
    2634:	00006000 	andeq	r6, r0, r0
    2638:	919c0100 	orrsls	r0, ip, r0, lsl #2
    263c:	25000022 	strcs	r0, [r0, #-34]	; 0xffffffde
    2640:	00000b0c 	andeq	r0, r0, ip, lsl #22
    2644:	65132502 	ldrvs	r2, [r3, #-1282]	; 0xfffffafe
    2648:	02000013 	andeq	r0, r0, #19
    264c:	21007791 			; <UNDEFINED> instruction: 0x21007791
    2650:	0000198d 	andeq	r1, r0, sp, lsl #19
    2654:	f9133602 			; <UNDEFINED> instruction: 0xf9133602
    2658:	64000000 	strvs	r0, [r0], #-0
    265c:	940010a0 	strls	r1, [r0], #-160	; 0xffffff60
    2660:	01000003 	tsteq	r0, r3
    2664:	0022ca9c 	mlaeq	r2, ip, sl, ip
    2668:	12072500 	andne	r2, r7, #0, 10
    266c:	36020000 	strcc	r0, [r2], -r0
    2670:	00106113 	andseq	r6, r0, r3, lsl r1
    2674:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2678:	00052f25 	andeq	r2, r5, r5, lsr #30
    267c:	13370200 	teqne	r7, #0, 4
    2680:	000022ca 	andeq	r2, r0, sl, asr #5
    2684:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2688:	11340406 	teqne	r4, r6, lsl #8
    268c:	6b280000 	blvs	a02694 <__cs3_heap_start+0x8e8ff4>
    2690:	0200000b 	andeq	r0, r0, #11
    2694:	00f913b2 	ldrhteq	r1, [r9], #50	; 0x32
    2698:	a3f80000 	mvnsge	r0, #0
    269c:	03d40010 	bicseq	r0, r4, #16
    26a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    26a4:	00002336 	andeq	r2, r0, r6, lsr r3
    26a8:	00052f25 	andeq	r2, r5, r5, lsr #30
    26ac:	13b20200 			; <UNDEFINED> instruction: 0x13b20200
    26b0:	00002336 	andeq	r2, r0, r6, lsr r3
    26b4:	23649102 	cmncs	r4, #-2147483648	; 0x80000000
    26b8:	00001207 	andeq	r1, r0, r7, lsl #4
    26bc:	6113b502 	tstvs	r3, r2, lsl #10
    26c0:	02000010 	andeq	r0, r0, #16
    26c4:	70226e91 	mlavc	r2, r1, lr, r6
    26c8:	02006c6c 	andeq	r6, r0, #108, 24	; 0x6c00
    26cc:	132313b6 			; <UNDEFINED> instruction: 0x132313b6
    26d0:	91020000 	mrsls	r0, (UNDEF: 2)
    26d4:	0d922377 	ldceq	3, cr2, [r2, #476]	; 0x1dc
    26d8:	b7020000 	strlt	r0, [r2, -r0]
    26dc:	0000f913 	andeq	pc, r0, r3, lsl r9	; <UNPREDICTABLE>
    26e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    26e4:	70796222 	rsbsvc	r6, r9, r2, lsr #4
    26e8:	13b80200 			; <UNDEFINED> instruction: 0x13b80200
    26ec:	000016d0 	ldrdeq	r1, [r0], -r0
    26f0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    26f4:	233c0406 	teqcs	ip, #100663296	; 0x6000000
    26f8:	34070000 	strcc	r0, [r7], #-0
    26fc:	28000011 	stmdacs	r0, {r0, r4}
    2700:	00000e34 	andeq	r0, r0, r4, lsr lr
    2704:	f9143902 			; <UNDEFINED> instruction: 0xf9143902
    2708:	cc000000 	stcgt	0, cr0, [r0], {-0}
    270c:	800010a7 	andhi	r1, r0, r7, lsr #1
    2710:	01000003 	tsteq	r0, r3
    2714:	0023989c 	mlaeq	r3, ip, r8, r9
    2718:	6c632000 	stclvs	0, cr2, [r3], #-0
    271c:	3902006b 	stmdbcc	r2, {r0, r1, r3, r5, r6}
    2720:	00132314 	andseq	r2, r3, r4, lsl r3
    2724:	6f910200 	svcvs	0x00910200
    2728:	0017b925 	andseq	fp, r7, r5, lsr #18
    272c:	14390200 	ldrtne	r0, [r9], #-512	; 0xfffffe00
    2730:	00002398 	muleq	r0, r8, r3
    2734:	22689102 	rsbcs	r9, r8, #-2147483648	; 0x80000000
    2738:	00746572 	rsbseq	r6, r4, r2, ror r5
    273c:	f9143b02 			; <UNDEFINED> instruction: 0xf9143b02
    2740:	02000000 	andeq	r0, r0, #0
    2744:	37237491 			; <UNDEFINED> instruction: 0x37237491
    2748:	02000019 	andeq	r0, r0, #25
    274c:	113f143c 	teqne	pc, ip, lsr r4	; <UNPREDICTABLE>
    2750:	91020000 	mrsls	r0, (UNDEF: 2)
    2754:	04060070 	streq	r0, [r6], #-112	; 0xffffff90
    2758:	000015d5 	ldrdeq	r1, [r0], -r5
    275c:	000abe28 	andeq	fp, sl, r8, lsr #28
    2760:	149b0200 	ldrne	r0, [fp], #512	; 0x200
    2764:	000000f9 	strdeq	r0, [r0], -r9
    2768:	0010ab4c 	andseq	sl, r0, ip, asr #22
    276c:	000002a4 	andeq	r0, r0, r4, lsr #5
    2770:	23d79c01 	bicscs	r9, r7, #256	; 0x100
    2774:	72220000 	eorvc	r0, r2, #0
    2778:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
    277c:	00f9149d 	smlalseq	r1, r9, sp, r4
    2780:	91020000 	mrsls	r0, (UNDEF: 2)
    2784:	0d922374 	ldceq	3, cr2, [r2, #464]	; 0x1d0
    2788:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    278c:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
    2790:	70910200 	addsvc	r0, r1, r0, lsl #4
    2794:	1c8e2100 	stfnes	f2, [lr], {0}
    2798:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    279c:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
    27a0:	10adf000 	adcne	pc, sp, r0
    27a4:	00002800 	andeq	r2, r0, r0, lsl #16
    27a8:	019c0100 	orrseq	r0, ip, r0, lsl #2
    27ac:	22000024 	andcs	r0, r0, #36	; 0x24
    27b0:	00746572 	rsbseq	r6, r4, r2, ror r5
    27b4:	f914da02 			; <UNDEFINED> instruction: 0xf914da02
    27b8:	02000000 	andeq	r0, r0, #0
    27bc:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    27c0:	00000d6f 	andeq	r0, r0, pc, ror #26
    27c4:	149d5d02 	ldrne	r5, [sp], #3330	; 0xd02
    27c8:	03050000 	movweq	r0, #20480	; 0x5000
    27cc:	001172b0 			; <UNDEFINED> instruction: 0x001172b0
    27d0:	00167c2c 	andseq	r7, r6, ip, lsr #24
    27d4:	fd7b0200 	ldc2l	2, cr0, [fp, #-0]
    27d8:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    27dc:	1172f003 	cmnne	r2, r3	; <UNPREDICTABLE>
    27e0:	17ac2c00 	strne	r2, [ip, r0, lsl #24]!
    27e4:	c7020000 	strgt	r0, [r2, -r0]
    27e8:	000015d5 	ldrdeq	r1, [r0], -r5
    27ec:	73500305 	cmpvc	r0, #335544320	; 0x14000000
    27f0:	fd000011 	stc2	0, cr0, [r0, #-68]	; 0xffffffbc
    27f4:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    27f8:	00045f00 	andeq	r5, r4, r0, lsl #30
    27fc:	f4010400 	vst3.8	{d0-d2}, [r1], r0
    2800:	0c000001 	stceq	0, cr0, [r0], {1}
    2804:	00002441 	andeq	r2, r0, r1, asr #8
    2808:	00000028 	andeq	r0, r0, r8, lsr #32
    280c:	0010ae18 	andseq	sl, r0, r8, lsl lr
    2810:	00001a84 	andeq	r1, r0, r4, lsl #21
    2814:	00001848 	andeq	r1, r0, r8, asr #16
    2818:	b1060102 	tstlt	r6, r2, lsl #2
    281c:	03000000 	movweq	r0, #0
    2820:	0000001e 	andeq	r0, r0, lr, lsl r0
    2824:	00371d03 	eorseq	r1, r7, r3, lsl #26
    2828:	01020000 	mrseq	r0, (UNDEF: 2)
    282c:	0000af08 	andeq	sl, r0, r8, lsl #30
    2830:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    2834:	000001e3 	andeq	r0, r0, r3, ror #3
    2838:	fd070202 	stc2	2, cr0, [r7, #-8]
    283c:	03000000 	movweq	r0, #0
    2840:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    2844:	00573f03 	subseq	r3, r7, r3, lsl #30
    2848:	04020000 	streq	r0, [r2], #-0
    284c:	0000a605 	andeq	sl, r0, r5, lsl #12
    2850:	012f0300 			; <UNDEFINED> instruction: 0x012f0300
    2854:	41030000 	mrsmi	r0, (UNDEF: 3)
    2858:	00000069 	andeq	r0, r0, r9, rrx
    285c:	6a070402 	bvs	1c386c <__cs3_heap_start+0xaa1cc>
    2860:	02000001 	andeq	r0, r0, #1
    2864:	00a10508 	adceq	r0, r1, r8, lsl #10
    2868:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    286c:	00016507 	andeq	r6, r1, r7, lsl #10
    2870:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2874:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2878:	6f070402 	svcvs	0x00070402
    287c:	02000001 	andeq	r0, r0, #1
    2880:	026f0408 	rsbeq	r0, pc, #8, 8	; 0x8000000
    2884:	04050000 	streq	r0, [r5], #-0
    2888:	a5070402 	strge	r0, [r7, #-1026]	; 0xfffffbfe
    288c:	02000001 	andeq	r0, r0, #1
    2890:	00b80801 	adcseq	r0, r8, r1, lsl #16
    2894:	04060000 	streq	r0, [r6], #-0
    2898:	000000a9 	andeq	r0, r0, r9, lsr #1
    289c:	00009c07 	andeq	r9, r0, r7, lsl #24
    28a0:	00200300 	eoreq	r0, r0, r0, lsl #6
    28a4:	15040000 	strne	r0, [r4, #-0]
    28a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    28ac:	0005bc03 	andeq	fp, r5, r3, lsl #24
    28b0:	4c2c0400 	cfstrsmi	mvf0, [ip], #-0
    28b4:	03000000 	movweq	r0, #0
    28b8:	00000131 	andeq	r0, r0, r1, lsr r1
    28bc:	005e2d04 	subseq	r2, lr, r4, lsl #26
    28c0:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    28c4:	0500000b 	streq	r0, [r0, #-11]
    28c8:	0000b93e 	andeq	fp, r0, lr, lsr r9
    28cc:	26580800 	ldrbcs	r0, [r8], -r0, lsl #16
    28d0:	37010000 	strcc	r0, [r1, -r0]
    28d4:	06000000 	streq	r0, [r0], -r0
    28d8:	00059534 	andeq	r9, r5, r4, lsr r5
    28dc:	1fb00900 	svcne	0x00b00900
    28e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    28e4:	00001fc7 	andeq	r1, r0, r7, asr #31
    28e8:	1fde0901 	svcne	0x00de0901
    28ec:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    28f0:	00001ff5 	strdeq	r1, [r0], -r5
    28f4:	200c0903 	andcs	r0, ip, r3, lsl #18
    28f8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    28fc:	00002023 	andeq	r2, r0, r3, lsr #32
    2900:	203a0905 	eorscs	r0, sl, r5, lsl #18
    2904:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    2908:	00002051 	andeq	r2, r0, r1, asr r0
    290c:	20680907 	rsbcs	r0, r8, r7, lsl #18
    2910:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    2914:	0000207f 	andeq	r2, r0, pc, ror r0
    2918:	29360909 	ldmdbcs	r6!, {r0, r3, r8, fp}
    291c:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    2920:	0000294e 	andeq	r2, r0, lr, asr #18
    2924:	2966090b 	stmdbcs	r6!, {r0, r1, r3, r8, fp}^
    2928:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    292c:	0000297e 	andeq	r2, r0, lr, ror r9
    2930:	2996090d 	ldmibcs	r6, {r0, r2, r3, r8, fp}
    2934:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    2938:	000029ae 	andeq	r2, r0, lr, lsr #19
    293c:	2d28090f 	stccs	9, cr0, [r8, #-60]!	; 0xffffffc4
    2940:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    2944:	00002d66 	andeq	r2, r0, r6, ror #26
    2948:	2ca7091d 	stccs	9, cr0, [r7], #116	; 0x74
    294c:	091e0000 	ldmdbeq	lr, {}	; <UNPREDICTABLE>
    2950:	00003285 	andeq	r3, r0, r5, lsl #5
    2954:	38e80920 	stmiacc	r8!, {r5, r8, fp}^
    2958:	09210000 	stmdbeq	r1!, {}	; <UNPREDICTABLE>
    295c:	00003be9 	andeq	r3, r0, r9, ror #23
    2960:	31ac0922 			; <UNDEFINED> instruction: 0x31ac0922
    2964:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
    2968:	00003619 	andeq	r3, r0, r9, lsl r6
    296c:	28eb0924 	stmiacs	fp!, {r2, r5, r8, fp}^
    2970:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
    2974:	000026ef 	andeq	r2, r0, pc, ror #13
    2978:	2ace0926 	bcs	ff384e18 <__cs3_heap_end+0xbf384e18>
    297c:	09270000 	stmdbeq	r7!, {}	; <UNPREDICTABLE>
    2980:	000033de 	ldrdeq	r3, [r0], -lr
    2984:	3c4f0928 	mcrrcc	9, 2, r0, pc, cr8
    2988:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
    298c:	00003c6f 	andeq	r3, r0, pc, ror #24
    2990:	3c8f092a 	stccc	9, cr0, [pc], {42}	; 0x2a
    2994:	092b0000 	stmdbeq	fp!, {}	; <UNPREDICTABLE>
    2998:	00003caf 	andeq	r3, r0, pc, lsr #25
    299c:	3ccf092c 	stclcc	9, cr0, [pc], {44}	; 0x2c
    29a0:	092d0000 	pusheq	{}	; <UNPREDICTABLE>
    29a4:	00003cef 	andeq	r3, r0, pc, ror #25
    29a8:	3d0f092e 	stccc	9, cr0, [pc, #-184]	; 28f8 <__cs3_region_zero_size_ram+0xeb0>
    29ac:	092f0000 	stmdbeq	pc!, {}	; <UNPREDICTABLE>
    29b0:	00003ef2 	strdeq	r3, [r0], -r2
    29b4:	23250930 			; <UNDEFINED> instruction: 0x23250930
    29b8:	09310000 	ldmdbeq	r1!, {}	; <UNPREDICTABLE>
    29bc:	000025c3 	andeq	r2, r0, r3, asr #11
    29c0:	2b130932 	blcs	4c4e90 <__cs3_heap_start+0x3ab7f0>
    29c4:	09330000 	ldmdbeq	r3!, {}	; <UNPREDICTABLE>
    29c8:	00003148 	andeq	r3, r0, r8, asr #2
    29cc:	31710934 	cmncc	r1, r4, lsr r9
    29d0:	09350000 	ldmdbeq	r5!, {}	; <UNPREDICTABLE>
    29d4:	00003108 	andeq	r3, r0, r8, lsl #2
    29d8:	22c70936 	sbccs	r0, r7, #884736	; 0xd8000
    29dc:	09370000 	ldmdbeq	r7!, {}	; <UNPREDICTABLE>
    29e0:	00002e8b 	andeq	r2, r0, fp, lsl #29
    29e4:	2fad0938 	svccs	0x00ad0938
    29e8:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    29ec:	000024aa 	andeq	r2, r0, sl, lsr #9
    29f0:	24ca093a 	strbcs	r0, [sl], #2362	; 0x93a
    29f4:	093b0000 	ldmdbeq	fp!, {}	; <UNPREDICTABLE>
    29f8:	000024ea 	andeq	r2, r0, sl, ror #9
    29fc:	250a093c 	strcs	r0, [sl, #-2364]	; 0xfffff6c4
    2a00:	093d0000 	ldmdbeq	sp!, {}	; <UNPREDICTABLE>
    2a04:	0000252a 	andeq	r2, r0, sl, lsr #10
    2a08:	254a093e 	strbcs	r0, [sl, #-2366]	; 0xfffff6c2
    2a0c:	093f0000 	ldmdbeq	pc!, {}	; <UNPREDICTABLE>
    2a10:	00002885 	andeq	r2, r0, r5, lsl #17
    2a14:	28a70940 	stmiacs	r7!, {r6, r8, fp}
    2a18:	09410000 	stmdbeq	r1, {}^	; <UNPREDICTABLE>
    2a1c:	00003d2f 	andeq	r3, r0, pc, lsr #26
    2a20:	29110942 	ldmdbcs	r1, {r1, r6, r8, fp}
    2a24:	09430000 	stmdbeq	r3, {}^	; <UNPREDICTABLE>
    2a28:	000034f6 	strdeq	r3, [r0], -r6
    2a2c:	320d0944 	andcc	r0, sp, #68, 18	; 0x110000
    2a30:	09450000 	stmdbeq	r5, {}^	; <UNPREDICTABLE>
    2a34:	00002f61 	andeq	r2, r0, r1, ror #30
    2a38:	2b3b0946 	blcs	ec4f58 <__cs3_heap_start+0xdab8b8>
    2a3c:	09470000 	stmdbeq	r7, {}^	; <UNPREDICTABLE>
    2a40:	00003677 	andeq	r3, r0, r7, ror r6
    2a44:	36970948 	ldrcc	r0, [r7], r8, asr #18
    2a48:	09490000 	stmdbeq	r9, {}^	; <UNPREDICTABLE>
    2a4c:	000036b7 			; <UNDEFINED> instruction: 0x000036b7
    2a50:	36d7094a 	ldrbcc	r0, [r7], sl, asr #18
    2a54:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
    2a58:	000036f7 	strdeq	r3, [r0], -r7
    2a5c:	3717094c 	ldrcc	r0, [r7, -ip, asr #18]
    2a60:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    2a64:	00003737 	andeq	r3, r0, r7, lsr r7
    2a68:	3757094e 	ldrbcc	r0, [r7, -lr, asr #18]
    2a6c:	094f0000 	stmdbeq	pc, {}^	; <UNPREDICTABLE>
    2a70:	00003777 	andeq	r3, r0, r7, ror r7
    2a74:	37970950 			; <UNDEFINED> instruction: 0x37970950
    2a78:	09510000 	ldmdbeq	r1, {}^	; <UNPREDICTABLE>
    2a7c:	000037e0 	andeq	r3, r0, r0, ror #15
    2a80:	38010952 	stmdacc	r1, {r1, r4, r6, r8, fp}
    2a84:	09530000 	ldmdbeq	r3, {}^	; <UNPREDICTABLE>
    2a88:	00003822 	andeq	r3, r0, r2, lsr #16
    2a8c:	38430954 	stmdacc	r3, {r2, r4, r6, r8, fp}^
    2a90:	09550000 	ldmdbeq	r5, {}^	; <UNPREDICTABLE>
    2a94:	00003864 	andeq	r3, r0, r4, ror #16
    2a98:	38850956 	stmcc	r5, {r1, r2, r4, r6, r8, fp}
    2a9c:	09570000 	ldmdbeq	r7, {}^	; <UNPREDICTABLE>
    2aa0:	00002fe6 	andeq	r2, r0, r6, ror #31
    2aa4:	38a60958 	stmiacc	r6!, {r3, r4, r6, r8, fp}
    2aa8:	09590000 	ldmdbeq	r9, {}^	; <UNPREDICTABLE>
    2aac:	000038c7 	andeq	r3, r0, r7, asr #17
    2ab0:	304b095a 	subcc	r0, fp, sl, asr r9
    2ab4:	095b0000 	ldmdbeq	fp, {}^	; <UNPREDICTABLE>
    2ab8:	00003a2e 	andeq	r3, r0, lr, lsr #20
    2abc:	3a4f095c 	bcc	13c5034 <__cs3_heap_start+0x12ab994>
    2ac0:	095d0000 	ldmdbeq	sp, {}^	; <UNPREDICTABLE>
    2ac4:	00003a70 	andeq	r3, r0, r0, ror sl
    2ac8:	3a91095e 	bcc	fe445048 <__cs3_heap_end+0xbe445048>
    2acc:	095f0000 	ldmdbeq	pc, {}^	; <UNPREDICTABLE>
    2ad0:	00003ab2 			; <UNDEFINED> instruction: 0x00003ab2
    2ad4:	3ad30960 	bcc	ff4c505c <__cs3_heap_end+0xbf4c505c>
    2ad8:	09610000 	stmdbeq	r1!, {}^	; <UNPREDICTABLE>
    2adc:	00003af4 	strdeq	r3, [r0], -r4
    2ae0:	3b150962 	blcc	545070 <__cs3_heap_start+0x42b9d0>
    2ae4:	09630000 	stmdbeq	r3!, {}^	; <UNPREDICTABLE>
    2ae8:	00003b36 	andeq	r3, r0, r6, lsr fp
    2aec:	3b570964 	blcc	15c5084 <__cs3_heap_start+0x14ab9e4>
    2af0:	09650000 	stmdbeq	r5!, {}^	; <UNPREDICTABLE>
    2af4:	00003458 	andeq	r3, r0, r8, asr r4
    2af8:	390f0966 	stmdbcc	pc, {r1, r2, r5, r6, r8, fp}	; <UNPREDICTABLE>
    2afc:	09670000 	stmdbeq	r7!, {}^	; <UNPREDICTABLE>
    2b00:	00003947 	andeq	r3, r0, r7, asr #18
    2b04:	3d4e0968 	stclcc	9, cr0, [lr, #-416]	; 0xfffffe60
    2b08:	09690000 	stmdbeq	r9!, {}^	; <UNPREDICTABLE>
    2b0c:	00003d6f 	andeq	r3, r0, pc, ror #26
    2b10:	3d90096a 	ldccc	9, cr0, [r0, #424]	; 0x1a8
    2b14:	096b0000 	stmdbeq	fp!, {}^	; <UNPREDICTABLE>
    2b18:	00003db1 			; <UNDEFINED> instruction: 0x00003db1
    2b1c:	3dd2096c 	ldclcc	9, cr0, [r2, #432]	; 0x1b0
    2b20:	096d0000 	stmdbeq	sp!, {}^	; <UNPREDICTABLE>
    2b24:	00003df3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    2b28:	3e14096e 	cdpcc	9, 1, cr0, cr4, cr14, {3}
    2b2c:	096f0000 	stmdbeq	pc!, {}^	; <UNPREDICTABLE>
    2b30:	00003fbd 			; <UNDEFINED> instruction: 0x00003fbd
    2b34:	3fde0970 	svccc	0x00de0970
    2b38:	09710000 	ldmdbeq	r1!, {}^	; <UNPREDICTABLE>
    2b3c:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    2b40:	40200972 	eormi	r0, r0, r2, ror r9
    2b44:	09730000 	ldmdbeq	r3!, {}^	; <UNPREDICTABLE>
    2b48:	00004041 	andeq	r4, r0, r1, asr #32
    2b4c:	40620974 	rsbmi	r0, r2, r4, ror r9
    2b50:	09750000 	ldmdbeq	r5!, {}^	; <UNPREDICTABLE>
    2b54:	00004083 	andeq	r4, r0, r3, lsl #1
    2b58:	40a40976 	adcmi	r0, r4, r6, ror r9
    2b5c:	09770000 	ldmdbeq	r7!, {}^	; <UNPREDICTABLE>
    2b60:	00001e98 	muleq	r0, r8, lr
    2b64:	1eb90978 	mrcne	9, 5, r0, cr9, cr8, {3}
    2b68:	09790000 	ldmdbeq	r9!, {}^	; <UNPREDICTABLE>
    2b6c:	0000210c 	andeq	r2, r0, ip, lsl #2
    2b70:	212d097a 			; <UNDEFINED> instruction: 0x212d097a
    2b74:	097b0000 	ldmdbeq	fp!, {}^	; <UNPREDICTABLE>
    2b78:	0000214e 	andeq	r2, r0, lr, asr #2
    2b7c:	216f097c 	smccs	61596	; 0xf09c
    2b80:	097d0000 	ldmdbeq	sp!, {}^	; <UNPREDICTABLE>
    2b84:	00002190 	muleq	r0, r0, r1
    2b88:	21b1097e 			; <UNDEFINED> instruction: 0x21b1097e
    2b8c:	097f0000 	ldmdbeq	pc!, {}^	; <UNPREDICTABLE>
    2b90:	000021d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2b94:	21f30980 	mvnscs	r0, r0, lsl #19
    2b98:	09810000 	stmibeq	r1, {}	; <UNPREDICTABLE>
    2b9c:	00002214 	andeq	r2, r0, r4, lsl r2
    2ba0:	22350982 	eorscs	r0, r5, #2129920	; 0x208000
    2ba4:	09830000 	stmibeq	r3, {}	; <UNPREDICTABLE>
    2ba8:	0000234c 	andeq	r2, r0, ip, asr #6
    2bac:	236d0984 	cmncs	sp, #132, 18	; 0x210000
    2bb0:	09850000 	stmibeq	r5, {}	; <UNPREDICTABLE>
    2bb4:	0000238e 	andeq	r2, r0, lr, lsl #7
    2bb8:	23af0986 			; <UNDEFINED> instruction: 0x23af0986
    2bbc:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    2bc0:	00002b9a 	muleq	r0, sl, fp
    2bc4:	2bb50988 	blcs	fed451ec <__cs3_heap_end+0xbed451ec>
    2bc8:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    2bcc:	00002bd0 	ldrdeq	r2, [r0], -r0
    2bd0:	2beb098a 	blcs	ffac5200 <__cs3_heap_end+0xbfac5200>
    2bd4:	098b0000 	stmibeq	fp, {}	; <UNPREDICTABLE>
    2bd8:	00002c06 	andeq	r2, r0, r6, lsl #24
    2bdc:	2c21098c 	stccs	9, cr0, [r1], #-560	; 0xfffffdd0
    2be0:	098d0000 	stmibeq	sp, {}	; <UNPREDICTABLE>
    2be4:	00002c3c 	andeq	r2, r0, ip, lsr ip
    2be8:	2c57098e 	mrrccs	9, 8, r0, r7, cr14
    2bec:	098f0000 	stmibeq	pc, {}	; <UNPREDICTABLE>
    2bf0:	00003f72 	andeq	r3, r0, r2, ror pc
    2bf4:	2d000990 	stccs	9, cr0, [r0, #-576]	; 0xfffffdc0
    2bf8:	09910000 	ldmibeq	r1, {}	; <UNPREDICTABLE>
    2bfc:	00002719 	andeq	r2, r0, r9, lsl r7
    2c00:	32610992 	rsbcc	r0, r1, #2392064	; 0x248000
    2c04:	09930000 	ldmibeq	r3, {}	; <UNPREDICTABLE>
    2c08:	000020df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    2c0c:	33780994 	cmncc	r8, #148, 18	; 0x250000
    2c10:	09950000 	ldmibeq	r5, {}	; <UNPREDICTABLE>
    2c14:	00002271 	andeq	r2, r0, r1, ror r2
    2c18:	351d0996 	ldrcc	r0, [sp, #-2454]	; 0xfffff66a
    2c1c:	09970000 	ldmibeq	r7, {}	; <UNPREDICTABLE>
    2c20:	00002869 	andeq	r2, r0, r9, ror #16
    2c24:	27e10998 			; <UNDEFINED> instruction: 0x27e10998
    2c28:	09990000 	ldmibeq	r9, {}	; <UNPREDICTABLE>
    2c2c:	000023d0 	ldrdeq	r2, [r0], -r0
    2c30:	301e099a 	mulscc	lr, sl, r9
    2c34:	099b0000 	ldmibeq	fp, {}	; <UNPREDICTABLE>
    2c38:	0000257f 	andeq	r2, r0, pc, ror r5
    2c3c:	2607099c 			; <UNDEFINED> instruction: 0x2607099c
    2c40:	099d0000 	ldmibeq	sp, {}	; <UNPREDICTABLE>
    2c44:	00002a7e 	andeq	r2, r0, lr, ror sl
    2c48:	3b96099e 	blcc	fe5852c8 <__cs3_heap_end+0xbe5852c8>
    2c4c:	099f0000 	ldmibeq	pc, {}	; <UNPREDICTABLE>
    2c50:	000039c2 	andeq	r3, r0, r2, asr #19
    2c54:	26b609a0 	ldrtcs	r0, [r6], r0, lsr #19
    2c58:	09a10000 	stmibeq	r1!, {}	; <UNPREDICTABLE>
    2c5c:	0000209f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c60:	333609a2 	teqcc	r6, #2654208	; 0x288000
    2c64:	09a30000 	stmibeq	r3!, {}	; <UNPREDICTABLE>
    2c68:	0000397f 	andeq	r3, r0, pc, ror r9
    2c6c:	3a0509a4 	bcc	145304 <__cs3_heap_start+0x2bc64>
    2c70:	09a50000 	stmibeq	r5!, {}	; <UNPREDICTABLE>
    2c74:	00002aa3 	andeq	r2, r0, r3, lsr #21
    2c78:	3e7d09a6 	cdpcc	9, 7, cr0, cr13, cr6, {5}
    2c7c:	09a70000 	stmibeq	r7!, {}	; <UNPREDICTABLE>
    2c80:	000025e9 	andeq	r2, r0, r9, ror #11
    2c84:	34b609a8 	ldrtcc	r0, [r6], #2472	; 0x9a8
    2c88:	09a90000 	stmibeq	r9!, {}	; <UNPREDICTABLE>
    2c8c:	00003f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    2c90:	2de709aa 	stclcs	9, cr0, [r7, #680]!	; 0x2a8
    2c94:	09ab0000 	stmibeq	fp!, {}	; <UNPREDICTABLE>
    2c98:	00001f84 	andeq	r1, r0, r4, lsl #31
    2c9c:	3e3509ac 	cdpcc	9, 3, cr0, cr5, cr12, {5}
    2ca0:	09ad0000 	stmibeq	sp!, {}	; <UNPREDICTABLE>
    2ca4:	00001ef5 	strdeq	r1, [r0], -r5
    2ca8:	241309ae 	ldrcs	r0, [r3], #-2478	; 0xfffff652
    2cac:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
    2cb0:	00003bce 	andeq	r3, r0, lr, asr #23
    2cb4:	262209b0 			; <UNDEFINED> instruction: 0x262209b0
    2cb8:	09b10000 	ldmibeq	r1!, {}	; <UNPREDICTABLE>
    2cbc:	0000266c 	andeq	r2, r0, ip, ror #12
    2cc0:	2f8309b2 	svccs	0x008309b2
    2cc4:	09b30000 	ldmibeq	r3!, {}	; <UNPREDICTABLE>
    2cc8:	00002e1a 	andeq	r2, r0, sl, lsl lr
    2ccc:	2db509b4 	ldccs	9, cr0, [r5, #720]!	; 0x2d0
    2cd0:	09b50000 	ldmibeq	r5!, {}	; <UNPREDICTABLE>
    2cd4:	0000364b 	andeq	r3, r0, fp, asr #12
    2cd8:	2b7f09b6 	blcs	1fc53b8 <__cs3_heap_start+0x1eabd18>
    2cdc:	09b70000 	ldmibeq	r7!, {}	; <UNPREDICTABLE>
    2ce0:	000030df 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    2ce4:	35ab09b8 	strcc	r0, [fp, #2488]!	; 0x9b8
    2ce8:	09b90000 	ldmibeq	r9!, {}	; <UNPREDICTABLE>
    2cec:	00001eda 	ldrdeq	r1, [r0], -sl
    2cf0:	3f1f09ba 	svccc	0x001f09ba
    2cf4:	09bb0000 	ldmibeq	fp!, {}	; <UNPREDICTABLE>
    2cf8:	00001f39 	andeq	r1, r0, r9, lsr pc
    2cfc:	3eca09bc 	mcrcc	9, 6, r0, cr10, cr12, {5}
    2d00:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    2d04:	00003085 	andeq	r3, r0, r5, lsl #1
    2d08:	343d09be 	ldrtcc	r0, [sp], #-2494	; 0xfffff642
    2d0c:	09bf0000 	ldmibeq	pc!, {}	; <UNPREDICTABLE>
    2d10:	00002a21 	andeq	r2, r0, r1, lsr #20
    2d14:	3f5709c0 	svccc	0x005709c0
    2d18:	09c10000 	stmibeq	r1, {}^	; <UNPREDICTABLE>
    2d1c:	00001f54 	andeq	r1, r0, r4, asr pc
    2d20:	1f6c09c2 	svcne	0x006c09c2
    2d24:	09c30000 	stmibeq	r3, {}^	; <UNPREDICTABLE>
    2d28:	000032ee 	andeq	r3, r0, lr, ror #5
    2d2c:	330609c4 	movwcc	r0, #27076	; 0x69c4
    2d30:	09c50000 	stmibeq	r5, {}^	; <UNPREDICTABLE>
    2d34:	0000331e 	andeq	r3, r0, lr, lsl r3
    2d38:	30bc09c6 	adcscc	r0, ip, r6, asr #19
    2d3c:	09c70000 	stmibeq	r7, {}^	; <UNPREDICTABLE>
    2d40:	00002e68 	andeq	r2, r0, r8, ror #28
    2d44:	22a409c8 	adccs	r0, r4, #200, 18	; 0x320000
    2d48:	09c90000 	stmibeq	r9, {}^	; <UNPREDICTABLE>
    2d4c:	000035d6 	ldrdeq	r3, [r0], -r6
    2d50:	28c909ca 	stmiacs	r9, {r1, r3, r6, r7, r8, fp}^
    2d54:	09cb0000 	stmibeq	fp, {}^	; <UNPREDICTABLE>
    2d58:	00002ce4 	andeq	r2, r0, r4, ror #25
    2d5c:	3f3a09cc 	svccc	0x003a09cc
    2d60:	09cd0000 	stmibeq	sp, {}^	; <UNPREDICTABLE>
    2d64:	00003558 	andeq	r3, r0, r8, asr r5
    2d68:	279909ce 	ldrcs	r0, [r9, lr, asr #19]
    2d6c:	09cf0000 	stmibeq	pc, {}^	; <UNPREDICTABLE>
    2d70:	00003422 	andeq	r3, r0, r2, lsr #8
    2d74:	225609d0 	subscs	r0, r6, #208, 18	; 0x340000
    2d78:	09d10000 	ldmibeq	r1, {}^	; <UNPREDICTABLE>
    2d7c:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
    2d80:	2f1f09d2 	svccs	0x001f09d2
    2d84:	00d30000 	sbcseq	r0, r3, r0
    2d88:	0026db0a 	eoreq	sp, r6, sl, lsl #22
    2d8c:	01a40600 			; <UNDEFINED> instruction: 0x01a40600
    2d90:	000000da 	ldrdeq	r0, [r0], -sl
    2d94:	00348303 	eorseq	r8, r4, r3, lsl #6
    2d98:	c4410700 	strbgt	r0, [r1], #-1792	; 0xfffff900
    2d9c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2da0:	0000014a 	andeq	r0, r0, sl, asr #2
    2da4:	00003701 	andeq	r3, r0, r1, lsl #14
    2da8:	db460700 	blle	11849b0 <__cs3_heap_start+0x106b310>
    2dac:	09000005 	stmdbeq	r0, {r0, r2}
    2db0:	0000011a 	andeq	r0, r0, sl, lsl r1
    2db4:	01ae0900 			; <UNDEFINED> instruction: 0x01ae0900
    2db8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2dbc:	000000bd 	strheq	r0, [r0], -sp
    2dc0:	00dd0902 	sbcseq	r0, sp, r2, lsl #18
    2dc4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2dc8:	0000006d 	andeq	r0, r0, sp, rrx
    2dcc:	80030004 	andhi	r0, r3, r4
    2dd0:	07000027 	streq	r0, [r0, -r7, lsr #32]
    2dd4:	0005ac6b 	andeq	sl, r5, fp, ror #24
    2dd8:	256a0800 	strbcs	r0, [sl, #-2048]!	; 0xfffff800
    2ddc:	37010000 	strcc	r0, [r1, -r0]
    2de0:	07000000 	streq	r0, [r0, -r0]
    2de4:	00060974 	andeq	r0, r6, r4, ror r9
    2de8:	1f210900 	svcne	0x00210900
    2dec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2df0:	00002846 	andeq	r2, r0, r6, asr #16
    2df4:	3ea30901 	cdpcc	9, 10, cr0, cr3, cr1, {0}
    2df8:	00020000 	andeq	r0, r2, r0
    2dfc:	0025ae03 	eoreq	sl, r5, r3, lsl #28
    2e00:	e6880700 	str	r0, [r8], r0, lsl #14
    2e04:	03000005 	movweq	r0, #5
    2e08:	00002ef2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2e0c:	061f9d07 	ldreq	r9, [pc], -r7, lsl #26
    2e10:	04060000 	streq	r0, [r6], #-0
    2e14:	00000625 	andeq	r0, r0, r5, lsr #12
    2e18:	0006350b 	andeq	r3, r6, fp, lsl #10
    2e1c:	00c40c00 	sbceq	r0, r4, r0, lsl #24
    2e20:	930c0000 	movwls	r0, #49152	; 0xc000
    2e24:	00000000 	andeq	r0, r0, r0
    2e28:	0029c608 	eoreq	ip, r9, r8, lsl #12
    2e2c:	00370100 	eorseq	r0, r7, r0, lsl #2
    2e30:	34020000 	strcc	r0, [r2], #-0
    2e34:	0000064c 	andeq	r0, r0, ip, asr #12
    2e38:	002a5309 	eoreq	r5, sl, r9, lsl #6
    2e3c:	0d000100 	stfeqs	f0, [r0, #-0]
    2e40:	0000280e 	andeq	r2, r0, lr, lsl #16
    2e44:	717b0208 	cmnvc	fp, r8, lsl #4
    2e48:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    2e4c:	000001da 	ldrdeq	r0, [r0], -sl
    2e50:	06147d02 	ldreq	r7, [r4], -r2, lsl #26
    2e54:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2e58:	0000019d 	muleq	r0, sp, r1
    2e5c:	00937e02 	addseq	r7, r3, r2, lsl #28
    2e60:	00040000 	andeq	r0, r4, r0
    2e64:	00281d03 	eoreq	r1, r8, r3, lsl #26
    2e68:	4c800200 	sfmmi	f0, 4, [r0], {0}
    2e6c:	0f000006 	svceq	0x00000006
    2e70:	00000f5c 	andeq	r0, r0, ip, asr pc
    2e74:	007e5b01 	rsbseq	r5, lr, r1, lsl #22
    2e78:	ae180000 	cdpge	0, 1, cr0, cr8, cr0, {0}
    2e7c:	00240010 	eoreq	r0, r4, r0, lsl r0
    2e80:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e84:	000006a5 	andeq	r0, r0, r5, lsr #13
    2e88:	0003d210 	andeq	sp, r3, r0, lsl r2
    2e8c:	a35b0100 	cmpge	fp, #0, 2
    2e90:	02000000 	andeq	r0, r0, #0
    2e94:	00117091 	mulseq	r1, r1, r0
    2e98:	002f4912 	eoreq	r4, pc, r2, lsl r9	; <UNPREDICTABLE>
    2e9c:	3c6a0200 	sfmcc	f0, 2, [sl], #-0
    2ea0:	340010ae 	strcc	r1, [r0], #-174	; 0xffffff52
    2ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ea8:	0006c99c 	muleq	r6, ip, r9
    2eac:	37ce1000 	strbcc	r1, [lr, r0]
    2eb0:	6a020000 	bvs	82eb8 <__cs3_region_init_size_ram+0x6b260>
    2eb4:	000000c4 	andeq	r0, r0, r4, asr #1
    2eb8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2ebc:	002c800f 	eoreq	r8, ip, pc
    2ec0:	c48e0200 	strgt	r0, [lr], #512	; 0x200
    2ec4:	70000000 	andvc	r0, r0, r0
    2ec8:	280010ae 	stmdacs	r0, {r1, r2, r3, r5, r7, ip}
    2ecc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ed0:	0006f19c 	muleq	r6, ip, r1
    2ed4:	2c841300 	stccs	3, cr1, [r4], {0}
    2ed8:	90020000 	andls	r0, r2, r0
    2edc:	000000c4 	andeq	r0, r0, r4, asr #1
    2ee0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2ee4:	0029f812 	eoreq	pc, r9, r2, lsl r8	; <UNPREDICTABLE>
    2ee8:	98a10200 	stmials	r1!, {r9}
    2eec:	5c0010ae 	stcpl	0, cr1, [r0], {174}	; 0xae
    2ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ef4:	0007239c 	muleq	r7, ip, r3
    2ef8:	28e51000 	stmiacs	r5!, {ip}^
    2efc:	a1020000 	mrsge	r0, (UNDEF: 2)
    2f00:	00000723 	andeq	r0, r0, r3, lsr #14
    2f04:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    2f08:	0000229e 	muleq	r0, lr, r2
    2f0c:	00c4a502 	sbceq	sl, r4, r2, lsl #10
    2f10:	91020000 	mrsls	r0, (UNDEF: 2)
    2f14:	01020074 	tsteq	r2, r4, ror r0
    2f18:	00028702 	andeq	r8, r2, r2, lsl #14
    2f1c:	23ff0f00 	mvnscs	r0, #0, 30
    2f20:	c3020000 	movwgt	r0, #8192	; 0x2000
    2f24:	000000c4 	andeq	r0, r0, r4, asr #1
    2f28:	0010aef4 			; <UNDEFINED> instruction: 0x0010aef4
    2f2c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2f30:	07529c01 	ldrbeq	r9, [r2, -r1, lsl #24]
    2f34:	3f130000 	svccc	0x00130000
    2f38:	02000031 	andeq	r0, r0, #49	; 0x31
    2f3c:	0000c4c5 	andeq	ip, r0, r5, asr #9
    2f40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f44:	3c231400 	cfstrscc	mvf1, [r3], #-0
    2f48:	d5020000 	strle	r0, [r2, #-0]
    2f4c:	000000cf 	andeq	r0, r0, pc, asr #1
    2f50:	0010af20 	andseq	sl, r0, r0, lsr #30
    2f54:	00000228 	andeq	r0, r0, r8, lsr #4
    2f58:	07d49c01 	ldrbeq	r9, [r4, r1, lsl #24]
    2f5c:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
    2f60:	7ed70200 	cdpvc	2, 13, cr0, cr7, cr0, {0}
    2f64:	02000000 	andeq	r0, r0, #0
    2f68:	2c167491 	cfldrscs	mvf7, [r6], {145}	; 0x91
    2f6c:	300010af 	andcc	r1, r0, pc, lsr #1
    2f70:	93000000 	movwls	r0, #0
    2f74:	13000007 	movwne	r0, #7
    2f78:	00002c84 	andeq	r2, r0, r4, lsl #25
    2f7c:	00c4db02 	sbceq	sp, r4, r2, lsl #22
    2f80:	91020000 	mrsls	r0, (UNDEF: 2)
    2f84:	5c16006c 	ldcpl	0, cr0, [r6], {108}	; 0x6c
    2f88:	500010af 	andpl	r1, r0, pc, lsr #1
    2f8c:	af000000 	svcge	0x00000000
    2f90:	13000007 	movwne	r0, #7
    2f94:	0000327d 	andeq	r3, r0, sp, ror r2
    2f98:	00c4e302 	sbceq	lr, r4, r2, lsl #6
    2f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa0:	28170068 	ldmdacs	r7, {r3, r5, r6}
    2fa4:	f80010b0 			; <UNDEFINED> instruction: 0xf80010b0
    2fa8:	15000000 	strne	r0, [r0, #-0]
    2fac:	fb02006a 	blx	8315e <__cs3_region_init_size_ram+0x6b506>
    2fb0:	0000007e 	andeq	r0, r0, lr, ror r0
    2fb4:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    2fb8:	000028e5 	andeq	r2, r0, r5, ror #17
    2fbc:	00c4fc02 	sbceq	pc, r4, r2, lsl #24
    2fc0:	91020000 	mrsls	r0, (UNDEF: 2)
    2fc4:	18000064 	stmdane	r0, {r2, r5, r6}
    2fc8:	0000230f 	andeq	r2, r0, pc, lsl #6
    2fcc:	cf011102 	svcgt	0x00011102
    2fd0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2fd4:	1c0010b1 	stcne	0, cr1, [r0], {177}	; 0xb1
    2fd8:	01000000 	mrseq	r0, (UNDEF: 0)
    2fdc:	2a68189c 	bcs	1a09254 <__cs3_heap_start+0x18efbb4>
    2fe0:	16020000 	strne	r0, [r2], -r0
    2fe4:	0000cf01 	andeq	ip, r0, r1, lsl #30
    2fe8:	10b16400 	adcsne	r6, r1, r0, lsl #8
    2fec:	00004400 	andeq	r4, r0, r0, lsl #8
    2ff0:	189c0100 	ldmne	ip, {r8}
    2ff4:	000034df 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    2ff8:	cf012002 	svcgt	0x00012002
    2ffc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3000:	440010b1 	strmi	r1, [r0], #-177	; 0xffffff4f
    3004:	01000000 	mrseq	r0, (UNDEF: 0)
    3008:	20c6189c 	smullcs	r1, r6, ip, r8
    300c:	2a020000 	bcs	83014 <__cs3_region_init_size_ram+0x6b3bc>
    3010:	0000cf01 	andeq	ip, r0, r1, lsl #30
    3014:	10b1ec00 	adcsne	lr, r1, r0, lsl #24
    3018:	00004400 	andeq	r4, r0, r0, lsl #8
    301c:	189c0100 	ldmne	ip, {r8}
    3020:	00003e63 	andeq	r3, r0, r3, ror #28
    3024:	cf013302 	svcgt	0x00013302
    3028:	30000000 	andcc	r0, r0, r0
    302c:	440010b2 	strmi	r1, [r0], #-178	; 0xffffff4e
    3030:	01000000 	mrseq	r0, (UNDEF: 0)
    3034:	2a07189c 	bcs	1c92ac <__cs3_heap_start+0xafc0c>
    3038:	3c020000 	stccc	0, cr0, [r2], {-0}
    303c:	0000cf01 	andeq	ip, r0, r1, lsl #30
    3040:	10b27400 	adcsne	r7, r2, r0, lsl #8
    3044:	00004400 	andeq	r4, r0, r0, lsl #8
    3048:	189c0100 	ldmne	ip, {r8}
    304c:	00003355 	andeq	r3, r0, r5, asr r3
    3050:	cf014502 	svcgt	0x00014502
    3054:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3058:	440010b2 	strmi	r1, [r0], #-178	; 0xffffff4e
    305c:	01000000 	mrseq	r0, (UNDEF: 0)
    3060:	3578199c 	ldrbcc	r1, [r8, #-2460]!	; 0xfffff664
    3064:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    3068:	0000cf01 	andeq	ip, r0, r1, lsl #30
    306c:	10b2fc00 	adcsne	pc, r2, r0, lsl #24
    3070:	0000c000 	andeq	ip, r0, r0
    3074:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    3078:	1a000008 	bne	30a0 <__cs3_region_zero_size_ram+0x1658>
    307c:	00003e9c 	muleq	r0, ip, lr
    3080:	95014e02 	strls	r4, [r1, #-3586]	; 0xfffff1fe
    3084:	02000005 	andeq	r0, r0, #5
    3088:	34176f91 	ldrcc	r6, [r7], #-3985	; 0xfffff06f
    308c:	780010b3 	stmdavc	r0, {r0, r1, r4, r5, r7, ip}
    3090:	1b000000 	blne	3098 <__cs3_region_zero_size_ram+0x1650>
    3094:	00003479 	andeq	r3, r0, r9, ror r4
    3098:	c4015c02 	strgt	r5, [r1], #-3074	; 0xfffff3fe
    309c:	02000000 	andeq	r0, r0, #0
    30a0:	b81b7491 	ldmdalt	fp, {r0, r4, r7, sl, ip, sp, lr}
    30a4:	02000027 	andeq	r0, r0, #39	; 0x27
    30a8:	00c4015d 	sbceq	r0, r4, sp, asr r1
    30ac:	91020000 	mrsls	r0, (UNDEF: 2)
    30b0:	19000070 	stmdbne	r0, {r4, r5, r6}
    30b4:	000030a0 	andeq	r3, r0, r0, lsr #1
    30b8:	cf016502 	svcgt	0x00016502
    30bc:	bc000000 	stclt	0, cr0, [r0], {-0}
    30c0:	bc0010b3 	stclt	0, cr1, [r0], {179}	; 0xb3
    30c4:	01000000 	mrseq	r0, (UNDEF: 0)
    30c8:	0009129c 	muleq	r9, ip, r2
    30cc:	3e9c1a00 	vfnmscc.f32	s2, s24, s0
    30d0:	65020000 	strvs	r0, [r2, #-0]
    30d4:	00059501 	andeq	r9, r5, r1, lsl #10
    30d8:	6f910200 	svcvs	0x00910200
    30dc:	10b3f417 	adcsne	pc, r3, r7, lsl r4	; <UNPREDICTABLE>
    30e0:	00007400 	andeq	r7, r0, r0, lsl #8
    30e4:	34791b00 	ldrbtcc	r1, [r9], #-2816	; 0xfffff500
    30e8:	73020000 	movwvc	r0, #8192	; 0x2000
    30ec:	0000c401 	andeq	ip, r0, r1, lsl #8
    30f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    30f4:	0027b81b 	eoreq	fp, r7, fp, lsl r8
    30f8:	01740200 	cmneq	r4, r0, lsl #4
    30fc:	000000c4 	andeq	r0, r0, r4, asr #1
    3100:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3104:	33a71900 			; <UNDEFINED> instruction: 0x33a71900
    3108:	7c020000 	stcvc	0, cr0, [r2], {-0}
    310c:	0000cf01 	andeq	ip, r0, r1, lsl #30
    3110:	10b47800 	adcsne	r7, r4, r0, lsl #16
    3114:	0000b400 	andeq	fp, r0, r0, lsl #8
    3118:	739c0100 	orrsvc	r0, ip, #0, 2
    311c:	1a000009 	bne	3148 <__cs3_region_zero_size_ram+0x1700>
    3120:	00003e9c 	muleq	r0, ip, lr
    3124:	95017c02 	strls	r7, [r1, #-3074]	; 0xfffff3fe
    3128:	02000005 	andeq	r0, r0, #5
    312c:	b0176791 	mulslt	r7, r1, r7
    3130:	6c0010b4 	stcvs	0, cr1, [r0], {180}	; 0xb4
    3134:	1b000000 	blne	313c <__cs3_region_zero_size_ram+0x16f4>
    3138:	00003479 	andeq	r3, r0, r9, ror r4
    313c:	c4018e02 	strgt	r8, [r1], #-3586	; 0xfffff1fe
    3140:	02000000 	andeq	r0, r0, #0
    3144:	b81b7491 	ldmdalt	fp, {r0, r4, r7, sl, ip, sp, lr}
    3148:	02000027 	andeq	r0, r0, #39	; 0x27
    314c:	00c4018f 	sbceq	r0, r4, pc, lsl #3
    3150:	91020000 	mrsls	r0, (UNDEF: 2)
    3154:	39fd1b70 	ldmibcc	sp!, {r4, r5, r6, r8, r9, fp, ip}^
    3158:	91020000 	mrsls	r0, (UNDEF: 2)
    315c:	0000c401 	andeq	ip, r0, r1, lsl #8
    3160:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3164:	4d190000 	ldcmi	0, cr0, [r9, #-0]
    3168:	02000032 	andeq	r0, r0, #50	; 0x32
    316c:	00cf019e 	smulleq	r0, pc, lr, r1	; <UNPREDICTABLE>
    3170:	b52c0000 	strlt	r0, [ip, #-0]!
    3174:	00980010 	addseq	r0, r8, r0, lsl r0
    3178:	9c010000 	stcls	0, cr0, [r1], {-0}
    317c:	000009c5 	andeq	r0, r0, r5, asr #19
    3180:	003e9c1a 	eorseq	r9, lr, sl, lsl ip
    3184:	019e0200 	orrseq	r0, lr, r0, lsl #4
    3188:	00000595 	muleq	r0, r5, r5
    318c:	176f9102 	strbne	r9, [pc, -r2, lsl #2]!
    3190:	0010b564 	andseq	fp, r0, r4, ror #10
    3194:	00000050 	andeq	r0, r0, r0, asr r0
    3198:	0034791b 	eorseq	r7, r4, fp, lsl r9
    319c:	01ac0200 			; <UNDEFINED> instruction: 0x01ac0200
    31a0:	000000c4 	andeq	r0, r0, r4, asr #1
    31a4:	1b749102 	blne	1d275b4 <__cs3_heap_start+0x1c0df14>
    31a8:	000027b8 			; <UNDEFINED> instruction: 0x000027b8
    31ac:	c401ad02 	strgt	sl, [r1], #-3330	; 0xfffff2fe
    31b0:	02000000 	andeq	r0, r0, #0
    31b4:	00007091 	muleq	r0, r1, r0
    31b8:	00319719 	eorseq	r9, r1, r9, lsl r7
    31bc:	01b50200 			; <UNDEFINED> instruction: 0x01b50200
    31c0:	000000cf 	andeq	r0, r0, pc, asr #1
    31c4:	0010b5c4 	andseq	fp, r0, r4, asr #11
    31c8:	00000098 	muleq	r0, r8, r0
    31cc:	0a179c01 	beq	5ea1d8 <__cs3_heap_start+0x4d0b38>
    31d0:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
    31d4:	0200003e 	andeq	r0, r0, #62	; 0x3e
    31d8:	059501b5 	ldreq	r0, [r5, #437]	; 0x1b5
    31dc:	91020000 	mrsls	r0, (UNDEF: 2)
    31e0:	b5fc176f 	ldrblt	r1, [ip, #1903]!	; 0x76f
    31e4:	00500010 	subseq	r0, r0, r0, lsl r0
    31e8:	791b0000 	ldmdbvc	fp, {}	; <UNPREDICTABLE>
    31ec:	02000034 	andeq	r0, r0, #52	; 0x34
    31f0:	00c401c3 	sbceq	r0, r4, r3, asr #3
    31f4:	91020000 	mrsls	r0, (UNDEF: 2)
    31f8:	27b81b74 			; <UNDEFINED> instruction: 0x27b81b74
    31fc:	c4020000 	strgt	r0, [r2], #-0
    3200:	0000c401 	andeq	ip, r0, r1, lsl #8
    3204:	70910200 	addsvc	r0, r1, r0, lsl #4
    3208:	37190000 	ldrcc	r0, [r9, -r0]
    320c:	0200003c 	andeq	r0, r0, #60	; 0x3c
    3210:	00cf01cc 	sbceq	r0, pc, ip, asr #3
    3214:	b65c0000 	ldrblt	r0, [ip], -r0
    3218:	00b40010 	adcseq	r0, r4, r0, lsl r0
    321c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3220:	00000a78 	andeq	r0, r0, r8, ror sl
    3224:	003e9c1a 	eorseq	r9, lr, sl, lsl ip
    3228:	01cc0200 	biceq	r0, ip, r0, lsl #4
    322c:	00000595 	muleq	r0, r5, r5
    3230:	17679102 	strbne	r9, [r7, -r2, lsl #2]!
    3234:	0010b694 	mulseq	r0, r4, r6
    3238:	0000006c 	andeq	r0, r0, ip, rrx
    323c:	0034791b 	eorseq	r7, r4, fp, lsl r9
    3240:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    3244:	000000c4 	andeq	r0, r0, r4, asr #1
    3248:	1b749102 	blne	1d27658 <__cs3_heap_start+0x1c0dfb8>
    324c:	000027b8 			; <UNDEFINED> instruction: 0x000027b8
    3250:	c401dd02 	strgt	sp, [r1], #-3330	; 0xfffff2fe
    3254:	02000000 	andeq	r0, r0, #0
    3258:	421b7091 	andsmi	r7, fp, #145	; 0x91
    325c:	02000036 	andeq	r0, r0, #54	; 0x36
    3260:	00c401df 	ldrdeq	r0, [r4], #31
    3264:	91020000 	mrsls	r0, (UNDEF: 2)
    3268:	1900006c 	stmdbne	r0, {r2, r3, r5, r6}
    326c:	00002e46 	andeq	r2, r0, r6, asr #28
    3270:	cf01ec02 	svcgt	0x0001ec02
    3274:	10000000 	andne	r0, r0, r0
    3278:	ac0010b7 	stcge	0, cr1, [r0], {183}	; 0xb7
    327c:	01000000 	mrseq	r0, (UNDEF: 0)
    3280:	000aca9c 	muleq	sl, ip, sl
    3284:	3e9c1a00 	vfnmscc.f32	s2, s24, s0
    3288:	ec020000 	stc	0, cr0, [r2], {-0}
    328c:	00059501 	andeq	r9, r5, r1, lsl #10
    3290:	6f910200 	svcvs	0x00910200
    3294:	10b75c17 	adcsne	r5, r7, r7, lsl ip
    3298:	00005000 	andeq	r5, r0, r0
    329c:	34791b00 	ldrbtcc	r1, [r9], #-2816	; 0xfffff500
    32a0:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    32a4:	0000c401 	andeq	ip, r0, r1, lsl #8
    32a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    32ac:	0027b81b 	eoreq	fp, r7, fp, lsl r8
    32b0:	01ff0200 	mvnseq	r0, r0, lsl #4
    32b4:	000000c4 	andeq	r0, r0, r4, asr #1
    32b8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    32bc:	2d4b1900 	stclcs	9, cr1, [fp, #-0]
    32c0:	07020000 	streq	r0, [r2, -r0]
    32c4:	0000cf02 	andeq	ip, r0, r2, lsl #30
    32c8:	10b7bc00 	adcsne	fp, r7, r0, lsl #24
    32cc:	0000ac00 	andeq	sl, r0, r0, lsl #24
    32d0:	1c9c0100 	ldfnes	f0, [ip], {0}
    32d4:	1a00000b 	bne	3308 <__cs3_region_zero_size_ram+0x18c0>
    32d8:	00003e9c 	muleq	r0, ip, lr
    32dc:	95020702 	strls	r0, [r2, #-1794]	; 0xfffff8fe
    32e0:	02000005 	andeq	r0, r0, #5
    32e4:	08176f91 	ldmdaeq	r7, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    32e8:	500010b8 	strhpl	r1, [r0], -r8
    32ec:	1b000000 	blne	32f4 <__cs3_region_zero_size_ram+0x18ac>
    32f0:	00003479 	andeq	r3, r0, r9, ror r4
    32f4:	c4021902 	strgt	r1, [r2], #-2306	; 0xfffff6fe
    32f8:	02000000 	andeq	r0, r0, #0
    32fc:	b81b7491 	ldmdalt	fp, {r0, r4, r7, sl, ip, sp, lr}
    3300:	02000027 	andeq	r0, r0, #39	; 0x27
    3304:	00c4021a 	sbceq	r0, r4, sl, lsl r2
    3308:	91020000 	mrsls	r0, (UNDEF: 2)
    330c:	19000070 	stmdbne	r0, {r4, r5, r6}
    3310:	000031e7 	andeq	r3, r0, r7, ror #3
    3314:	cf022202 	svcgt	0x00022202
    3318:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    331c:	b40010b8 	strlt	r1, [r0], #-184	; 0xffffff48
    3320:	01000000 	mrseq	r0, (UNDEF: 0)
    3324:	000b7d9c 	muleq	fp, ip, sp
    3328:	3e9c1a00 	vfnmscc.f32	s2, s24, s0
    332c:	22020000 	andcs	r0, r2, #0
    3330:	00059502 	andeq	r9, r5, r2, lsl #10
    3334:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    3338:	10b8a017 	adcsne	sl, r8, r7, lsl r0
    333c:	00006c00 	andeq	r6, r0, r0, lsl #24
    3340:	34791b00 	ldrbtcc	r1, [r9], #-2816	; 0xfffff500
    3344:	32020000 	andcc	r0, r2, #0
    3348:	0000c402 	andeq	ip, r0, r2, lsl #8
    334c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3350:	0027b81b 	eoreq	fp, r7, fp, lsl r8
    3354:	02330200 	eorseq	r0, r3, #0, 4
    3358:	000000c4 	andeq	r0, r0, r4, asr #1
    335c:	1b709102 	blne	1c2776c <__cs3_heap_start+0x1b0e0cc>
    3360:	00002096 	muleq	r0, r6, r0
    3364:	c4023502 	strgt	r3, [r2], #-1282	; 0xfffffafe
    3368:	02000000 	andeq	r0, r0, #0
    336c:	00006c91 	muleq	r0, r1, ip
    3370:	00396819 	eorseq	r6, r9, r9, lsl r8
    3374:	02420200 	subeq	r0, r2, #0, 4
    3378:	000000cf 	andeq	r0, r0, pc, asr #1
    337c:	0010b91c 	andseq	fp, r0, ip, lsl r9
    3380:	000000b4 	strheq	r0, [r0], -r4
    3384:	0bde9c01 	bleq	ff7aa390 <__cs3_heap_end+0xbf7aa390>
    3388:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
    338c:	0200003e 	andeq	r0, r0, #62	; 0x3e
    3390:	05950242 	ldreq	r0, [r5, #578]	; 0x242
    3394:	91020000 	mrsls	r0, (UNDEF: 2)
    3398:	b9541767 	ldmdblt	r4, {r0, r1, r2, r5, r6, r8, r9, sl, ip}^
    339c:	006c0010 	rsbeq	r0, ip, r0, lsl r0
    33a0:	791b0000 	ldmdbvc	fp, {}	; <UNPREDICTABLE>
    33a4:	02000034 	andeq	r0, r0, #52	; 0x34
    33a8:	00c40252 	sbceq	r0, r4, r2, asr r2
    33ac:	91020000 	mrsls	r0, (UNDEF: 2)
    33b0:	27b81b74 			; <UNDEFINED> instruction: 0x27b81b74
    33b4:	53020000 	movwpl	r0, #8192	; 0x2000
    33b8:	0000c402 	andeq	ip, r0, r2, lsl #8
    33bc:	70910200 	addsvc	r0, r1, r0, lsl #4
    33c0:	002ddf1b 	eoreq	sp, sp, fp, lsl pc
    33c4:	02550200 	subseq	r0, r5, #0, 4
    33c8:	000000c4 	andeq	r0, r0, r4, asr #1
    33cc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    33d0:	2f051900 	svccs	0x00051900
    33d4:	62020000 	andvs	r0, r2, #0
    33d8:	0000cf02 	andeq	ip, r0, r2, lsl #30
    33dc:	10b9d000 	adcsne	sp, r9, r0
    33e0:	00009000 	andeq	r9, r0, r0
    33e4:	3f9c0100 	svccc	0x009c0100
    33e8:	1a00000c 	bne	3420 <__cs3_region_zero_size_ram+0x19d8>
    33ec:	00003e9c 	muleq	r0, ip, lr
    33f0:	95026202 	strls	r6, [r2, #-514]	; 0xfffffdfe
    33f4:	02000005 	andeq	r0, r0, #5
    33f8:	f61a6f91 			; <UNDEFINED> instruction: 0xf61a6f91
    33fc:	0200002a 	andeq	r0, r0, #42	; 0x2a
    3400:	0c3f0263 	lfmeq	f0, 4, [pc], #-396	; 327c <__cs3_region_zero_size_ram+0x1834>
    3404:	91020000 	mrsls	r0, (UNDEF: 2)
    3408:	ba181768 	blt	6091b0 <__cs3_heap_start+0x4efb10>
    340c:	00380010 	eorseq	r0, r8, r0, lsl r0
    3410:	791b0000 	ldmdbvc	fp, {}	; <UNPREDICTABLE>
    3414:	02000034 	andeq	r0, r0, #52	; 0x34
    3418:	00c40274 	sbceq	r0, r4, r4, ror r2
    341c:	91020000 	mrsls	r0, (UNDEF: 2)
    3420:	33701b74 	cmncc	r0, #116, 22	; 0x1d000
    3424:	76020000 	strvc	r0, [r2], -r0
    3428:	0000ae02 	andeq	sl, r0, r2, lsl #28
    342c:	73910200 	orrsvc	r0, r1, #0, 4
    3430:	04060000 	streq	r0, [r6], #-0
    3434:	000000c4 	andeq	r0, r0, r4, asr #1
    3438:	00282c19 	eoreq	r2, r8, r9, lsl ip
    343c:	027d0200 	rsbseq	r0, sp, #0, 4
    3440:	000000cf 	andeq	r0, r0, pc, asr #1
    3444:	0010ba60 	andseq	fp, r0, r0, ror #20
    3448:	00000090 	muleq	r0, r0, r0
    344c:	0c979c01 	ldceq	12, cr9, [r7], {1}
    3450:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
    3454:	0200003e 	andeq	r0, r0, #62	; 0x3e
    3458:	0595027d 	ldreq	r0, [r5, #637]	; 0x27d
    345c:	91020000 	mrsls	r0, (UNDEF: 2)
    3460:	2af61a6f 	bcs	ffd89e24 <__cs3_heap_end+0xbfd89e24>
    3464:	7e020000 	cdpvc	0, 0, cr0, cr2, cr0, {0}
    3468:	0000c402 	andeq	ip, r0, r2, lsl #8
    346c:	68910200 	ldmvs	r1, {r9}
    3470:	10baa817 	adcsne	sl, sl, r7, lsl r8
    3474:	00003400 	andeq	r3, r0, r0, lsl #8
    3478:	34791b00 	ldrbtcc	r1, [r9], #-2816	; 0xfffff500
    347c:	8c020000 	stchi	0, cr0, [r2], {-0}
    3480:	0000c402 	andeq	ip, r0, r2, lsl #8
    3484:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3488:	d6190000 	ldrle	r0, [r9], -r0
    348c:	02000032 	andeq	r0, r0, #50	; 0x32
    3490:	00cf0298 	smulleq	r0, pc, r8, r2	; <UNPREDICTABLE>
    3494:	baf00000 	blt	ffc0349c <__cs3_heap_end+0xbfc0349c>
    3498:	00900010 	addseq	r0, r0, r0, lsl r0
    349c:	9c010000 	stcls	0, cr0, [r1], {-0}
    34a0:	00000cf8 	strdeq	r0, [r0], -r8
    34a4:	003e9c1a 	eorseq	r9, lr, sl, lsl ip
    34a8:	02980200 	addseq	r0, r8, #0, 4
    34ac:	00000595 	muleq	r0, r5, r5
    34b0:	1a6f9102 	bne	1be78c0 <__cs3_heap_start+0x1ace220>
    34b4:	000029d1 	ldrdeq	r2, [r0], -r1
    34b8:	f8029902 			; <UNDEFINED> instruction: 0xf8029902
    34bc:	0200000c 	andeq	r0, r0, #12
    34c0:	38176891 	ldmdacc	r7, {r0, r4, r7, fp, sp, lr}
    34c4:	380010bb 	stmdacc	r0, {r0, r1, r3, r4, r5, r7, ip}
    34c8:	1b000000 	blne	34d0 <__cs3_region_zero_size_ram+0x1a88>
    34cc:	00003479 	andeq	r3, r0, r9, ror r4
    34d0:	c402a802 	strgt	sl, [r2], #-2050	; 0xfffff7fe
    34d4:	02000000 	andeq	r0, r0, #0
    34d8:	d81b7491 	ldmdale	fp, {r0, r4, r7, sl, ip, sp, lr}
    34dc:	02000037 	andeq	r0, r0, #55	; 0x37
    34e0:	00ae02aa 	adceq	r0, lr, sl, lsr #5
    34e4:	91020000 	mrsls	r0, (UNDEF: 2)
    34e8:	06000073 			; <UNDEFINED> instruction: 0x06000073
    34ec:	0005a104 	andeq	sl, r5, r4, lsl #2
    34f0:	2c8f1c00 	stccs	12, cr1, [pc], {0}
    34f4:	b1020000 	mrslt	r0, (UNDEF: 2)
    34f8:	0000cf02 	andeq	ip, r0, r2, lsl #30
    34fc:	10bb8000 	adcsne	r8, fp, r0
    3500:	0000e000 	andeq	lr, r0, r0
    3504:	509c0100 	addspl	r0, ip, r0, lsl #2
    3508:	1a00000d 	bne	3544 <__cs3_region_zero_size_ram+0x1afc>
    350c:	00003e9c 	muleq	r0, ip, lr
    3510:	9502b102 	strls	fp, [r2, #-258]	; 0xfffffefe
    3514:	02000005 	andeq	r0, r0, #5
    3518:	d11a6f91 			; <UNDEFINED> instruction: 0xd11a6f91
    351c:	02000029 	andeq	r0, r0, #41	; 0x29
    3520:	05a102b2 	streq	r0, [r1, #690]!	; 0x2b2
    3524:	91020000 	mrsls	r0, (UNDEF: 2)
    3528:	bc241768 	stclt	7, cr1, [r4], #-416	; 0xfffffe60
    352c:	00300010 	eorseq	r0, r0, r0, lsl r0
    3530:	791b0000 	ldmdbvc	fp, {}	; <UNPREDICTABLE>
    3534:	02000034 	andeq	r0, r0, #52	; 0x34
    3538:	00c402cc 	sbceq	r0, r4, ip, asr #5
    353c:	91020000 	mrsls	r0, (UNDEF: 2)
    3540:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
    3544:	0000306c 	andeq	r3, r0, ip, rrx
    3548:	cf02d402 	svcgt	0x0002d402
    354c:	60000000 	andvs	r0, r0, r0
    3550:	000010bc 	strheq	r1, [r0], -ip
    3554:	01000001 	tsteq	r0, r1
    3558:	000dc09c 	muleq	sp, ip, r0
    355c:	3e9c1a00 	vfnmscc.f32	s2, s24, s0
    3560:	d4020000 	strle	r0, [r2], #-0
    3564:	00059502 	andeq	r9, r5, r2, lsl #10
    3568:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    356c:	002b0b1a 	eoreq	r0, fp, sl, lsl fp
    3570:	02d50200 	sbcseq	r0, r5, #0, 4
    3574:	00000dc0 	andeq	r0, r0, r0, asr #27
    3578:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    357c:	0010bcc8 	andseq	fp, r0, r8, asr #25
    3580:	00000088 	andeq	r0, r0, r8, lsl #1
    3584:	0034791b 	eorseq	r7, r4, fp, lsl r9
    3588:	02e90200 	rsceq	r0, r9, #0, 4
    358c:	000000c4 	andeq	r0, r0, r4, asr #1
    3590:	1b749102 	blne	1d279a0 <__cs3_heap_start+0x1c0e300>
    3594:	000027b8 			; <UNDEFINED> instruction: 0x000027b8
    3598:	c402ea02 	strgt	lr, [r2], #-2562	; 0xfffff5fe
    359c:	02000000 	andeq	r0, r0, #0
    35a0:	f41b7091 			; <UNDEFINED> instruction: 0xf41b7091
    35a4:	02000039 	andeq	r0, r0, #57	; 0x39
    35a8:	00c402ec 	sbceq	r0, r4, ip, ror #5
    35ac:	91020000 	mrsls	r0, (UNDEF: 2)
    35b0:	0600006c 	streq	r0, [r0], -ip, rrx
    35b4:	0005db04 	andeq	sp, r5, r4, lsl #22
    35b8:	29d81900 	ldmibcs	r8, {r8, fp, ip}^
    35bc:	fb020000 	blx	835c6 <__cs3_region_init_size_ram+0x6b96e>
    35c0:	0000cf02 	andeq	ip, r0, r2, lsl #30
    35c4:	10bd6000 	adcsne	r6, sp, r0
    35c8:	00027800 	andeq	r7, r2, r0, lsl #16
    35cc:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    35d0:	1a00000e 	bne	3610 <__cs3_region_zero_size_ram+0x1bc8>
    35d4:	00003e9c 	muleq	r0, ip, lr
    35d8:	9502fb02 	strls	pc, [r2, #-2818]	; 0xfffff4fe
    35dc:	02000005 	andeq	r0, r0, #5
    35e0:	321a6f91 	andscc	r6, sl, #580	; 0x244
    35e4:	02000031 	andeq	r0, r0, #49	; 0x31
    35e8:	05db02fc 	ldrbeq	r0, [fp, #764]	; 0x2fc
    35ec:	91020000 	mrsls	r0, (UNDEF: 2)
    35f0:	bdd8176e 	ldcllt	7, cr1, [r8, #440]	; 0x1b8
    35f4:	01f00010 	mvnseq	r0, r0, lsl r0
    35f8:	791b0000 	ldmdbvc	fp, {}	; <UNPREDICTABLE>
    35fc:	02000034 	andeq	r0, r0, #52	; 0x34
    3600:	00c40316 	sbceq	r0, r4, r6, lsl r3
    3604:	91020000 	mrsls	r0, (UNDEF: 2)
    3608:	27b81b74 			; <UNDEFINED> instruction: 0x27b81b74
    360c:	17020000 	strne	r0, [r2, -r0]
    3610:	0000c403 	andeq	ip, r0, r3, lsl #8
    3614:	70910200 	addsvc	r0, r1, r0, lsl #4
    3618:	ff190000 			; <UNDEFINED> instruction: 0xff190000
    361c:	0200002a 	andeq	r0, r0, #42	; 0x2a
    3620:	00cf0345 	sbceq	r0, pc, r5, asr #6
    3624:	bfd80000 	svclt	0x00d80000
    3628:	01240010 			; <UNDEFINED> instruction: 0x01240010
    362c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3630:	00000ea6 	andeq	r0, r0, r6, lsr #29
    3634:	003e9c1a 	eorseq	r9, lr, sl, lsl ip
    3638:	03450200 	movteq	r0, #20992	; 0x5200
    363c:	00000595 	muleq	r0, r5, r5
    3640:	1a6f9102 	bne	1be7a50 <__cs3_heap_start+0x1ace3b0>
    3644:	000031ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    3648:	09034602 	stmdbeq	r3, {r1, r9, sl, lr}
    364c:	02000006 	andeq	r0, r0, #6
    3650:	4c1a6e91 	ldcmi	14, cr6, [sl], {145}	; 0x91
    3654:	02000035 	andeq	r0, r0, #53	; 0x35
    3658:	05a10347 	streq	r0, [r1, #839]!	; 0x347
    365c:	91020000 	mrsls	r0, (UNDEF: 2)
    3660:	264c1a68 	strbcs	r1, [ip], -r8, ror #20
    3664:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
    3668:	00072303 	andeq	r2, r7, r3, lsl #6
    366c:	6d910200 	lfmvs	f0, 4, [r1]
    3670:	10c03c17 	sbcne	r3, r0, r7, lsl ip
    3674:	0000ac00 	andeq	sl, r0, r0, lsl #24
    3678:	3f141b00 	svccc	0x00141b00
    367c:	52020000 	andpl	r0, r2, #0
    3680:	0000c403 	andeq	ip, r0, r3, lsl #8
    3684:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3688:	0034071b 	eorseq	r0, r4, fp, lsl r7
    368c:	03530200 	cmpeq	r3, #0, 4
    3690:	000000c4 	andeq	r0, r0, r4, asr #1
    3694:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3698:	2ccc1c00 	stclcs	12, cr1, [ip], {0}
    369c:	73020000 	movwvc	r0, #8192	; 0x2000
    36a0:	0000cf03 	andeq	ip, r0, r3, lsl #30
    36a4:	10c0fc00 	sbcne	pc, r0, r0, lsl #24
    36a8:	0000b800 	andeq	fp, r0, r0, lsl #16
    36ac:	139c0100 	orrsne	r0, ip, #0, 2
    36b0:	1b00000f 	blne	36f4 <__cs3_region_zero_size_ram+0x1cac>
    36b4:	0000240b 	andeq	r2, r0, fp, lsl #8
    36b8:	c4037502 	strgt	r7, [r3], #-1282	; 0xfffffafe
    36bc:	02000000 	andeq	r0, r0, #0
    36c0:	ce1b7491 	cfcmpsgt	r7, mvf11, mvf1
    36c4:	02000037 	andeq	r0, r0, #55	; 0x37
    36c8:	00c40376 	sbceq	r0, r4, r6, ror r3
    36cc:	91020000 	mrsls	r0, (UNDEF: 2)
    36d0:	0d921b70 	vldreq	d1, [r2, #448]	; 0x1c0
    36d4:	77020000 	strvc	r0, [r2, -r0]
    36d8:	0000cf03 	andeq	ip, r0, r3, lsl #30
    36dc:	68910200 	ldmvs	r1, {r9}
    36e0:	10c15017 	sbcne	r5, r1, r7, lsl r0
    36e4:	00001400 	andeq	r1, r0, r0, lsl #8
    36e8:	2a3c1d00 	bcs	f0aaf0 <__cs3_heap_start+0xdf1450>
    36ec:	a0020000 	andge	r0, r2, r0
    36f0:	00009c03 	andeq	r9, r0, r3, lsl #24
    36f4:	39b51b00 	ldmibcc	r5!, {r8, r9, fp, ip}
    36f8:	a1020000 	mrsge	r0, (UNDEF: 2)
    36fc:	0000c403 	andeq	ip, r0, r3, lsl #8
    3700:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3704:	a2180000 	andsge	r0, r8, #0
    3708:	0200002d 	andeq	r0, r0, #45	; 0x2d
    370c:	00cf03b9 	strheq	r0, [pc], #57	; <UNPREDICTABLE>
    3710:	c1b40000 			; <UNDEFINED> instruction: 0xc1b40000
    3714:	001c0010 	andseq	r0, ip, r0, lsl r0
    3718:	9c010000 	stcls	0, cr0, [r1], {-0}
    371c:	0031d418 	eorseq	sp, r1, r8, lsl r4
    3720:	03be0200 			; <UNDEFINED> instruction: 0x03be0200
    3724:	000000cf 	andeq	r0, r0, pc, asr #1
    3728:	0010c1d0 			; <UNDEFINED> instruction: 0x0010c1d0
    372c:	00000048 	andeq	r0, r0, r8, asr #32
    3730:	0f189c01 	svceq	0x00189c01
    3734:	0200003c 	andeq	r0, r0, #60	; 0x3c
    3738:	00cf03d1 	ldrdeq	r0, [pc], #49	; <UNPREDICTABLE>
    373c:	c2180000 	andsgt	r0, r8, #0
    3740:	00480010 	subeq	r0, r8, r0, lsl r0
    3744:	9c010000 	stcls	0, cr0, [r1], {-0}
    3748:	002edc18 	eoreq	sp, lr, r8, lsl ip
    374c:	03e40200 	mvneq	r0, #0, 4
    3750:	000000cf 	andeq	r0, r0, pc, asr #1
    3754:	0010c260 	andseq	ip, r0, r0, ror #4
    3758:	00000044 	andeq	r0, r0, r4, asr #32
    375c:	43189c01 	tstmi	r8, #256	; 0x100
    3760:	02000027 	andeq	r0, r0, #39	; 0x27
    3764:	00cf03ed 	sbceq	r0, pc, sp, ror #7
    3768:	c2a40000 	adcgt	r0, r4, #0
    376c:	00440010 	subeq	r0, r4, r0, lsl r0
    3770:	9c010000 	stcls	0, cr0, [r1], {-0}
    3774:	00323618 	eorseq	r3, r2, r8, lsl r6
    3778:	03f60200 	mvnseq	r0, #0, 4
    377c:	000000cf 	andeq	r0, r0, pc, asr #1
    3780:	0010c2e8 	andseq	ip, r0, r8, ror #5
    3784:	00000044 	andeq	r0, r0, r4, asr #32
    3788:	8a189c01 	bhi	62a794 <__cs3_heap_start+0x5110f4>
    378c:	0200002d 	andeq	r0, r0, #45	; 0x2d
    3790:	00cf03ff 	strdeq	r0, [pc], #63	; <UNPREDICTABLE>
    3794:	c32c0000 			; <UNDEFINED> instruction: 0xc32c0000
    3798:	00440010 	subeq	r0, r4, r0, lsl r0
    379c:	9c010000 	stcls	0, cr0, [r1], {-0}
    37a0:	00393019 	eorseq	r3, r9, r9, lsl r0
    37a4:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    37a8:	000000cf 	andeq	r0, r0, pc, asr #1
    37ac:	0010c370 	andseq	ip, r0, r0, ror r3
    37b0:	000000c4 	andeq	r0, r0, r4, asr #1
    37b4:	10049c01 	andne	r9, r4, r1, lsl #24
    37b8:	9d1a0000 	ldcls	0, cr0, [sl, #-0]
    37bc:	02000039 	andeq	r0, r0, #57	; 0x39
    37c0:	10040408 	andne	r0, r4, r8, lsl #8
    37c4:	91020000 	mrsls	r0, (UNDEF: 2)
    37c8:	26981a6c 	ldrcs	r1, [r8], ip, ror #20
    37cc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    37d0:	00100404 	andseq	r0, r0, r4, lsl #8
    37d4:	68910200 	ldmvs	r1, {r9}
    37d8:	0033be1a 	eorseq	fp, r3, sl, lsl lr
    37dc:	040a0200 	streq	r0, [sl], #-512	; 0xfffffe00
    37e0:	00001004 	andeq	r1, r0, r4
    37e4:	1b649102 	blne	1927bf4 <__cs3_heap_start+0x180e554>
    37e8:	000029f1 	strdeq	r2, [r0], -r1
    37ec:	c4040e02 	strgt	r0, [r4], #-3586	; 0xfffff1fe
    37f0:	02000000 	andeq	r0, r0, #0
    37f4:	06007491 			; <UNDEFINED> instruction: 0x06007491
    37f8:	00072304 	andeq	r2, r7, r4, lsl #6
    37fc:	30071900 	andcc	r1, r7, r0, lsl #18
    3800:	20020000 	andcs	r0, r2, r0
    3804:	0000cf04 	andeq	ip, r0, r4, lsl #30
    3808:	10c43400 	sbcne	r3, r4, r0, lsl #8
    380c:	0000dc00 	andeq	sp, r0, r0, lsl #24
    3810:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    3814:	1a000010 	bne	385c <__cs3_region_zero_size_ram+0x1e14>
    3818:	0000399d 	muleq	r0, sp, r9
    381c:	23042002 	movwcs	r2, #16386	; 0x4002
    3820:	02000007 	andeq	r0, r0, #7
    3824:	981a6f91 	ldmdals	sl, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    3828:	02000026 	andeq	r0, r0, #38	; 0x26
    382c:	07230421 	streq	r0, [r3, -r1, lsr #8]!
    3830:	91020000 	mrsls	r0, (UNDEF: 2)
    3834:	33be1a6e 			; <UNDEFINED> instruction: 0x33be1a6e
    3838:	22020000 	andcs	r0, r2, #0
    383c:	00072304 	andeq	r2, r7, r4, lsl #6
    3840:	6d910200 	lfmvs	f0, 4, [r1]
    3844:	0029f11b 	eoreq	pc, r9, fp, lsl r1	; <UNPREDICTABLE>
    3848:	04260200 	strteq	r0, [r6], #-512	; 0xfffffe00
    384c:	000000c4 	andeq	r0, r0, r4, asr #1
    3850:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3854:	003b7819 	eorseq	r7, fp, r9, lsl r8
    3858:	04480200 	strbeq	r0, [r8], #-512	; 0xfffffe00
    385c:	000000c4 	andeq	r0, r0, r4, asr #1
    3860:	0010c510 	andseq	ip, r0, r0, lsl r5
    3864:	00000038 	andeq	r0, r0, r8, lsr r0
    3868:	108b9c01 	addne	r9, fp, r1, lsl #24
    386c:	921b0000 	andsls	r0, fp, #0
    3870:	02000027 	andeq	r0, r0, #39	; 0x27
    3874:	00c4044c 	sbceq	r0, r4, ip, asr #8
    3878:	91020000 	mrsls	r0, (UNDEF: 2)
    387c:	98190074 	ldmdals	r9, {r2, r4, r5, r6}
    3880:	02000034 	andeq	r0, r0, #52	; 0x34
    3884:	00cf0451 	sbceq	r0, pc, r1, asr r4	; <UNPREDICTABLE>
    3888:	c5480000 	strbgt	r0, [r8, #-0]
    388c:	00540010 	subseq	r0, r4, r0, lsl r0
    3890:	9c010000 	stcls	0, cr0, [r1], {-0}
    3894:	000010b5 	strheq	r1, [r0], -r5
    3898:	0035f91a 	eorseq	pc, r5, sl, lsl r9	; <UNPREDICTABLE>
    389c:	04510200 	ldrbeq	r0, [r1], #-512	; 0xfffffe00
    38a0:	000000c4 	andeq	r0, r0, r4, asr #1
    38a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    38a8:	0032a719 	eorseq	sl, r2, r9, lsl r7
    38ac:	04610200 	strbteq	r0, [r1], #-512	; 0xfffffe00
    38b0:	000000c4 	andeq	r0, r0, r4, asr #1
    38b4:	0010c59c 	mulseq	r0, ip, r5
    38b8:	00000038 	andeq	r0, r0, r8, lsr r0
    38bc:	10df9c01 	sbcsne	r9, pc, r1, lsl #24
    38c0:	dd1b0000 	ldcle	0, cr0, [fp, #-0]
    38c4:	0200002c 	andeq	r0, r0, #44	; 0x2c
    38c8:	00c40465 	sbceq	r0, r4, r5, ror #8
    38cc:	91020000 	mrsls	r0, (UNDEF: 2)
    38d0:	c4190074 	ldrgt	r0, [r9], #-116	; 0xffffff8c
    38d4:	02000027 	andeq	r0, r0, #39	; 0x27
    38d8:	00cf046a 	sbceq	r0, pc, sl, ror #8
    38dc:	c5d40000 	ldrbgt	r0, [r4]
    38e0:	00540010 	subseq	r0, r4, r0, lsl r0
    38e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    38e8:	00001109 	andeq	r1, r0, r9, lsl #2
    38ec:	0039a81a 	eorseq	sl, r9, sl, lsl r8
    38f0:	046a0200 	strbteq	r0, [sl], #-512	; 0xfffffe00
    38f4:	000000c4 	andeq	r0, r0, r4, asr #1
    38f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    38fc:	002b5f19 	eoreq	r5, fp, r9, lsl pc
    3900:	047a0200 	ldrbteq	r0, [sl], #-512	; 0xfffffe00
    3904:	000000c4 	andeq	r0, r0, r4, asr #1
    3908:	0010c628 	andseq	ip, r0, r8, lsr #12
    390c:	00000038 	andeq	r0, r0, r8, lsr r0
    3910:	11339c01 	teqne	r3, r1, lsl #24
    3914:	c21b0000 	andsgt	r0, fp, #0
    3918:	0200003e 	andeq	r0, r0, #62	; 0x3e
    391c:	00c4047e 	sbceq	r0, r4, lr, ror r4
    3920:	91020000 	mrsls	r0, (UNDEF: 2)
    3924:	ef190074 	svc	0x00190074
    3928:	02000022 	andeq	r0, r0, #34	; 0x22
    392c:	00cf0483 	sbceq	r0, pc, r3, lsl #9
    3930:	c6600000 	strbtgt	r0, [r0], -r0
    3934:	00540010 	subseq	r0, r4, r0, lsl r0
    3938:	9c010000 	stcls	0, cr0, [r1], {-0}
    393c:	0000115d 	andeq	r1, r0, sp, asr r1
    3940:	0039a81a 	eorseq	sl, r9, sl, lsl r8
    3944:	04830200 	streq	r0, [r3], #512	; 0x200
    3948:	000000c4 	andeq	r0, r0, r4, asr #1
    394c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3950:	00275a19 	eoreq	r5, r7, r9, lsl sl
    3954:	04930200 	ldreq	r0, [r3], #512	; 0x200
    3958:	000000cf 	andeq	r0, r0, pc, asr #1
    395c:	0010c6b4 			; <UNDEFINED> instruction: 0x0010c6b4
    3960:	00000060 	andeq	r0, r0, r0, rrx
    3964:	11a59c01 			; <UNDEFINED> instruction: 0x11a59c01
    3968:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
    396c:	0200003e 	andeq	r0, r0, #62	; 0x3e
    3970:	05950493 	ldreq	r0, [r5, #1171]	; 0x493
    3974:	91020000 	mrsls	r0, (UNDEF: 2)
    3978:	01da1a77 	bicseq	r1, sl, r7, ror sl
    397c:	94020000 	strls	r0, [r2], #-0
    3980:	00061404 	andeq	r1, r6, r4, lsl #8
    3984:	70910200 	addsvc	r0, r1, r0, lsl #4
    3988:	00019d1a 	andeq	r9, r1, sl, lsl sp
    398c:	04950200 	ldreq	r0, [r5], #512	; 0x200
    3990:	00000093 	muleq	r0, r3, r0
    3994:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3998:	0039dd19 	eorseq	sp, r9, r9, lsl sp
    399c:	04a40200 	strteq	r0, [r4], #512	; 0x200
    39a0:	000000cf 	andeq	r0, r0, pc, asr #1
    39a4:	0010c714 	andseq	ip, r0, r4, lsl r7
    39a8:	00000058 	andeq	r0, r0, r8, asr r0
    39ac:	11cf9c01 	bicne	r9, pc, r1, lsl #24
    39b0:	9c1a0000 	ldcls	0, cr0, [sl], {-0}
    39b4:	0200003e 	andeq	r0, r0, #62	; 0x3e
    39b8:	059504a4 	ldreq	r0, [r5, #1188]	; 0x4a4
    39bc:	91020000 	mrsls	r0, (UNDEF: 2)
    39c0:	03180077 	tsteq	r8, #119	; 0x77
    39c4:	0200002e 	andeq	r0, r0, #46	; 0x2e
    39c8:	00c404b3 	strheq	r0, [r4], #67	; 0x43
    39cc:	c76c0000 	strbgt	r0, [ip, -r0]!
    39d0:	00240010 	eoreq	r0, r4, r0, lsl r0
    39d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39d8:	0037b718 	eorseq	fp, r7, r8, lsl r7
    39dc:	04b80200 	ldrteq	r0, [r8], #512	; 0x200
    39e0:	000000c4 	andeq	r0, r0, r4, asr #1
    39e4:	0010c790 	mulseq	r0, r0, r7
    39e8:	00000024 	andeq	r0, r0, r4, lsr #32
    39ec:	cd1e9c01 	ldcgt	12, cr9, [lr, #-4]
    39f0:	0200002f 	andeq	r0, r0, #47	; 0x2f
    39f4:	05a104bd 	streq	r0, [r1, #1213]!	; 0x4bd
    39f8:	c7b40000 	ldrgt	r0, [r4, r0]!
    39fc:	00200010 	eoreq	r0, r0, r0, lsl r0
    3a00:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a04:	002c721f 	eoreq	r7, ip, pc, lsl r2
    3a08:	04c90200 	strbeq	r0, [r9], #512	; 0x200
    3a0c:	0010c7d4 			; <UNDEFINED> instruction: 0x0010c7d4
    3a10:	000000c8 	andeq	r0, r0, r8, asr #1
    3a14:	12469c01 	subne	r9, r6, #256	; 0x100
    3a18:	d61b0000 	ldrle	r0, [fp], -r0
    3a1c:	02000000 	andeq	r0, r0, #0
    3a20:	00c404d4 	ldrdeq	r0, [r4], #68	; 0x44
    3a24:	91020000 	mrsls	r0, (UNDEF: 2)
    3a28:	2e5f1b5c 	vmovcs.s8	r1, d15[2]
    3a2c:	d6020000 	strle	r0, [r2], -r0
    3a30:	0000c404 	andeq	ip, r0, r4, lsl #8
    3a34:	58910200 	ldmpl	r1, {r9}
    3a38:	00ae2000 	adceq	r2, lr, r0
    3a3c:	12560000 	subsne	r0, r6, #0
    3a40:	95210000 	strls	r0, [r1, #-0]!
    3a44:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3a48:	3ee51300 	cdpcc	3, 14, cr1, cr5, cr0, {0}
    3a4c:	3a020000 	bcc	83a54 <__cs3_region_init_size_ram+0x6bdfc>
    3a50:	00001246 	andeq	r1, r0, r6, asr #4
    3a54:	7c900305 	ldcvc	3, cr0, [r0], {5}
    3a58:	9c200011 	stcls	0, cr0, [r0], #-68	; 0xffffffbc
    3a5c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    3a60:	21000012 	tstcs	r0, r2, lsl r0
    3a64:	00000095 	muleq	r0, r5, r0
    3a68:	00952200 	addseq	r2, r5, r0, lsl #4
    3a6c:	0fff0000 	svceq	0x00ff0000
    3a70:	35931300 	ldrcc	r1, [r3, #768]	; 0x300
    3a74:	40020000 	andmi	r0, r2, r0
    3a78:	00001267 	andeq	r1, r0, r7, ror #4
    3a7c:	7d900305 	ldcvc	3, cr0, [r0, #20]
    3a80:	71200011 			; <UNDEFINED> instruction: 0x71200011
    3a84:	9f000006 	svcls	0x00000006
    3a88:	21000012 	tstcs	r0, r2, lsl r0
    3a8c:	00000095 	muleq	r0, r5, r0
    3a90:	6f1300ff 	svcvs	0x001300ff
    3a94:	02000027 	andeq	r0, r0, #39	; 0x27
    3a98:	00128f82 	andseq	r8, r2, r2, lsl #31
    3a9c:	90030500 	andls	r0, r3, r0, lsl #10
    3aa0:	1300118d 	movwne	r1, #397	; 0x18d
    3aa4:	000032c4 	andeq	r3, r0, r4, asr #5
    3aa8:	00c48502 	sbceq	r8, r4, r2, lsl #10
    3aac:	03050000 	movweq	r0, #20480	; 0x5000
    3ab0:	00119590 	mulseq	r1, r0, r5
    3ab4:	003bbd13 	eorseq	fp, fp, r3, lsl sp
    3ab8:	c4870200 	strgt	r0, [r7], #512	; 0x200
    3abc:	05000000 	streq	r0, [r0, #-0]
    3ac0:	11959403 	orrsne	r9, r5, r3, lsl #8
    3ac4:	36071300 	strcc	r1, [r7], -r0, lsl #6
    3ac8:	8a020000 	bhi	83ad0 <__cs3_region_init_size_ram+0x6be78>
    3acc:	000000c4 	andeq	r0, r0, r4, asr #1
    3ad0:	95980305 	ldrls	r0, [r8, #773]	; 0x305
    3ad4:	10130011 	andsne	r0, r3, r1, lsl r0
    3ad8:	02000034 	andeq	r0, r0, #52	; 0x34
    3adc:	0000c48c 	andeq	ip, r0, ip, lsl #9
    3ae0:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    3ae4:	1d001195 	stfnes	f1, [r0, #-596]	; 0xfffffdac
    3ae8:	00002a3c 	andeq	r2, r0, ip, lsr sl
    3aec:	9c03a002 	stcls	0, cr10, [r3], {2}
    3af0:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__cs3_heap_start+0x1a6a0c>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <__cs3_heap_start+0x267588>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <__cs3_heap_start+0x1a6a24>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	04070000 	streq	r0, [r7], #-0
  48:	0b0e0301 	bleq	380c54 <__cs3_heap_start+0x2675b4>
  4c:	3a13490b 	bcc	4d2480 <__cs3_heap_start+0x3b8de0>
  50:	010b3b0b 	tsteq	fp, fp, lsl #22
  54:	08000013 	stmdaeq	r0, {r0, r1, r4}
  58:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  5c:	00000b1c 	andeq	r0, r0, ip, lsl fp
  60:	3f012e09 	svccc	0x00012e09
  64:	3a0e0319 	bcc	380cd0 <__cs3_heap_start+0x267630>
  68:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  6c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  70:	97184006 	ldrls	r4, [r8, -r6]
  74:	13011942 	movwne	r1, #6466	; 0x1942
  78:	340a0000 	strcc	r0, [sl], #-0
  7c:	3a0e0300 	bcc	380c84 <__cs3_heap_start+0x2675e4>
  80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  84:	00180213 	andseq	r0, r8, r3, lsl r2
  88:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  8c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
  90:	0b3b0b3a 	bleq	ec2d80 <__cs3_heap_start+0xda96e0>
  94:	01111927 	tsteq	r1, r7, lsr #18
  98:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  9c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  a0:	0c000013 	stceq	0, cr0, [r0], {19}
  a4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  a8:	0b3b0b3a 	bleq	ec2d98 <__cs3_heap_start+0xda96f8>
  ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  b0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  b4:	03193f01 	tsteq	r9, #1, 30
  b8:	3b0b3a0e 	blcc	2ce8f8 <__cs3_heap_start+0x1b5258>
  bc:	3c13490b 	ldccc	9, cr4, [r3], {11}
  c0:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  c4:	00000018 	andeq	r0, r0, r8, lsl r0
  c8:	3f012e0f 	svccc	0x00012e0f
  cc:	3a0e0319 	bcc	380d38 <__cs3_heap_start+0x267698>
  d0:	110b3b0b 	tstne	fp, fp, lsl #22
  d4:	40061201 	andmi	r1, r6, r1, lsl #4
  d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  dc:	00001301 	andeq	r1, r0, r1, lsl #6
  e0:	3f002e10 	svccc	0x00002e10
  e4:	3a0e0319 	bcc	380d50 <__cs3_heap_start+0x2676b0>
  e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  f0:	97184006 	ldrls	r4, [r8, -r6]
  f4:	00001942 	andeq	r1, r0, r2, asr #18
  f8:	3f002e11 	svccc	0x00002e11
  fc:	3a0e0319 	bcc	380d68 <__cs3_heap_start+0x2676c8>
 100:	110b3b0b 	tstne	fp, fp, lsl #22
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 10c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 110:	03193f01 	tsteq	r9, #1, 30
 114:	3b0b3a0e 	blcc	2ce954 <__cs3_heap_start+0x1b52b4>
 118:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 11c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 120:	97184006 	ldrls	r4, [r8, -r6]
 124:	13011942 	movwne	r1, #6466	; 0x1942
 128:	05130000 	ldreq	r0, [r3, #-0]
 12c:	3a080300 	bcc	200d34 <__cs3_heap_start+0xe7694>
 130:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 134:	00180213 	andseq	r0, r8, r3, lsl r2
 138:	002e1400 	eoreq	r1, lr, r0, lsl #8
 13c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 140:	0b3b0b3a 	bleq	ec2e30 <__cs3_heap_start+0xda9790>
 144:	06120111 			; <UNDEFINED> instruction: 0x06120111
 148:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 14c:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 150:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <__cs3_heap_start+0xd6a2c8>
 158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 15c:	01111349 	tsteq	r1, r9, asr #6
 160:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 164:	01194296 			; <UNDEFINED> instruction: 0x01194296
 168:	16000013 			; <UNDEFINED> instruction: 0x16000013
 16c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 170:	0b3b0b3a 	bleq	ec2e60 <__cs3_heap_start+0xda97c0>
 174:	00001349 	andeq	r1, r0, r9, asr #6
 178:	03003417 	movweq	r3, #1047	; 0x417
 17c:	3b0b3a0e 	blcc	2ce9bc <__cs3_heap_start+0x1b531c>
 180:	3f13490b 	svccc	0x0013490b
 184:	00180219 	andseq	r0, r8, r9, lsl r2
 188:	00341800 	eorseq	r1, r4, r0, lsl #16
 18c:	0b3a0803 	bleq	e821a0 <__cs3_heap_start+0xd68b00>
 190:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 194:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1a0:	0e030b13 	vmoveq.32	d3[0], r0
 1a4:	01110e1b 	tsteq	r1, fp, lsl lr
 1a8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1ac:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 1b0:	03193f00 	tsteq	r9, #0, 30
 1b4:	3b0b3a0e 	blcc	2ce9f4 <__cs3_heap_start+0x1b5354>
 1b8:	1119270b 	tstne	r9, fp, lsl #14
 1bc:	40061201 	andmi	r1, r6, r1, lsl #4
 1c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1cc:	0e030b13 	vmoveq.32	d3[0], r0
 1d0:	01110e1b 	tsteq	r1, fp, lsl lr
 1d4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1d8:	24020000 	strcs	r0, [r2], #-0
 1dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1e0:	000e030b 	andeq	r0, lr, fp, lsl #6
 1e4:	00160300 	andseq	r0, r6, r0, lsl #6
 1e8:	0b3a0e03 	bleq	e839fc <__cs3_heap_start+0xd6a35c>
 1ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f0:	24040000 	strcs	r0, [r4], #-0
 1f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1f8:	0008030b 	andeq	r0, r8, fp, lsl #6
 1fc:	000f0500 	andeq	r0, pc, r0, lsl #10
 200:	00000b0b 	andeq	r0, r0, fp, lsl #22
 204:	0b000f06 	bleq	3e24 <__cs3_region_zero_size_ram+0x23dc>
 208:	0013490b 	andseq	r4, r3, fp, lsl #18
 20c:	00260700 	eoreq	r0, r6, r0, lsl #14
 210:	00001349 	andeq	r1, r0, r9, asr #6
 214:	49003508 	stmdbmi	r0, {r3, r8, sl, ip, sp}
 218:	09000013 	stmdbeq	r0, {r0, r1, r4}
 21c:	13490101 	movtne	r0, #37121	; 0x9101
 220:	00001301 	andeq	r1, r0, r1, lsl #6
 224:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
 228:	000b2f13 	andeq	r2, fp, r3, lsl pc
 22c:	01130b00 	tsteq	r3, r0, lsl #22
 230:	0b0b0e03 	bleq	2c3a44 <__cs3_heap_start+0x1aa3a4>
 234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 238:	00001301 	andeq	r1, r0, r1, lsl #6
 23c:	03000d0c 	movweq	r0, #3340	; 0xd0c
 240:	3b0b3a0e 	blcc	2cea80 <__cs3_heap_start+0x1b53e0>
 244:	0b134905 	bleq	4d2660 <__cs3_heap_start+0x3b8fc0>
 248:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 24c:	000b380b 	andeq	r3, fp, fp, lsl #16
 250:	000d0d00 	andeq	r0, sp, r0, lsl #26
 254:	0b3a0803 	bleq	e82268 <__cs3_heap_start+0xd68bc8>
 258:	1349053b 	movtne	r0, #38203	; 0x953b
 25c:	0b0d0b0b 	bleq	342e90 <__cs3_heap_start+0x2297f0>
 260:	0b380b0c 	bleq	e02e98 <__cs3_heap_start+0xce97f8>
 264:	160e0000 	strne	r0, [lr], -r0
 268:	3a0e0300 	bcc	380e70 <__cs3_heap_start+0x2677d0>
 26c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 270:	0f000013 	svceq	0x00000013
 274:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 278:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 27c:	0b381349 	bleq	e04fa8 <__cs3_heap_start+0xceb908>
 280:	0d100000 	ldceq	0, cr0, [r0, #-0]
 284:	3a0e0300 	bcc	380e8c <__cs3_heap_start+0x2677ec>
 288:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	000b3813 	andeq	r3, fp, r3, lsl r8
 290:	01041100 	mrseq	r1, (UNDEF: 20)
 294:	0b0b0e03 	bleq	2c3aa8 <__cs3_heap_start+0x1aa408>
 298:	0b3a1349 	bleq	e84fc4 <__cs3_heap_start+0xd6b924>
 29c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 2a0:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
 2a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 2a8:	1300000b 	movwne	r0, #11
 2ac:	0b0b0117 	bleq	2c0710 <__cs3_heap_start+0x1a7070>
 2b0:	0b3b0b3a 	bleq	ec2fa0 <__cs3_heap_start+0xda9900>
 2b4:	00001301 	andeq	r1, r0, r1, lsl #6
 2b8:	03000d14 	movweq	r0, #3348	; 0xd14
 2bc:	3b0b3a08 	blcc	2ceae4 <__cs3_heap_start+0x1b5444>
 2c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 2c4:	01171500 	tsteq	r7, r0, lsl #10
 2c8:	0b0b0e03 	bleq	2c3adc <__cs3_heap_start+0x1aa43c>
 2cc:	0b3b0b3a 	bleq	ec2fbc <__cs3_heap_start+0xda991c>
 2d0:	00001301 	andeq	r1, r0, r1, lsl #6
 2d4:	03000d16 	movweq	r0, #3350	; 0xd16
 2d8:	3b0b3a0e 	blcc	2ceb18 <__cs3_heap_start+0x1b5478>
 2dc:	0013490b 	andseq	r4, r3, fp, lsl #18
 2e0:	01131700 	tsteq	r3, r0, lsl #14
 2e4:	0b0b0e03 	bleq	2c3af8 <__cs3_heap_start+0x1aa458>
 2e8:	0b3b0b3a 	bleq	ec2fd8 <__cs3_heap_start+0xda9938>
 2ec:	00001301 	andeq	r1, r0, r1, lsl #6
 2f0:	03000d18 	movweq	r0, #3352	; 0xd18
 2f4:	3b0b3a0e 	blcc	2ceb34 <__cs3_heap_start+0x1b5494>
 2f8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2fc:	1900000b 	stmdbne	r0, {r0, r1, r3}
 300:	0e030104 	adfeqs	f0, f3, f4
 304:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 308:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 30c:	00001301 	andeq	r1, r0, r1, lsl #6
 310:	03000d1a 	movweq	r0, #3354	; 0xd1a
 314:	3b0b3a0e 	blcc	2ceb54 <__cs3_heap_start+0x1b54b4>
 318:	0b13490b 	bleq	4d274c <__cs3_heap_start+0x3b90ac>
 31c:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
 320:	000b380b 	andeq	r3, fp, fp, lsl #16
 324:	00281b00 	eoreq	r1, r8, r0, lsl #22
 328:	051c0e03 	ldreq	r0, [ip, #-3587]	; 0xfffff1fd
 32c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 330:	3a0e0301 	bcc	380f3c <__cs3_heap_start+0x26789c>
 334:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 338:	11134919 	tstne	r3, r9, lsl r9
 33c:	40061201 	andmi	r1, r6, r1, lsl #4
 340:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 344:	00001301 	andeq	r1, r0, r1, lsl #6
 348:	0300051d 	movweq	r0, #1309	; 0x51d
 34c:	3b0b3a0e 	blcc	2ceb8c <__cs3_heap_start+0x1b54ec>
 350:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 354:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	03012e1f 	movweq	r2, #7711	; 0x1e1f
 360:	3b0b3a0e 	blcc	2ceba0 <__cs3_heap_start+0x1b5500>
 364:	11192705 	tstne	r9, r5, lsl #14
 368:	40061201 	andmi	r1, r6, r1, lsl #4
 36c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 370:	00001301 	andeq	r1, r0, r1, lsl #6
 374:	03000520 	movweq	r0, #1312	; 0x520
 378:	3b0b3a08 	blcc	2ceba0 <__cs3_heap_start+0x1b5500>
 37c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 380:	21000018 	tstcs	r0, r8, lsl r0
 384:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 388:	0b3a0e03 	bleq	e83b9c <__cs3_heap_start+0xd6a4fc>
 38c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 390:	01111349 	tsteq	r1, r9, asr #6
 394:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 398:	01194297 			; <UNDEFINED> instruction: 0x01194297
 39c:	22000013 	andcs	r0, r0, #19
 3a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3ac:	34230000 	strtcc	r0, [r3], #-0
 3b0:	3a0e0300 	bcc	380fb8 <__cs3_heap_start+0x267918>
 3b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b8:	00180213 	andseq	r0, r8, r3, lsl r2
 3bc:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 3c0:	0b3a0e03 	bleq	e83bd4 <__cs3_heap_start+0xd6a534>
 3c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3c8:	01111349 	tsteq	r1, r9, asr #6
 3cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3d4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 3d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 3e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3e4:	0b260000 	bleq	9803ec <__cs3_heap_start+0x866d4c>
 3e8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 3ec:	27000006 	strcs	r0, [r0, -r6]
 3f0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3f4:	0b3a0e03 	bleq	e83c08 <__cs3_heap_start+0xd6a568>
 3f8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3fc:	01111349 	tsteq	r1, r9, asr #6
 400:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 404:	00194297 	mulseq	r9, r7, r2
 408:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
 40c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 410:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 414:	13491927 	movtne	r1, #39207	; 0x9927
 418:	06120111 			; <UNDEFINED> instruction: 0x06120111
 41c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 420:	00130119 	andseq	r0, r3, r9, lsl r1
 424:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
 428:	0b3a0e03 	bleq	e83c3c <__cs3_heap_start+0xd6a59c>
 42c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 430:	01111349 	tsteq	r1, r9, asr #6
 434:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 438:	01194296 			; <UNDEFINED> instruction: 0x01194296
 43c:	2a000013 	bcs	490 <__cs3_region_num+0x48e>
 440:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 444:	00001301 	andeq	r1, r0, r1, lsl #6
 448:	55010b2b 	strpl	r0, [r1, #-2859]	; 0xfffff4d5
 44c:	2c000017 	stccs	0, cr0, [r0], {23}
 450:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 454:	0b3b0b3a 	bleq	ec3144 <__cs3_heap_start+0xda9aa4>
 458:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 45c:	01000000 	mrseq	r0, (UNDEF: 0)
 460:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 464:	0e030b13 	vmoveq.32	d3[0], r0
 468:	01110e1b 	tsteq	r1, fp, lsl lr
 46c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 470:	24020000 	strcs	r0, [r2], #-0
 474:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 478:	000e030b 	andeq	r0, lr, fp, lsl #6
 47c:	00160300 	andseq	r0, r6, r0, lsl #6
 480:	0b3a0e03 	bleq	e83c94 <__cs3_heap_start+0xd6a5f4>
 484:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 488:	24040000 	strcs	r0, [r4], #-0
 48c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 490:	0008030b 	andeq	r0, r8, fp, lsl #6
 494:	000f0500 	andeq	r0, pc, r0, lsl #10
 498:	00000b0b 	andeq	r0, r0, fp, lsl #22
 49c:	0b000f06 	bleq	40bc <__cs3_region_zero_size_ram+0x2674>
 4a0:	0013490b 	andseq	r4, r3, fp, lsl #18
 4a4:	00260700 	eoreq	r0, r6, r0, lsl #14
 4a8:	00001349 	andeq	r1, r0, r9, asr #6
 4ac:	03010408 	movweq	r0, #5128	; 0x1408
 4b0:	490b0b0e 	stmdbmi	fp, {r1, r2, r3, r8, r9, fp}
 4b4:	3b0b3a13 	blcc	2ced08 <__cs3_heap_start+0x1b5668>
 4b8:	0013010b 	andseq	r0, r3, fp, lsl #2
 4bc:	00280900 	eoreq	r0, r8, r0, lsl #18
 4c0:	0b1c0e03 	bleq	703cd4 <__cs3_heap_start+0x5ea634>
 4c4:	160a0000 	strne	r0, [sl], -r0
 4c8:	3a0e0300 	bcc	3810d0 <__cs3_heap_start+0x267a30>
 4cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d0:	0b000013 	bleq	524 <__cs3_region_num+0x522>
 4d4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 4d8:	00001301 	andeq	r1, r0, r1, lsl #6
 4dc:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 4e0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 4e4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 4e8:	0b3a0b0b 	bleq	e8311c <__cs3_heap_start+0xd69a7c>
 4ec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 4f0:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 4f4:	3a0e0300 	bcc	3810fc <__cs3_heap_start+0x267a5c>
 4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4fc:	000b3813 	andeq	r3, fp, r3, lsl r8
 500:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 504:	0b3a0e03 	bleq	e83d18 <__cs3_heap_start+0xd6a678>
 508:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 50c:	01111349 	tsteq	r1, r9, asr #6
 510:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 514:	01194297 			; <UNDEFINED> instruction: 0x01194297
 518:	10000013 	andne	r0, r0, r3, lsl r0
 51c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 520:	0b3b0b3a 	bleq	ec3210 <__cs3_heap_start+0xda9b70>
 524:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 528:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
 52c:	12000000 	andne	r0, r0, #0
 530:	0e03012e 	adfeqsp	f0, f3, #0.5
 534:	0b3b0b3a 	bleq	ec3224 <__cs3_heap_start+0xda9b84>
 538:	01111927 	tsteq	r1, r7, lsr #18
 53c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 540:	01194297 			; <UNDEFINED> instruction: 0x01194297
 544:	13000013 	movwne	r0, #19
 548:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 54c:	0b3b0b3a 	bleq	ec323c <__cs3_heap_start+0xda9b9c>
 550:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 554:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 558:	03193f01 	tsteq	r9, #1, 30
 55c:	3b0b3a0e 	blcc	2ced9c <__cs3_heap_start+0x1b56fc>
 560:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 564:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 568:	96184006 	ldrls	r4, [r8], -r6
 56c:	13011942 	movwne	r1, #6466	; 0x1942
 570:	34150000 	ldrcc	r0, [r5], #-0
 574:	3a080300 	bcc	20117c <__cs3_heap_start+0xe7adc>
 578:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 57c:	00180213 	andseq	r0, r8, r3, lsl r2
 580:	010b1600 	tsteq	fp, r0, lsl #12
 584:	06120111 			; <UNDEFINED> instruction: 0x06120111
 588:	00001301 	andeq	r1, r0, r1, lsl #6
 58c:	11010b17 	tstne	r1, r7, lsl fp
 590:	00061201 	andeq	r1, r6, r1, lsl #4
 594:	002e1800 	eoreq	r1, lr, r0, lsl #16
 598:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 59c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5a0:	13491927 	movtne	r1, #39207	; 0x9927
 5a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5ac:	19000019 	stmdbne	r0, {r0, r3, r4}
 5b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5b4:	0b3a0e03 	bleq	e83dc8 <__cs3_heap_start+0xd6a728>
 5b8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 5bc:	01111349 	tsteq	r1, r9, asr #6
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5c8:	1a000013 	bne	61c <__cs3_region_num+0x61a>
 5cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d8:	341b0000 	ldrcc	r0, [fp], #-0
 5dc:	3a0e0300 	bcc	3811e4 <__cs3_heap_start+0x267b44>
 5e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5e4:	00180213 	andseq	r0, r8, r3, lsl r2
 5e8:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 5ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 5f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5f4:	13491927 	movtne	r1, #39207	; 0x9927
 5f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 600:	00130119 	andseq	r0, r3, r9, lsl r1
 604:	00341d00 	eorseq	r1, r4, r0, lsl #26
 608:	0b3a0e03 	bleq	e83e1c <__cs3_heap_start+0xd6a77c>
 60c:	1349053b 	movtne	r0, #38203	; 0x953b
 610:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 614:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 618:	03193f00 	tsteq	r9, #0, 30
 61c:	3b0b3a0e 	blcc	2cee5c <__cs3_heap_start+0x1b57bc>
 620:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 624:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 628:	96184006 	ldrls	r4, [r8], -r6
 62c:	00001942 	andeq	r1, r0, r2, asr #18
 630:	3f012e1f 	svccc	0x00012e1f
 634:	3a0e0319 	bcc	3812a0 <__cs3_heap_start+0x267c00>
 638:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 63c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 640:	96184006 	ldrls	r4, [r8], -r6
 644:	13011942 	movwne	r1, #6466	; 0x1942
 648:	01200000 			; <UNDEFINED> instruction: 0x01200000
 64c:	01134901 	tsteq	r3, r1, lsl #18
 650:	21000013 	tstcs	r0, r3, lsl r0
 654:	13490021 	movtne	r0, #36897	; 0x9021
 658:	00000b2f 	andeq	r0, r0, pc, lsr #22
 65c:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
 660:	00052f13 	andeq	r2, r5, r3, lsl pc
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000229 	andeq	r0, r0, r9, lsr #4
       4:	016d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	63010000 	movwvs	r0, #4096	; 0x1000
      1c:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
      20:	615c7370 	cmpvs	ip, r0, ror r3
      24:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
      28:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
      2c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      30:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
      34:	655c302e 	ldrbvs	r3, [ip, #-46]	; 0xffffffd2
      38:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
      3c:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
      40:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
      44:	6f6f745f 	svcvs	0x006f745f
      48:	6d5c736c 	ldclvs	3, cr7, [ip, #-432]	; 0xfffffe50
      4c:	6f746e65 	svcvs	0x00746e65
      50:	6e675c72 	mcrvs	12, 3, r5, cr7, cr2, {3}
      54:	72615c75 	rsbvc	r5, r1, #29952	; 0x7500
      58:	61625c6d 	cmnvs	r2, sp, ror #24
      5c:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
      60:	5c6c6174 	stfple	f6, [ip], #-464	; 0xfffffe30
      64:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      68:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
      6c:	652d6172 	strvs	r6, [sp, #-370]!	; 0xfffffe8e
      70:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
      74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      78:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
      7c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
      80:	00656e69 	rsbeq	r6, r5, r9, ror #28
      84:	615c3a63 	cmpvs	ip, r3, ror #20
      88:	5c737070 	ldclpl	0, cr7, [r3], #-448	; 0xfffffe40
      8c:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
      90:	715c6172 	cmpvc	ip, r2, ror r1
      94:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
      98:	315c7375 	cmpcc	ip, r5, ror r3
      9c:	5c302e36 	ldcpl	14, cr2, [r0], #-216	; 0xffffff28
      a0:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
      a4:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
      a8:	736f685c 	cmnvc	pc, #92, 16	; 0x5c0000
      ac:	6f745f74 	svcvs	0x00745f74
      b0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      b4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
      b8:	675c726f 	ldrbvs	r7, [ip, -pc, ror #4]
      bc:	615c756e 	cmpvs	ip, lr, ror #10
      c0:	625c6d72 	subsvs	r6, ip, #7296	; 0x1c80
      c4:	6d657261 	sfmvs	f7, 2, [r5, #-388]!	; 0xfffffe7c
      c8:	6c617465 	cfstrdvs	mvd7, [r1], #-404	; 0xfffffe6c
      cc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
      d0:	746c612d 	strbtvc	r6, [ip], #-301	; 0xfffffed3
      d4:	2d617265 	sfmcs	f7, 2, [r1, #-404]!	; 0xfffffe6c
      d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      dc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
      e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      e4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
      e8:	73707061 	cmnvc	r0, #97	; 0x61
      ec:	746c615c 	strbtvc	r6, [ip], #-348	; 0xfffffea4
      f0:	5c617265 	sfmpl	f7, 2, [r1], #-404	; 0xfffffe6c
      f4:	72617571 	rsbvc	r7, r1, #473956352	; 0x1c400000
      f8:	5c737574 	cfldr64pl	mvdx7, [r3], #-464	; 0xfffffe30
      fc:	302e3631 	eorcc	r3, lr, r1, lsr r6
     100:	626d655c 	rsbvs	r6, sp, #92, 10	; 0x17000000
     104:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
     108:	70695c64 	rsbvc	r5, r9, r4, ror #24
     10c:	746c615c 	strbtvc	r6, [ip], #-348	; 0xfffffea4
     110:	5c617265 	sfmpl	f7, 2, [r1], #-404	; 0xfffffe6c
     114:	5c737068 	ldclpl	0, cr7, [r3], #-416	; 0xfffffe60
     118:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
     11c:	685f6172 	ldmdavs	pc, {r1, r4, r5, r6, r8, sp, lr}^	; <UNPREDICTABLE>
     120:	685c7370 	ldmdavs	ip, {r4, r5, r6, r8, r9, ip, sp, lr}^
     124:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     128:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     12c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     130:	616d0000 	cmnvs	sp, r0
     134:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
     138:	00000000 	andeq	r0, r0, r0
     13c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     140:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     144:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     148:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     14c:	00000100 	andeq	r0, r0, r0, lsl #2
     150:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     154:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     158:	00000200 	andeq	r0, r0, r0, lsl #4
     15c:	5f746c61 	svcpl	0x00746c61
     160:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     164:	70757272 	rsbsvc	r7, r5, r2, ror r2
     168:	6f635f74 	svcvs	0x00635f74
     16c:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
     170:	0300682e 	movweq	r6, #2094	; 0x82e
     174:	00000000 	andeq	r0, r0, r0
     178:	01e40205 	mvneq	r0, r5, lsl #4
     17c:	2c030010 	stccs	0, cr0, [r3], {16}
     180:	4b4b6701 	blmi	12d9d8c <__cs3_heap_start+0x11c06ec>
     184:	82100387 	andshi	r0, r0, #469762050	; 0x1c000002
     188:	d92fd7a0 	stmdble	pc!, {r5, r7, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
     18c:	f4f46769 			; <UNDEFINED> instruction: 0xf4f46769
     190:	304b304b 	subcc	r3, fp, fp, asr #32
     194:	304b304b 	subcc	r3, fp, fp, asr #32
     198:	d731672f 	ldrle	r6, [r1, -pc, lsr #14]!
     19c:	68a02c32 	stmiavs	r0!, {r1, r4, r5, sl, fp, sp}
     1a0:	8475084b 	ldrbthi	r0, [r5], #-2123	; 0xfffff7b5
     1a4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     1a8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     1ac:	4b9f84bd 	blmi	fe7e14a8 <__cs3_heap_end+0xbe7e14a8>
     1b0:	303d08f4 	ldrshtcc	r0, [sp], -r4
     1b4:	30133602 	andscc	r3, r3, r2, lsl #12
     1b8:	30133c02 	andscc	r3, r3, r2, lsl #24
     1bc:	30132802 	andscc	r2, r3, r2, lsl #16
     1c0:	4b83842f 	blmi	fe0e1284 <__cs3_heap_end+0xbe0e1284>
     1c4:	304bae08 	subcc	sl, fp, r8, lsl #28
     1c8:	304b304b 	subcc	r3, fp, fp, asr #32
     1cc:	304b304b 	subcc	r3, fp, fp, asr #32
     1d0:	304b304b 	subcc	r3, fp, fp, asr #32
     1d4:	304b304b 	subcc	r3, fp, fp, asr #32
     1d8:	842f304b 	strthi	r3, [pc], #-75	; 1e0 <__cs3_region_num+0x1de>
     1dc:	08590884 	ldmdaeq	r9, {r2, r7, fp}^
     1e0:	08590859 	ldmdaeq	r9, {r0, r3, r4, r6, fp}^
     1e4:	834b685a 	movthi	r6, #47194	; 0xb85a
     1e8:	db29a5d7 	blle	a6994c <__cs3_heap_start+0x9502ac>
     1ec:	2f2fa24d 	svccs	0x002fa24d
     1f0:	342f2f2f 	strtcc	r2, [pc], #-3887	; 1f8 <__cs3_region_num+0x1f6>
     1f4:	9f679fa4 	svcls	0x00679fa4
     1f8:	4b4a1203 	blmi	1284a0c <__cs3_heap_start+0x116b36c>
     1fc:	661403a0 	ldrvs	r0, [r4], -r0, lsr #7
     200:	01040200 	mrseq	r0, R12_usr
     204:	be062e06 	cdplt	14, 0, cr2, cr6, cr6, {0}
     208:	6da1bb30 	stcvs	11, cr11, [r1, #192]!	; 0xc0
     20c:	0383a04b 	orreq	sl, r3, #75	; 0x4b
     210:	e608820c 	str	r8, [r8], -ip, lsl #4
     214:	a62fd767 	strtge	sp, [pc], -r7, ror #14
     218:	2fd76730 	svccs	0x00d76730
     21c:	d76730a6 	strble	r3, [r7, -r6, lsr #1]!
     220:	6730a62f 	ldrvs	sl, [r0, -pc, lsr #12]!
     224:	34a62fd7 	strtcc	r2, [r6], #4055	; 0xfd7
     228:	01000202 	tsteq	r0, r2, lsl #4
     22c:	00004301 	andeq	r4, r0, r1, lsl #6
     230:	2a000200 	bcs	a38 <__cs3_region_num+0xa36>
     234:	02000000 	andeq	r0, r0, #0
     238:	0d0efb01 	vstreq	d15, [lr, #-4]
     23c:	01010100 	mrseq	r0, (UNDEF: 17)
     240:	00000001 	andeq	r0, r0, r1
     244:	01000001 	tsteq	r0, r1
     248:	65697400 	strbvs	r7, [r9, #-1024]!	; 0xfffffc00
     24c:	5f69755f 	svcpl	0x0069755f
     250:	6e6e6f63 	cdpvs	15, 6, cr6, cr14, cr3, {3}
     254:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     258:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
     25c:	00000000 	andeq	r0, r0, r0
     260:	02050000 	andeq	r0, r5, #0
     264:	00100a2c 	andseq	r0, r0, ip, lsr #20
     268:	4a0d0314 	bmi	340ec0 <__cs3_heap_start+0x227820>
     26c:	0283dedb 	addeq	sp, r3, #3504	; 0xdb0
     270:	01010008 	tsteq	r1, r8
     274:	000015d0 	ldrdeq	r1, [r0], -r0
     278:	02cc0002 	sbceq	r0, ip, #2
     27c:	01020000 	mrseq	r0, (UNDEF: 2)
     280:	000d0efb 	strdeq	r0, [sp], -fp
     284:	01010101 	tsteq	r1, r1, lsl #2
     288:	01000000 	mrseq	r0, (UNDEF: 0)
     28c:	63010000 	movwvs	r0, #4096	; 0x1000
     290:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
     294:	615c7370 	cmpvs	ip, r0, ror r3
     298:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     29c:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
     2a0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     2a4:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
     2a8:	655c302e 	ldrbvs	r3, [ip, #-46]	; 0xffffffd2
     2ac:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     2b0:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     2b4:	615c7069 	cmpvs	ip, r9, rrx
     2b8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     2bc:	70685c61 	rsbvc	r5, r8, r1, ror #24
     2c0:	6c615c73 	stclvs	12, cr5, [r1], #-460	; 0xfffffe34
     2c4:	61726574 	cmnvs	r2, r4, ror r5
     2c8:	7370685f 	cmnvc	r0, #6225920	; 0x5f0000
     2cc:	6c77685c 	ldclvs	8, cr6, [r7], #-368	; 0xfffffe90
     2d0:	695c6269 	ldmdbvs	ip, {r0, r3, r5, r6, r9, sp, lr}^
     2d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     2d8:	63006564 	movwvs	r6, #1380	; 0x564
     2dc:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
     2e0:	615c7370 	cmpvs	ip, r0, ror r3
     2e4:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     2e8:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
     2ec:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     2f0:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
     2f4:	715c302e 	cmpvc	ip, lr, lsr #32
     2f8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     2fc:	2e2f7375 	mcrcs	3, 1, r7, cr15, cr5, {3}
     300:	6d652f2e 	stclvs	15, cr2, [r5, #-184]!	; 0xffffff48
     304:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     308:	692f6465 	stmdbvs	pc!, {r0, r2, r5, r6, sl, sp, lr}	; <UNPREDICTABLE>
     30c:	6c612f70 	stclvs	15, cr2, [r1], #-448	; 0xfffffe40
     310:	61726574 	cmnvs	r2, r4, ror r5
     314:	7370682f 	cmnvc	r0, #3080192	; 0x2f0000
     318:	746c612f 	strbtvc	r6, [ip], #-303	; 0xfffffed1
     31c:	5f617265 	svcpl	0x00617265
     320:	2f737068 	svccs	0x00737068
     324:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     328:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     32c:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
     330:	2f72676d 	svccs	0x0072676d
     334:	5f636f73 	svcpl	0x00636f73
     338:	615f7663 	cmpvs	pc, r3, ror #12
     33c:	3a630076 	bcc	18c051c <__cs3_heap_start+0x17a6e7c>
     340:	7070615c 	rsbsvc	r6, r0, ip, asr r1
     344:	6c615c73 	stclvs	12, cr5, [r1], #-460	; 0xfffffe34
     348:	61726574 	cmnvs	r2, r4, ror r5
     34c:	6175715c 	cmnvs	r5, ip, asr r1
     350:	73757472 	cmnvc	r5, #1912602624	; 0x72000000
     354:	2e36315c 	mrccs	1, 1, r3, cr6, cr12, {2}
     358:	6d655c30 	stclvs	12, cr5, [r5, #-192]!	; 0xffffff40
     35c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
     360:	685c6465 	ldmdavs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     364:	5f74736f 	svcpl	0x0074736f
     368:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1a0 <__cs3_region_num+0x19e>
     36c:	656d5c73 	strbvs	r5, [sp, #-3187]!	; 0xfffff38d
     370:	726f746e 	rsbvc	r7, pc, #1845493760	; 0x6e000000
     374:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0xfffff8a4
     378:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     37c:	7261625c 	rsbvc	r6, r1, #92, 4	; 0xc0000005
     380:	74656d65 	strbtvc	r6, [r5], #-3429	; 0xfffff29b
     384:	615c6c61 	cmpvs	ip, r1, ror #24
     388:	612d6d72 			; <UNDEFINED> instruction: 0x612d6d72
     38c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     390:	61652d61 	cmnvs	r5, r1, ror #26
     394:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     398:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     39c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     3a0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     3a4:	6300656e 	movwvs	r6, #1390	; 0x56e
     3a8:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
     3ac:	615c7370 	cmpvs	ip, r0, ror r3
     3b0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     3b4:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
     3b8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     3bc:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
     3c0:	655c302e 	ldrbvs	r3, [ip, #-46]	; 0xffffffd2
     3c4:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     3c8:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     3cc:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
     3d0:	6f6f745f 	svcvs	0x006f745f
     3d4:	6d5c736c 	ldclvs	3, cr7, [ip, #-432]	; 0xfffffe50
     3d8:	6f746e65 	svcvs	0x00746e65
     3dc:	6e675c72 	mcrvs	12, 3, r5, cr7, cr2, {3}
     3e0:	72615c75 	rsbvc	r5, r1, #29952	; 0x7500
     3e4:	61625c6d 	cmnvs	r2, sp, ror #24
     3e8:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
     3ec:	5c6c6174 	stfple	f6, [ip], #-464	; 0xfffffe30
     3f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     3f4:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
     3f8:	652d6172 	strvs	r6, [sp, #-370]!	; 0xfffffe8e
     3fc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     400:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     404:	00656475 	rsbeq	r6, r5, r5, ror r4
     408:	615c3a63 	cmpvs	ip, r3, ror #20
     40c:	5c737070 	ldclpl	0, cr7, [r3], #-448	; 0xfffffe40
     410:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
     414:	715c6172 	cmpvc	ip, r2, ror r1
     418:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     41c:	315c7375 	cmpcc	ip, r5, ror r3
     420:	5c302e36 	ldcpl	14, cr2, [r0], #-216	; 0xffffff28
     424:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
     428:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
     42c:	5c70695c 	ldclpl	9, cr6, [r0], #-368	; 0xfffffe90
     430:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
     434:	685c6172 	ldmdavs	ip, {r1, r4, r5, r6, r8, sp, lr}^
     438:	615c7370 	cmpvs	ip, r0, ror r3
     43c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     440:	70685f61 	rsbvc	r5, r8, r1, ror #30
     444:	77685c73 			; <UNDEFINED> instruction: 0x77685c73
     448:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
     44c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     450:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     454:	5f636f73 	svcpl	0x00636f73
     458:	615f7663 	cmpvs	pc, r3, ror #12
     45c:	6f735c76 	svcvs	0x00735c76
     460:	006c6163 	rsbeq	r6, ip, r3, ror #2
     464:	615c3a63 	cmpvs	ip, r3, ror #20
     468:	5c737070 	ldclpl	0, cr7, [r3], #-448	; 0xfffffe40
     46c:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
     470:	715c6172 	cmpvc	ip, r2, ror r1
     474:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     478:	315c7375 	cmpcc	ip, r5, ror r3
     47c:	5c302e36 	ldcpl	14, cr2, [r0], #-216	; 0xffffff28
     480:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
     484:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
     488:	5c70695c 	ldclpl	9, cr6, [r0], #-368	; 0xfffffe90
     48c:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
     490:	685c6172 	ldmdavs	ip, {r1, r4, r5, r6, r8, sp, lr}^
     494:	615c7370 	cmpvs	ip, r0, ror r3
     498:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     49c:	70685f61 	rsbvc	r5, r8, r1, ror #30
     4a0:	77685c73 			; <UNDEFINED> instruction: 0x77685c73
     4a4:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
     4a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     4ac:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     4b0:	5f636f73 	svcpl	0x00636f73
     4b4:	615f7663 	cmpvs	pc, r3, ror #12
     4b8:	61000076 	tstvs	r0, r6, ror r0
     4bc:	705f746c 	subsvc	r7, pc, ip, ror #8
     4c0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
     4c4:	00682e66 	rsbeq	r2, r8, r6, ror #28
     4c8:	61000001 	tstvs	r0, r1
     4cc:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     4d0:	6b636f6c 	blvs	18dc288 <__cs3_heap_start+0x17c2be8>
     4d4:	6e616d5f 	mcrvs	13, 3, r6, cr1, cr15, {2}
     4d8:	72656761 	rsbvc	r6, r5, #25427968	; 0x1840000
     4dc:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
     4e0:	645f0000 	ldrbvs	r0, [pc], #-0	; 4e8 <__cs3_region_num+0x4e6>
     4e4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     4e8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 4f0 <__cs3_region_num+0x4ee>
     4ec:	73657079 	cmnvc	r5, #121	; 0x79
     4f0:	0300682e 	movweq	r6, #2094	; 0x82e
     4f4:	74730000 	ldrbtvc	r0, [r3], #-0
     4f8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     4fc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     500:	77680000 	strbvc	r0, [r8, -r0]!
     504:	2e62696c 	cdpcs	9, 6, cr6, cr2, cr12, {3}
     508:	00010068 	andeq	r0, r1, r8, rrx
     50c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     510:	6b6c635f 	blvs	1b19294 <__cs3_heap_start+0x19ffbf4>
     514:	2e72676d 	cdpcs	7, 7, cr6, cr2, cr13, {3}
     518:	00050068 	andeq	r0, r5, r8, rrx
     51c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     520:	6f6c635f 	svcvs	0x006c635f
     524:	675f6b63 	ldrbvs	r6, [pc, -r3, ror #22]
     528:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     52c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     530:	6c610000 	stclvs	0, cr0, [r1], #-0
     534:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     538:	5f6b636f 	svcpl	0x006b636f
     53c:	616e616d 	cmnvs	lr, sp, ror #2
     540:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
     544:	00060068 	andeq	r0, r6, r8, rrx
     548:	05000000 	streq	r0, [r0, #-0]
     54c:	100a8c02 	andne	r8, sl, r2, lsl #24
     550:	00da0300 	sbcseq	r0, sl, r0, lsl #6
     554:	02046601 	andeq	r6, r4, #1048576	; 0x100000
     558:	ba01ad03 	blt	6b96c <__cs3_region_init_size_ram+0x53d14>
     55c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     560:	02003002 	andeq	r3, r0, #2
     564:	00480204 	subeq	r0, r8, r4, lsl #4
     568:	06010402 	streq	r0, [r1], -r2, lsl #8
     56c:	036a0666 	cmneq	sl, #106954752	; 0x6600000
     570:	00678213 	rsbeq	r8, r7, r3, lsl r2
     574:	4f020402 	svcmi	0x00020402
     578:	02040200 	andeq	r0, r4, #0, 4
     57c:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
     580:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     584:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     588:	00660601 	rsbeq	r0, r6, r1, lsl #12
     58c:	4a020402 	bmi	8159c <__cs3_region_init_size_ram+0x69944>
     590:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     594:	bb852f06 	bllt	fe14c1b4 <__cs3_heap_end+0xbe14c1b4>
     598:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     59c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     5a0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     5a4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     5a8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     5ac:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     5b0:	a0834f69 	addge	r4, r3, r9, ror #30
     5b4:	032fa04d 			; <UNDEFINED> instruction: 0x032fa04d
     5b8:	00dc8222 	sbcseq	r8, ip, r2, lsr #4
     5bc:	f5010402 			; <UNDEFINED> instruction: 0xf5010402
     5c0:	01040200 	mrseq	r0, R12_usr
     5c4:	0867a067 	stmdaeq	r7!, {r0, r1, r2, r5, r6, sp, pc}^
     5c8:	820e0325 	andhi	r0, lr, #-1811939328	; 0x94000000
     5cc:	f34e8a9f 	vpmin.u8	d24, d30, d15
     5d0:	034b8a30 	movteq	r8, #47664	; 0xba30
     5d4:	09038209 	stmdbeq	r3, {r0, r3, r9, pc}
     5d8:	684c9f82 	stmdavs	ip, {r1, r7, r8, r9, sl, fp, ip, pc}^
     5dc:	684d8183 	stmdavs	sp, {r0, r1, r7, r8, pc}^
     5e0:	684d8183 	stmdavs	sp, {r0, r1, r7, r8, pc}^
     5e4:	2f318183 	svccs	0x00318183
     5e8:	67820903 	strvs	r0, [r2, r3, lsl #18]
     5ec:	d8a2834e 	stmiale	r2!, {r1, r2, r3, r6, r8, r9, pc}
     5f0:	080b034b 	stmdaeq	fp, {r0, r1, r3, r6, r8, r9}
     5f4:	09032f3c 	stmdbeq	r3, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
     5f8:	684d9f66 	stmdavs	sp, {r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}^
     5fc:	83682308 	cmnhi	r8, #8, 6	; 0x20000000
     600:	f7846884 			; <UNDEFINED> instruction: 0xf7846884
     604:	8209032f 	andhi	r0, r9, #-1140850688	; 0xbc000000
     608:	4e4b4e9f 	mcrmi	14, 2, r4, cr11, cr15, {4}
     60c:	84836bbc 	strhi	r6, [r3], #3004	; 0xbbc
     610:	01040200 	mrseq	r0, R12_usr
     614:	84068206 	strhi	r8, [r6], #-518	; 0xfffffdfa
     618:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     61c:	06820601 	streq	r0, [r2], r1, lsl #12
     620:	004b4c84 	subeq	r4, fp, r4, lsl #25
     624:	06010402 	streq	r0, [r1], -r2, lsl #8
     628:	00670666 	rsbeq	r0, r7, r6, ror #12
     62c:	06010402 	streq	r0, [r1], -r2, lsl #8
     630:	00670666 	rsbeq	r0, r7, r6, ror #12
     634:	06020402 	streq	r0, [r2], -r2, lsl #8
     638:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     63c:	86066603 	strhi	r6, [r6], -r3, lsl #12
     640:	31a0a183 	lslcc	sl, r3, #3
     644:	02004dd7 	andeq	r4, r0, #13760	; 0x35c0
     648:	66060104 	strvs	r0, [r6], -r4, lsl #2
     64c:	a3846806 	orrge	r6, r4, #393216	; 0x60000
     650:	0084836b 	addeq	r8, r4, fp, ror #6
     654:	06010402 	streq	r0, [r1], -r2, lsl #8
     658:	4c840682 	stcmi	6, cr0, [r4], {130}	; 0x82
     65c:	01040200 	mrseq	r0, R12_usr
     660:	84068206 	strhi	r8, [r6], #-518	; 0xfffffdfa
     664:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
     668:	66060104 	strvs	r0, [r6], -r4, lsl #2
     66c:	02006706 	andeq	r6, r0, #1572864	; 0x180000
     670:	66060104 	strvs	r0, [r6], -r4, lsl #2
     674:	02006706 	andeq	r6, r0, #1572864	; 0x180000
     678:	66060204 	strvs	r0, [r6], -r4, lsl #4
     67c:	03040200 	movweq	r0, #16896	; 0x4200
     680:	83860666 	orrhi	r0, r6, #106954752	; 0x6600000
     684:	d7a1319f 			; <UNDEFINED> instruction: 0xd7a1319f
     688:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
     68c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     690:	69a38468 	stmibvs	r3!, {r3, r5, r6, sl, pc}
     694:	319fa183 	orrscc	sl, pc, r3, lsl #3
     698:	2f4d6bd7 	svccs	0x004d6bd7
     69c:	4b4ef36e 	blmi	13bd45c <__cs3_heap_start+0x12a3dbc>
     6a0:	83a3684d 			; <UNDEFINED> instruction: 0x83a3684d
     6a4:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
     6a8:	06820601 	streq	r0, [r2], r1, lsl #12
     6ac:	02004c84 	andeq	r4, r0, #132, 24	; 0x8400
     6b0:	82060104 	andhi	r0, r6, #4, 2
     6b4:	4b4c8406 	blmi	13216d4 <__cs3_heap_start+0x1208034>
     6b8:	01040200 	mrseq	r0, R12_usr
     6bc:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     6c0:	01040200 	mrseq	r0, R12_usr
     6c4:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     6c8:	02040200 	andeq	r0, r4, #0, 4
     6cc:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     6d0:	06660304 	strbteq	r0, [r6], -r4, lsl #6
     6d4:	004cd984 	subeq	sp, ip, r4, lsl #19
     6d8:	06020402 	streq	r0, [r2], -r2, lsl #8
     6dc:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     6e0:	8a066603 	bhi	199ef4 <__cs3_heap_start+0x80854>
     6e4:	836b696a 	cmnhi	fp, #1736704	; 0x1a8000
     6e8:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
     6ec:	06820601 	streq	r0, [r2], r1, lsl #12
     6f0:	02004c84 	andeq	r4, r0, #132, 24	; 0x8400
     6f4:	82060104 	andhi	r0, r6, #4, 2
     6f8:	4b4c8406 	blmi	1321718 <__cs3_heap_start+0x1208078>
     6fc:	01040200 	mrseq	r0, R12_usr
     700:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     704:	01040200 	mrseq	r0, R12_usr
     708:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     70c:	02040200 	andeq	r0, r4, #0, 4
     710:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     714:	06660304 	strbteq	r0, [r6], -r4, lsl #6
     718:	0200a084 	andeq	sl, r0, #132	; 0x84
     71c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     720:	02040200 	andeq	r0, r4, #0, 4
     724:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     728:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     72c:	6a060404 	bvs	181744 <__cs3_heap_start+0x680a4>
     730:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     734:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     738:	02008404 	andeq	r8, r0, #4, 8	; 0x4000000
     73c:	66060204 	strvs	r0, [r6], -r4, lsl #4
     740:	03040200 	movweq	r0, #16896	; 0x4200
     744:	09030666 	stmdbeq	r3, {r1, r2, r5, r6, r9, sl}
     748:	a0686982 	rsbge	r6, r8, r2, lsl #19
     74c:	01040200 	mrseq	r0, R12_usr
     750:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     754:	004a0204 	subeq	r0, sl, r4, lsl #4
     758:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     75c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     760:	02006906 	andeq	r6, r0, #98304	; 0x18000
     764:	4c830404 	cfstrsmi	mvf0, [r3], {4}
     768:	660d032f 	strvs	r0, [sp], -pc, lsr #6
     76c:	bb684c9f 	bllt	1a139f0 <__cs3_heap_start+0x18fa350>
     770:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     774:	02004801 	andeq	r4, r0, #65536	; 0x10000
     778:	4a060304 	bmi	181390 <__cs3_heap_start+0x67cf0>
     77c:	02040200 	andeq	r0, r4, #0, 4
     780:	684e062e 	stmdavs	lr, {r1, r2, r3, r5, r9, sl}^
     784:	02009fbb 	andeq	r9, r0, #748	; 0x2ec
     788:	00480104 	subeq	r0, r8, r4, lsl #2
     78c:	06030402 	streq	r0, [r3], -r2, lsl #8
     790:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     794:	4e062e02 	cdpmi	14, 0, cr2, cr6, cr2, {0}
     798:	009fbb68 	addseq	fp, pc, r8, ror #22
     79c:	48010402 	stmdami	r1, {r1, sl}
     7a0:	03040200 	movweq	r0, #16896	; 0x4200
     7a4:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     7a8:	062e0204 	strteq	r0, [lr], -r4, lsl #4
     7ac:	9f8a2f32 	svcls	0x008a2f32
     7b0:	6968684e 	stmdbvs	r8!, {r1, r2, r3, r6, fp, sp, lr}^
     7b4:	686868bb 	stmdavs	r8!, {r0, r1, r3, r4, r5, r7, fp, sp, lr}^
     7b8:	69696868 	stmdbvs	r9!, {r3, r5, r6, fp, sp, lr}^
     7bc:	686868bb 	stmdavs	r8!, {r0, r1, r3, r4, r5, r7, fp, sp, lr}^
     7c0:	2f4d6868 	svccs	0x004d6868
     7c4:	024c9f89 	subeq	r9, ip, #548	; 0x224
     7c8:	329f187a 	addscc	r1, pc, #7995392	; 0x7a0000
     7cc:	30d730d7 	ldrsbcc	r3, [r7], #7
     7d0:	30d730d7 	ldrsbcc	r3, [r7], #7
     7d4:	30d730d7 	ldrsbcc	r3, [r7], #7
     7d8:	30d730d7 	ldrsbcc	r3, [r7], #7
     7dc:	32d730d7 	sbcscc	r3, r7, #215	; 0xd7
     7e0:	30d730d7 	ldrsbcc	r3, [r7], #7
     7e4:	30d730d7 	ldrsbcc	r3, [r7], #7
     7e8:	30d730d7 	ldrsbcc	r3, [r7], #7
     7ec:	30d730d7 	ldrsbcc	r3, [r7], #7
     7f0:	84d730d7 	ldrbhi	r3, [r7], #215	; 0xd7
     7f4:	30d730d7 	ldrsbcc	r3, [r7], #7
     7f8:	30d732d7 	ldrsbcc	r3, [r7], #39	; 0x27
     7fc:	30d730d7 	ldrsbcc	r3, [r7], #7
     800:	314b31d7 	ldrdcc	r3, [fp, #-23]	; 0xffffffe9
     804:	4c9f6e2f 	ldcmi	14, cr6, [pc], {47}	; 0x2f
     808:	83187a02 	tsthi	r8, #8192	; 0x2000
     80c:	d730d732 			; <UNDEFINED> instruction: 0xd730d732
     810:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     814:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     818:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     81c:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     820:	d730d732 			; <UNDEFINED> instruction: 0xd730d732
     824:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     828:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     82c:	d730d730 			; <UNDEFINED> instruction: 0xd730d730
     830:	d831d730 	ldmdale	r1!, {r4, r5, r8, r9, sl, ip, lr, pc}
     834:	84d73183 	ldrbhi	r3, [r7], #387	; 0x183
     838:	32d730d7 	sbcscc	r3, r7, #215	; 0xd7
     83c:	30d730d7 	ldrsbcc	r3, [r7], #7
     840:	31d730d7 	ldrsbcc	r3, [r7, #7]
     844:	6c2f314b 	stfvss	f3, [pc], #-300	; 720 <__cs3_region_num+0x71e>
     848:	7a024c9f 	bvc	93acc <__cs3_region_init_size_ram+0x7be74>
     84c:	03210818 			; <UNDEFINED> instruction: 0x03210818
     850:	324b2e1b 	subcc	r2, fp, #432	; 0x1b0
     854:	30308183 	eorscc	r8, r0, r3, lsl #3
     858:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     85c:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     860:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     864:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     868:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     86c:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     870:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     874:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     878:	3230819f 	eorscc	r8, r0, #-1073741785	; 0xc0000027
     87c:	30308183 	eorscc	r8, r0, r3, lsl #3
     880:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     884:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     888:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     88c:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     890:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     894:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     898:	3230819f 	eorscc	r8, r0, #-1073741785	; 0xc0000027
     89c:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     8a0:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     8a4:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     8a8:	3230819f 	eorscc	r8, r0, #-1073741785	; 0xc0000027
     8ac:	30308183 	eorscc	r8, r0, r3, lsl #3
     8b0:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     8b4:	3030819f 	mlascc	r0, pc, r1, r8	; <UNPREDICTABLE>
     8b8:	3130819f 	teqcc	r0, pc	; <illegal shifter operand>
     8bc:	6d2f324b 	sfmvs	f3, 4, [pc, #-300]!	; 798 <__cs3_region_num+0x796>
     8c0:	0d034d9f 	stceq	13, cr4, [r3, #-636]	; 0xfffffd84
     8c4:	01019e02 	tsteq	r1, r2, lsl #28
     8c8:	304b334b 	subcc	r3, fp, fp, asr #6
     8cc:	03833083 	orreq	r3, r3, #131	; 0x83
     8d0:	02002e0a 	andeq	r2, r0, #10, 28	; 0xa0
     8d4:	9e060104 	adflss	f0, f6, f4
     8d8:	02040200 	andeq	r0, r4, #0, 4
     8dc:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     8e0:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     8e4:	30060404 	andcc	r0, r6, r4, lsl #8
     8e8:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
     8ec:	009e0601 	addseq	r0, lr, r1, lsl #12
     8f0:	4a020402 	bmi	81900 <__cs3_region_init_size_ram+0x69ca8>
     8f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     8f8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     8fc:	34300604 	ldrtcc	r0, [r0], #-1540	; 0xfffff9fc
     900:	01040200 	mrseq	r0, R12_usr
     904:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     908:	004a0204 	subeq	r0, sl, r4, lsl #4
     90c:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     910:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     914:	bd323006 	ldclt	0, cr3, [r2, #-24]!	; 0xffffffe8
     918:	01040200 	mrseq	r0, R12_usr
     91c:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     920:	004a0204 	subeq	r0, sl, r4, lsl #4
     924:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     928:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     92c:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
     930:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
     934:	009e0601 	addseq	r0, lr, r1, lsl #12
     938:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     93c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     940:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     944:	32310604 	eorscc	r0, r1, #4, 12	; 0x400000
     948:	040200d9 	streq	r0, [r2], #-217	; 0xffffff27
     94c:	009e0601 	addseq	r0, lr, r1, lsl #12
     950:	4a020402 	bmi	81960 <__cs3_region_init_size_ram+0x69d08>
     954:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     958:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     95c:	09030604 	stmdbeq	r3, {r2, r9, sl}
     960:	02002b2e 	andeq	r2, r0, #47104	; 0xb800
     964:	9e060104 	adflss	f0, f6, f4
     968:	02040200 	andeq	r0, r4, #0, 4
     96c:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     970:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     974:	31060404 	tstcc	r6, r4, lsl #8
     978:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
     97c:	009e0601 	addseq	r0, lr, r1, lsl #12
     980:	4a020402 	bmi	81990 <__cs3_region_init_size_ram+0x69d38>
     984:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     988:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     98c:	30300604 	eorscc	r0, r0, r4, lsl #12
     990:	01040200 	mrseq	r0, R12_usr
     994:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     998:	004a0204 	subeq	r0, sl, r4, lsl #4
     99c:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     9a0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     9a4:	00303006 	eorseq	r3, r0, r6
     9a8:	06010402 	streq	r0, [r1], -r2, lsl #8
     9ac:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     9b0:	02004a02 	andeq	r4, r0, #8192	; 0x2000
     9b4:	002e0404 	eoreq	r0, lr, r4, lsl #8
     9b8:	06040402 	streq	r0, [r4], -r2, lsl #8
     9bc:	02003130 	andeq	r3, r0, #48, 2
     9c0:	9e060104 	adflss	f0, f6, f4
     9c4:	02040200 	andeq	r0, r4, #0, 4
     9c8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     9cc:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     9d0:	30060404 	andcc	r0, r6, r4, lsl #8
     9d4:	002e0a03 	eoreq	r0, lr, r3, lsl #20
     9d8:	06010402 	streq	r0, [r1], -r2, lsl #8
     9dc:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     9e0:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     9e4:	002e0404 	eoreq	r0, lr, r4, lsl #8
     9e8:	06040402 	streq	r0, [r4], -r2, lsl #8
     9ec:	02003130 	andeq	r3, r0, #48, 2
     9f0:	9e060104 	adflss	f0, f6, f4
     9f4:	02040200 	andeq	r0, r4, #0, 4
     9f8:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     9fc:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     a00:	30060404 	andcc	r0, r6, r4, lsl #8
     a04:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
     a08:	009e0601 	addseq	r0, lr, r1, lsl #12
     a0c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     a10:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a14:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     a18:	35300604 	ldrcc	r0, [r0, #-1540]!	; 0xfffff9fc
     a1c:	01040200 	mrseq	r0, R12_usr
     a20:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     a24:	00820204 	addeq	r0, r2, r4, lsl #4
     a28:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     a2c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a30:	00313006 	eorseq	r3, r1, r6
     a34:	06010402 	streq	r0, [r1], -r2, lsl #8
     a38:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     a3c:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     a40:	002e0404 	eoreq	r0, lr, r4, lsl #8
     a44:	06040402 	streq	r0, [r4], -r2, lsl #8
     a48:	689f3130 	ldmvs	pc, {r4, r5, r8, ip, sp}	; <UNPREDICTABLE>
     a4c:	034a0c03 	movteq	r0, #44035	; 0xac03
     a50:	00682e76 	rsbeq	r2, r8, r6, ror lr
     a54:	06010402 	streq	r0, [r1], -r2, lsl #8
     a58:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     a5c:	02004a02 	andeq	r4, r0, #8192	; 0x2000
     a60:	002e0404 	eoreq	r0, lr, r4, lsl #8
     a64:	06040402 	streq	r0, [r4], -r2, lsl #8
     a68:	00682936 	rsbeq	r2, r8, r6, lsr r9
     a6c:	06010402 	streq	r0, [r1], -r2, lsl #8
     a70:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     a74:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     a78:	002e0404 	eoreq	r0, lr, r4, lsl #8
     a7c:	06040402 	streq	r0, [r4], -r2, lsl #8
     a80:	68bb3231 	ldmvs	fp!, {r0, r4, r5, r9, ip, sp}
     a84:	034a0c03 	movteq	r0, #44035	; 0xac03
     a88:	00682e76 	rsbeq	r2, r8, r6, ror lr
     a8c:	06010402 	streq	r0, [r1], -r2, lsl #8
     a90:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     a94:	02004a02 	andeq	r4, r0, #8192	; 0x2000
     a98:	002e0404 	eoreq	r0, lr, r4, lsl #8
     a9c:	06040402 	streq	r0, [r4], -r2, lsl #8
     aa0:	00682936 	rsbeq	r2, r8, r6, lsr r9
     aa4:	06010402 	streq	r0, [r1], -r2, lsl #8
     aa8:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     aac:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     ab0:	002e0404 	eoreq	r0, lr, r4, lsl #8
     ab4:	06040402 	streq	r0, [r4], -r2, lsl #8
     ab8:	68bb3131 	ldmvs	fp!, {r0, r4, r5, r8, ip, sp}
     abc:	034a0c03 	movteq	r0, #44035	; 0xac03
     ac0:	00682e76 	rsbeq	r2, r8, r6, ror lr
     ac4:	06010402 	streq	r0, [r1], -r2, lsl #8
     ac8:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     acc:	02004a02 	andeq	r4, r0, #8192	; 0x2000
     ad0:	002e0404 	eoreq	r0, lr, r4, lsl #8
     ad4:	06040402 	streq	r0, [r4], -r2, lsl #8
     ad8:	00682936 	rsbeq	r2, r8, r6, lsr r9
     adc:	06010402 	streq	r0, [r1], -r2, lsl #8
     ae0:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     ae4:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     ae8:	002e0404 	eoreq	r0, lr, r4, lsl #8
     aec:	06040402 	streq	r0, [r4], -r2, lsl #8
     af0:	2e090331 	mcrcs	3, 0, r0, cr9, cr1, {1}
     af4:	01040200 	mrseq	r0, R12_usr
     af8:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     afc:	00820204 	addeq	r0, r2, r4, lsl #4
     b00:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     b04:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b08:	00303006 	eorseq	r3, r0, r6
     b0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     b10:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     b14:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     b18:	002e0404 	eoreq	r0, lr, r4, lsl #8
     b1c:	06040402 	streq	r0, [r4], -r2, lsl #8
     b20:	02003030 	andeq	r3, r0, #48	; 0x30
     b24:	9e060104 	adflss	f0, f6, f4
     b28:	02040200 	andeq	r0, r4, #0, 4
     b2c:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     b30:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     b34:	30060404 	andcc	r0, r6, r4, lsl #8
     b38:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     b3c:	009e0601 	addseq	r0, lr, r1, lsl #12
     b40:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     b44:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b48:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     b4c:	30300604 	eorscc	r0, r0, r4, lsl #12
     b50:	01040200 	mrseq	r0, R12_usr
     b54:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     b58:	00820204 	addeq	r0, r2, r4, lsl #4
     b5c:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     b60:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b64:	0d033006 	stceq	0, cr3, [r3, #-24]	; 0xffffffe8
     b68:	4b314b2e 	blmi	c53828 <__cs3_heap_start+0xb3a188>
     b6c:	2e7fae03 	cdpcs	14, 7, cr10, cr15, cr3, {0}
     b70:	034a1303 	movteq	r1, #41731	; 0xa303
     b74:	30034a12 	andcc	r4, r3, r2, lsl sl
     b78:	0a032f2e 	beq	cc838 <__cs3_region_init_size_ram+0xb4be0>
     b7c:	684df366 	stmdavs	sp, {r1, r2, r5, r6, r8, r9, ip, sp, lr, pc}^
     b80:	01040200 	mrseq	r0, R12_usr
     b84:	6c066606 	stcvs	6, cr6, [r6], {6}
     b88:	68836969 	stmvs	r3, {r0, r3, r5, r6, r8, fp, sp, lr}
     b8c:	01040200 	mrseq	r0, R12_usr
     b90:	69066606 	stmdbvs	r6, {r1, r2, r9, sl, sp, lr}
     b94:	a06768a0 	rsbge	r6, r7, r0, lsr #17
     b98:	69a26768 	stmibvs	r2!, {r3, r5, r6, r8, r9, sl, sp, lr}
     b9c:	00688368 	rsbeq	r8, r8, r8, ror #6
     ba0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ba4:	a0690666 	rsbge	r0, r9, r6, ror #12
     ba8:	68a06768 	stmiavs	r0!, {r3, r5, r6, r8, r9, sl, sp, lr}
     bac:	6969a267 	stmdbvs	r9!, {r0, r1, r2, r5, r6, r9, sp, pc}^
     bb0:	f668f468 			; <UNDEFINED> instruction: 0xf668f468
     bb4:	f4686869 	vld2.16	{d22-d23}, [r8 :128], r9
     bb8:	6869f668 	stmdavs	r9!, {r3, r5, r6, r9, sl, ip, sp, lr, pc}^
     bbc:	a0696883 	rsbge	r6, r9, r3, lsl #17
     bc0:	01040200 	mrseq	r0, R12_usr
     bc4:	68066606 	stmdavs	r6, {r1, r2, r9, sl, sp, lr}
     bc8:	6768a067 	strbvs	sl, [r8, -r7, rrx]!
     bcc:	020069a2 	andeq	r6, r0, #2654208	; 0x288000
     bd0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     bd4:	68836806 	stmvs	r3, {r1, r2, fp, sp, lr}
     bd8:	00337f69 	eorseq	r7, r3, r9, ror #30
     bdc:	06010402 	streq	r0, [r1], -r2, lsl #8
     be0:	67680666 	strbvs	r0, [r8, -r6, ror #12]!
     be4:	03827803 	orreq	r7, r2, #196608	; 0x30000
     be8:	67682e0a 	strbvs	r2, [r8, -sl, lsl #28]!
     bec:	03827303 	orreq	r7, r2, #201326592	; 0xc000000
     bf0:	6f032e11 	svcvs	0x00032e11
     bf4:	2e14034a 	cdpcs	3, 1, cr0, cr4, cr10, {2}
     bf8:	69688368 	stmdbvs	r8!, {r3, r5, r6, r8, r9, pc}^
     bfc:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     c00:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     c04:	68a06768 	stmiavs	r0!, {r3, r5, r6, r8, r9, sl, sp, lr}
     c08:	2f4ea267 	svccs	0x004ea267
     c0c:	bb820903 	bllt	fe083020 <__cs3_heap_end+0xbe083020>
     c10:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     c14:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     c18:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     c1c:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     c20:	354783bc 	strbcc	r8, [r7, #-956]	; 0xfffffc44
     c24:	034a7903 	movteq	r7, #43267	; 0xa903
     c28:	00682e0a 	rsbeq	r2, r8, sl, lsl #28
     c2c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c30:	83bc06ba 			; <UNDEFINED> instruction: 0x83bc06ba
     c34:	0068696a 	rsbeq	r6, r8, sl, ror #18
     c38:	06010402 	streq	r0, [r1], -r2, lsl #8
     c3c:	83bc06ba 			; <UNDEFINED> instruction: 0x83bc06ba
     c40:	0068696a 	rsbeq	r6, r8, sl, ror #18
     c44:	06010402 	streq	r0, [r1], -r2, lsl #8
     c48:	83bc06ba 			; <UNDEFINED> instruction: 0x83bc06ba
     c4c:	2f4d6b6a 	svccs	0x004d6b6a
     c50:	004c9f8a 	subeq	r9, ip, sl, lsl #31
     c54:	06010402 	streq	r0, [r1], -r2, lsl #8
     c58:	a0680666 	rsbge	r0, r8, r6, ror #12
     c5c:	a068a068 	rsbge	sl, r8, r8, rrx
     c60:	892f8468 	stmdbhi	pc!, {r3, r5, r6, sl, pc}	; <UNPREDICTABLE>
     c64:	4b684dbb 	blmi	1a14358 <__cs3_heap_start+0x18facb8>
     c68:	6783684d 	strvs	r6, [r3, sp, asr #16]
     c6c:	bdbda1bb 	ldfltd	f2, [sp, #748]!	; 0x2ec
     c70:	bfbdbdbd 	svclt	0x00bdbdbd
     c74:	3e088f08 	cdpcc	15, 0, cr8, cr8, cr8, {0}
     c78:	68bb6868 	ldmvs	fp!, {r3, r5, r6, fp, sp, lr}
     c7c:	84688468 	strbthi	r8, [r8], #-1128	; 0xfffffb98
     c80:	bb836968 	bllt	fe0db228 <__cs3_heap_end+0xbe0db228>
     c84:	bdbdbda1 	ldclt	13, cr11, [sp, #644]!	; 0x284
     c88:	08bfbdbd 	ldmeq	pc!, {r0, r2, r3, r4, r5, r7, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
     c8c:	693e088f 	ldmdbvs	lr!, {r0, r1, r2, r3, r7, fp}
     c90:	6868bb68 	stmdavs	r8!, {r3, r5, r6, r8, r9, fp, ip, sp, pc}^
     c94:	68846884 	stmvs	r4, {r2, r7, fp, sp, lr}
     c98:	bbd9f369 	bllt	ff67da44 <__cs3_heap_end+0xbf67da44>
     c9c:	08bb2308 	ldmeq	fp!, {r3, r8, r9, sp}
     ca0:	2308bb23 	movwcs	fp, #35619	; 0x8b23
     ca4:	08bbcb08 	ldmeq	fp!, {r3, r8, r9, fp, lr, pc}
     ca8:	8a2f4e23 	bhi	bd453c <__cs3_heap_start+0xabae9c>
     cac:	4d684dbb 	stclmi	13, cr4, [r8, #-748]!	; 0xfffffd14
     cb0:	65694dbc 	strbvs	r4, [r9, #-3516]!	; 0xfffff244
     cb4:	85818384 	strhi	r8, [r1, #900]	; 0x384
     cb8:	9f9f9f83 	svcls	0x009f9f83
     cbc:	689f9f9f 	ldmvs	pc, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}	; <UNPREDICTABLE>
     cc0:	83bb6868 			; <UNDEFINED> instruction: 0x83bb6868
     cc4:	0200699d 	andeq	r6, r0, #2572288	; 0x274000
     cc8:	82060104 	andhi	r0, r6, #4, 2
     ccc:	84848606 	strhi	r8, [r4], #1542	; 0x606
     cd0:	74038684 	strvc	r8, [r3], #-1668	; 0xfffff97c
     cd4:	2e0f034a 	cdpcs	3, 0, cr0, cr15, cr10, {2}
     cd8:	9f9f9f83 	svcls	0x009f9f83
     cdc:	689f9f9f 	ldmvs	pc, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}	; <UNPREDICTABLE>
     ce0:	83bb6869 			; <UNDEFINED> instruction: 0x83bb6869
     ce4:	0200899d 	andeq	r8, r0, #2572288	; 0x274000
     ce8:	82060104 	andhi	r0, r6, #4, 2
     cec:	84848606 	strhi	r8, [r4], #1542	; 0x606
     cf0:	74038684 	strvc	r8, [r3], #-1668	; 0xfffff97c
     cf4:	2e0f034a 	cdpcs	3, 0, cr0, cr15, cr10, {2}
     cf8:	4db96785 	ldcmi	7, cr6, [r9, #532]!	; 0x214
     cfc:	67689608 	strbvs	r9, [r8, -r8, lsl #12]!
     d00:	97084cb9 			; <UNDEFINED> instruction: 0x97084cb9
     d04:	4cb96768 	ldcmi	7, cr6, [r9], #416	; 0x1a0
     d08:	67689708 	strbvs	r9, [r8, -r8, lsl #14]!
     d0c:	96084cb9 			; <UNDEFINED> instruction: 0x96084cb9
     d10:	6d2fdb68 	vstmdbvs	pc!, {d13-<overflow reg d64>}
     d14:	02004dd7 	andeq	r4, r0, #13760	; 0x35c0
     d18:	66060104 	strvs	r0, [r6], -r4, lsl #2
     d1c:	684d6806 	stmdavs	sp, {r1, r2, fp, sp, lr}^
     d20:	68d8d783 	ldmvs	r8, {r0, r1, r7, r8, r9, sl, ip, lr, pc}^
     d24:	68d8d783 	ldmvs	r8, {r0, r1, r7, r8, r9, sl, ip, lr, pc}^
     d28:	4ddad783 	ldclmi	7, cr13, [sl, #524]	; 0x20c
     d2c:	8235032f 	eorshi	r0, r5, #-1140850688	; 0xbc000000
     d30:	4e4b52dd 	mcrmi	2, 2, r5, cr11, cr13, {6}
     d34:	01040200 	mrseq	r0, R12_usr
     d38:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     d3c:	01040200 	mrseq	r0, R12_usr
     d40:	69066606 	stmdbvs	r6, {r1, r2, r9, sl, sp, lr}
     d44:	9f84684e 	svcls	0x0084684e
     d48:	bc838384 	stclt	3, cr8, [r3], {132}	; 0x84
     d4c:	9f8468a1 	svcls	0x008468a1
     d50:	bc838384 	stclt	3, cr8, [r3], {132}	; 0x84
     d54:	68a06883 	stmiavs	r0!, {r0, r1, r7, fp, sp, lr}
     d58:	4ea268a0 	cdpmi	8, 10, cr6, cr2, cr0, {5}
     d5c:	849f8468 	ldrhi	r8, [pc], #1128	; d64 <__cs3_region_num+0xd62>
     d60:	83bc8383 			; <UNDEFINED> instruction: 0x83bc8383
     d64:	a068a068 	rsbge	sl, r8, r8, rrx
     d68:	4d4fa268 	sfmmi	f2, 3, [pc, #-416]	; bd0 <__cs3_region_num+0xbce>
     d6c:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
     d70:	06820601 	streq	r0, [r2], r1, lsl #12
     d74:	bb676784 	bllt	19dab8c <__cs3_heap_start+0x18c14ec>
     d78:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
     d7c:	069e0601 	ldreq	r0, [lr], r1, lsl #12
     d80:	020068a0 	andeq	r6, r0, #160, 16	; 0xa00000
     d84:	66060104 	strvs	r0, [r6], -r4, lsl #2
     d88:	0200a006 	andeq	sl, r0, #6
     d8c:	08060104 	stmdaeq	r6, {r2, r8}
     d90:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     d94:	00c80803 	sbceq	r0, r8, r3, lsl #16
     d98:	4a040402 	bmi	101da8 <alt_clk_clock_enable+0x1c>
     d9c:	06040200 	streq	r0, [r4], -r0, lsl #4
     da0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     da4:	00840606 	addeq	r0, r4, r6, lsl #12
     da8:	f3060402 	vshl.u8	d0, d2, d6
     dac:	01040200 	mrseq	r0, R12_usr
     db0:	84068206 	strhi	r8, [r6], #-518	; 0xfffffdfa
     db4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     db8:	009e0601 	addseq	r0, lr, r1, lsl #12
     dbc:	06010402 	streq	r0, [r1], -r2, lsl #8
     dc0:	02003463 	andeq	r3, r0, #1660944384	; 0x63000000
     dc4:	9e060104 	adflss	f0, f6, f4
     dc8:	02006806 	andeq	r6, r0, #393216	; 0x60000
     dcc:	08060104 	stmdaeq	r6, {r2, r8}
     dd0:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     dd4:	00c80803 	sbceq	r0, r8, r3, lsl #16
     dd8:	4a040402 	bmi	101de8 <alt_clk_clock_enable+0x5c>
     ddc:	06040200 	streq	r0, [r4], -r0, lsl #4
     de0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     de4:	00830606 	addeq	r0, r3, r6, lsl #12
     de8:	f3060402 	vshl.u8	d0, d2, d6
     dec:	01040200 	mrseq	r0, R12_usr
     df0:	84068206 	strhi	r8, [r6], #-518	; 0xfffffdfa
     df4:	0361a04b 	cmneq	r1, #75	; 0x4b
     df8:	02002e0b 	andeq	r2, r0, #11, 28	; 0xb0
     dfc:	08060104 	stmdaeq	r6, {r2, r8}
     e00:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     e04:	00c80803 	sbceq	r0, r8, r3, lsl #16
     e08:	4a040402 	bmi	101e18 <alt_clk_clock_enable+0x8c>
     e0c:	06040200 	streq	r0, [r4], -r0, lsl #4
     e10:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     e14:	00830606 	addeq	r0, r3, r6, lsl #12
     e18:	f3060402 	vshl.u8	d0, d2, d6
     e1c:	01040200 	mrseq	r0, R12_usr
     e20:	84068206 	strhi	r8, [r6], #-518	; 0xfffffdfa
     e24:	0069a04b 	rsbeq	sl, r9, fp, asr #32
     e28:	06010402 	streq	r0, [r1], -r2, lsl #8
     e2c:	0200c808 	andeq	ip, r0, #8, 16	; 0x80000
     e30:	c8080304 	stmdagt	r8, {r2, r8, r9}
     e34:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     e38:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     e3c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     e40:	83060604 	movwhi	r0, #26116	; 0x6604
     e44:	06040200 	streq	r0, [r4], -r0, lsl #4
     e48:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
     e4c:	06820601 	streq	r0, [r2], r1, lsl #12
     e50:	03a04b84 	moveq	r4, #132, 22	; 0x21000
     e54:	0a03825a 	beq	e17c4 <__cs3_region_init_size_ram+0xc9b6c>
     e58:	2e22034a 	cdpcs	3, 2, cr0, cr2, cr10, {2}
     e5c:	660e0330 			; <UNDEFINED> instruction: 0x660e0330
     e60:	d8504cd7 	ldmdale	r0, {r0, r1, r2, r4, r6, r7, sl, fp, lr}^
     e64:	6a686868 	bvs	1a1b00c <__cs3_heap_start+0x190196c>
     e68:	4b4b6768 	blmi	12dac10 <__cs3_heap_start+0x11c1570>
     e6c:	6768684b 	strbvs	r6, [r8, -fp, asr #16]!
     e70:	684b4b4b 	stmdavs	fp, {r0, r1, r3, r6, r8, r9, fp, lr}^
     e74:	4b4b6768 	blmi	12dac1c <__cs3_heap_start+0x11c157c>
     e78:	674c684b 	strbvs	r6, [ip, -fp, asr #16]
     e7c:	83848468 	orrhi	r8, r4, #104, 8	; 0x68000000
     e80:	af08684b 	svcge	0x0008684b
     e84:	4c838484 	cfstrsmi	mvf8, [r3], {132}	; 0x84
     e88:	8484af08 	strhi	sl, [r4], #3848	; 0xf08
     e8c:	91084c83 	smlabbls	r8, r3, ip, r4
     e90:	af0885a0 	svcge	0x000885a0
     e94:	4c838484 	cfstrsmi	mvf8, [r3], {132}	; 0x84
     e98:	85a09108 	strhi	r9, [r0, #264]!	; 0x108
     e9c:	68849308 	stmvs	r4, {r3, r8, r9, ip, pc}
     ea0:	032f6a67 			; <UNDEFINED> instruction: 0x032f6a67
     ea4:	4ebb660a 	cdpmi	6, 11, cr6, cr11, cr10, {0}
     ea8:	684d684c 	stmdavs	sp, {r2, r3, r6, fp, sp, lr}^
     eac:	6a9f8483 	bvs	fe7e20c0 <__cs3_heap_end+0xbe7e20c0>
     eb0:	bb839f83 	bllt	fe0e8cc4 <__cs3_heap_end+0xbe0e8cc4>
     eb4:	2208c908 	andcs	ip, r8, #8, 18	; 0x20000
     eb8:	68844bbc 	stmvs	r4, {r2, r3, r4, r5, r7, r8, r9, fp, lr}
     ebc:	83686a6a 	cmnhi	r8, #434176	; 0x6a000
     ec0:	9fbca0a0 	svcls	0x00bca0a0
     ec4:	839f836a 	orrshi	r8, pc, #-1476395007	; 0xa8000001
     ec8:	68d86883 	ldmvs	r8, {r0, r1, r7, fp, sp, lr}^
     ecc:	68bd68d8 	popvs	{r3, r4, r6, r7, fp, sp, lr}
     ed0:	2108c908 	tstcs	r8, r8, lsl #18
     ed4:	67854bbc 			; <UNDEFINED> instruction: 0x67854bbc
     ed8:	83686b6a 	cmnhi	r8, #108544	; 0x1a800
     edc:	9fbca0a0 	svcls	0x00bca0a0
     ee0:	839f836a 	orrshi	r8, pc, #-1476395007	; 0xa8000001
     ee4:	68d86883 	ldmvs	r8, {r0, r1, r7, fp, sp, lr}^
     ee8:	68bd68d8 	popvs	{r3, r4, r6, r7, fp, sp, lr}
     eec:	2108c908 	tstcs	r8, r8, lsl #18
     ef0:	67854bbc 			; <UNDEFINED> instruction: 0x67854bbc
     ef4:	6c2f506a 	stcvs	0, cr5, [pc], #-424	; d54 <__cs3_region_num+0xd52>
     ef8:	d8684c9f 	stmdale	r8!, {r0, r1, r2, r3, r4, r7, sl, fp, lr}^
     efc:	bc68d868 	stcllt	8, cr13, [r8], #-416	; 0xfffffe60
     f00:	4cbb8a2f 	vldmiami	fp!, {s16-s62}
     f04:	01040200 	mrseq	r0, R12_usr
     f08:	67066606 	strvs	r6, [r6, -r6, lsl #12]
     f0c:	08684d69 	stmdaeq	r8!, {r0, r3, r5, r6, r8, sl, fp, lr}^
     f10:	3f086840 	svccc	0x00086840
     f14:	4d410868 	stclmi	8, cr0, [r1, #-416]	; 0xfffffe60
     f18:	4dbb882f 	ldcmi	8, cr8, [fp, #188]!	; 0xbc
     f1c:	72024d68 	andvc	r4, r2, #104, 26	; 0x1a00
     f20:	689d9f17 	ldmvs	sp, {r0, r1, r2, r4, r8, r9, sl, fp, ip, pc}
     f24:	689d9f33 	ldmvs	sp, {r0, r1, r4, r5, r8, r9, sl, fp, ip, pc}
     f28:	689d9f33 	ldmvs	sp, {r0, r1, r4, r5, r8, r9, sl, fp, ip, pc}
     f2c:	d732d732 			; <UNDEFINED> instruction: 0xd732d732
     f30:	d733d733 			; <UNDEFINED> instruction: 0xd733d733
     f34:	d731d732 			; <UNDEFINED> instruction: 0xd731d732
     f38:	d731d731 			; <UNDEFINED> instruction: 0xd731d731
     f3c:	d733d732 			; <UNDEFINED> instruction: 0xd733d732
     f40:	d732d732 			; <UNDEFINED> instruction: 0xd732d732
     f44:	9f32d732 	svcls	0x0032d732
     f48:	4c2c8868 	stcmi	8, cr8, [ip], #-416	; 0xfffffe60
     f4c:	8a68bb31 	bhi	1a2fc18 <__cs3_heap_start+0x1916578>
     f50:	bb314e2a 	bllt	c54800 <__cs3_heap_start+0xb3b160>
     f54:	4c2cc068 	stcmi	0, cr12, [ip], #-416	; 0xfffffe60
     f58:	c068bb31 	rsbgt	fp, r8, r1, lsr fp
     f5c:	9f314c2c 	svcls	0x00314c2c
     f60:	4c2cc068 	stcmi	0, cr12, [ip], #-416	; 0xfffffe60
     f64:	c168bb31 	cmngt	r8, r1, lsr fp
     f68:	9f314d2b 	svcls	0x00314d2b
     f6c:	4c2cc068 	stcmi	0, cr12, [ip], #-416	; 0xfffffe60
     f70:	c0689f31 	rsbgt	r9, r8, r1, lsr pc
     f74:	bb314c2c 	bllt	c5402c <__cs3_heap_start+0xb3a98c>
     f78:	4c2cc068 	stcmi	0, cr12, [ip], #-416	; 0xfffffe60
     f7c:	c068bb31 	rsbgt	fp, r8, r1, lsr fp
     f80:	bb314c2c 	bllt	c54038 <__cs3_heap_start+0xb3a998>
     f84:	4c2cc068 	stcmi	0, cr12, [ip], #-416	; 0xfffffe60
     f88:	31839f31 	orrcc	r9, r3, r1, lsr pc
     f8c:	31673167 	cmncc	r7, r7, ror #2
     f90:	314b3167 	cmpcc	fp, r7, ror #2
     f94:	4bbe8a2f 	blmi	fefa3858 <__cs3_heap_end+0xbefa3858>
     f98:	024d684e 	subeq	r6, sp, #5111808	; 0x4e0000
     f9c:	8383166a 	orrhi	r1, r3, #111149056	; 0x6a00000
     fa0:	8383309f 	orrhi	r3, r3, #159	; 0x9f
     fa4:	8383309f 	orrhi	r3, r3, #159	; 0x9f
     fa8:	4b83309f 	blmi	fe0cd22c <__cs3_heap_end+0xbe0cd22c>
     fac:	8383309f 	orrhi	r3, r3, #159	; 0x9f
     fb0:	8383309f 	orrhi	r3, r3, #159	; 0x9f
     fb4:	4b83329f 	blmi	fe0cda38 <__cs3_heap_end+0xbe0cda38>
     fb8:	4b83309f 	blmi	fe0cd23c <__cs3_heap_end+0xbe0cd23c>
     fbc:	4b83309f 	blmi	fe0cd240 <__cs3_heap_end+0xbe0cd240>
     fc0:	4b83309f 	blmi	fe0cd244 <__cs3_heap_end+0xbe0cd244>
     fc4:	4b83309f 	blmi	fe0cd248 <__cs3_heap_end+0xbe0cd248>
     fc8:	8383309f 	orrhi	r3, r3, #159	; 0x9f
     fcc:	4b83329f 	blmi	fe0cda50 <__cs3_heap_end+0xbe0cda50>
     fd0:	4b83309f 	blmi	fe0cd254 <__cs3_heap_end+0xbe0cd254>
     fd4:	4b83309f 	blmi	fe0cd258 <__cs3_heap_end+0xbe0cd258>
     fd8:	8383309f 	orrhi	r3, r3, #159	; 0x9f
     fdc:	314b319f 			; <UNDEFINED> instruction: 0x314b319f
     fe0:	0200bb68 	andeq	fp, r0, #104, 22	; 0x1a000
     fe4:	82060104 	andhi	r0, r6, #4, 2
     fe8:	4e6a8406 	cdpmi	4, 6, cr8, cr10, cr6, {0}
     fec:	01040200 	mrseq	r0, R12_usr
     ff0:	689f6930 	ldmvs	pc, {r4, r5, r8, fp, sp, lr}	; <UNPREDICTABLE>
     ff4:	68d8684c 	ldmvs	r8, {r2, r3, r6, fp, sp, lr}^
     ff8:	032208da 			; <UNDEFINED> instruction: 0x032208da
     ffc:	4cbb6609 	ldcmi	6, cr6, [fp], #36	; 0x24
    1000:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1004:	bc187202 	lfmlt	f7, 4, [r8], {2}
    1008:	bebcbb9f 	vmovlt.32	fp, d28[1]
    100c:	4d2b5183 	stfmis	f5, [fp, #-524]!	; 0xfffffdf4
    1010:	bb9fbc33 	bllt	fe7f00e4 <__cs3_heap_end+0xbe7f00e4>
    1014:	8483bfbf 	strhi	fp, [r3], #4031	; 0xfbf
    1018:	01040200 	mrseq	r0, R12_usr
    101c:	84068206 	strhi	r8, [r6], #-518	; 0xfffffdfa
    1020:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    1024:	06820601 	streq	r0, [r2], r1, lsl #12
    1028:	004b4c84 	subeq	r4, fp, r4, lsl #25
    102c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1030:	00670666 	rsbeq	r0, r7, r6, ror #12
    1034:	06010402 	streq	r0, [r1], -r2, lsl #8
    1038:	00670666 	rsbeq	r0, r7, r6, ror #12
    103c:	06020402 	streq	r0, [r2], -r2, lsl #8
    1040:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1044:	84066603 	strhi	r6, [r6], #-1539	; 0xfffff9fd
    1048:	02008484 	andeq	r8, r0, #132, 8	; 0x84000000
    104c:	66060204 	strvs	r0, [r6], -r4, lsl #4
    1050:	03040200 	movweq	r0, #16896	; 0x4200
    1054:	51860666 	orrpl	r0, r6, r6, ror #12
    1058:	bc334d2b 	ldclt	13, cr4, [r3], #-172	; 0xffffff54
    105c:	bdbcbb9f 	ldclt	11, cr11, [ip, #636]!	; 0x27c
    1060:	4d2b5184 	stfmis	f5, [fp, #-528]!	; 0xfffffdf0
    1064:	d9bd6733 	ldmible	sp!, {r0, r1, r4, r5, r8, r9, sl, sp, lr}
    1068:	a2682108 	rsbge	r2, r8, #8, 2
    106c:	837b0868 	cmnhi	fp, #104, 16	; 0x680000
    1070:	67038568 	strvs	r8, [r3, -r8, ror #10]
    1074:	2e1e034a 	cdpcs	3, 1, cr0, cr14, cr10, {2}
    1078:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    107c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1080:	83bc6732 			; <UNDEFINED> instruction: 0x83bc6732
    1084:	02008485 	andeq	r8, r0, #-2063597568	; 0x85000000
    1088:	82060104 	andhi	r0, r6, #4, 2
    108c:	00a04e06 	adceq	r4, r0, r6, lsl #28
    1090:	06010402 	streq	r0, [r1], -r2, lsl #8
    1094:	004b0682 	subeq	r0, fp, r2, lsl #13
    1098:	06010402 	streq	r0, [r1], -r2, lsl #8
    109c:	4b4d0682 	blmi	1342aac <__cs3_heap_start+0x122940c>
    10a0:	01040200 	mrseq	r0, R12_usr
    10a4:	68066606 	stmdavs	r6, {r1, r2, r9, sl, sp, lr}
    10a8:	00868367 	addeq	r8, r6, r7, ror #6
    10ac:	06010402 	streq	r0, [r1], -r2, lsl #8
    10b0:	00680666 	rsbeq	r0, r8, r6, ror #12
    10b4:	06010402 	streq	r0, [r1], -r2, lsl #8
    10b8:	00670666 	rsbeq	r0, r7, r6, ror #12
    10bc:	06010402 	streq	r0, [r1], -r2, lsl #8
    10c0:	87670666 	strbhi	r0, [r7, -r6, ror #12]!
    10c4:	847a0867 	ldrbthi	r0, [sl], #-2151	; 0xfffff799
    10c8:	01040200 	mrseq	r0, R12_usr
    10cc:	68066606 	stmdavs	r6, {r1, r2, r9, sl, sp, lr}
    10d0:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
    10d4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    10d8:	50858369 	addpl	r8, r5, r9, ror #6
    10dc:	67334c2c 	ldrvs	r4, [r3, -ip, lsr #24]!
    10e0:	020083bc 	andeq	r8, r0, #188, 6	; 0xf0000002
    10e4:	00830204 	addeq	r0, r3, r4, lsl #4
    10e8:	49020402 	stmdbmi	r2, {r1, sl}
    10ec:	03040200 	movweq	r0, #16896	; 0x4200
    10f0:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    10f4:	004a0404 	subeq	r0, sl, r4, lsl #8
    10f8:	2e060402 	cdpcs	4, 0, cr0, cr6, cr2, {0}
    10fc:	06040200 	streq	r0, [r4], -r0, lsl #4
    1100:	a3688406 	cmnge	r8, #100663296	; 0x6000000
    1104:	847b0867 	ldrbthi	r0, [fp], #-2151	; 0xfffff799
    1108:	2c508468 	cfldrdcs	mvd8, [r0], {104}	; 0x68
    110c:	bc67334c 	stcllt	3, cr3, [r7], #-304	; 0xfffffed0
    1110:	a268bc83 	rsbge	fp, r8, #33536	; 0x8300
    1114:	837b0867 	cmnhi	fp, #6750208	; 0x670000
    1118:	2c508468 	cfldrdcs	mvd8, [r0], {104}	; 0x68
    111c:	bc67324c 	sfmlt	f3, 2, [r7], #-304	; 0xfffffed0
    1120:	a168bc83 	cmnge	r8, r3, lsl #25
    1124:	837b0867 	cmnhi	fp, #6750208	; 0x670000
    1128:	2c508468 	cfldrdcs	mvd8, [r0], {104}	; 0x68
    112c:	bc67314c 	stflte	f3, [r7], #-304	; 0xfffffed0
    1130:	bb8469bb 	bllt	fe11b824 <__cs3_heap_end+0xbe11b824>
    1134:	0867a468 	stmdaeq	r7!, {r3, r5, r6, sl, sp, pc}^
    1138:	8568837b 	strbhi	r8, [r8, #-891]!	; 0xfffffc85
    113c:	314c2c50 	cmpcc	ip, r0, asr ip
    1140:	bb83bd67 	bllt	fe0f06e4 <__cs3_heap_end+0xbe0f06e4>
    1144:	009f2408 	addseq	r2, pc, r8, lsl #8
    1148:	06010402 	streq	r0, [r1], -r2, lsl #8
    114c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1150:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
    1154:	004a0404 	subeq	r0, sl, r4, lsl #8
    1158:	2e060402 	cdpcs	4, 0, cr0, cr6, cr2, {0}
    115c:	06040200 	streq	r0, [r4], -r0, lsl #4
    1160:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
    1164:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1168:	03040200 	movweq	r0, #16896	; 0x4200
    116c:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    1170:	02004a04 	andeq	r4, r0, #4, 20	; 0x4000
    1174:	002e0604 	eoreq	r0, lr, r4, lsl #12
    1178:	06060402 	streq	r0, [r6], -r2, lsl #8
    117c:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    1180:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1184:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    1188:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    118c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1190:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    1194:	85060604 	strhi	r0, [r6, #-1540]	; 0xfffff9fc
    1198:	01040200 	mrseq	r0, R12_usr
    119c:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    11a0:	01040200 	mrseq	r0, R12_usr
    11a4:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    11a8:	67836885 	strvs	r6, [r3, r5, lsl #17]
    11ac:	7b086786 	blvc	21afcc <__cs3_heap_start+0x10192c>
    11b0:	83699f85 	cmnhi	r9, #532	; 0x214
    11b4:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    11b8:	83bd6731 			; <UNDEFINED> instruction: 0x83bd6731
    11bc:	0083d7bb 			; <UNDEFINED> instruction: 0x0083d7bb
    11c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    11c4:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    11c8:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
    11cc:	004a0404 	subeq	r0, sl, r4, lsl #8
    11d0:	2e060402 	cdpcs	4, 0, cr0, cr6, cr2, {0}
    11d4:	06040200 	streq	r0, [r4], -r0, lsl #4
    11d8:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
    11dc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    11e0:	03040200 	movweq	r0, #16896	; 0x4200
    11e4:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    11e8:	02004a04 	andeq	r4, r0, #4, 20	; 0x4000
    11ec:	002e0604 	eoreq	r0, lr, r4, lsl #12
    11f0:	06060402 	streq	r0, [r6], -r2, lsl #8
    11f4:	04020087 	streq	r0, [r2], #-135	; 0xffffff79
    11f8:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
    11fc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1200:	02006706 	andeq	r6, r0, #1572864	; 0x180000
    1204:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1208:	51866706 	orrpl	r6, r6, r6, lsl #14
    120c:	7b0867d9 	blvc	21b178 <__cs3_heap_start+0x101ad8>
    1210:	04020085 	streq	r0, [r2], #-133	; 0xffffff7b
    1214:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1218:	4a020402 	bmi	82228 <__cs3_region_init_size_ram+0x6a5d0>
    121c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1220:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    1224:	002f0604 	eoreq	r0, pc, r4, lsl #12
    1228:	06010402 	streq	r0, [r1], -r2, lsl #8
    122c:	f3670666 	vmax.u32	q8, <illegal reg q3.5>, q11
    1230:	4c2c5083 	stcmi	0, cr5, [ip], #-524	; 0xfffffdf4
    1234:	83bc6732 			; <UNDEFINED> instruction: 0x83bc6732
    1238:	67a268bb 			; <UNDEFINED> instruction: 0x67a268bb
    123c:	00837b08 	addeq	r7, r3, r8, lsl #22
    1240:	06010402 	streq	r0, [r1], -r2, lsl #8
    1244:	50830666 	addpl	r0, r3, r6, ror #12
    1248:	67334c2c 	ldrvs	r4, [r3, -ip, lsr #24]!
    124c:	858367bc 	strhi	r6, [r3, #1980]	; 0x7bc
    1250:	7a084d9f 	bvc	2148d4 <__cs3_heap_start+0xfb234>
    1254:	2c508468 	cfldrdcs	mvd8, [r0], {104}	; 0x68
    1258:	bc67324c 	sfmlt	f3, 2, [r7], #-304	; 0xfffffed0
    125c:	9f858367 	svcls	0x00858367
    1260:	687a084d 	ldmdavs	sl!, {r0, r2, r3, r6, fp}^
    1264:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    1268:	67bc6732 			; <UNDEFINED> instruction: 0x67bc6732
    126c:	4d9f8583 	cfldr32mi	mvfx8, [pc, #524]	; 1480 <__cs3_region_num+0x147e>
    1270:	84687a08 	strbthi	r7, [r8], #-2568	; 0xfffff5f8
    1274:	324c2c50 	subcc	r2, ip, #80, 24	; 0x5000
    1278:	8367bc67 	cmnhi	r7, #26368	; 0x6700
    127c:	084d9f85 	stmdaeq	sp, {r0, r2, r7, r8, r9, sl, fp, ip, pc}^
    1280:	5084687a 	addpl	r6, r4, sl, ror r8
    1284:	00324c2c 	eorseq	r4, r2, ip, lsr #24
    1288:	06010402 	streq	r0, [r1], -r2, lsl #8
    128c:	00670666 	rsbeq	r0, r7, r6, ror #12
    1290:	06010402 	streq	r0, [r1], -r2, lsl #8
    1294:	684c0666 	stmdavs	ip, {r1, r2, r5, r6, r9, sl}^
    1298:	4c9f8583 	cfldr32mi	mvfx8, [pc], {131}	; 0x83
    129c:	68833e08 	stmvs	r3, {r3, r9, sl, fp, ip, sp}
    12a0:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    12a4:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    12a8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12ac:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    12b0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12b4:	5b08684c 	blpl	21b3ec <__cs3_heap_start+0x101d4c>
    12b8:	4c2c5083 	stcmi	0, cr5, [ip], #-524	; 0xfffffdf4
    12bc:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    12c0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12c4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    12c8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12cc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    12d0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12d4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    12d8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12dc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    12e0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    12e4:	8583684c 	strhi	r6, [r3, #2124]	; 0x84c
    12e8:	5a084c9f 	bpl	21456c <__cs3_heap_start+0xfaecc>
    12ec:	50846883 	addpl	r6, r4, r3, lsl #17
    12f0:	00314c2c 	eorseq	r4, r1, ip, lsr #24
    12f4:	06010402 	streq	r0, [r1], -r2, lsl #8
    12f8:	00670666 	rsbeq	r0, r7, r6, ror #12
    12fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    1300:	00670666 	rsbeq	r0, r7, r6, ror #12
    1304:	06010402 	streq	r0, [r1], -r2, lsl #8
    1308:	00670666 	rsbeq	r0, r7, r6, ror #12
    130c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1310:	00670666 	rsbeq	r0, r7, r6, ror #12
    1314:	06010402 	streq	r0, [r1], -r2, lsl #8
    1318:	684c0666 	stmdavs	ip, {r1, r2, r5, r6, r9, sl}^
    131c:	4c9f8583 	cfldr32mi	mvfx8, [pc], {131}	; 0x83
    1320:	68835a08 	stmvs	r3, {r3, r9, fp, ip, lr}
    1324:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    1328:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    132c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1330:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1334:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1338:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    133c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1340:	8583684c 	strhi	r6, [r3, #2124]	; 0x84c
    1344:	3e084c9f 	mcrcc	12, 0, r4, cr8, cr15, {4}
    1348:	50846883 	addpl	r6, r4, r3, lsl #17
    134c:	00314c2c 	eorseq	r4, r1, ip, lsr #24
    1350:	06010402 	streq	r0, [r1], -r2, lsl #8
    1354:	00670666 	rsbeq	r0, r7, r6, ror #12
    1358:	06010402 	streq	r0, [r1], -r2, lsl #8
    135c:	684c0666 	stmdavs	ip, {r1, r2, r5, r6, r9, sl}^
    1360:	4c9f8583 	cfldr32mi	mvfx8, [pc], {131}	; 0x83
    1364:	68835b08 	stmvs	r3, {r3, r8, r9, fp, ip, lr}
    1368:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    136c:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1370:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1374:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1378:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    137c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1380:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1384:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1388:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    138c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1390:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1394:	8583684c 	strhi	r6, [r3, #2124]	; 0x84c
    1398:	3e084c9f 	mcrcc	12, 0, r4, cr8, cr15, {4}
    139c:	50846883 	addpl	r6, r4, r3, lsl #17
    13a0:	00314c2c 	eorseq	r4, r1, ip, lsr #24
    13a4:	06010402 	streq	r0, [r1], -r2, lsl #8
    13a8:	00670666 	rsbeq	r0, r7, r6, ror #12
    13ac:	06010402 	streq	r0, [r1], -r2, lsl #8
    13b0:	00670666 	rsbeq	r0, r7, r6, ror #12
    13b4:	06010402 	streq	r0, [r1], -r2, lsl #8
    13b8:	00670666 	rsbeq	r0, r7, r6, ror #12
    13bc:	06010402 	streq	r0, [r1], -r2, lsl #8
    13c0:	00670666 	rsbeq	r0, r7, r6, ror #12
    13c4:	06010402 	streq	r0, [r1], -r2, lsl #8
    13c8:	684c0666 	stmdavs	ip, {r1, r2, r5, r6, r9, sl}^
    13cc:	4c9f8583 	cfldr32mi	mvfx8, [pc], {131}	; 0x83
    13d0:	68833e08 	stmvs	r3, {r3, r9, sl, fp, ip, sp}
    13d4:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    13d8:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    13dc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    13e0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    13e4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    13e8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    13ec:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    13f0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    13f4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    13f8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    13fc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1400:	8583684c 	strhi	r6, [r3, #2124]	; 0x84c
    1404:	5a084c9f 	bpl	214688 <__cs3_heap_start+0xfafe8>
    1408:	50846883 	addpl	r6, r4, r3, lsl #17
    140c:	00314c2c 	eorseq	r4, r1, ip, lsr #24
    1410:	06010402 	streq	r0, [r1], -r2, lsl #8
    1414:	00670666 	rsbeq	r0, r7, r6, ror #12
    1418:	06010402 	streq	r0, [r1], -r2, lsl #8
    141c:	00670666 	rsbeq	r0, r7, r6, ror #12
    1420:	06010402 	streq	r0, [r1], -r2, lsl #8
    1424:	00670666 	rsbeq	r0, r7, r6, ror #12
    1428:	06010402 	streq	r0, [r1], -r2, lsl #8
    142c:	00670666 	rsbeq	r0, r7, r6, ror #12
    1430:	06010402 	streq	r0, [r1], -r2, lsl #8
    1434:	684c0666 	stmdavs	ip, {r1, r2, r5, r6, r9, sl}^
    1438:	4c9f8583 	cfldr32mi	mvfx8, [pc], {131}	; 0x83
    143c:	68835a08 	stmvs	r3, {r3, r9, fp, ip, lr}
    1440:	4c2c5084 	stcmi	0, cr5, [ip], #-528	; 0xfffffdf0
    1444:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1448:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    144c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1450:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1454:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1458:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    145c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1460:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1464:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1468:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    146c:	8583684c 	strhi	r6, [r3, #2124]	; 0x84c
    1470:	5a084c9f 	bpl	2146f4 <__cs3_heap_start+0xfb054>
    1474:	50846883 	addpl	r6, r4, r3, lsl #17
    1478:	68314c2c 	ldmdavs	r1!, {r2, r3, r5, sl, fp, lr}
    147c:	4c9f8583 	cfldr32mi	mvfx8, [pc], {131}	; 0x83
    1480:	833e0867 	teqhi	lr, #6750208	; 0x670000
    1484:	2c508468 	cfldrdcs	mvd8, [r0], {104}	; 0x68
    1488:	f4bc314c 			; <UNDEFINED> instruction: 0xf4bc314c
    148c:	68686868 	stmdavs	r8!, {r3, r5, r6, fp, sp, lr}^
    1490:	837b08d9 	cmnhi	fp, #14221312	; 0xd90000
    1494:	2403d968 	strcs	sp, [r3], #-2408	; 0xfffff698
    1498:	2e60034a 	cdpcs	3, 6, cr0, cr0, cr10, {2}
    149c:	034a2003 	movteq	r2, #40963	; 0xa003
    14a0:	68682e63 	stmdavs	r8!, {r0, r1, r5, r6, r9, sl, fp, sp}^
    14a4:	7b08d968 	blvc	237a4c <__cs3_heap_start+0x11e3ac>
    14a8:	51d96883 	bicspl	r6, r9, r3, lsl #17
    14ac:	4b314d2b 	blmi	c54960 <__cs3_heap_start+0xb3b2c0>
    14b0:	6c2f352a 	cfstr32vs	mvfx3, [pc], #-168	; 1410 <__cs3_region_num+0x140e>
    14b4:	4b4b4bbb 	blmi	12d43a8 <__cs3_heap_start+0x11bad08>
    14b8:	024d6868 	subeq	r6, sp, #104, 16	; 0x680000
    14bc:	bc17018a 	ldflts	f0, [r7], {138}	; 0x8a
    14c0:	4bbc314b 	blmi	fef0d9f4 <__cs3_heap_end+0xbef0d9f4>
    14c4:	314bbc31 	cmpcc	fp, r1, lsr ip
    14c8:	a0324bbc 	ldrhtge	r4, [r2], -ip
    14cc:	84a06a83 	strthi	r6, [r0], #2691	; 0xa83
    14d0:	68bba031 	ldmvs	fp!, {r0, r4, r5, sp, pc}
    14d4:	83686883 	cmnhi	r8, #8585216	; 0x830000
    14d8:	6a836868 	bvs	fe0db680 <__cs3_heap_end+0xbe0db680>
    14dc:	3184a06b 	orrcc	sl, r4, fp, rrx
    14e0:	8368bba0 	cmnhi	r8, #160, 22	; 0x28000
    14e4:	68836868 	stmvs	r3, {r3, r5, r6, fp, sp, lr}
    14e8:	6b6a8368 	blvs	1aa2290 <__cs3_heap_start+0x1988bf0>
    14ec:	090384a0 	stmdbeq	r3, {r5, r7, sl, pc}
    14f0:	83689f2e 	cmnhi	r8, #46, 30	; 0xb8
    14f4:	9f3184bb 	svcls	0x003184bb
    14f8:	849f8368 	ldrhi	r8, [pc], #872	; 1500 <__cs3_region_num+0x14fe>
    14fc:	83689f31 	cmnhi	r8, #49, 30	; 0xc4
    1500:	9f8368a0 	svcls	0x008368a0
    1504:	9f31ae08 	svcls	0x0031ae08
    1508:	68a08368 	stmiavs	r0!, {r3, r5, r6, r8, r9, pc}
    150c:	ae089f83 	cdpge	15, 0, cr9, cr8, cr3, {4}
    1510:	83689f32 	cmnhi	r8, #50, 30	; 0xc8
    1514:	9f31849f 	svcls	0x0031849f
    1518:	68a08368 	stmiavs	r0!, {r3, r5, r6, r8, r9, pc}
    151c:	ae089f83 	cdpge	15, 0, cr9, cr8, cr3, {4}
    1520:	83689f31 	cmnhi	r8, #49, 30	; 0xc4
    1524:	a08368a0 	addge	r6, r3, r0, lsr #17
    1528:	9fad0868 	svcls	0x00ad0868
    152c:	9f31ae08 	svcls	0x0031ae08
    1530:	689f8368 	ldmvs	pc, {r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
    1534:	9f83689f 	svcls	0x0083689f
    1538:	ac080e03 	stcge	14, cr0, [r8], {3}
    153c:	682e7503 	stmdavs	lr!, {r0, r1, r8, sl, ip, sp, lr}
    1540:	9f83689f 	svcls	0x0083689f
    1544:	9f31b008 	svcls	0x0031b008
    1548:	68bb8368 	ldmvs	fp!, {r3, r5, r6, r8, r9, pc}
    154c:	9f83689f 	svcls	0x0083689f
    1550:	ac080e03 	stcge	14, cr0, [r8], {3}
    1554:	682e7503 	stmdavs	lr!, {r0, r1, r8, sl, ip, sp, lr}
    1558:	9f83689f 	svcls	0x0083689f
    155c:	8332b008 	teqhi	r2, #8
    1560:	0367bb84 	cmneq	r7, #132, 22	; 0x21000
    1564:	78034a0c 	stmdavc	r3, {r2, r3, r9, fp, lr}
    1568:	83689f2e 	cmnhi	r8, #46, 30	; 0xb8
    156c:	8331859f 	teqhi	r1, #666894336	; 0x27c00000
    1570:	6a67bb84 	bvs	19f0388 <__cs3_heap_start+0x18d6ce8>
    1574:	a183689f 			; <UNDEFINED> instruction: 0xa183689f
    1578:	089f8368 	ldmeq	pc, {r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
    157c:	848331ae 	strhi	r3, [r3], #430	; 0x1ae
    1580:	9f6a4bbb 	svcls	0x006a4bbb
    1584:	68a18368 	stmiavs	r1!, {r3, r5, r6, r8, r9, pc}
    1588:	0868a083 	stmdaeq	r8!, {r0, r1, r7, sp, pc}^
    158c:	ae089fad 	cdpge	15, 0, cr9, cr8, cr13, {5}
    1590:	bb848331 	bllt	fe12225c <__cs3_heap_end+0xbe12225c>
    1594:	689f6a4b 	ldmvs	pc, {r0, r1, r3, r6, r9, fp, sp, lr}	; <UNPREDICTABLE>
    1598:	8368a183 	cmnhi	r8, #-1073741792	; 0xc0000020
    159c:	31ae089f 			; <UNDEFINED> instruction: 0x31ae089f
    15a0:	9f83689f 	svcls	0x0083689f
    15a4:	689f3184 	ldmvs	pc, {r2, r7, r8, ip, sp}	; <UNPREDICTABLE>
    15a8:	32849f83 	addcc	r9, r4, #524	; 0x20c
    15ac:	9f83689f 	svcls	0x0083689f
    15b0:	2e090384 	cdpcs	3, 0, cr0, cr9, cr4, {4}
    15b4:	bb83689f 	bllt	fe0db838 <__cs3_heap_end+0xbe0db838>
    15b8:	689f3184 	ldmvs	pc, {r2, r7, r8, ip, sp}	; <UNPREDICTABLE>
    15bc:	31849f83 	orrcc	r9, r4, r3, lsl #31
    15c0:	9f83689f 	svcls	0x0083689f
    15c4:	689f3184 	ldmvs	pc, {r2, r7, r8, ip, sp}	; <UNPREDICTABLE>
    15c8:	83689f83 	cmnhi	r8, #524	; 0x20c
    15cc:	31af089f 			; <UNDEFINED> instruction: 0x31af089f
    15d0:	a083689f 	umullge	r6, r3, pc, r8	; <UNPREDICTABLE>
    15d4:	089f8368 	ldmeq	pc, {r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
    15d8:	689f31ae 	ldmvs	pc, {r1, r2, r3, r5, r7, r8, ip, sp}	; <UNPREDICTABLE>
    15dc:	8368a083 	cmnhi	r8, #131	; 0x83
    15e0:	31ae089f 			; <UNDEFINED> instruction: 0x31ae089f
    15e4:	a083689f 	umullge	r6, r3, pc, r8	; <UNPREDICTABLE>
    15e8:	089f8368 	ldmeq	pc, {r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
    15ec:	689f31ae 	ldmvs	pc, {r1, r2, r3, r5, r7, r8, ip, sp}	; <UNPREDICTABLE>
    15f0:	8368a083 	cmnhi	r8, #131	; 0x83
    15f4:	31ae089f 			; <UNDEFINED> instruction: 0x31ae089f
    15f8:	9f83689f 	svcls	0x0083689f
    15fc:	689f3284 	ldmvs	pc, {r2, r7, r9, ip, sp}	; <UNPREDICTABLE>
    1600:	4a1a03bc 	bmi	6824f8 <__cs3_heap_start+0x568e58>
    1604:	682e6803 	stmdavs	lr!, {r0, r1, fp, sp, lr}
    1608:	9f83689f 	svcls	0x0083689f
    160c:	03821103 	orreq	r1, r2, #-1073741824	; 0xc0000000
    1610:	9f682e72 	svcls	0x00682e72
    1614:	899f8368 	ldmibhi	pc, {r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
    1618:	69314c2c 	ldmdbvs	r1!, {r2, r3, r5, sl, fp, lr}
    161c:	03bc68bb 			; <UNDEFINED> instruction: 0x03bc68bb
    1620:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
    1624:	689f682e 	ldmvs	pc, {r1, r2, r3, r5, fp, sp, lr}	; <UNPREDICTABLE>
    1628:	11039f83 	smlabbne	r3, r3, pc, r9	; <UNPREDICTABLE>
    162c:	7203ac08 	andvc	sl, r3, #8, 24	; 0x800
    1630:	689f682e 	ldmvs	pc, {r1, r2, r3, r5, fp, sp, lr}	; <UNPREDICTABLE>
    1634:	b3089f83 	movwlt	r9, #36739	; 0x8f83
    1638:	bb314c2c 	bllt	c546f0 <__cs3_heap_start+0xb3b050>
    163c:	1a03bc68 	bne	f07e4 <__cs3_region_init_size_ram+0xd8b8c>
    1640:	2e68034a 	cdpcs	3, 6, cr0, cr8, cr10, {2}
    1644:	83689f68 	cmnhi	r8, #104, 30	; 0x1a0
    1648:	8211039f 	andshi	r0, r1, #2080374786	; 0x7c000002
    164c:	682e7203 	stmdavs	lr!, {r0, r1, r9, ip, sp, lr}
    1650:	9f83689f 	svcls	0x0083689f
    1654:	334c2c89 	movtcc	r2, #52361	; 0xcc89
    1658:	9f83689f 	svcls	0x0083689f
    165c:	689f3284 	ldmvs	pc, {r2, r7, r9, ip, sp}	; <UNPREDICTABLE>
    1660:	32849f83 	addcc	r9, r4, #524	; 0x20c
    1664:	9f83689f 	svcls	0x0083689f
    1668:	689f3284 	ldmvs	pc, {r2, r7, r9, ip, sp}	; <UNPREDICTABLE>
    166c:	31849f83 	orrcc	r9, r4, r3, lsl #31
    1670:	7bd8034b 	blvc	ff6023a4 <__cs3_heap_end+0xbf6023a4>
    1674:	4a0a032e 	bmi	282334 <__cs3_heap_start+0x168c94>
    1678:	034a0f03 	movteq	r0, #44803	; 0xaf03
    167c:	0b034a0f 	bleq	d3ec0 <__cs3_region_init_size_ram+0xbc268>
    1680:	4a0f034a 	bmi	3c23b0 <__cs3_heap_start+0x2a8d10>
    1684:	034a1403 	movteq	r1, #41987	; 0xa403
    1688:	1d034a1d 	vstrne	s8, [r3, #-116]	; 0xffffff8c
    168c:	4a15034a 	bmi	5423bc <__cs3_heap_start+0x428d1c>
    1690:	034a1903 	movteq	r1, #43267	; 0xa903
    1694:	19034a1e 	stmdbne	r3, {r1, r2, r3, r4, r9, fp, lr}
    1698:	4a0a034a 	bmi	2823c8 <__cs3_heap_start+0x168d28>
    169c:	034a0a03 	movteq	r0, #43523	; 0xaa03
    16a0:	10034a0b 	andne	r4, r3, fp, lsl #20
    16a4:	4a0a034a 	bmi	2823d4 <__cs3_heap_start+0x168d34>
    16a8:	034a0a03 	movteq	r0, #43523	; 0xaa03
    16ac:	0f034a0f 	svceq	0x00034a0f
    16b0:	4a0f034a 	bmi	3c23e0 <__cs3_heap_start+0x2a8d40>
    16b4:	034a0f03 	movteq	r0, #44803	; 0xaf03
    16b8:	0a034a0f 	beq	d3efc <__cs3_region_init_size_ram+0xbc2a4>
    16bc:	4a23034a 	bmi	8c23ec <__cs3_heap_start+0x7a8d4c>
    16c0:	034a2503 	movteq	r2, #42243	; 0xa503
    16c4:	0c034a22 	stceq	10, cr4, [r3], {34}	; 0x22
    16c8:	4a0b034a 	bmi	2c23f8 <__cs3_heap_start+0x1a8d58>
    16cc:	034a0b03 	movteq	r0, #43779	; 0xab03
    16d0:	69364a0b 	ldmdbvs	r6!, {r0, r1, r3, r9, fp, lr}
    16d4:	86bcbb68 	ldrthi	fp, [ip], r8, ror #22
    16d8:	02004e6b 	andeq	r4, r0, #1712	; 0x6b0
    16dc:	6d2f0904 	stcvs	9, cr0, [pc, #-16]!	; 16d4 <__cs3_region_num+0x16d2>
    16e0:	2108849f 			; <UNDEFINED> instruction: 0x2108849f
    16e4:	9f89304e 	svcls	0x0089304e
    16e8:	304ef384 	subcc	pc, lr, r4, lsl #7
    16ec:	9f9fbb8a 	svcls	0x009fbb8a
    16f0:	a1a16968 			; <UNDEFINED> instruction: 0xa1a16968
    16f4:	9f9f9fa1 	svcls	0x009f9fa1
    16f8:	a1a1a19f 			; <UNDEFINED> instruction: 0xa1a1a19f
    16fc:	a3a1a1a1 			; <UNDEFINED> instruction: 0xa3a1a1a1
    1700:	694c6867 	stmdbvs	ip, {r0, r1, r2, r5, r6, fp, sp, lr}^
    1704:	9fa1a1a1 	svcls	0x00a1a1a1
    1708:	a19f9f9f 	ldrexge	r9, [pc]	; <UNPREDICTABLE>
    170c:	a1a1a1a1 			; <UNDEFINED> instruction: 0xa1a1a1a1
    1710:	686767a1 	stmdavs	r7!, {r0, r5, r7, r8, r9, sl, sp, lr}^
    1714:	a1a1694c 			; <UNDEFINED> instruction: 0xa1a1694c
    1718:	a19f9fa1 	orrsge	r9, pc, r1, lsr #31
    171c:	304ea0a1 	subcc	sl, lr, r1, lsr #1
    1720:	4b688488 	blmi	1a22948 <__cs3_heap_start+0x19092a8>
    1724:	4d65834d 	stclmi	3, cr8, [r5, #-308]!	; 0xfffffecc
    1728:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    172c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1730:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1734:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1738:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    173c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1740:	9fbc4e69 	svcls	0x00bc4e69
    1744:	694e4d68 	stmdbvs	lr, {r3, r5, r6, r8, sl, fp, lr}^
    1748:	9f9fa1c0 	svcls	0x009fa1c0
    174c:	a19f9f9f 	ldrexge	r9, [pc]	; <UNPREDICTABLE>
    1750:	a1a1a1a1 			; <UNDEFINED> instruction: 0xa1a1a1a1
    1754:	a1c069bc 	strhge	r6, [r0, #156]	; 0x9c
    1758:	9f9f9f9f 	svcls	0x009f9f9f
    175c:	a1a1a19f 			; <UNDEFINED> instruction: 0xa1a1a19f
    1760:	c069bca1 	rsbgt	fp, r9, r1, lsr #25
    1764:	9f9f9fa1 	svcls	0x009f9fa1
    1768:	8568a2a1 	strbhi	sl, [r8, #-673]!	; 0xfffffd5f
    176c:	4dbb6d2f 	ldcmi	13, cr6, [fp, #188]!	; 0xbc
    1770:	6a0269bc 	bvs	9be68 <__cs3_region_init_size_ram+0x84210>
    1774:	309f6716 	addscc	r6, pc, r6, lsl r7	; <UNPREDICTABLE>
    1778:	67309f67 	ldrvs	r9, [r0, -r7, ror #30]!
    177c:	9f67309f 	svcls	0x0067309f
    1780:	309f6730 	addscc	r6, pc, r0, lsr r7	; <UNPREDICTABLE>
    1784:	67329f67 	ldrvs	r9, [r2, -r7, ror #30]!
    1788:	9f67309f 	svcls	0x0067309f
    178c:	309f6730 	addscc	r6, pc, r0, lsr r7	; <UNPREDICTABLE>
    1790:	67309f67 	ldrvs	r9, [r0, -r7, ror #30]!
    1794:	9f67309f 	svcls	0x0067309f
    1798:	309f6732 	addscc	r6, pc, r2, lsr r7	; <UNPREDICTABLE>
    179c:	67309f67 	ldrvs	r9, [r0, -r7, ror #30]!
    17a0:	9f67309f 	svcls	0x0067309f
    17a4:	32674b30 	rsbcc	r4, r7, #48, 22	; 0xc000
    17a8:	660a032f 	strvs	r0, [sl], -pc, lsr #6
    17ac:	009f4d67 	addseq	r4, pc, r7, ror #26
    17b0:	06010402 	streq	r0, [r1], -r2, lsl #8
    17b4:	9f4c0666 	svcls	0x004c0666
    17b8:	01040200 	mrseq	r0, R12_usr
    17bc:	4c066606 	stcmi	6, cr6, [r6], {6}
    17c0:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    17c4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    17c8:	02009f4c 	andeq	r9, r0, #76, 30	; 0x130
    17cc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    17d0:	009f4c06 	addseq	r4, pc, r6, lsl #24
    17d4:	06010402 	streq	r0, [r1], -r2, lsl #8
    17d8:	9f4c0666 	svcls	0x004c0666
    17dc:	01040200 	mrseq	r0, R12_usr
    17e0:	4c066606 	stcmi	6, cr6, [r6], {6}
    17e4:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    17e8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    17ec:	02009f4c 	andeq	r9, r0, #76, 30	; 0x130
    17f0:	66060104 	strvs	r0, [r6], -r4, lsl #2
    17f4:	009f4c06 	addseq	r4, pc, r6, lsl #24
    17f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    17fc:	9f4c0666 	svcls	0x004c0666
    1800:	01040200 	mrseq	r0, R12_usr
    1804:	4c066606 	stcmi	6, cr6, [r6], {6}
    1808:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    180c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1810:	02009f4c 	andeq	r9, r0, #76, 30	; 0x130
    1814:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1818:	009f4d06 	addseq	r4, pc, r6, lsl #26
    181c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1820:	9f4c0666 	svcls	0x004c0666
    1824:	01040200 	mrseq	r0, R12_usr
    1828:	4c066606 	stcmi	6, cr6, [r6], {6}
    182c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    1830:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1834:	02009f4c 	andeq	r9, r0, #76, 30	; 0x130
    1838:	66060104 	strvs	r0, [r6], -r4, lsl #2
    183c:	6c2f4d06 	stcvs	13, cr4, [pc], #-24	; 182c <__cs3_region_num+0x182a>
    1840:	022f4c67 	eoreq	r4, pc, #26368	; 0x6700
    1844:	01010008 	tsteq	r1, r8
    1848:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    184c:	02540002 	subseq	r0, r4, #2
    1850:	01020000 	mrseq	r0, (UNDEF: 2)
    1854:	000d0efb 	strdeq	r0, [sp], -fp
    1858:	01010101 	tsteq	r1, r1, lsl #2
    185c:	01000000 	mrseq	r0, (UNDEF: 0)
    1860:	63010000 	movwvs	r0, #4096	; 0x1000
    1864:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
    1868:	615c7370 	cmpvs	ip, r0, ror r3
    186c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1870:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
    1874:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    1878:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
    187c:	655c302e 	ldrbvs	r3, [ip, #-46]	; 0xffffffd2
    1880:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
    1884:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1888:	615c7069 	cmpvs	ip, r9, rrx
    188c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1890:	70685c61 	rsbvc	r5, r8, r1, ror #24
    1894:	6c615c73 	stclvs	12, cr5, [r1], #-460	; 0xfffffe34
    1898:	61726574 	cmnvs	r2, r4, ror r5
    189c:	7370685f 	cmnvc	r0, #6225920	; 0x5f0000
    18a0:	6c77685c 	ldclvs	8, cr6, [r7], #-368	; 0xfffffe90
    18a4:	695c6269 	ldmdbvs	ip, {r0, r3, r5, r6, r9, sp, lr}^
    18a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    18ac:	63006564 	movwvs	r6, #1380	; 0x564
    18b0:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
    18b4:	615c7370 	cmpvs	ip, r0, ror r3
    18b8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    18bc:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
    18c0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    18c4:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
    18c8:	715c302e 	cmpvc	ip, lr, lsr #32
    18cc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    18d0:	2e2f7375 	mcrcs	3, 1, r7, cr15, cr5, {3}
    18d4:	6d652f2e 	stclvs	15, cr2, [r5, #-184]!	; 0xffffff48
    18d8:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
    18dc:	692f6465 	stmdbvs	pc!, {r0, r2, r5, r6, sl, sp, lr}	; <UNPREDICTABLE>
    18e0:	6c612f70 	stclvs	15, cr2, [r1], #-448	; 0xfffffe40
    18e4:	61726574 	cmnvs	r2, r4, ror r5
    18e8:	7370682f 	cmnvc	r0, #3080192	; 0x2f0000
    18ec:	746c612f 	strbtvc	r6, [ip], #-303	; 0xfffffed1
    18f0:	5f617265 	svcpl	0x00617265
    18f4:	2f737068 	svccs	0x00737068
    18f8:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    18fc:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1900:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
    1904:	0072676d 	rsbseq	r6, r2, sp, ror #14
    1908:	615c3a63 	cmpvs	ip, r3, ror #20
    190c:	5c737070 	ldclpl	0, cr7, [r3], #-448	; 0xfffffe40
    1910:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    1914:	715c6172 	cmpvc	ip, r2, ror r1
    1918:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    191c:	315c7375 	cmpcc	ip, r5, ror r3
    1920:	5c302e36 	ldcpl	14, cr2, [r0], #-216	; 0xffffff28
    1924:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
    1928:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
    192c:	736f685c 	cmnvc	pc, #92, 16	; 0x5c0000
    1930:	6f745f74 	svcvs	0x00745f74
    1934:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    1938:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    193c:	675c726f 	ldrbvs	r7, [ip, -pc, ror #4]
    1940:	615c756e 	cmpvs	ip, lr, ror #10
    1944:	625c6d72 	subsvs	r6, ip, #7296	; 0x1c80
    1948:	6d657261 	sfmvs	f7, 2, [r5, #-388]!	; 0xfffffe7c
    194c:	6c617465 	cfstrdvs	mvd7, [r1], #-404	; 0xfffffe6c
    1950:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1954:	746c612d 	strbtvc	r6, [ip], #-301	; 0xfffffed3
    1958:	2d617265 	sfmcs	f7, 2, [r1, #-404]!	; 0xfffffe6c
    195c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1960:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1964:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1968:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    196c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1970:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1974:	73707061 	cmnvc	r0, #97	; 0x61
    1978:	746c615c 	strbtvc	r6, [ip], #-348	; 0xfffffea4
    197c:	5c617265 	sfmpl	f7, 2, [r1], #-404	; 0xfffffe6c
    1980:	72617571 	rsbvc	r7, r1, #473956352	; 0x1c400000
    1984:	5c737574 	cfldr64pl	mvdx7, [r3], #-464	; 0xfffffe30
    1988:	302e3631 	eorcc	r3, lr, r1, lsr r6
    198c:	626d655c 	rsbvs	r6, sp, #92, 10	; 0x17000000
    1990:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
    1994:	6f685c64 	svcvs	0x00685c64
    1998:	745f7473 	ldrbvc	r7, [pc], #-1139	; 19a0 <__cs3_region_num+0x199e>
    199c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    19a0:	6e656d5c 	mcrvs	13, 3, r6, cr5, cr12, {2}
    19a4:	5c726f74 	ldclpl	15, cr6, [r2], #-464	; 0xfffffe30
    19a8:	5c756e67 	ldclpl	14, cr6, [r5], #-412	; 0xfffffe64
    19ac:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    19b0:	65726162 	ldrbvs	r6, [r2, #-354]!	; 0xfffffe9e
    19b4:	6174656d 	cmnvs	r4, sp, ror #10
    19b8:	72615c6c 	rsbvc	r5, r1, #108, 24	; 0x6c00
    19bc:	6c612d6d 	stclvs	13, cr2, [r1], #-436	; 0xfffffe4c
    19c0:	61726574 	cmnvs	r2, r4, ror r5
    19c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    19c8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    19cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    19d0:	3a630065 	bcc	18c1b6c <__cs3_heap_start+0x17a84cc>
    19d4:	7070615c 	rsbsvc	r6, r0, ip, asr r1
    19d8:	6c615c73 	stclvs	12, cr5, [r1], #-460	; 0xfffffe34
    19dc:	61726574 	cmnvs	r2, r4, ror r5
    19e0:	6175715c 	cmnvs	r5, ip, asr r1
    19e4:	73757472 	cmnvc	r5, #1912602624	; 0x72000000
    19e8:	2e36315c 	mrccs	1, 1, r3, cr6, cr12, {2}
    19ec:	6d655c30 	stclvs	12, cr5, [r5, #-192]!	; 0xffffff40
    19f0:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
    19f4:	695c6465 	ldmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
    19f8:	6c615c70 	stclvs	12, cr5, [r1], #-448	; 0xfffffe40
    19fc:	61726574 	cmnvs	r2, r4, ror r5
    1a00:	7370685c 	cmnvc	r0, #92, 16	; 0x5c0000
    1a04:	746c615c 	strbtvc	r6, [ip], #-348	; 0xfffffea4
    1a08:	5f617265 	svcpl	0x00617265
    1a0c:	5c737068 	ldclpl	0, cr7, [r3], #-416	; 0xfffffe60
    1a10:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1a14:	6e695c62 	cdpvs	12, 6, cr5, cr9, cr2, {3}
    1a18:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1a1c:	6f735c65 	svcvs	0x00735c65
    1a20:	76635f63 	strbtvc	r5, [r3], -r3, ror #30
    1a24:	0076615f 	rsbseq	r6, r6, pc, asr r1
    1a28:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1a2c:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    1a30:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    1a34:	00010068 	andeq	r0, r1, r8, rrx
    1a38:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1a3c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1a40:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    1a44:	632e7470 			; <UNDEFINED> instruction: 0x632e7470
    1a48:	00000200 	andeq	r0, r0, r0, lsl #4
    1a4c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1a50:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1a54:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1a58:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1a5c:	00000300 	andeq	r0, r0, r0, lsl #6
    1a60:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1a64:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1a68:	00000400 	andeq	r0, r0, r0, lsl #8
    1a6c:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1a70:	00682e62 	rsbeq	r2, r8, r2, ror #28
    1a74:	61000001 	tstvs	r0, r1
    1a78:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1a7c:	645f746e 	ldrbvs	r7, [pc], #-1134	; 1a84 <__cs3_region_zero_size_ram+0x3c>
    1a80:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1a84:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1a88:	61000005 	tstvs	r0, r5
    1a8c:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1a90:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1a94:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    1a98:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 1924 <__cs3_region_num+0x1922>
    1a9c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    1aa0:	00010068 	andeq	r0, r1, r8, rrx
    1aa4:	05000000 	streq	r0, [r0, #-0]
    1aa8:	10ae1802 	adcne	r1, lr, r2, lsl #16
    1aac:	00da0300 	sbcseq	r0, sl, r0, lsl #6
    1ab0:	02046601 	andeq	r6, r4, #1048576	; 0x100000
    1ab4:	83ba1003 			; <UNDEFINED> instruction: 0x83ba1003
    1ab8:	821c03a5 	andshi	r0, ip, #-1811939326	; 0x94000002
    1abc:	4d660b03 	fstmdbxmi	r6!, {d16}	;@ Deprecated
    1ac0:	0a03862f 	beq	e3384 <__cs3_region_init_size_ram+0xcb72c>
    1ac4:	86684d9e 			; <UNDEFINED> instruction: 0x86684d9e
    1ac8:	03864d6e 	orreq	r4, r6, #7040	; 0x1b80
    1acc:	4b4d660b 	blmi	135b300 <__cs3_heap_start+0x1241c60>
    1ad0:	9f4b6b85 	svcls	0x004b6b85
    1ad4:	dbd7bba4 	blle	ff5f096c <__cs3_heap_end+0xbf5f096c>
    1ad8:	03040200 	movweq	r0, #16896	; 0x4200
    1adc:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    1ae0:	02009f03 	andeq	r9, r0, #3, 30
    1ae4:	00d80304 	sbcseq	r0, r8, r4, lsl #6
    1ae8:	b5030402 	strlt	r0, [r3, #-1026]	; 0xfffffbfe
    1aec:	01040200 	mrseq	r0, R12_usr
    1af0:	03066606 	movweq	r6, #26118	; 0x6606
    1af4:	6b32660b 	blvs	c9b328 <__cs3_heap_start+0xb81c88>
    1af8:	21083f08 	tstcs	r8, r8, lsl #30
    1afc:	0200f468 	andeq	pc, r0, #104, 8	; 0x68000000
    1b00:	e0080204 	and	r0, r8, r4, lsl #4
    1b04:	01040200 	mrseq	r0, R12_usr
    1b08:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    1b0c:	03060204 	movweq	r0, #25092	; 0x6204
    1b10:	02006609 	andeq	r6, r0, #9437184	; 0x900000
    1b14:	6e030204 	cdpvs	2, 0, cr0, cr3, cr4, {0}
    1b18:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
    1b1c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1b20:	66150306 	ldrvs	r0, [r5], -r6, lsl #6
    1b24:	2f4b692f 	svccs	0x004b692f
    1b28:	3e084e85 	cdpcc	14, 0, cr4, cr8, cr5, {4}
    1b2c:	084e852f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, sl, pc}^
    1b30:	4d852f3e 	stcmi	15, cr2, [r5, #248]	; 0xf8
    1b34:	852f3e08 	strhi	r3, [pc, #-3592]!	; d34 <__cs3_region_num+0xd32>
    1b38:	2f3e084d 	svccs	0x003e084d
    1b3c:	3e084d85 	cdpcc	13, 0, cr4, cr8, cr5, {4}
    1b40:	084d852f 	stmdaeq	sp, {r0, r1, r2, r3, r5, r8, sl, pc}^
    1b44:	a5852f3e 	strge	r2, [r5, #3902]	; 0xf3e
    1b48:	68834ed8 	stmvs	r3, {r3, r4, r6, r7, r9, sl, fp, lr}
    1b4c:	30142c02 	andscc	r2, r4, r2, lsl #24
    1b50:	4ed8a585 	cdpmi	5, 13, cr10, cr8, cr5, {4}
    1b54:	2a026883 	bcs	9bd68 <__cs3_region_init_size_ram+0x84110>
    1b58:	03853014 	orreq	r3, r5, #20
    1b5c:	4eda9e09 	cdpmi	14, 13, cr9, cr10, cr9, {0}
    1b60:	22086883 	andcs	r6, r8, #8585216	; 0x830000
    1b64:	85314ef4 	ldrhi	r4, [r1, #-3828]!	; 0xfffff10c
    1b68:	834ed8a5 	movthi	sp, #59557	; 0xe8a5
    1b6c:	30760868 	rsbscc	r0, r6, r8, ror #16
    1b70:	4ed8a585 	cdpmi	5, 13, cr10, cr8, cr5, {4}
    1b74:	76086883 	strvc	r6, [r8], -r3, lsl #17
    1b78:	d9a68530 	stmible	r6!, {r4, r5, r8, sl, pc}
    1b7c:	0868834e 	stmdaeq	r8!, {r1, r2, r3, r6, r8, r9, pc}^
    1b80:	314ef422 	cmpcc	lr, r2, lsr #8	; <UNPREDICTABLE>
    1b84:	4cd8a585 	cfldr64mi	mvdx10, [r8], {133}	; 0x85
    1b88:	68834e68 	stmvs	r3, {r3, r5, r6, r9, sl, fp, lr}
    1b8c:	85307608 	ldrhi	r7, [r0, #-1544]!	; 0xfffff9f8
    1b90:	684cd8a5 	stmdavs	ip, {r0, r2, r5, r7, fp, ip, lr, pc}^
    1b94:	0868834e 	stmdaeq	r8!, {r1, r2, r3, r6, r8, r9, pc}^
    1b98:	a6853076 	sxtab16ge	r3, r5, r6
    1b9c:	68834ed9 	stmvs	r3, {r0, r3, r4, r6, r7, r9, sl, fp, lr}
    1ba0:	4ef42208 	cdpmi	2, 15, cr2, cr4, cr8, {0}
    1ba4:	d9a68531 	stmible	r6!, {r0, r4, r5, r8, sl, pc}
    1ba8:	0868834e 	stmdaeq	r8!, {r1, r2, r3, r6, r8, r9, pc}^
    1bac:	314ef422 	cmpcc	lr, r2, lsr #8	; <UNPREDICTABLE>
    1bb0:	67d9c286 	ldrbvs	ip, [r9, r6, lsl #5]
    1bb4:	67f44c4e 	ldrbvs	r4, [r4, lr, asr #24]!
    1bb8:	d8c18630 	stmiale	r1, {r4, r5, r9, sl, pc}^
    1bbc:	084c684c 	stmdaeq	ip, {r2, r3, r6, fp, sp, lr}^
    1bc0:	86304e22 	ldrthi	r4, [r0], -r2, lsr #28
    1bc4:	4e67d8c1 	cdpmi	8, 6, cr13, cr7, cr1, {6}
    1bc8:	3067f44c 	rsbcc	pc, r7, ip, asr #8
    1bcc:	4cd8c186 	ldfmip	f4, [r8], {134}	; 0x86
    1bd0:	4cf42208 	lfmmi	f2, 2, [r4], #32
    1bd4:	4c4e684c 	mcrrmi	8, 4, r6, lr, cr12
    1bd8:	6a302208 	bvs	c0a400 <__cs3_heap_start+0xaf0d60>
    1bdc:	4c67d8c1 	stclmi	8, cr13, [r7], #-772	; 0xfffffcfc
    1be0:	834e6768 	movthi	r6, #59240	; 0xe768
    1be4:	f42208a0 	vld2.32	{d0-d1}, [r2 :128], r0
    1be8:	86306986 	ldrthi	r6, [r0], -r6, lsl #19
    1bec:	684cd8f9 	stmdavs	ip, {r0, r3, r4, r5, r6, r7, fp, ip, lr, pc}^
    1bf0:	4f4e6867 	svcmi	0x004e6867
    1bf4:	0069a083 	rsbeq	sl, r9, r3, lsl #1
    1bf8:	06010402 	streq	r0, [r1], -r2, lsl #8
    1bfc:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c00:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c04:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c08:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c0c:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c10:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c14:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c18:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c1c:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c20:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c24:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c28:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c2c:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c30:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c34:	00670666 	rsbeq	r0, r7, r6, ror #12
    1c38:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c3c:	67670666 	strbvs	r0, [r7, -r6, ror #12]!
    1c40:	a14a0f03 	cmpge	sl, r3, lsl #30
    1c44:	30132c02 	andscc	r2, r3, r2, lsl #24
    1c48:	30132a02 	andscc	r2, r3, r2, lsl #20
    1c4c:	0888304d 	stmeq	r8, {r0, r2, r3, r6, ip, sp}
    1c50:	4c22085b 	stcmi	8, cr0, [r2], #-364	; 0xfffffe94
    1c54:	4bd94c69 	blmi	ff654e00 <__cs3_heap_end+0xbf654e00>
    1c58:	4b304b30 	blmi	c14920 <__cs3_heap_start+0xafb280>
    1c5c:	4da04d30 	stcmi	13, cr4, [r0, #192]!	; 0xc0
    1c60:	304eae08 	subcc	sl, lr, r8, lsl #28
    1c64:	684e6785 	stmdavs	lr, {r0, r2, r7, r8, r9, sl, sp, lr}^
    1c68:	d84a0903 	stmdale	sl, {r0, r1, r8, fp}^
    1c6c:	034a0e03 	movteq	r0, #44547	; 0xae03
    1c70:	03674a0d 	cmneq	r7, #53248	; 0xd000
    1c74:	68674a09 	stmdavs	r7!, {r0, r3, r9, fp, lr}^
    1c78:	4d68674c 	stclmi	7, cr6, [r8, #-304]!	; 0xfffffed0
    1c7c:	2f4b692f 	svccs	0x004b692f
    1c80:	09034d85 	stmdbeq	r3, {r0, r2, r7, r8, sl, fp, lr}
    1c84:	2f313c08 	svccs	0x00313c08
    1c88:	09034d85 	stmdbeq	r3, {r0, r2, r7, r8, sl, fp, lr}
    1c8c:	2f313c08 	svccs	0x00313c08
    1c90:	3e084d85 	cdpcc	13, 0, cr4, cr8, cr5, {4}
    1c94:	084d852f 	stmdaeq	sp, {r0, r1, r2, r3, r5, r8, sl, pc}^
    1c98:	4d852f3e 	stcmi	15, cr2, [r5, #248]	; 0xf8
    1c9c:	852f3e08 	strhi	r3, [pc, #-3592]!	; e9c <__cs3_region_num+0xe9a>
    1ca0:	2f3e084d 	svccs	0x003e084d
    1ca4:	68a0bd87 	stmiavs	r0!, {r0, r1, r2, r7, r8, sl, fp, ip, sp, pc}
    1ca8:	68f468f4 	ldmvs	r4!, {r2, r4, r5, r6, r7, fp, sp, lr}^
    1cac:	08872ff5 	stmeq	r7, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    1cb0:	8668a023 	strbthi	sl, [r8], -r3, lsr #32
    1cb4:	69866869 	stmibvs	r6, {r0, r3, r5, r6, fp, sp, lr}
    1cb8:	bc698668 	stcllt	6, cr8, [r9], #-416	; 0xfffffe60
    1cbc:	bc69852f 	cfstr64lt	mvdx8, [r9], #-188	; 0xffffff44
    1cc0:	6885852f 	stmvs	r5, {r0, r1, r2, r3, r5, r8, sl, pc}
    1cc4:	85304ed8 	ldrhi	r4, [r0, #-3800]!	; 0xfffff128
    1cc8:	852fbc69 	strhi	fp, [pc, #-3177]!	; 1067 <__cs3_region_num+0x1065>
    1ccc:	4ed86885 	cdpmi	8, 13, cr6, cr8, cr5, {4}
    1cd0:	bc698530 	cfstr64lt	mvdx8, [r9], #-192	; 0xffffff40
    1cd4:	6885852f 	stmvs	r5, {r0, r1, r2, r3, r5, r8, sl, pc}
    1cd8:	87304ed8 			; <UNDEFINED> instruction: 0x87304ed8
    1cdc:	34d89fd9 	ldrbcc	r9, [r8], #4057	; 0xfd9
    1ce0:	d89fa185 	ldmle	pc, {r0, r2, r7, r8, sp, pc}	; <UNPREDICTABLE>
    1ce4:	674b8534 	smlaldxvs	r8, fp, r4, r5
    1ce8:	85674b85 	strbhi	r4, [r7, #-2949]!	; 0xfffff47b
    1cec:	1103834b 	tstne	r3, fp, asr #6
    1cf0:	68bc854a 	ldmvs	ip!, {r1, r3, r6, r8, sl, pc}
    1cf4:	b208bc68 	andlt	fp, r8, #104, 24	; 0x6800
    1cf8:	0602d785 	streq	sp, [r2], -r5, lsl #15
    1cfc:	Address 0x00001cfc is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	001001e4 	andseq	r0, r0, r4, ror #3
      1c:	0000003c 	andeq	r0, r0, ip, lsr r0
      20:	8b040e42 	blhi	103930 <alt_clk_pll_cfg_get+0x214>
      24:	0b0d4201 	bleq	350830 <__cs3_heap_start+0x237190>
      28:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
      2c:	00000ecb 	andeq	r0, r0, fp, asr #29
      30:	0000001c 	andeq	r0, r0, ip, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	00100220 	andseq	r0, r0, r0, lsr #4
      3c:	0000005c 	andeq	r0, r0, ip, asr r0
      40:	8b080e42 	blhi	203950 <__cs3_heap_start+0xea2b0>
      44:	42018e02 	andmi	r8, r1, #2, 28
      48:	68040b0c 	stmdavs	r4, {r2, r3, r8, r9, fp}
      4c:	00080d0c 	andeq	r0, r8, ip, lsl #26
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	0010027c 	andseq	r0, r0, ip, ror r2
      5c:	000000d4 	ldrdeq	r0, [r0], -r4
      60:	8b080e42 	blhi	203970 <__cs3_heap_start+0xea2d0>
      64:	42018e02 	andmi	r8, r1, #2, 28
      68:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
      6c:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
      70:	0000001c 	andeq	r0, r0, ip, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	00100350 	andseq	r0, r0, r0, asr r3
      7c:	00000048 	andeq	r0, r0, r8, asr #32
      80:	8b040e42 	blhi	103990 <alt_clk_pll_cfg_get+0x274>
      84:	0b0d4201 	bleq	350890 <__cs3_heap_start+0x2371f0>
      88:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
      8c:	00000ecb 	andeq	r0, r0, fp, asr #29
      90:	0000001c 	andeq	r0, r0, ip, lsl r0
      94:	00000000 	andeq	r0, r0, r0
      98:	00100398 	mulseq	r0, r8, r3
      9c:	00000034 	andeq	r0, r0, r4, lsr r0
      a0:	8b040e42 	blhi	1039b0 <alt_clk_pll_cfg_get+0x294>
      a4:	0b0d4201 	bleq	3508b0 <__cs3_heap_start+0x237210>
      a8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
      ac:	00000ecb 	andeq	r0, r0, fp, asr #29
      b0:	0000001c 	andeq	r0, r0, ip, lsl r0
      b4:	00000000 	andeq	r0, r0, r0
      b8:	001003cc 	andseq	r0, r0, ip, asr #7
      bc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
      c0:	8b040e42 	blhi	1039d0 <alt_clk_pll_cfg_get+0x2b4>
      c4:	0b0d4201 	bleq	3508d0 <__cs3_heap_start+0x237230>
      c8:	0d0dd602 	stceq	6, cr13, [sp, #-8]
      cc:	000ecb42 	andeq	ip, lr, r2, asr #22
      d0:	0000001c 	andeq	r0, r0, ip, lsl r0
      d4:	00000000 	andeq	r0, r0, r0
      d8:	00100588 	andseq	r0, r0, r8, lsl #11
      dc:	000000dc 	ldrdeq	r0, [r0], -ip
      e0:	8b040e42 	blhi	1039f0 <alt_clk_pll_cfg_get+0x2d4>
      e4:	0b0d4201 	bleq	3508f0 <__cs3_heap_start+0x237250>
      e8:	0d0d6602 	stceq	6, cr6, [sp, #-8]
      ec:	000ecb42 	andeq	ip, lr, r2, asr #22
      f0:	00000020 	andeq	r0, r0, r0, lsr #32
      f4:	00000000 	andeq	r0, r0, r0
      f8:	00100664 	andseq	r0, r0, r4, ror #12
      fc:	000000cc 	andeq	r0, r0, ip, asr #1
     100:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     104:	8e028b03 	vmlahi.f64	d8, d2, d3
     108:	0b0c4201 	bleq	310914 <__cs3_heap_start+0x1f7274>
     10c:	0c600204 	sfmeq	f0, 2, [r0], #-16
     110:	00000c0d 	andeq	r0, r0, sp, lsl #24
     114:	00000018 	andeq	r0, r0, r8, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	00100730 	andseq	r0, r0, r0, lsr r7
     120:	00000070 	andeq	r0, r0, r0, ror r0
     124:	8b080e42 	blhi	203a34 <__cs3_heap_start+0xea394>
     128:	42018e02 	andmi	r8, r1, #2, 28
     12c:	00040b0c 	andeq	r0, r4, ip, lsl #22
     130:	00000018 	andeq	r0, r0, r8, lsl r0
     134:	00000000 	andeq	r0, r0, r0
     138:	001007a0 	andseq	r0, r0, r0, lsr #15
     13c:	0000028c 	andeq	r0, r0, ip, lsl #5
     140:	8b080e42 	blhi	203a50 <__cs3_heap_start+0xea3b0>
     144:	42018e02 	andmi	r8, r1, #2, 28
     148:	00040b0c 	andeq	r0, r4, ip, lsl #22
     14c:	0000000c 	andeq	r0, r0, ip
     150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     154:	7c020001 	stcvc	0, cr0, [r2], {1}
     158:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     15c:	0000001c 	andeq	r0, r0, ip, lsl r0
     160:	0000014c 	andeq	r0, r0, ip, asr #2
     164:	00100a2c 	andseq	r0, r0, ip, lsr #20
     168:	00000060 	andeq	r0, r0, r0, rrx
     16c:	8b040e42 	blhi	103a7c <alt_clk_pll_cfg_get+0x360>
     170:	0b0d4201 	bleq	35097c <__cs3_heap_start+0x2372dc>
     174:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     178:	00000ecb 	andeq	r0, r0, fp, asr #29
     17c:	0000000c 	andeq	r0, r0, ip
     180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     184:	7c020001 	stcvc	0, cr0, [r2], {1}
     188:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     18c:	00000030 	andeq	r0, r0, r0, lsr r0
     190:	0000017c 	andeq	r0, r0, ip, ror r1
     194:	00100a8c 	andseq	r0, r0, ip, lsl #21
     198:	00000024 	andeq	r0, r0, r4, lsr #32
     19c:	80100e42 	andshi	r0, r0, r2, asr #28
     1a0:	82038104 	andhi	r8, r3, #4, 2
     1a4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     1a8:	058b140e 	streq	r1, [fp, #1038]	; 0x40e
     1ac:	460b0d42 	strmi	r0, [fp], -r2, asr #26
     1b0:	cb420d0d 	blgt	10835ec <__cs3_heap_start+0xf69f4c>
     1b4:	c342100e 	movtgt	r1, #8206	; 0x200e
     1b8:	0ec0c1c2 	acseqdm	f4, f2
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c4:	0000017c 	andeq	r0, r0, ip, ror r1
     1c8:	00100ab0 			; <UNDEFINED> instruction: 0x00100ab0
     1cc:	00000048 	andeq	r0, r0, r8, asr #32
     1d0:	8b040e42 	blhi	103ae0 <alt_clk_pll_cfg_get+0x3c4>
     1d4:	0b0d4201 	bleq	3509e0 <__cs3_heap_start+0x237340>
     1d8:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     1dc:	00000ecb 	andeq	r0, r0, fp, asr #29
     1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1e4:	0000017c 	andeq	r0, r0, ip, ror r1
     1e8:	00100af8 			; <UNDEFINED> instruction: 0x00100af8
     1ec:	0000007c 	andeq	r0, r0, ip, ror r0
     1f0:	8b040e42 	blhi	103b00 <alt_clk_pll_cfg_get+0x3e4>
     1f4:	0b0d4201 	bleq	350a00 <__cs3_heap_start+0x237360>
     1f8:	420d0d76 	andmi	r0, sp, #7552	; 0x1d80
     1fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     200:	0000001c 	andeq	r0, r0, ip, lsl r0
     204:	0000017c 	andeq	r0, r0, ip, ror r1
     208:	00100b74 	andseq	r0, r0, r4, ror fp
     20c:	000000c4 	andeq	r0, r0, r4, asr #1
     210:	8b040e42 	blhi	103b20 <alt_clk_pll_cfg_get+0x404>
     214:	0b0d4201 	bleq	350a20 <__cs3_heap_start+0x237380>
     218:	0d0d5a02 	vstreq	s10, [sp, #-8]
     21c:	000ecb42 	andeq	ip, lr, r2, asr #22
     220:	0000001c 	andeq	r0, r0, ip, lsl r0
     224:	0000017c 	andeq	r0, r0, ip, ror r1
     228:	00100c38 	andseq	r0, r0, r8, lsr ip
     22c:	0000009c 	muleq	r0, ip, r0
     230:	8b040e42 	blhi	103b40 <alt_clk_pll_cfg_get+0x424>
     234:	0b0d4201 	bleq	350a40 <__cs3_heap_start+0x2373a0>
     238:	0d0d4602 	stceq	6, cr4, [sp, #-8]
     23c:	000ecb42 	andeq	ip, lr, r2, asr #22
     240:	0000001c 	andeq	r0, r0, ip, lsl r0
     244:	0000017c 	andeq	r0, r0, ip, ror r1
     248:	00100cd4 			; <UNDEFINED> instruction: 0x00100cd4
     24c:	00000060 	andeq	r0, r0, r0, rrx
     250:	8b040e42 	blhi	103b60 <alt_clk_pll_cfg_get+0x444>
     254:	0b0d4201 	bleq	350a60 <__cs3_heap_start+0x2373c0>
     258:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     25c:	00000ecb 	andeq	r0, r0, fp, asr #29
     260:	0000001c 	andeq	r0, r0, ip, lsl r0
     264:	0000017c 	andeq	r0, r0, ip, ror r1
     268:	00100d34 	andseq	r0, r0, r4, lsr sp
     26c:	00000028 	andeq	r0, r0, r8, lsr #32
     270:	8b040e42 	blhi	103b80 <alt_clk_pll_cfg_get+0x464>
     274:	0b0d4201 	bleq	350a80 <__cs3_heap_start+0x2373e0>
     278:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     27c:	00000ecb 	andeq	r0, r0, fp, asr #29
     280:	0000001c 	andeq	r0, r0, ip, lsl r0
     284:	0000017c 	andeq	r0, r0, ip, ror r1
     288:	00100d5c 	andseq	r0, r0, ip, asr sp
     28c:	000000c8 	andeq	r0, r0, r8, asr #1
     290:	8b040e42 	blhi	103ba0 <alt_clk_pll_cfg_get+0x484>
     294:	0b0d4201 	bleq	350aa0 <__cs3_heap_start+0x237400>
     298:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
     29c:	000ecb42 	andeq	ip, lr, r2, asr #22
     2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a4:	0000017c 	andeq	r0, r0, ip, ror r1
     2a8:	00100e24 	andseq	r0, r0, r4, lsr #28
     2ac:	00000094 	muleq	r0, r4, r0
     2b0:	8b080e42 	blhi	203bc0 <__cs3_heap_start+0xea520>
     2b4:	42018e02 	andmi	r8, r1, #2, 28
     2b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     2bc:	080d0c44 	stmdaeq	sp, {r2, r6, sl, fp}
     2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c4:	0000017c 	andeq	r0, r0, ip, ror r1
     2c8:	00100eb8 			; <UNDEFINED> instruction: 0x00100eb8
     2cc:	000000c8 	andeq	r0, r0, r8, asr #1
     2d0:	8b040e42 	blhi	103be0 <alt_clk_pll_cfg_get+0x4c4>
     2d4:	0b0d4201 	bleq	350ae0 <__cs3_heap_start+0x237440>
     2d8:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
     2dc:	000ecb42 	andeq	ip, lr, r2, asr #22
     2e0:	00000020 	andeq	r0, r0, r0, lsr #32
     2e4:	0000017c 	andeq	r0, r0, ip, ror r1
     2e8:	00100f80 	andseq	r0, r0, r0, lsl #31
     2ec:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     2f0:	8b080e42 	blhi	203c00 <__cs3_heap_start+0xea560>
     2f4:	42018e02 	andmi	r8, r1, #2, 28
     2f8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     2fc:	0d0c01d8 	stfeqs	f0, [ip, #-864]	; 0xfffffca0
     300:	00000008 	andeq	r0, r0, r8
     304:	00000020 	andeq	r0, r0, r0, lsr #32
     308:	0000017c 	andeq	r0, r0, ip, ror r1
     30c:	0010133c 	andseq	r1, r0, ip, lsr r3
     310:	00000360 	andeq	r0, r0, r0, ror #6
     314:	8b080e42 	blhi	203c24 <__cs3_heap_start+0xea584>
     318:	42018e02 	andmi	r8, r1, #2, 28
     31c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     320:	0d0c01aa 	stfeqs	f0, [ip, #-680]	; 0xfffffd58
     324:	00000008 	andeq	r0, r0, r8
     328:	0000001c 	andeq	r0, r0, ip, lsl r0
     32c:	0000017c 	andeq	r0, r0, ip, ror r1
     330:	0010169c 	mulseq	r0, ip, r6
     334:	00000124 	andeq	r0, r0, r4, lsr #2
     338:	8b040e42 	blhi	103c48 <alt_clk_pll_cfg_get+0x52c>
     33c:	0b0d4201 	bleq	350b48 <__cs3_heap_start+0x2374a8>
     340:	0d0d8a02 	vstreq	s16, [sp, #-8]
     344:	000ecb42 	andeq	ip, lr, r2, asr #22
     348:	0000001c 	andeq	r0, r0, ip, lsl r0
     34c:	0000017c 	andeq	r0, r0, ip, ror r1
     350:	001017c0 	andseq	r1, r0, r0, asr #15
     354:	0000011c 	andeq	r0, r0, ip, lsl r1
     358:	8b040e42 	blhi	103c68 <alt_clk_pll_cfg_set+0xc>
     35c:	0b0d4201 	bleq	350b68 <__cs3_heap_start+0x2374c8>
     360:	0d0d8602 	stceq	6, cr8, [sp, #-8]
     364:	000ecb42 	andeq	ip, lr, r2, asr #22
     368:	00000020 	andeq	r0, r0, r0, lsr #32
     36c:	0000017c 	andeq	r0, r0, ip, ror r1
     370:	001018dc 			; <UNDEFINED> instruction: 0x001018dc
     374:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     378:	8b080e42 	blhi	203c88 <__cs3_heap_start+0xea5e8>
     37c:	42018e02 	andmi	r8, r1, #2, 28
     380:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     384:	0d0c0252 	sfmeq	f0, 4, [ip, #-328]	; 0xfffffeb8
     388:	00000008 	andeq	r0, r0, r8
     38c:	00000020 	andeq	r0, r0, r0, lsr #32
     390:	0000017c 	andeq	r0, r0, ip, ror r1
     394:	00101d8c 	andseq	r1, r0, ip, lsl #27
     398:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     39c:	8b080e42 	blhi	203cac <__cs3_heap_start+0xea60c>
     3a0:	42018e02 	andmi	r8, r1, #2, 28
     3a4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     3a8:	0d0c0258 	sfmeq	f0, 4, [ip, #-352]	; 0xfffffea0
     3ac:	00000008 	andeq	r0, r0, r8
     3b0:	00000020 	andeq	r0, r0, r0, lsr #32
     3b4:	0000017c 	andeq	r0, r0, ip, ror r1
     3b8:	00102248 	andseq	r2, r0, r8, asr #4
     3bc:	000005cc 	andeq	r0, r0, ip, asr #11
     3c0:	8b080e42 	blhi	203cd0 <__cs3_heap_start+0xea630>
     3c4:	42018e02 	andmi	r8, r1, #2, 28
     3c8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     3cc:	0d0c02e0 	sfmeq	f0, 4, [ip, #-896]	; 0xfffffc80
     3d0:	00000008 	andeq	r0, r0, r8
     3d4:	00000020 	andeq	r0, r0, r0, lsr #32
     3d8:	0000017c 	andeq	r0, r0, ip, ror r1
     3dc:	00102814 	andseq	r2, r0, r4, lsl r8
     3e0:	0000078c 	andeq	r0, r0, ip, lsl #15
     3e4:	8b080e42 	blhi	203cf4 <__cs3_heap_start+0xea654>
     3e8:	42018e02 	andmi	r8, r1, #2, 28
     3ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     3f0:	0d0c03c0 	stceq	3, cr0, [ip, #-768]	; 0xfffffd00
     3f4:	00000008 	andeq	r0, r0, r8
     3f8:	00000020 	andeq	r0, r0, r0, lsr #32
     3fc:	0000017c 	andeq	r0, r0, ip, ror r1
     400:	00102fa0 	andseq	r2, r0, r0, lsr #31
     404:	000004ec 	andeq	r0, r0, ip, ror #9
     408:	8b040e42 	blhi	103d18 <alt_clk_pll_cfg_set+0xbc>
     40c:	0b0d4201 	bleq	350c18 <__cs3_heap_start+0x237578>
     410:	0d026e03 	stceq	14, cr6, [r2, #-12]
     414:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
     418:	00000000 	andeq	r0, r0, r0
     41c:	0000001c 	andeq	r0, r0, ip, lsl r0
     420:	0000017c 	andeq	r0, r0, ip, ror r1
     424:	0010348c 	andseq	r3, r0, ip, lsl #9
     428:	000001d8 	ldrdeq	r0, [r0], -r8
     42c:	8b040e42 	blhi	103d3c <alt_clk_pll_cfg_set+0xe0>
     430:	0b0d4201 	bleq	350c3c <__cs3_heap_start+0x23759c>
     434:	0d0de402 	cfstrseq	mvf14, [sp, #-8]
     438:	000ecb42 	andeq	ip, lr, r2, asr #22
     43c:	0000001c 	andeq	r0, r0, ip, lsl r0
     440:	0000017c 	andeq	r0, r0, ip, ror r1
     444:	00103664 	andseq	r3, r0, r4, ror #12
     448:	000000b8 	strheq	r0, [r0], -r8
     44c:	8b040e42 	blhi	103d5c <alt_clk_pll_cfg_set+0x100>
     450:	0b0d4201 	bleq	350c5c <__cs3_heap_start+0x2375bc>
     454:	0d0d5402 	cfstrseq	mvf5, [sp, #-8]
     458:	000ecb42 	andeq	ip, lr, r2, asr #22
     45c:	00000020 	andeq	r0, r0, r0, lsr #32
     460:	0000017c 	andeq	r0, r0, ip, ror r1
     464:	0010371c 	andseq	r3, r0, ip, lsl r7
     468:	00000540 	andeq	r0, r0, r0, asr #10
     46c:	8b040e42 	blhi	103d7c <alt_clk_pll_cfg_set+0x120>
     470:	0b0d4201 	bleq	350c7c <__cs3_heap_start+0x2375dc>
     474:	0d029803 	stceq	8, cr9, [r2, #-12]
     478:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
     47c:	00000000 	andeq	r0, r0, r0
     480:	00000020 	andeq	r0, r0, r0, lsr #32
     484:	0000017c 	andeq	r0, r0, ip, ror r1
     488:	00103c5c 	andseq	r3, r0, ip, asr ip
     48c:	0000055c 	andeq	r0, r0, ip, asr r5
     490:	8b080e42 	blhi	203da0 <__cs3_heap_start+0xea700>
     494:	42018e02 	andmi	r8, r1, #2, 28
     498:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     49c:	0d0c02a8 	sfmeq	f0, 4, [ip, #-672]	; 0xfffffd60
     4a0:	00000008 	andeq	r0, r0, r8
     4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4a8:	0000017c 	andeq	r0, r0, ip, ror r1
     4ac:	001041b8 			; <UNDEFINED> instruction: 0x001041b8
     4b0:	0000015c 	andeq	r0, r0, ip, asr r1
     4b4:	8b040e42 	blhi	103dc4 <alt_clk_pll_cfg_set+0x168>
     4b8:	0b0d4201 	bleq	350cc4 <__cs3_heap_start+0x237624>
     4bc:	0d0da602 	stceq	6, cr10, [sp, #-8]
     4c0:	000ecb42 	andeq	ip, lr, r2, asr #22
     4c4:	00000020 	andeq	r0, r0, r0, lsr #32
     4c8:	0000017c 	andeq	r0, r0, ip, ror r1
     4cc:	00104314 	andseq	r4, r0, r4, lsl r3
     4d0:	000007f4 	strdeq	r0, [r0], -r4
     4d4:	8b080e42 	blhi	203de4 <__cs3_heap_start+0xea744>
     4d8:	42018e02 	andmi	r8, r1, #2, 28
     4dc:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     4e0:	0d0c03f4 	stceq	3, cr0, [ip, #-976]	; 0xfffffc30
     4e4:	00000008 	andeq	r0, r0, r8
     4e8:	00000020 	andeq	r0, r0, r0, lsr #32
     4ec:	0000017c 	andeq	r0, r0, ip, ror r1
     4f0:	00104b08 	andseq	r4, r0, r8, lsl #22
     4f4:	00000408 	andeq	r0, r0, r8, lsl #8
     4f8:	8b080e42 	blhi	203e08 <__cs3_heap_start+0xea768>
     4fc:	42018e02 	andmi	r8, r1, #2, 28
     500:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     504:	0d0c01fe 	stfeqs	f0, [ip, #-1016]	; 0xfffffc08
     508:	00000008 	andeq	r0, r0, r8
     50c:	00000020 	andeq	r0, r0, r0, lsr #32
     510:	0000017c 	andeq	r0, r0, ip, ror r1
     514:	00104f10 	andseq	r4, r0, r0, lsl pc
     518:	0000057c 	andeq	r0, r0, ip, ror r5
     51c:	8b080e42 	blhi	203e2c <__cs3_heap_start+0xea78c>
     520:	42018e02 	andmi	r8, r1, #2, 28
     524:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     528:	0d0c02b8 	sfmeq	f0, 4, [ip, #-736]	; 0xfffffd20
     52c:	00000008 	andeq	r0, r0, r8
     530:	0000001c 	andeq	r0, r0, ip, lsl r0
     534:	0000017c 	andeq	r0, r0, ip, ror r1
     538:	0010548c 	andseq	r5, r0, ip, lsl #9
     53c:	000000a4 	andeq	r0, r0, r4, lsr #1
     540:	8b040e42 	blhi	103e50 <alt_clk_pll_cfg_set+0x1f4>
     544:	0b0d4201 	bleq	350d50 <__cs3_heap_start+0x2376b0>
     548:	0d0d4a02 	vstreq	s8, [sp, #-8]
     54c:	000ecb42 	andeq	ip, lr, r2, asr #22
     550:	0000001c 	andeq	r0, r0, ip, lsl r0
     554:	0000017c 	andeq	r0, r0, ip, ror r1
     558:	00105530 	andseq	r5, r0, r0, lsr r5
     55c:	00000104 	andeq	r0, r0, r4, lsl #2
     560:	8b040e42 	blhi	103e70 <alt_clk_pll_cfg_set+0x214>
     564:	0b0d4201 	bleq	350d70 <__cs3_heap_start+0x2376d0>
     568:	0d0d7a02 	vstreq	s14, [sp, #-8]
     56c:	000ecb42 	andeq	ip, lr, r2, asr #22
     570:	00000020 	andeq	r0, r0, r0, lsr #32
     574:	0000017c 	andeq	r0, r0, ip, ror r1
     578:	00105634 	andseq	r5, r0, r4, lsr r6
     57c:	000006fc 	strdeq	r0, [r0], -ip
     580:	8b040e42 	blhi	103e90 <alt_clk_pll_cfg_set+0x234>
     584:	0b0d4201 	bleq	350d90 <__cs3_heap_start+0x2376f0>
     588:	0d037603 	stceq	6, cr7, [r3, #-12]
     58c:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
     590:	00000000 	andeq	r0, r0, r0
     594:	00000020 	andeq	r0, r0, r0, lsr #32
     598:	0000017c 	andeq	r0, r0, ip, ror r1
     59c:	00105d30 	andseq	r5, r0, r0, lsr sp
     5a0:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     5a4:	8b080e42 	blhi	203eb4 <__cs3_heap_start+0xea814>
     5a8:	42018e02 	andmi	r8, r1, #2, 28
     5ac:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     5b0:	0d0c0258 	sfmeq	f0, 4, [ip, #-352]	; 0xfffffea0
     5b4:	00000008 	andeq	r0, r0, r8
     5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5bc:	0000017c 	andeq	r0, r0, ip, ror r1
     5c0:	001061ec 	andseq	r6, r0, ip, ror #3
     5c4:	000000a8 	andeq	r0, r0, r8, lsr #1
     5c8:	8b080e42 	blhi	203ed8 <__cs3_heap_start+0xea838>
     5cc:	42018e02 	andmi	r8, r1, #2, 28
     5d0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5d4:	080d0c4e 	stmdaeq	sp, {r1, r2, r3, r6, sl, fp}
     5d8:	00000020 	andeq	r0, r0, r0, lsr #32
     5dc:	0000017c 	andeq	r0, r0, ip, ror r1
     5e0:	00106294 	mulseq	r0, r4, r2
     5e4:	000021cc 	andeq	r2, r0, ip, asr #3
     5e8:	8b080e42 	blhi	203ef8 <__cs3_heap_start+0xea858>
     5ec:	42018e02 	andmi	r8, r1, #2, 28
     5f0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     5f4:	0d0c10e0 	stceq	0, cr1, [ip, #-896]	; 0xfffffc80
     5f8:	00000008 	andeq	r0, r0, r8
     5fc:	00000020 	andeq	r0, r0, r0, lsr #32
     600:	0000017c 	andeq	r0, r0, ip, ror r1
     604:	00108460 	andseq	r8, r0, r0, ror #8
     608:	00001b40 	andeq	r1, r0, r0, asr #22
     60c:	8b080e42 	blhi	203f1c <__cs3_heap_start+0xea87c>
     610:	42018e02 	andmi	r8, r1, #2, 28
     614:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     618:	0d0c0d9a 	stceq	13, cr0, [ip, #-616]	; 0xfffffd98
     61c:	00000008 	andeq	r0, r0, r8
     620:	0000001c 	andeq	r0, r0, ip, lsl r0
     624:	0000017c 	andeq	r0, r0, ip, ror r1
     628:	00109fa0 	andseq	r9, r0, r0, lsr #31
     62c:	00000064 	andeq	r0, r0, r4, rrx
     630:	8b040e42 	blhi	103f40 <alt_clk_pll_cfg_set+0x2e4>
     634:	0b0d4201 	bleq	350e40 <__cs3_heap_start+0x2377a0>
     638:	420d0d6a 	andmi	r0, sp, #6784	; 0x1a80
     63c:	00000ecb 	andeq	r0, r0, fp, asr #29
     640:	0000001c 	andeq	r0, r0, ip, lsl r0
     644:	0000017c 	andeq	r0, r0, ip, ror r1
     648:	0010a004 	andseq	sl, r0, r4
     64c:	00000060 	andeq	r0, r0, r0, rrx
     650:	8b040e42 	blhi	103f60 <alt_clk_pll_cfg_set+0x304>
     654:	0b0d4201 	bleq	350e60 <__cs3_heap_start+0x2377c0>
     658:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     65c:	00000ecb 	andeq	r0, r0, fp, asr #29
     660:	00000020 	andeq	r0, r0, r0, lsr #32
     664:	0000017c 	andeq	r0, r0, ip, ror r1
     668:	0010a064 	andseq	sl, r0, r4, rrx
     66c:	00000394 	muleq	r0, r4, r3
     670:	8b040e42 	blhi	103f80 <alt_clk_pll_cfg_set+0x324>
     674:	0b0d4201 	bleq	350e80 <__cs3_heap_start+0x2377e0>
     678:	0d01c203 	sfmeq	f4, 1, [r1, #-12]
     67c:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
     680:	00000000 	andeq	r0, r0, r0
     684:	00000020 	andeq	r0, r0, r0, lsr #32
     688:	0000017c 	andeq	r0, r0, ip, ror r1
     68c:	0010a3f8 			; <UNDEFINED> instruction: 0x0010a3f8
     690:	000003d4 	ldrdeq	r0, [r0], -r4
     694:	8b080e42 	blhi	203fa4 <__cs3_heap_start+0xea904>
     698:	42018e02 	andmi	r8, r1, #2, 28
     69c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     6a0:	0d0c01e4 	stfeqs	f0, [ip, #-912]	; 0xfffffc70
     6a4:	00000008 	andeq	r0, r0, r8
     6a8:	00000020 	andeq	r0, r0, r0, lsr #32
     6ac:	0000017c 	andeq	r0, r0, ip, ror r1
     6b0:	0010a7cc 	andseq	sl, r0, ip, asr #15
     6b4:	00000380 	andeq	r0, r0, r0, lsl #7
     6b8:	8b080e42 	blhi	203fc8 <__cs3_heap_start+0xea928>
     6bc:	42018e02 	andmi	r8, r1, #2, 28
     6c0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     6c4:	0d0c01ba 	stfeqs	f0, [ip, #-744]	; 0xfffffd18
     6c8:	00000008 	andeq	r0, r0, r8
     6cc:	00000020 	andeq	r0, r0, r0, lsr #32
     6d0:	0000017c 	andeq	r0, r0, ip, ror r1
     6d4:	0010ab4c 	andseq	sl, r0, ip, asr #22
     6d8:	000002a4 	andeq	r0, r0, r4, lsr #5
     6dc:	8b080e42 	blhi	203fec <__cs3_heap_start+0xea94c>
     6e0:	42018e02 	andmi	r8, r1, #2, 28
     6e4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     6e8:	0d0c014c 	stfeqs	f0, [ip, #-304]	; 0xfffffed0
     6ec:	00000008 	andeq	r0, r0, r8
     6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6f4:	0000017c 	andeq	r0, r0, ip, ror r1
     6f8:	0010adf0 			; <UNDEFINED> instruction: 0x0010adf0
     6fc:	00000028 	andeq	r0, r0, r8, lsr #32
     700:	8b040e42 	blhi	104010 <alt_clk_pll_cfg_set+0x3b4>
     704:	0b0d4201 	bleq	350f10 <__cs3_heap_start+0x237870>
     708:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     70c:	00000ecb 	andeq	r0, r0, fp, asr #29
     710:	0000000c 	andeq	r0, r0, ip
     714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     718:	7c020001 	stcvc	0, cr0, [r2], {1}
     71c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     720:	00000030 	andeq	r0, r0, r0, lsr r0
     724:	00000710 	andeq	r0, r0, r0, lsl r7
     728:	0010ae18 	andseq	sl, r0, r8, lsl lr
     72c:	00000024 	andeq	r0, r0, r4, lsr #32
     730:	80100e42 	andshi	r0, r0, r2, asr #28
     734:	82038104 	andhi	r8, r3, #4, 2
     738:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     73c:	058b140e 	streq	r1, [fp, #1038]	; 0x40e
     740:	460b0d42 	strmi	r0, [fp], -r2, asr #26
     744:	cb420d0d 	blgt	1083b80 <__cs3_heap_start+0xf6a4e0>
     748:	c342100e 	movtgt	r1, #8206	; 0x200e
     74c:	0ec0c1c2 	acseqdm	f4, f2
     750:	00000000 	andeq	r0, r0, r0
     754:	0000001c 	andeq	r0, r0, ip, lsl r0
     758:	00000710 	andeq	r0, r0, r0, lsl r7
     75c:	0010ae3c 	andseq	sl, r0, ip, lsr lr
     760:	00000034 	andeq	r0, r0, r4, lsr r0
     764:	8b040e42 	blhi	104074 <alt_clk_pll_cfg_set+0x418>
     768:	0b0d4201 	bleq	350f74 <__cs3_heap_start+0x2378d4>
     76c:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     770:	00000ecb 	andeq	r0, r0, fp, asr #29
     774:	0000001c 	andeq	r0, r0, ip, lsl r0
     778:	00000710 	andeq	r0, r0, r0, lsl r7
     77c:	0010ae70 	andseq	sl, r0, r0, ror lr
     780:	00000028 	andeq	r0, r0, r8, lsr #32
     784:	8b040e42 	blhi	104094 <alt_clk_pll_cfg_set+0x438>
     788:	0b0d4201 	bleq	350f94 <__cs3_heap_start+0x2378f4>
     78c:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     790:	00000ecb 	andeq	r0, r0, fp, asr #29
     794:	0000001c 	andeq	r0, r0, ip, lsl r0
     798:	00000710 	andeq	r0, r0, r0, lsl r7
     79c:	0010ae98 	mulseq	r0, r8, lr
     7a0:	0000005c 	andeq	r0, r0, ip, asr r0
     7a4:	8b040e42 	blhi	1040b4 <alt_clk_pll_cfg_set+0x458>
     7a8:	0b0d4201 	bleq	350fb4 <__cs3_heap_start+0x237914>
     7ac:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
     7b0:	00000ecb 	andeq	r0, r0, fp, asr #29
     7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b8:	00000710 	andeq	r0, r0, r0, lsl r7
     7bc:	0010aef4 			; <UNDEFINED> instruction: 0x0010aef4
     7c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     7c4:	8b040e42 	blhi	1040d4 <alt_clk_pll_cfg_set+0x478>
     7c8:	0b0d4201 	bleq	350fd4 <__cs3_heap_start+0x237934>
     7cc:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     7d0:	00000ecb 	andeq	r0, r0, fp, asr #29
     7d4:	00000020 	andeq	r0, r0, r0, lsr #32
     7d8:	00000710 	andeq	r0, r0, r0, lsl r7
     7dc:	0010af20 	andseq	sl, r0, r0, lsr #30
     7e0:	00000228 	andeq	r0, r0, r8, lsr #4
     7e4:	8b080e42 	blhi	2040f4 <__cs3_heap_start+0xeaa54>
     7e8:	42018e02 	andmi	r8, r1, #2, 28
     7ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     7f0:	0d0c010e 	stfeqs	f0, [ip, #-56]	; 0xffffffc8
     7f4:	00000008 	andeq	r0, r0, r8
     7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7fc:	00000710 	andeq	r0, r0, r0, lsl r7
     800:	0010b148 	andseq	fp, r0, r8, asr #2
     804:	0000001c 	andeq	r0, r0, ip, lsl r0
     808:	8b040e42 	blhi	104118 <alt_clk_pll_cfg_set+0x4bc>
     80c:	0b0d4201 	bleq	351018 <__cs3_heap_start+0x237978>
     810:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     814:	00000ecb 	andeq	r0, r0, fp, asr #29
     818:	0000001c 	andeq	r0, r0, ip, lsl r0
     81c:	00000710 	andeq	r0, r0, r0, lsl r7
     820:	0010b164 	andseq	fp, r0, r4, ror #2
     824:	00000044 	andeq	r0, r0, r4, asr #32
     828:	8b040e42 	blhi	104138 <alt_clk_pll_cfg_set+0x4dc>
     82c:	0b0d4201 	bleq	351038 <__cs3_heap_start+0x237998>
     830:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     834:	00000ecb 	andeq	r0, r0, fp, asr #29
     838:	0000001c 	andeq	r0, r0, ip, lsl r0
     83c:	00000710 	andeq	r0, r0, r0, lsl r7
     840:	0010b1a8 	andseq	fp, r0, r8, lsr #3
     844:	00000044 	andeq	r0, r0, r4, asr #32
     848:	8b040e42 	blhi	104158 <alt_clk_pll_cfg_set+0x4fc>
     84c:	0b0d4201 	bleq	351058 <__cs3_heap_start+0x2379b8>
     850:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     854:	00000ecb 	andeq	r0, r0, fp, asr #29
     858:	0000001c 	andeq	r0, r0, ip, lsl r0
     85c:	00000710 	andeq	r0, r0, r0, lsl r7
     860:	0010b1ec 	andseq	fp, r0, ip, ror #3
     864:	00000044 	andeq	r0, r0, r4, asr #32
     868:	8b040e42 	blhi	104178 <alt_clk_pll_cfg_set+0x51c>
     86c:	0b0d4201 	bleq	351078 <__cs3_heap_start+0x2379d8>
     870:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     874:	00000ecb 	andeq	r0, r0, fp, asr #29
     878:	0000001c 	andeq	r0, r0, ip, lsl r0
     87c:	00000710 	andeq	r0, r0, r0, lsl r7
     880:	0010b230 	andseq	fp, r0, r0, lsr r2
     884:	00000044 	andeq	r0, r0, r4, asr #32
     888:	8b040e42 	blhi	104198 <alt_clk_pll_cfg_set+0x53c>
     88c:	0b0d4201 	bleq	351098 <__cs3_heap_start+0x2379f8>
     890:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     894:	00000ecb 	andeq	r0, r0, fp, asr #29
     898:	0000001c 	andeq	r0, r0, ip, lsl r0
     89c:	00000710 	andeq	r0, r0, r0, lsl r7
     8a0:	0010b274 	andseq	fp, r0, r4, ror r2
     8a4:	00000044 	andeq	r0, r0, r4, asr #32
     8a8:	8b040e42 	blhi	1041b8 <alt_clk_pll_vco_cfg_get>
     8ac:	0b0d4201 	bleq	3510b8 <__cs3_heap_start+0x237a18>
     8b0:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     8b4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	00000710 	andeq	r0, r0, r0, lsl r7
     8c0:	0010b2b8 			; <UNDEFINED> instruction: 0x0010b2b8
     8c4:	00000044 	andeq	r0, r0, r4, asr #32
     8c8:	8b040e42 	blhi	1041d8 <alt_clk_pll_vco_cfg_get+0x20>
     8cc:	0b0d4201 	bleq	3510d8 <__cs3_heap_start+0x237a38>
     8d0:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     8d4:	00000ecb 	andeq	r0, r0, fp, asr #29
     8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8dc:	00000710 	andeq	r0, r0, r0, lsl r7
     8e0:	0010b2fc 			; <UNDEFINED> instruction: 0x0010b2fc
     8e4:	000000c0 	andeq	r0, r0, r0, asr #1
     8e8:	8b040e42 	blhi	1041f8 <alt_clk_pll_vco_cfg_get+0x40>
     8ec:	0b0d4201 	bleq	3510f8 <__cs3_heap_start+0x237a58>
     8f0:	0d0d5802 	stceq	8, cr5, [sp, #-8]
     8f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     8f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8fc:	00000710 	andeq	r0, r0, r0, lsl r7
     900:	0010b3bc 			; <UNDEFINED> instruction: 0x0010b3bc
     904:	000000bc 	strheq	r0, [r0], -ip
     908:	8b040e42 	blhi	104218 <alt_clk_pll_vco_cfg_get+0x60>
     90c:	0b0d4201 	bleq	351118 <__cs3_heap_start+0x237a78>
     910:	0d0d5602 	stceq	6, cr5, [sp, #-8]
     914:	000ecb42 	andeq	ip, lr, r2, asr #22
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000710 	andeq	r0, r0, r0, lsl r7
     920:	0010b478 	andseq	fp, r0, r8, ror r4
     924:	000000b4 	strheq	r0, [r0], -r4
     928:	8b040e42 	blhi	104238 <alt_clk_pll_vco_cfg_get+0x80>
     92c:	0b0d4201 	bleq	351138 <__cs3_heap_start+0x237a98>
     930:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     934:	000ecb42 	andeq	ip, lr, r2, asr #22
     938:	0000001c 	andeq	r0, r0, ip, lsl r0
     93c:	00000710 	andeq	r0, r0, r0, lsl r7
     940:	0010b52c 	andseq	fp, r0, ip, lsr #10
     944:	00000098 	muleq	r0, r8, r0
     948:	8b040e42 	blhi	104258 <alt_clk_pll_vco_cfg_get+0xa0>
     94c:	0b0d4201 	bleq	351158 <__cs3_heap_start+0x237ab8>
     950:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     954:	000ecb42 	andeq	ip, lr, r2, asr #22
     958:	0000001c 	andeq	r0, r0, ip, lsl r0
     95c:	00000710 	andeq	r0, r0, r0, lsl r7
     960:	0010b5c4 	andseq	fp, r0, r4, asr #11
     964:	00000098 	muleq	r0, r8, r0
     968:	8b040e42 	blhi	104278 <alt_clk_pll_vco_cfg_get+0xc0>
     96c:	0b0d4201 	bleq	351178 <__cs3_heap_start+0x237ad8>
     970:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     974:	000ecb42 	andeq	ip, lr, r2, asr #22
     978:	0000001c 	andeq	r0, r0, ip, lsl r0
     97c:	00000710 	andeq	r0, r0, r0, lsl r7
     980:	0010b65c 	andseq	fp, r0, ip, asr r6
     984:	000000b4 	strheq	r0, [r0], -r4
     988:	8b040e42 	blhi	104298 <alt_clk_pll_vco_cfg_get+0xe0>
     98c:	0b0d4201 	bleq	351198 <__cs3_heap_start+0x237af8>
     990:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     994:	000ecb42 	andeq	ip, lr, r2, asr #22
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	00000710 	andeq	r0, r0, r0, lsl r7
     9a0:	0010b710 	andseq	fp, r0, r0, lsl r7
     9a4:	000000ac 	andeq	r0, r0, ip, lsr #1
     9a8:	8b040e42 	blhi	1042b8 <alt_clk_pll_vco_cfg_get+0x100>
     9ac:	0b0d4201 	bleq	3511b8 <__cs3_heap_start+0x237b18>
     9b0:	0d0d4e02 	stceq	14, cr4, [sp, #-8]
     9b4:	000ecb42 	andeq	ip, lr, r2, asr #22
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	00000710 	andeq	r0, r0, r0, lsl r7
     9c0:	0010b7bc 			; <UNDEFINED> instruction: 0x0010b7bc
     9c4:	000000ac 	andeq	r0, r0, ip, lsr #1
     9c8:	8b040e42 	blhi	1042d8 <alt_clk_pll_vco_cfg_get+0x120>
     9cc:	0b0d4201 	bleq	3511d8 <__cs3_heap_start+0x237b38>
     9d0:	0d0d4e02 	stceq	14, cr4, [sp, #-8]
     9d4:	000ecb42 	andeq	ip, lr, r2, asr #22
     9d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9dc:	00000710 	andeq	r0, r0, r0, lsl r7
     9e0:	0010b868 	andseq	fp, r0, r8, ror #16
     9e4:	000000b4 	strheq	r0, [r0], -r4
     9e8:	8b040e42 	blhi	1042f8 <alt_clk_pll_vco_cfg_get+0x140>
     9ec:	0b0d4201 	bleq	3511f8 <__cs3_heap_start+0x237b58>
     9f0:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     9f4:	000ecb42 	andeq	ip, lr, r2, asr #22
     9f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9fc:	00000710 	andeq	r0, r0, r0, lsl r7
     a00:	0010b91c 	andseq	fp, r0, ip, lsl r9
     a04:	000000b4 	strheq	r0, [r0], -r4
     a08:	8b040e42 	blhi	104318 <alt_clk_pll_vco_chg_methods_get+0x4>
     a0c:	0b0d4201 	bleq	351218 <__cs3_heap_start+0x237b78>
     a10:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     a14:	000ecb42 	andeq	ip, lr, r2, asr #22
     a18:	0000001c 	andeq	r0, r0, ip, lsl r0
     a1c:	00000710 	andeq	r0, r0, r0, lsl r7
     a20:	0010b9d0 			; <UNDEFINED> instruction: 0x0010b9d0
     a24:	00000090 	muleq	r0, r0, r0
     a28:	8b040e42 	blhi	104338 <alt_clk_pll_vco_chg_methods_get+0x24>
     a2c:	0b0d4201 	bleq	351238 <__cs3_heap_start+0x237b98>
     a30:	0d0d4002 	stceq	0, cr4, [sp, #-8]
     a34:	000ecb42 	andeq	ip, lr, r2, asr #22
     a38:	0000001c 	andeq	r0, r0, ip, lsl r0
     a3c:	00000710 	andeq	r0, r0, r0, lsl r7
     a40:	0010ba60 	andseq	fp, r0, r0, ror #20
     a44:	00000090 	muleq	r0, r0, r0
     a48:	8b040e42 	blhi	104358 <alt_clk_pll_vco_chg_methods_get+0x44>
     a4c:	0b0d4201 	bleq	351258 <__cs3_heap_start+0x237bb8>
     a50:	0d0d4002 	stceq	0, cr4, [sp, #-8]
     a54:	000ecb42 	andeq	ip, lr, r2, asr #22
     a58:	0000001c 	andeq	r0, r0, ip, lsl r0
     a5c:	00000710 	andeq	r0, r0, r0, lsl r7
     a60:	0010baf0 			; <UNDEFINED> instruction: 0x0010baf0
     a64:	00000090 	muleq	r0, r0, r0
     a68:	8b040e42 	blhi	104378 <alt_clk_pll_vco_chg_methods_get+0x64>
     a6c:	0b0d4201 	bleq	351278 <__cs3_heap_start+0x237bd8>
     a70:	0d0d4002 	stceq	0, cr4, [sp, #-8]
     a74:	000ecb42 	andeq	ip, lr, r2, asr #22
     a78:	0000001c 	andeq	r0, r0, ip, lsl r0
     a7c:	00000710 	andeq	r0, r0, r0, lsl r7
     a80:	0010bb80 	andseq	fp, r0, r0, lsl #23
     a84:	000000e0 	andeq	r0, r0, r0, ror #1
     a88:	8b080e42 	blhi	204398 <__cs3_heap_start+0xeacf8>
     a8c:	42018e02 	andmi	r8, r1, #2, 28
     a90:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     a94:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
     a98:	0000001c 	andeq	r0, r0, ip, lsl r0
     a9c:	00000710 	andeq	r0, r0, r0, lsl r7
     aa0:	0010bc60 	andseq	fp, r0, r0, ror #24
     aa4:	00000100 	andeq	r0, r0, r0, lsl #2
     aa8:	8b040e42 	blhi	1043b8 <alt_clk_pll_vco_chg_methods_get+0xa4>
     aac:	0b0d4201 	bleq	3512b8 <__cs3_heap_start+0x237c18>
     ab0:	0d0d7802 	stceq	8, cr7, [sp, #-8]
     ab4:	000ecb42 	andeq	ip, lr, r2, asr #22
     ab8:	00000020 	andeq	r0, r0, r0, lsr #32
     abc:	00000710 	andeq	r0, r0, r0, lsl r7
     ac0:	0010bd60 	andseq	fp, r0, r0, ror #26
     ac4:	00000278 	andeq	r0, r0, r8, ror r2
     ac8:	8b040e42 	blhi	1043d8 <alt_clk_pll_vco_chg_methods_get+0xc4>
     acc:	0b0d4201 	bleq	3512d8 <__cs3_heap_start+0x237c38>
     ad0:	0d013403 	cfstrseq	mvf3, [r1, #-12]
     ad4:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae0:	00000710 	andeq	r0, r0, r0, lsl r7
     ae4:	0010bfd8 			; <UNDEFINED> instruction: 0x0010bfd8
     ae8:	00000124 	andeq	r0, r0, r4, lsr #2
     aec:	8b040e42 	blhi	1043fc <alt_clk_pll_vco_chg_methods_get+0xe8>
     af0:	0b0d4201 	bleq	3512fc <__cs3_heap_start+0x237c5c>
     af4:	0d0d8a02 	vstreq	s16, [sp, #-8]
     af8:	000ecb42 	andeq	ip, lr, r2, asr #22
     afc:	0000001c 	andeq	r0, r0, ip, lsl r0
     b00:	00000710 	andeq	r0, r0, r0, lsl r7
     b04:	0010c0fc 	ldrsheq	ip, [r0], -ip	; <UNPREDICTABLE>
     b08:	000000b8 	strheq	r0, [r0], -r8
     b0c:	8b080e42 	blhi	20441c <__cs3_heap_start+0xead7c>
     b10:	42018e02 	andmi	r8, r1, #2, 28
     b14:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     b18:	080d0c56 	stmdaeq	sp, {r1, r2, r4, r6, sl, fp}
     b1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b20:	00000710 	andeq	r0, r0, r0, lsl r7
     b24:	0010c1b4 			; <UNDEFINED> instruction: 0x0010c1b4
     b28:	0000001c 	andeq	r0, r0, ip, lsl r0
     b2c:	8b040e42 	blhi	10443c <alt_clk_pll_vco_chg_methods_get+0x128>
     b30:	0b0d4201 	bleq	35133c <__cs3_heap_start+0x237c9c>
     b34:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     b38:	00000ecb 	andeq	r0, r0, fp, asr #29
     b3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b40:	00000710 	andeq	r0, r0, r0, lsl r7
     b44:	0010c1d0 			; <UNDEFINED> instruction: 0x0010c1d0
     b48:	00000048 	andeq	r0, r0, r8, asr #32
     b4c:	8b040e42 	blhi	10445c <alt_clk_pll_vco_chg_methods_get+0x148>
     b50:	0b0d4201 	bleq	35135c <__cs3_heap_start+0x237cbc>
     b54:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     b58:	00000ecb 	andeq	r0, r0, fp, asr #29
     b5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b60:	00000710 	andeq	r0, r0, r0, lsl r7
     b64:	0010c218 	andseq	ip, r0, r8, lsl r2
     b68:	00000048 	andeq	r0, r0, r8, asr #32
     b6c:	8b040e42 	blhi	10447c <alt_clk_pll_vco_chg_methods_get+0x168>
     b70:	0b0d4201 	bleq	35137c <__cs3_heap_start+0x237cdc>
     b74:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     b78:	00000ecb 	andeq	r0, r0, fp, asr #29
     b7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b80:	00000710 	andeq	r0, r0, r0, lsl r7
     b84:	0010c260 	andseq	ip, r0, r0, ror #4
     b88:	00000044 	andeq	r0, r0, r4, asr #32
     b8c:	8b040e42 	blhi	10449c <alt_clk_pll_vco_chg_methods_get+0x188>
     b90:	0b0d4201 	bleq	35139c <__cs3_heap_start+0x237cfc>
     b94:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     b98:	00000ecb 	andeq	r0, r0, fp, asr #29
     b9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ba0:	00000710 	andeq	r0, r0, r0, lsl r7
     ba4:	0010c2a4 	andseq	ip, r0, r4, lsr #5
     ba8:	00000044 	andeq	r0, r0, r4, asr #32
     bac:	8b040e42 	blhi	1044bc <alt_clk_pll_vco_chg_methods_get+0x1a8>
     bb0:	0b0d4201 	bleq	3513bc <__cs3_heap_start+0x237d1c>
     bb4:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     bb8:	00000ecb 	andeq	r0, r0, fp, asr #29
     bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc0:	00000710 	andeq	r0, r0, r0, lsl r7
     bc4:	0010c2e8 	andseq	ip, r0, r8, ror #5
     bc8:	00000044 	andeq	r0, r0, r4, asr #32
     bcc:	8b040e42 	blhi	1044dc <alt_clk_pll_vco_chg_methods_get+0x1c8>
     bd0:	0b0d4201 	bleq	3513dc <__cs3_heap_start+0x237d3c>
     bd4:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     bd8:	00000ecb 	andeq	r0, r0, fp, asr #29
     bdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     be0:	00000710 	andeq	r0, r0, r0, lsl r7
     be4:	0010c32c 	andseq	ip, r0, ip, lsr #6
     be8:	00000044 	andeq	r0, r0, r4, asr #32
     bec:	8b040e42 	blhi	1044fc <alt_clk_pll_vco_chg_methods_get+0x1e8>
     bf0:	0b0d4201 	bleq	3513fc <__cs3_heap_start+0x237d5c>
     bf4:	420d0d5a 	andmi	r0, sp, #5760	; 0x1680
     bf8:	00000ecb 	andeq	r0, r0, fp, asr #29
     bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     c00:	00000710 	andeq	r0, r0, r0, lsl r7
     c04:	0010c370 	andseq	ip, r0, r0, ror r3
     c08:	000000c4 	andeq	r0, r0, r4, asr #1
     c0c:	8b040e42 	blhi	10451c <alt_clk_pll_vco_chg_methods_get+0x208>
     c10:	0b0d4201 	bleq	35141c <__cs3_heap_start+0x237d7c>
     c14:	0d0d5a02 	vstreq	s10, [sp, #-8]
     c18:	000ecb42 	andeq	ip, lr, r2, asr #22
     c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c20:	00000710 	andeq	r0, r0, r0, lsl r7
     c24:	0010c434 	andseq	ip, r0, r4, lsr r4
     c28:	000000dc 	ldrdeq	r0, [r0], -ip
     c2c:	8b040e42 	blhi	10453c <alt_clk_pll_vco_chg_methods_get+0x228>
     c30:	0b0d4201 	bleq	35143c <__cs3_heap_start+0x237d9c>
     c34:	0d0d6602 	stceq	6, cr6, [sp, #-8]
     c38:	000ecb42 	andeq	ip, lr, r2, asr #22
     c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c40:	00000710 	andeq	r0, r0, r0, lsl r7
     c44:	0010c510 	andseq	ip, r0, r0, lsl r5
     c48:	00000038 	andeq	r0, r0, r8, lsr r0
     c4c:	8b040e42 	blhi	10455c <alt_clk_pll_vco_chg_methods_get+0x248>
     c50:	0b0d4201 	bleq	35145c <__cs3_heap_start+0x237dbc>
     c54:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
     c58:	00000ecb 	andeq	r0, r0, fp, asr #29
     c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c60:	00000710 	andeq	r0, r0, r0, lsl r7
     c64:	0010c548 	andseq	ip, r0, r8, asr #10
     c68:	00000054 	andeq	r0, r0, r4, asr r0
     c6c:	8b040e42 	blhi	10457c <alt_clk_pll_vco_chg_methods_get+0x268>
     c70:	0b0d4201 	bleq	35147c <__cs3_heap_start+0x237ddc>
     c74:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
     c78:	00000ecb 	andeq	r0, r0, fp, asr #29
     c7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c80:	00000710 	andeq	r0, r0, r0, lsl r7
     c84:	0010c59c 	mulseq	r0, ip, r5
     c88:	00000038 	andeq	r0, r0, r8, lsr r0
     c8c:	8b040e42 	blhi	10459c <alt_clk_pll_vco_chg_methods_get+0x288>
     c90:	0b0d4201 	bleq	35149c <__cs3_heap_start+0x237dfc>
     c94:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
     c98:	00000ecb 	andeq	r0, r0, fp, asr #29
     c9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ca0:	00000710 	andeq	r0, r0, r0, lsl r7
     ca4:	0010c5d4 			; <UNDEFINED> instruction: 0x0010c5d4
     ca8:	00000054 	andeq	r0, r0, r4, asr r0
     cac:	8b040e42 	blhi	1045bc <alt_clk_pll_vco_chg_methods_get+0x2a8>
     cb0:	0b0d4201 	bleq	3514bc <__cs3_heap_start+0x237e1c>
     cb4:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
     cb8:	00000ecb 	andeq	r0, r0, fp, asr #29
     cbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cc0:	00000710 	andeq	r0, r0, r0, lsl r7
     cc4:	0010c628 	andseq	ip, r0, r8, lsr #12
     cc8:	00000038 	andeq	r0, r0, r8, lsr r0
     ccc:	8b040e42 	blhi	1045dc <alt_clk_pll_vco_chg_methods_get+0x2c8>
     cd0:	0b0d4201 	bleq	3514dc <__cs3_heap_start+0x237e3c>
     cd4:	420d0d54 	andmi	r0, sp, #84, 26	; 0x1500
     cd8:	00000ecb 	andeq	r0, r0, fp, asr #29
     cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce0:	00000710 	andeq	r0, r0, r0, lsl r7
     ce4:	0010c660 	andseq	ip, r0, r0, ror #12
     ce8:	00000054 	andeq	r0, r0, r4, asr r0
     cec:	8b040e42 	blhi	1045fc <alt_clk_pll_vco_chg_methods_get+0x2e8>
     cf0:	0b0d4201 	bleq	3514fc <__cs3_heap_start+0x237e5c>
     cf4:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
     cf8:	00000ecb 	andeq	r0, r0, fp, asr #29
     cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     d00:	00000710 	andeq	r0, r0, r0, lsl r7
     d04:	0010c6b4 			; <UNDEFINED> instruction: 0x0010c6b4
     d08:	00000060 	andeq	r0, r0, r0, rrx
     d0c:	8b040e42 	blhi	10461c <alt_clk_pll_vco_chg_methods_get+0x308>
     d10:	0b0d4201 	bleq	35151c <__cs3_heap_start+0x237e7c>
     d14:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     d18:	00000ecb 	andeq	r0, r0, fp, asr #29
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d20:	00000710 	andeq	r0, r0, r0, lsl r7
     d24:	0010c714 	andseq	ip, r0, r4, lsl r7
     d28:	00000058 	andeq	r0, r0, r8, asr r0
     d2c:	8b040e42 	blhi	10463c <alt_clk_pll_vco_chg_methods_get+0x328>
     d30:	0b0d4201 	bleq	35153c <__cs3_heap_start+0x237e9c>
     d34:	420d0d64 	andmi	r0, sp, #100, 26	; 0x1900
     d38:	00000ecb 	andeq	r0, r0, fp, asr #29
     d3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d40:	00000710 	andeq	r0, r0, r0, lsl r7
     d44:	0010c76c 	andseq	ip, r0, ip, ror #14
     d48:	00000024 	andeq	r0, r0, r4, lsr #32
     d4c:	8b040e42 	blhi	10465c <alt_clk_pll_vco_chg_methods_get+0x348>
     d50:	0b0d4201 	bleq	35155c <__cs3_heap_start+0x237ebc>
     d54:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
     d58:	00000ecb 	andeq	r0, r0, fp, asr #29
     d5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d60:	00000710 	andeq	r0, r0, r0, lsl r7
     d64:	0010c790 	mulseq	r0, r0, r7
     d68:	00000024 	andeq	r0, r0, r4, lsr #32
     d6c:	8b040e42 	blhi	10467c <alt_clk_pll_vco_chg_methods_get+0x368>
     d70:	0b0d4201 	bleq	35157c <__cs3_heap_start+0x237edc>
     d74:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
     d78:	00000ecb 	andeq	r0, r0, fp, asr #29
     d7c:	00000018 	andeq	r0, r0, r8, lsl r0
     d80:	00000710 	andeq	r0, r0, r0, lsl r7
     d84:	0010c7b4 			; <UNDEFINED> instruction: 0x0010c7b4
     d88:	00000020 	andeq	r0, r0, r0, lsr #32
     d8c:	8b080e42 	blhi	20469c <__cs3_heap_start+0xeaffc>
     d90:	42018e02 	andmi	r8, r1, #2, 28
     d94:	00040b0c 	andeq	r0, r4, ip, lsl #22
     d98:	00000028 	andeq	r0, r0, r8, lsr #32
     d9c:	00000710 	andeq	r0, r0, r0, lsl r7
     da0:	0010c7d4 			; <UNDEFINED> instruction: 0x0010c7d4
     da4:	000000c8 	andeq	r0, r0, r8, asr #1
     da8:	80200e44 	eorhi	r0, r0, r4, asr #28
     dac:	82078108 	andhi	r8, r7, #8, 2
     db0:	84058306 	strhi	r8, [r5], #-774	; 0xfffffcfa
     db4:	8c038b04 	stchi	11, cr8, [r3], {4}
     db8:	42018e02 	andmi	r8, r1, #2, 28
     dbc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     dc0:	200d0c5c 	andcs	r0, sp, ip, asr ip
     dc4:	0000000c 	andeq	r0, r0, ip
     dc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dcc:	7c010001 	stcvc	0, cr0, [r1], {1}
     dd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dd4:	0000000c 	andeq	r0, r0, ip
     dd8:	00000dc4 	andeq	r0, r0, r4, asr #27
     ddc:	0010c89c 	mulseq	r0, ip, r8
     de0:	000001ec 	andeq	r0, r0, ip, ror #3
     de4:	0000000c 	andeq	r0, r0, ip
     de8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dec:	7c020001 	stcvc	0, cr0, [r2], {1}
     df0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     df4:	00000018 	andeq	r0, r0, r8, lsl r0
     df8:	00000de4 	andeq	r0, r0, r4, ror #27
     dfc:	0010caac 	andseq	ip, r0, ip, lsr #21
     e00:	0000003c 	andeq	r0, r0, ip, lsr r0
     e04:	8e100e54 	mrchi	14, 0, r0, cr0, cr4, {2}
     e08:	0ece4803 	cdpeq	8, 12, cr4, cr14, cr3, {0}
     e0c:	00000010 	andeq	r0, r0, r0, lsl r0
     e10:	0000000c 	andeq	r0, r0, ip
     e14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e18:	7c020001 	stcvc	0, cr0, [r2], {1}
     e1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e20:	00000018 	andeq	r0, r0, r8, lsl r0
     e24:	00000e10 	andeq	r0, r0, r0, lsl lr
     e28:	0010cae8 	andseq	ip, r0, r8, ror #21
     e2c:	00000118 	andeq	r0, r0, r8, lsl r1
     e30:	840c0e44 	strhi	r0, [ip], #-3652	; 0xfffff1bc
     e34:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     e38:	00000001 	andeq	r0, r0, r1
     e3c:	0000000c 	andeq	r0, r0, ip
     e40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e44:	7c020001 	stcvc	0, cr0, [r2], {1}
     e48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e4c:	0000000c 	andeq	r0, r0, ip
     e50:	00000e3c 	andeq	r0, r0, ip, lsr lr
     e54:	0010cc00 	andseq	ip, r0, r0, lsl #24
     e58:	00000014 	andeq	r0, r0, r4, lsl r0
     e5c:	0000000c 	andeq	r0, r0, ip
     e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e64:	7c020001 	stcvc	0, cr0, [r2], {1}
     e68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e6c:	00000014 	andeq	r0, r0, r4, lsl r0
     e70:	00000e5c 	andeq	r0, r0, ip, asr lr
     e74:	0010cc14 	andseq	ip, r0, r4, lsl ip
     e78:	00000034 	andeq	r0, r0, r4, lsr r0
     e7c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     e80:	00018e02 	andeq	r8, r1, r2, lsl #28
     e84:	0000000c 	andeq	r0, r0, ip
     e88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e94:	0000002c 	andeq	r0, r0, ip, lsr #32
     e98:	00000e84 	andeq	r0, r0, r4, lsl #29
     e9c:	0010cc48 	andseq	ip, r0, r8, asr #24
     ea0:	00000034 	andeq	r0, r0, r4, lsr r0
     ea4:	810c0e42 	tsthi	ip, r2, asr #28
     ea8:	83028203 	movwhi	r8, #8707	; 0x2203
     eac:	100e4201 	andne	r4, lr, r1, lsl #4
     eb0:	0e42048e 	cdpeq	4, 4, cr0, cr2, cr14, {4}
     eb4:	100e4e18 	andne	r4, lr, r8, lsl lr
     eb8:	0c0ece42 	stceq	14, cr12, [lr], {66}	; 0x42
     ebc:	c1c2c342 	bicgt	ip, r2, r2, asr #6
     ec0:	0000000e 	andeq	r0, r0, lr
     ec4:	00000030 	andeq	r0, r0, r0, lsr r0
     ec8:	00000e84 	andeq	r0, r0, r4, lsl #29
     ecc:	0010cc7c 	andseq	ip, r0, ip, ror ip
     ed0:	00000038 	andeq	r0, r0, r8, lsr r0
     ed4:	80100e42 	andshi	r0, r0, r2, asr #28
     ed8:	82038104 	andhi	r8, r3, #4, 2
     edc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     ee0:	058e140e 	streq	r1, [lr, #1038]	; 0x40e
     ee4:	50200e42 	eorpl	r0, r0, r2, asr #28
     ee8:	ce42140e 	cdpgt	4, 4, cr1, cr2, cr14, {0}
     eec:	c342100e 	movtgt	r1, #8206	; 0x200e
     ef0:	0ec0c1c2 	acseqdm	f4, f2
     ef4:	00000000 	andeq	r0, r0, r0
     ef8:	0000000c 	andeq	r0, r0, ip
     efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f00:	7c020001 	stcvc	0, cr0, [r2], {1}
     f04:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f08:	00000028 	andeq	r0, r0, r8, lsr #32
     f0c:	00000ef8 	strdeq	r0, [r0], -r8
     f10:	0010ccb4 			; <UNDEFINED> instruction: 0x0010ccb4
     f14:	00000108 	andeq	r0, r0, r8, lsl #2
     f18:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     f1c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f20:	300e4401 	andcc	r4, lr, r1, lsl #8
     f24:	0e0a6202 	cdpeq	2, 0, cr6, cr10, cr2, {0}
     f28:	480b420c 	stmdami	fp, {r2, r3, r9, lr}
     f2c:	420c0e0a 	andmi	r0, ip, #10, 28	; 0xa0
     f30:	0000000b 	andeq	r0, r0, fp
     f34:	00000018 	andeq	r0, r0, r8, lsl r0
     f38:	00000ef8 	strdeq	r0, [r0], -r8
     f3c:	0010cdbc 			; <UNDEFINED> instruction: 0x0010cdbc
     f40:	00000018 	andeq	r0, r0, r8, lsl r0
     f44:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     f48:	48018e02 	stmdami	r1, {r1, r9, sl, fp, pc}
     f4c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f58:	7c020001 	stcvc	0, cr0, [r2], {1}
     f5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f60:	00000014 	andeq	r0, r0, r4, lsl r0
     f64:	00000f50 	andeq	r0, r0, r0, asr pc
     f68:	0010cdd4 			; <UNDEFINED> instruction: 0x0010cdd4
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     f74:	00018e02 	andeq	r8, r1, r2, lsl #28
     f78:	00000014 	andeq	r0, r0, r4, lsl r0
     f7c:	00000f50 	andeq	r0, r0, r0, asr pc
     f80:	0010cdf0 			; <UNDEFINED> instruction: 0x0010cdf0
     f84:	00000044 	andeq	r0, r0, r4, asr #32
     f88:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     f8c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f90:	0000000c 	andeq	r0, r0, ip
     f94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f98:	7c020001 	stcvc	0, cr0, [r2], {1}
     f9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa4:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     fa8:	0010cf1c 	andseq	ip, r0, ip, lsl pc
     fac:	00000040 	andeq	r0, r0, r0, asr #32
     fb0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     fb4:	42018e02 	andmi	r8, r1, #2, 28
     fb8:	0a56100e 	beq	1584ff8 <__cs3_heap_start+0x146b958>
     fbc:	0b42080e 	bleq	1082ffc <__cs3_heap_start+0xf6995c>
     fc0:	0000000c 	andeq	r0, r0, ip
     fc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fc8:	7c020001 	stcvc	0, cr0, [r2], {1}
     fcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fd0:	0000006c 	andeq	r0, r0, ip, rrx
     fd4:	00000fc0 	andeq	r0, r0, r0, asr #31
     fd8:	0010cf60 	andseq	ip, r0, r0, ror #30
     fdc:	00002348 	andeq	r2, r0, r8, asr #6
     fe0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     fe4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     fe8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     fec:	8a048905 	bhi	123408 <__cs3_heap_start+0x9d68>
     ff0:	8e028b03 	vmlahi.f64	d8, d2, d3
     ff4:	340e4401 	strcc	r4, [lr], #-1025	; 0xfffffbff
     ff8:	050d5005 	streq	r5, [sp, #-5]
     ffc:	52050c51 	andpl	r0, r5, #20736	; 0x5100
    1000:	0a53050b 	beq	14c2434 <__cs3_heap_start+0x13a8d94>
    1004:	02c00e42 	sbceq	r0, r0, #1056	; 0x420
    1008:	0a019803 	beq	6701c <__cs3_region_init_size_ram+0x4f3c4>
    100c:	0642340e 	strbeq	r3, [r2], -lr, lsl #8
    1010:	06510650 			; <UNDEFINED> instruction: 0x06510650
    1014:	0e530652 	mrceq	6, 2, r0, cr3, cr2, {2}
    1018:	720b4224 	andvc	r4, fp, #36, 4	; 0x40000002
    101c:	42340e0a 	eorsmi	r0, r4, #10, 28	; 0xa0
    1020:	53065206 	movwpl	r5, #25094	; 0x6206
    1024:	51065006 	tstpl	r6, r6
    1028:	0b42240e 	bleq	108a068 <__cs3_heap_start+0xf709c8>
    102c:	340e0a66 	strcc	r0, [lr], #-2662	; 0xfffff59a
    1030:	06500642 	ldrbeq	r0, [r0], -r2, asr #12
    1034:	06520651 			; <UNDEFINED> instruction: 0x06520651
    1038:	42240e53 	eormi	r0, r4, #1328	; 0x530
    103c:	0000000b 	andeq	r0, r0, fp
    1040:	00000020 	andeq	r0, r0, r0, lsr #32
    1044:	00000fc0 	andeq	r0, r0, r0, asr #31
    1048:	0010f2a8 	andseq	pc, r0, r8, lsr #5
    104c:	00000028 	andeq	r0, r0, r8, lsr #32
    1050:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1054:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1058:	50018e02 	andpl	r8, r1, r2, lsl #28
    105c:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    1060:	0000000e 	andeq	r0, r0, lr
    1064:	00000028 	andeq	r0, r0, r8, lsr #32
    1068:	00000fc0 	andeq	r0, r0, r0, asr #31
    106c:	0010f2d0 			; <UNDEFINED> instruction: 0x0010f2d0
    1070:	000000cc 	andeq	r0, r0, ip, asr #1
    1074:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1078:	86058506 	strhi	r8, [r5], -r6, lsl #10
    107c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1080:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    1084:	4408f80e 	strmi	pc, [r8], #-2062	; 0xfffff7f2
    1088:	0209800e 	andeq	r8, r9, #14
    108c:	00180e50 	andseq	r0, r8, r0, asr lr
    1090:	0000000c 	andeq	r0, r0, ip
    1094:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1098:	7c020001 	stcvc	0, cr0, [r2], {1}
    109c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10a0:	00000018 	andeq	r0, r0, r8, lsl r0
    10a4:	00001090 	muleq	r0, r0, r0
    10a8:	0010f39c 	mulseq	r0, ip, r3
    10ac:	00000150 	andeq	r0, r0, r0, asr r1
    10b0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    10b4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10b8:	00018e02 	andeq	r8, r1, r2, lsl #28
    10bc:	0000000c 	andeq	r0, r0, ip
    10c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d0:	000010bc 	strheq	r1, [r0], -ip
    10d4:	0010f4ec 	andseq	pc, r0, ip, ror #9
    10d8:	00000108 	andeq	r0, r0, r8, lsl #2
    10dc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    10e0:	86058506 	strhi	r8, [r5], -r6, lsl #10
    10e4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    10e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    10ec:	0000000c 	andeq	r0, r0, ip
    10f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10fc:	0000000c 	andeq	r0, r0, ip
    1100:	000010ec 	andeq	r1, r0, ip, ror #1
    1104:	0010f764 	andseq	pc, r0, r4, ror #14
    1108:	0000000c 	andeq	r0, r0, ip
    110c:	0000000c 	andeq	r0, r0, ip
    1110:	000010ec 	andeq	r1, r0, ip, ror #1
    1114:	0010f770 	andseq	pc, r0, r0, ror r7	; <UNPREDICTABLE>
    1118:	0000001c 	andeq	r0, r0, ip, lsl r0
    111c:	00000038 	andeq	r0, r0, r8, lsr r0
    1120:	000010ec 	andeq	r1, r0, ip, ror #1
    1124:	0010f5f4 			; <UNDEFINED> instruction: 0x0010f5f4
    1128:	00000170 	andeq	r0, r0, r0, ror r1
    112c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1130:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1134:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1138:	8a048905 	bhi	123554 <__cs3_heap_start+0x9eb4>
    113c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1140:	380e4201 	stmdacc	lr, {r0, r9, lr}
    1144:	0e0aa002 	cdpeq	0, 0, cr10, cr10, cr2, {0}
    1148:	cbce4224 	blgt	ff3919e0 <__cs3_heap_end+0xbf3919e0>
    114c:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
    1150:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1154:	000b4200 	andeq	r4, fp, r0, lsl #4
    1158:	0000000c 	andeq	r0, r0, ip
    115c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1160:	7c020001 	stcvc	0, cr0, [r2], {1}
    1164:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1168:	00000028 	andeq	r0, r0, r8, lsr #32
    116c:	00001158 	andeq	r1, r0, r8, asr r1
    1170:	0010f790 	mulseq	r0, r0, r7
    1174:	000001c4 	andeq	r0, r0, r4, asr #3
    1178:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    117c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1180:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1184:	8a048905 	bhi	1235a0 <__cs3_heap_start+0x9f00>
    1188:	8e028b03 	vmlahi.f64	d8, d2, d3
    118c:	300e4201 	andcc	r4, lr, r1, lsl #4
    1190:	240edc02 	strcs	sp, [lr], #-3074	; 0xfffff3fe
    1194:	00000058 	andeq	r0, r0, r8, asr r0
    1198:	00001158 	andeq	r1, r0, r8, asr r1
    119c:	0010f954 	andseq	pc, r0, r4, asr r9	; <UNPREDICTABLE>
    11a0:	0000127c 	andeq	r1, r0, ip, ror r2
    11a4:	84240e44 	strthi	r0, [r4], #-3652	; 0xfffff1bc
    11a8:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11ac:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    11b0:	8a048905 	bhi	1235cc <__cs3_heap_start+0x9f2c>
    11b4:	8e028b03 	vmlahi.f64	d8, d2, d3
    11b8:	2c0e4401 	cfstrscs	mvf4, [lr], {1}
    11bc:	050b5005 	streq	r5, [fp, #-5]
    11c0:	0e420a51 	mcreq	10, 2, r0, cr2, cr1, {2}
    11c4:	0a580268 	beq	1601b6c <__cs3_heap_start+0x14e84cc>
    11c8:	06422c0e 	strbeq	r2, [r2], -lr, lsl #24
    11cc:	0e510650 	mrceq	6, 2, r0, cr1, cr0, {2}
    11d0:	640b4224 	strvs	r4, [fp], #-548	; 0xfffffddc
    11d4:	422c0e0a 	eormi	r0, ip, #10, 28	; 0xa0
    11d8:	51065006 	tstpl	r6, r6
    11dc:	0b42240e 	bleq	108a21c <__cs3_heap_start+0xf70b7c>
    11e0:	0a02ea03 	beq	bb9f4 <__cs3_region_init_size_ram+0xa3d9c>
    11e4:	06422c0e 	strbeq	r2, [r2], -lr, lsl #24
    11e8:	0e510650 	mrceq	6, 2, r0, cr1, cr0, {2}
    11ec:	000b4224 	andeq	r4, fp, r4, lsr #4
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1200:	0000001c 	andeq	r0, r0, ip, lsl r0
    1204:	000011f0 	strdeq	r1, [r0], -r0
    1208:	00110bd0 			; <UNDEFINED> instruction: 0x00110bd0
    120c:	00000244 	andeq	r0, r0, r4, asr #4
    1210:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1214:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1218:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    121c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1220:	00000018 	andeq	r0, r0, r8, lsl r0
    1224:	000011f0 	strdeq	r1, [r0], -r0
    1228:	00110e14 	andseq	r0, r1, r4, lsl lr
    122c:	00000090 	muleq	r0, r0, r0
    1230:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1234:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1238:	00018e02 	andeq	r8, r1, r2, lsl #28
    123c:	00000018 	andeq	r0, r0, r8, lsl r0
    1240:	000011f0 	strdeq	r1, [r0], -r0
    1244:	00110ea4 	andseq	r0, r1, r4, lsr #29
    1248:	00000038 	andeq	r0, r0, r8, lsr r0
    124c:	84080e46 	strhi	r0, [r8], #-3654	; 0xfffff1ba
    1250:	48018e02 	stmdami	r1, {r1, r9, sl, fp, pc}
    1254:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1258:	0000000c 	andeq	r0, r0, ip
    125c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1260:	7c020001 	stcvc	0, cr0, [r2], {1}
    1264:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1268:	0000000c 	andeq	r0, r0, ip
    126c:	00001258 	andeq	r1, r0, r8, asr r2
    1270:	00110edc 			; <UNDEFINED> instruction: 0x00110edc
    1274:	0000000c 	andeq	r0, r0, ip
    1278:	00000014 	andeq	r0, r0, r4, lsl r0
    127c:	00001258 	andeq	r1, r0, r8, asr r2
    1280:	00110ee8 	andseq	r0, r1, r8, ror #29
    1284:	00000028 	andeq	r0, r0, r8, lsr #32
    1288:	84080e4c 	strhi	r0, [r8], #-3660	; 0xfffff1b4
    128c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1290:	00000014 	andeq	r0, r0, r4, lsl r0
    1294:	00001258 	andeq	r1, r0, r8, asr r2
    1298:	00110f10 	andseq	r0, r1, r0, lsl pc
    129c:	00000028 	andeq	r0, r0, r8, lsr #32
    12a0:	84080e4c 	strhi	r0, [r8], #-3660	; 0xfffff1b4
    12a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    12a8:	00000018 	andeq	r0, r0, r8, lsl r0
    12ac:	00001258 	andeq	r1, r0, r8, asr r2
    12b0:	00110f38 	andseq	r0, r1, r8, lsr pc
    12b4:	00000080 	andeq	r0, r0, r0, lsl #1
    12b8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    12bc:	7c018e02 	stcvc	14, cr8, [r1], {2}
    12c0:	000ec4ce 	andeq	ip, lr, lr, asr #9
    12c4:	00000018 	andeq	r0, r0, r8, lsl r0
    12c8:	00001258 	andeq	r1, r0, r8, asr r2
    12cc:	00110fb8 			; <UNDEFINED> instruction: 0x00110fb8
    12d0:	00000050 	andeq	r0, r0, r0, asr r0
    12d4:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
    12d8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    12e0:	0000000c 	andeq	r0, r0, ip
    12e4:	00001258 	andeq	r1, r0, r8, asr r2
    12e8:	00111008 	andseq	r1, r1, r8
    12ec:	00000018 	andeq	r0, r0, r8, lsl r0
    12f0:	00000020 	andeq	r0, r0, r0, lsr #32
    12f4:	00001258 	andeq	r1, r0, r8, asr r2
    12f8:	00111020 	andseq	r1, r1, r0, lsr #32
    12fc:	00000094 	muleq	r0, r4, r0
    1300:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1304:	7e018e02 	cdpvc	14, 0, cr8, cr1, cr2, {0}
    1308:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
    130c:	440b4200 	strmi	r4, [fp], #-512	; 0xfffffe00
    1310:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1314:	00000018 	andeq	r0, r0, r8, lsl r0
    1318:	00001258 	andeq	r1, r0, r8, asr r2
    131c:	001110b4 	ldrheq	r1, [r1], -r4
    1320:	0000011c 	andeq	r0, r0, ip, lsl r1
    1324:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1328:	86038504 	strhi	r8, [r3], -r4, lsl #10
    132c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1330:	0000000c 	andeq	r0, r0, ip
    1334:	00001258 	andeq	r1, r0, r8, asr r2
    1338:	00111248 	andseq	r1, r1, r8, asr #4
    133c:	0000000c 	andeq	r0, r0, ip
    1340:	0000000c 	andeq	r0, r0, ip
    1344:	00001258 	andeq	r1, r0, r8, asr r2
    1348:	00111254 	andseq	r1, r1, r4, asr r2
    134c:	0000000c 	andeq	r0, r0, ip
    1350:	0000000c 	andeq	r0, r0, ip
    1354:	00001258 	andeq	r1, r0, r8, asr r2
    1358:	001111d0 			; <UNDEFINED> instruction: 0x001111d0
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	0000000c 	andeq	r0, r0, ip
    1364:	00001258 	andeq	r1, r0, r8, asr r2
    1368:	001111dc 			; <UNDEFINED> instruction: 0x001111dc
    136c:	0000000c 	andeq	r0, r0, ip
    1370:	0000000c 	andeq	r0, r0, ip
    1374:	00001258 	andeq	r1, r0, r8, asr r2
    1378:	001111e8 	andseq	r1, r1, r8, ror #3
    137c:	0000000c 	andeq	r0, r0, ip
    1380:	0000000c 	andeq	r0, r0, ip
    1384:	00001258 	andeq	r1, r0, r8, asr r2
    1388:	001111f4 			; <UNDEFINED> instruction: 0x001111f4
    138c:	0000000c 	andeq	r0, r0, ip
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
    1394:	00001258 	andeq	r1, r0, r8, asr r2
    1398:	00111200 	andseq	r1, r1, r0, lsl #4
    139c:	00000024 	andeq	r0, r0, r4, lsr #32
    13a0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    13a4:	4a018e02 	bmi	64bb4 <__cs3_region_init_size_ram+0x4cf5c>
    13a8:	000ec4ce 	andeq	ip, lr, lr, asr #9
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
    13b0:	00001258 	andeq	r1, r0, r8, asr r2
    13b4:	00111224 	andseq	r1, r1, r4, lsr #4
    13b8:	00000024 	andeq	r0, r0, r4, lsr #32
    13bc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    13c0:	4c018e02 	stcmi	14, cr8, [r1], {2}
    13c4:	000ec4ce 	andeq	ip, lr, lr, asr #9
    13c8:	0000000c 	andeq	r0, r0, ip
    13cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13d8:	00000020 	andeq	r0, r0, r0, lsr #32
    13dc:	000013c8 	andeq	r1, r0, r8, asr #7
    13e0:	00111260 	andseq	r1, r1, r0, ror #4
    13e4:	0000003c 	andeq	r0, r0, ip, lsr r0
    13e8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    13ec:	86038504 	strhi	r8, [r3], -r4, lsl #10
    13f0:	5a018e02 	bpl	64c00 <__cs3_region_init_size_ram+0x4cfa8>
    13f4:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    13f8:	0000000e 	andeq	r0, r0, lr
    13fc:	0000000c 	andeq	r0, r0, ip
    1400:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1404:	7c020001 	stcvc	0, cr0, [r2], {1}
    1408:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    140c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1410:	000013fc 	strdeq	r1, [r0], -ip
    1414:	0011129c 	mulseq	r1, ip, r2
    1418:	000000fc 	strdeq	r0, [r0], -ip
    141c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1420:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1424:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1428:	00018e02 	andeq	r8, r1, r2, lsl #28
    142c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1430:	000013fc 	strdeq	r1, [r0], -ip
    1434:	00111398 	mulseq	r1, r8, r3
    1438:	000002e0 	andeq	r0, r0, r0, ror #5
    143c:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xfffff1ba
    1440:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1444:	02018e02 	andeq	r8, r1, #2, 28
    1448:	c6ce0a68 	strbgt	r0, [lr], r8, ror #20
    144c:	000ec4c5 	andeq	ip, lr, r5, asr #9
    1450:	0a780b42 	beq	1e04160 <__cs3_heap_start+0x1ceaac0>
    1454:	cec6c5c4 	cdpgt	5, 12, cr12, cr6, cr4, {6}
    1458:	0b42000e 	bleq	1081498 <__cs3_heap_start+0xf67df8>
    145c:	0000000c 	andeq	r0, r0, ip
    1460:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1464:	7c020001 	stcvc	0, cr0, [r2], {1}
    1468:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    146c:	00000054 	andeq	r0, r0, r4, asr r0
    1470:	0000145c 	andeq	r1, r0, ip, asr r4
    1474:	00111678 	andseq	r1, r1, r8, ror r6
    1478:	000004a4 	andeq	r0, r0, r4, lsr #9
    147c:	84240e4a 	strthi	r0, [r4], #-3658	; 0xfffff1b6
    1480:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1484:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1488:	8a048905 	bhi	1238a4 <__cs3_heap_start+0xa204>
    148c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1490:	300e4201 	andcc	r4, lr, r1, lsl #4
    1494:	0e0a4c02 	cdpeq	12, 0, cr4, cr10, cr2, {0}
    1498:	560b4224 	strpl	r4, [fp], -r4, lsr #4
    149c:	c5c4000e 	strbgt	r0, [r4, #14]
    14a0:	c9c8c7c6 	stmibgt	r8, {r1, r2, r6, r7, r8, r9, sl, lr, pc}^
    14a4:	44cecbca 	strbmi	ip, [lr], #3018	; 0xbca
    14a8:	0984300e 	stmibeq	r4, {r1, r2, r3, ip, sp}
    14ac:	07860885 	streq	r0, [r6, r5, lsl #17]
    14b0:	05880687 	streq	r0, [r8, #1671]	; 0x687
    14b4:	038a0489 	orreq	r0, sl, #-1996488704	; 0x89000000
    14b8:	018e028b 	orreq	r0, lr, fp, lsl #5
    14bc:	0e0a6002 	cdpeq	0, 0, cr6, cr10, cr2, {0}
    14c0:	000b4224 	andeq	r4, fp, r4, lsr #4
    14c4:	0000000c 	andeq	r0, r0, ip
    14c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    14d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d8:	000014c4 	andeq	r1, r0, r4, asr #9
    14dc:	00111b1c 	andseq	r1, r1, ip, lsl fp
    14e0:	00000078 	andeq	r0, r0, r8, ror r0
    14e4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    14e8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    14ec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    14f0:	00018e02 	andeq	r8, r1, r2, lsl #28
    14f4:	00000020 	andeq	r0, r0, r0, lsr #32
    14f8:	000014c4 	andeq	r1, r0, r4, asr #9
    14fc:	00111b94 	mulseq	r1, r4, fp
    1500:	00000080 	andeq	r0, r0, r0, lsl #1
    1504:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    1508:	86078508 	strhi	r8, [r7], -r8, lsl #10
    150c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1510:	8a038904 	bhi	e3928 <__cs3_region_init_size_ram+0xcbcd0>
    1514:	00018e02 	andeq	r8, r1, r2, lsl #28
    1518:	0000000c 	andeq	r0, r0, ip
    151c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1520:	7c020001 	stcvc	0, cr0, [r2], {1}
    1524:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1528:	0000000c 	andeq	r0, r0, ip
    152c:	00001518 	andeq	r1, r0, r8, lsl r5
    1530:	00111c14 	andseq	r1, r1, r4, lsl ip
    1534:	00000010 	andeq	r0, r0, r0, lsl r0
    1538:	0000000c 	andeq	r0, r0, ip
    153c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1540:	7c020001 	stcvc	0, cr0, [r2], {1}
    1544:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1548:	00000018 	andeq	r0, r0, r8, lsl r0
    154c:	00001538 	andeq	r1, r0, r8, lsr r5
    1550:	00111c24 	andseq	r1, r1, r4, lsr #24
    1554:	00000040 	andeq	r0, r0, r0, asr #32
    1558:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    155c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1560:	00018e02 	andeq	r8, r1, r2, lsl #28
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    156c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1570:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1574:	00000018 	andeq	r0, r0, r8, lsl r0
    1578:	00001564 	andeq	r1, r0, r4, ror #10
    157c:	00111c64 	andseq	r1, r1, r4, ror #24
    1580:	00000078 	andeq	r0, r0, r8, ror r0
    1584:	84080e48 	strhi	r0, [r8], #-3656	; 0xfffff1b8
    1588:	6e018e02 	cdpvs	14, 0, cr8, cr1, cr2, {0}
    158c:	cec4000e 	cdpgt	0, 12, cr0, cr4, cr14, {0}
    1590:	0000000c 	andeq	r0, r0, ip
    1594:	00001564 	andeq	r1, r0, r4, ror #10
    1598:	00111cdc 			; <UNDEFINED> instruction: 0x00111cdc
    159c:	0000000c 	andeq	r0, r0, ip
    15a0:	0000000c 	andeq	r0, r0, ip
    15a4:	00001564 	andeq	r1, r0, r4, ror #10
    15a8:	00111ce8 	andseq	r1, r1, r8, ror #25
    15ac:	00000010 	andeq	r0, r0, r0, lsl r0
    15b0:	0000000c 	andeq	r0, r0, ip
    15b4:	00001564 	andeq	r1, r0, r4, ror #10
    15b8:	00111cf8 			; <UNDEFINED> instruction: 0x00111cf8
    15bc:	0000000c 	andeq	r0, r0, ip
    15c0:	0000000c 	andeq	r0, r0, ip
    15c4:	00001564 	andeq	r1, r0, r4, ror #10
    15c8:	00111d04 	andseq	r1, r1, r4, lsl #26
    15cc:	00000008 	andeq	r0, r0, r8
    15d0:	0000000c 	andeq	r0, r0, ip
    15d4:	00001564 	andeq	r1, r0, r4, ror #10
    15d8:	00111d0c 	andseq	r1, r1, ip, lsl #26
    15dc:	0000000c 	andeq	r0, r0, ip
    15e0:	00000020 	andeq	r0, r0, r0, lsr #32
    15e4:	00001564 	andeq	r1, r0, r4, ror #10
    15e8:	00111d18 	andseq	r1, r1, r8, lsl sp
    15ec:	00000020 	andeq	r0, r0, r0, lsr #32
    15f0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    15f4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15f8:	4c018e02 	stcmi	14, cr8, [r1], {2}
    15fc:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    1600:	0000000e 	andeq	r0, r0, lr
    1604:	00000014 	andeq	r0, r0, r4, lsl r0
    1608:	00001564 	andeq	r1, r0, r4, ror #10
    160c:	00111d38 	andseq	r1, r1, r8, lsr sp
    1610:	00000014 	andeq	r0, r0, r4, lsl r0
    1614:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1618:	00018e02 	andeq	r8, r1, r2, lsl #28
    161c:	0000000c 	andeq	r0, r0, ip
    1620:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1624:	7c020001 	stcvc	0, cr0, [r2], {1}
    1628:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    162c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1630:	0000161c 	andeq	r1, r0, ip, lsl r6
    1634:	00111d4c 	andseq	r1, r1, ip, asr #26
    1638:	00000164 	andeq	r0, r0, r4, ror #2
    163c:	84140e4a 	ldrhi	r0, [r4], #-3658	; 0xfffff1b6
    1640:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1644:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1648:	580e4601 	stmdapl	lr, {r0, r9, sl, lr}
    164c:	140e5802 	strne	r5, [lr], #-2050	; 0xfffff7fe
    1650:	c4000e42 	strgt	r0, [r0], #-3650	; 0xfffff1be
    1654:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    1658:	84580e4c 	ldrbhi	r0, [r8], #-3660	; 0xfffff1b4
    165c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1660:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1664:	0e0a6601 	cfmadd32eq	mvax0, mvfx6, mvfx10, mvfx1
    1668:	000b4214 	andeq	r4, fp, r4, lsl r2
    166c:	0000000c 	andeq	r0, r0, ip
    1670:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1674:	7c020001 	stcvc	0, cr0, [r2], {1}
    1678:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    167c:	00000048 	andeq	r0, r0, r8, asr #32
    1680:	0000166c 	andeq	r1, r0, ip, ror #12
    1684:	00111eb0 			; <UNDEFINED> instruction: 0x00111eb0
    1688:	000007dc 	ldrdeq	r0, [r0], -ip
    168c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1690:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1694:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1698:	8a048905 	bhi	123ab4 <__cs3_heap_start+0xa414>
    169c:	8e028b03 	vmlahi.f64	d8, d2, d3
    16a0:	300e4601 	andcc	r4, lr, r1, lsl #12
    16a4:	0a012803 	beq	4b6b8 <__cs3_region_init_size_ram+0x33a60>
    16a8:	0b42240e 	bleq	108a6e8 <__cs3_heap_start+0xf71048>
    16ac:	240e0a4a 	strcs	r0, [lr], #-2634	; 0xfffff5b6
    16b0:	0a660b42 	beq	19843c0 <__cs3_heap_start+0x186ad20>
    16b4:	0b42240e 	bleq	108a6f4 <__cs3_heap_start+0xf71054>
    16b8:	240e0a52 	strcs	r0, [lr], #-2642	; 0xfffff5ae
    16bc:	7c020b42 	stcvc	11, cr0, [r2], {66}	; 0x42
    16c0:	42240e0a 	eormi	r0, r4, #10, 28	; 0xa0
    16c4:	0000000b 	andeq	r0, r0, fp
    16c8:	0000000c 	andeq	r0, r0, ip
    16cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16d8:	00000018 	andeq	r0, r0, r8, lsl r0
    16dc:	000016c8 	andeq	r1, r0, r8, asr #13
    16e0:	0011268c 	andseq	r2, r1, ip, lsl #13
    16e4:	000000fc 	strdeq	r0, [r0], -ip
    16e8:	840c0e44 	strhi	r0, [ip], #-3652	; 0xfffff1bc
    16ec:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    16f0:	00000001 	andeq	r0, r0, r1
    16f4:	0000000c 	andeq	r0, r0, ip
    16f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16fc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1700:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1704:	00000018 	andeq	r0, r0, r8, lsl r0
    1708:	000016f4 	strdeq	r1, [r0], -r4
    170c:	0011289c 	mulseq	r1, ip, r8
    1710:	00000128 	andeq	r0, r0, r8, lsr #2
    1714:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
    1718:	86038504 	strhi	r8, [r3], -r4, lsl #10
    171c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1720:	0000000c 	andeq	r0, r0, ip
    1724:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1728:	7c020001 	stcvc	0, cr0, [r2], {1}
    172c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1730:	00000014 	andeq	r0, r0, r4, lsl r0
    1734:	00001720 	andeq	r1, r0, r0, lsr #14
    1738:	001129c4 	andseq	r2, r1, r4, asr #19
    173c:	000000f8 	strdeq	r0, [r0], -r8
    1740:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1744:	00018e02 	andeq	r8, r1, r2, lsl #28
    1748:	0000000c 	andeq	r0, r0, ip
    174c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1750:	7c020001 	stcvc	0, cr0, [r2], {1}
    1754:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1758:	0000000c 	andeq	r0, r0, ip
    175c:	00001748 	andeq	r1, r0, r8, asr #14
    1760:	00112ad4 			; <UNDEFINED> instruction: 0x00112ad4
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	0000000c 	andeq	r0, r0, ip
    176c:	00001748 	andeq	r1, r0, r8, asr #14
    1770:	00112abc 			; <UNDEFINED> instruction: 0x00112abc
    1774:	0000000c 	andeq	r0, r0, ip
    1778:	0000000c 	andeq	r0, r0, ip
    177c:	00001748 	andeq	r1, r0, r8, asr #14
    1780:	00112ac8 	andseq	r2, r1, r8, asr #21
    1784:	0000000c 	andeq	r0, r0, ip
    1788:	0000000c 	andeq	r0, r0, ip
    178c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1790:	7c020001 	stcvc	0, cr0, [r2], {1}
    1794:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1798:	00000018 	andeq	r0, r0, r8, lsl r0
    179c:	00001788 	andeq	r1, r0, r8, lsl #15
    17a0:	00112ae0 	andseq	r2, r1, r0, ror #21
    17a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    17a8:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
    17ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
    17b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b4:	0000000c 	andeq	r0, r0, ip
    17b8:	00001788 	andeq	r1, r0, r8, lsl #15
    17bc:	00112b6c 	andseq	r2, r1, ip, ror #22
    17c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17c4:	00000024 	andeq	r0, r0, r4, lsr #32
    17c8:	00001788 	andeq	r1, r0, r8, lsl #15
    17cc:	00112b88 	andseq	r2, r1, r8, lsl #23
    17d0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17d4:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    17d8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    17dc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    17e0:	200e4601 	andcs	r4, lr, r1, lsl #12
    17e4:	140e0a76 	strne	r0, [lr], #-2678	; 0xfffff58a
    17e8:	00000b42 	andeq	r0, r0, r2, asr #22
    17ec:	00000020 	andeq	r0, r0, r0, lsr #32
    17f0:	00001788 	andeq	r1, r0, r8, lsl #15
    17f4:	00112c58 	andseq	r2, r1, r8, asr ip
    17f8:	000000e4 	andeq	r0, r0, r4, ror #1
    17fc:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    1800:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1804:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1808:	8a038904 	bhi	e3c20 <__cs3_region_init_size_ram+0xcbfc8>
    180c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1810:	0000000c 	andeq	r0, r0, ip
    1814:	00001788 	andeq	r1, r0, r8, lsl #15
    1818:	00112d3c 	andseq	r2, r1, ip, lsr sp
    181c:	00000064 	andeq	r0, r0, r4, rrx
    1820:	0000000c 	andeq	r0, r0, ip
    1824:	00001788 	andeq	r1, r0, r8, lsl #15
    1828:	00112da0 	andseq	r2, r1, r0, lsr #27
    182c:	00000090 	muleq	r0, r0, r0
    1830:	00000014 	andeq	r0, r0, r4, lsl r0
    1834:	00001788 	andeq	r1, r0, r8, lsl #15
    1838:	00112e30 	andseq	r2, r1, r0, lsr lr
    183c:	00000020 	andeq	r0, r0, r0, lsr #32
    1840:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1844:	00018e02 	andeq	r8, r1, r2, lsl #28
    1848:	00000028 	andeq	r0, r0, r8, lsr #32
    184c:	00001788 	andeq	r1, r0, r8, lsl #15
    1850:	00112e50 	andseq	r2, r1, r0, asr lr
    1854:	000001d8 	ldrdeq	r0, [r0], -r8
    1858:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    185c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1860:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1864:	8a048905 	bhi	123c80 <__cs3_heap_start+0xa5e0>
    1868:	8e028b03 	vmlahi.f64	d8, d2, d3
    186c:	380e4601 	stmdacc	lr, {r0, r9, sl, lr}
    1870:	240ee202 	strcs	lr, [lr], #-514	; 0xfffffdfe
    1874:	0000001c 	andeq	r0, r0, ip, lsl r0
    1878:	00001788 	andeq	r1, r0, r8, lsl #15
    187c:	00113028 	andseq	r3, r1, r8, lsr #32
    1880:	000000fc 	strdeq	r0, [r0], -ip
    1884:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1888:	86058506 	strhi	r8, [r5], -r6, lsl #10
    188c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1890:	00018e02 	andeq	r8, r1, r2, lsl #28
    1894:	00000020 	andeq	r0, r0, r0, lsr #32
    1898:	00001788 	andeq	r1, r0, r8, lsl #15
    189c:	00113124 	andseq	r3, r1, r4, lsr #2
    18a0:	000000f8 	strdeq	r0, [r0], -r8
    18a4:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    18a8:	86078508 	strhi	r8, [r7], -r8, lsl #10
    18ac:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    18b0:	8a038904 	bhi	e3cc8 <__cs3_region_init_size_ram+0xcc070>
    18b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    18b8:	0000000c 	andeq	r0, r0, ip
    18bc:	00001788 	andeq	r1, r0, r8, lsl #15
    18c0:	0011321c 	andseq	r3, r1, ip, lsl r2
    18c4:	00000064 	andeq	r0, r0, r4, rrx
    18c8:	00000020 	andeq	r0, r0, r0, lsr #32
    18cc:	00001788 	andeq	r1, r0, r8, lsl #15
    18d0:	00113280 	andseq	r3, r1, r0, lsl #5
    18d4:	00000198 	muleq	r0, r8, r1
    18d8:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    18dc:	86078508 	strhi	r8, [r7], -r8, lsl #10
    18e0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    18e4:	8a038904 	bhi	e3cfc <__cs3_region_init_size_ram+0xcc0a4>
    18e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    18ec:	0000000c 	andeq	r0, r0, ip
    18f0:	00001788 	andeq	r1, r0, r8, lsl #15
    18f4:	00113418 	andseq	r3, r1, r8, lsl r4
    18f8:	00000068 	andeq	r0, r0, r8, rrx
    18fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1900:	00001788 	andeq	r1, r0, r8, lsl #15
    1904:	00113480 	andseq	r3, r1, r0, lsl #9
    1908:	000000d4 	ldrdeq	r0, [r0], -r4
    190c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1910:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1914:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1918:	00018e02 	andeq	r8, r1, r2, lsl #28
    191c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1920:	00001788 	andeq	r1, r0, r8, lsl #15
    1924:	00113554 	andseq	r3, r1, r4, asr r5
    1928:	00000104 	andeq	r0, r0, r4, lsl #2
    192c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    1930:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1934:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1938:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    193c:	280e4401 	stmdacs	lr, {r0, sl, lr}
    1940:	0e0a5402 	cdpeq	4, 0, cr5, cr10, cr2, {0}
    1944:	640b421c 	strvs	r4, [fp], #-540	; 0xfffffde4
    1948:	00001c0e 	andeq	r1, r0, lr, lsl #24
    194c:	00000028 	andeq	r0, r0, r8, lsr #32
    1950:	00001788 	andeq	r1, r0, r8, lsl #15
    1954:	00113658 	andseq	r3, r1, r8, asr r6
    1958:	00000084 	andeq	r0, r0, r4, lsl #1
    195c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1960:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1964:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1968:	42018e02 	andmi	r8, r1, #2, 28
    196c:	0a6e200e 	beq	1b899ac <__cs3_heap_start+0x1a7030c>
    1970:	0b42180e 	bleq	10879b0 <__cs3_heap_start+0xf6e310>
    1974:	00180e4c 	andseq	r0, r8, ip, asr #28
    1978:	0000000c 	andeq	r0, r0, ip
    197c:	00001788 	andeq	r1, r0, r8, lsl #15
    1980:	001136dc 			; <UNDEFINED> instruction: 0x001136dc
    1984:	00000038 	andeq	r0, r0, r8, lsr r0
    1988:	00000014 	andeq	r0, r0, r4, lsl r0
    198c:	00001788 	andeq	r1, r0, r8, lsl #15
    1990:	00113714 	andseq	r3, r1, r4, lsl r7
    1994:	0000006c 	andeq	r0, r0, ip, rrx
    1998:	84080e48 	strhi	r0, [r8], #-3656	; 0xfffff1b8
    199c:	00018e02 	andeq	r8, r1, r2, lsl #28
    19a0:	0000000c 	andeq	r0, r0, ip
    19a4:	00001788 	andeq	r1, r0, r8, lsl #15
    19a8:	00113780 	andseq	r3, r1, r0, lsl #15
    19ac:	00000080 	andeq	r0, r0, r0, lsl #1
    19b0:	0000000c 	andeq	r0, r0, ip
    19b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    19b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    19bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    19c0:	00000040 	andeq	r0, r0, r0, asr #32
    19c4:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    19c8:	00113800 	andseq	r3, r1, r0, lsl #16
    19cc:	00000564 	andeq	r0, r0, r4, ror #10
    19d0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    19d4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    19d8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    19dc:	8a048905 	bhi	123df8 <__cs3_heap_start+0xa758>
    19e0:	8e028b03 	vmlahi.f64	d8, d2, d3
    19e4:	300e4401 	andcc	r4, lr, r1, lsl #8
    19e8:	0e0a4e02 	cdpeq	14, 0, cr4, cr10, cr2, {0}
    19ec:	020b4224 	andeq	r4, fp, #36, 4	; 0x40000002
    19f0:	240e0ab2 	strcs	r0, [lr], #-2738	; 0xfffff54e
    19f4:	cacbce42 	bgt	ff2f5304 <__cs3_heap_end+0xbf2f5304>
    19f8:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
    19fc:	000ec4c5 	andeq	ip, lr, r5, asr #9
    1a00:	00000b42 	andeq	r0, r0, r2, asr #22
    1a04:	0000000c 	andeq	r0, r0, ip
    1a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1a0c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1a10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1a14:	00000020 	andeq	r0, r0, r0, lsr #32
    1a18:	00001a04 	andeq	r1, r0, r4, lsl #20
    1a1c:	00113d64 	andseq	r3, r1, r4, ror #26
    1a20:	0000002c 	andeq	r0, r0, ip, lsr #32
    1a24:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1a28:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1a2c:	52018e02 	andpl	r8, r1, #2, 28
    1a30:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    1a34:	0000000e 	andeq	r0, r0, lr
    1a38:	00000020 	andeq	r0, r0, r0, lsr #32
    1a3c:	00001a04 	andeq	r1, r0, r4, lsl #20
    1a40:	00113d90 	mulseq	r1, r0, sp
    1a44:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a48:	84100e4e 	ldrhi	r0, [r0], #-3662	; 0xfffff1b2
    1a4c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1a50:	02018e02 	andeq	r8, r1, #2, 28
    1a54:	c5c6ce68 	strbgt	ip, [r6, #3688]	; 0xe68
    1a58:	00000ec4 	andeq	r0, r0, r4, asr #29
    1a5c:	0000000c 	andeq	r0, r0, ip
    1a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1a64:	7c020001 	stcvc	0, cr0, [r2], {1}
    1a68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1a6c:	0000000c 	andeq	r0, r0, ip
    1a70:	00001a5c 	andeq	r1, r0, ip, asr sl
    1a74:	00113e80 	andseq	r3, r1, r0, lsl #29
    1a78:	00000070 	andeq	r0, r0, r0, ror r0
    1a7c:	0000000c 	andeq	r0, r0, ip
    1a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1a84:	7c020001 	stcvc	0, cr0, [r2], {1}
    1a88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1a8c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a90:	00001a7c 	andeq	r1, r0, ip, ror sl
    1a94:	00113ef0 			; <UNDEFINED> instruction: 0x00113ef0
    1a98:	00000038 	andeq	r0, r0, r8, lsr r0
    1a9c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1aa0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1aa4:	00018e02 	andeq	r8, r1, r2, lsl #28
    1aa8:	0000000c 	andeq	r0, r0, ip
    1aac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ab0:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ab4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1ab8:	00000014 	andeq	r0, r0, r4, lsl r0
    1abc:	00001aa8 	andeq	r1, r0, r8, lsr #21
    1ac0:	00113f28 	andseq	r3, r1, r8, lsr #30
    1ac4:	00000030 	andeq	r0, r0, r0, lsr r0
    1ac8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1acc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1ad0:	0000000c 	andeq	r0, r0, ip
    1ad4:	00001aa8 	andeq	r1, r0, r8, lsr #21
    1ad8:	00113f58 	andseq	r3, r1, r8, asr pc
    1adc:	00000008 	andeq	r0, r0, r8
    1ae0:	00000024 	andeq	r0, r0, r4, lsr #32
    1ae4:	00001aa8 	andeq	r1, r0, r8, lsr #21
    1ae8:	00113f60 	andseq	r3, r1, r0, ror #30
    1aec:	00000054 	andeq	r0, r0, r4, asr r0
    1af0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1af4:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1af8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1afc:	66018e02 	strvs	r8, [r1], -r2, lsl #28
    1b00:	c6c7c8ce 	strbgt	ip, [r7], lr, asr #17
    1b04:	000ec4c5 	andeq	ip, lr, r5, asr #9
    1b08:	00000014 	andeq	r0, r0, r4, lsl r0
    1b0c:	00001aa8 	andeq	r1, r0, r8, lsr #21
    1b10:	00113fb4 			; <UNDEFINED> instruction: 0x00113fb4
    1b14:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b18:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1b1c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b20:	0000000c 	andeq	r0, r0, ip
    1b24:	00001aa8 	andeq	r1, r0, r8, lsr #21
    1b28:	00113fe0 	andseq	r3, r1, r0, ror #31
    1b2c:	00000008 	andeq	r0, r0, r8
    1b30:	0000000c 	andeq	r0, r0, ip
    1b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1b38:	7c020001 	stcvc	0, cr0, [r2], {1}
    1b3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b40:	00000054 	andeq	r0, r0, r4, asr r0
    1b44:	00001b30 	andeq	r1, r0, r0, lsr fp
    1b48:	00114014 	andseq	r4, r1, r4, lsl r0
    1b4c:	000002c8 	andeq	r0, r0, r8, asr #5
    1b50:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1b54:	44038504 	strmi	r8, [r3], #-1284	; 0xfffffafc
    1b58:	01870286 	orreq	r0, r7, r6, lsl #5
    1b5c:	420a5402 	andmi	r5, sl, #33554432	; 0x2000000
    1b60:	c448c7c6 	strbgt	ip, [r8], #-1990	; 0xfffff83a
    1b64:	470b43c5 	strmi	r4, [fp, -r5, asr #7]
    1b68:	c7c6420a 	strbgt	r4, [r6, sl, lsl #4]
    1b6c:	43c5c448 	bicmi	ip, r5, #72, 8	; 0x48000000
    1b70:	c60a640b 	strgt	r6, [sl], -fp, lsl #8
    1b74:	c5c448c7 	strbgt	r4, [r4, #2247]	; 0x8c7
    1b78:	0a690b43 	beq	1a4488c <__cs3_heap_start+0x192b1ec>
    1b7c:	0b43c443 	bleq	10f2c90 <__cs3_heap_start+0xfd95f0>
    1b80:	c4420a64 	strbgt	r0, [r2], #-2660	; 0xfffff59c
    1b84:	43c7c6c5 	bicmi	ip, r7, #206569472	; 0xc500000
    1b88:	0a4a020b 	beq	12823bc <__cs3_heap_start+0x1168d1c>
    1b8c:	c6c5c442 	strbgt	ip, [r5], r2, asr #8
    1b90:	520b41c7 	andpl	r4, fp, #-1073741775	; 0xc0000031
    1b94:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
    1b98:	0000000c 	andeq	r0, r0, ip
    1b9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ba0:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ba4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1ba8:	00000020 	andeq	r0, r0, r0, lsr #32
    1bac:	00001b98 	muleq	r0, r8, fp
    1bb0:	001142dc 			; <UNDEFINED> instruction: 0x001142dc
    1bb4:	000000a4 	andeq	r0, r0, r4, lsr #1
    1bb8:	84200e44 	strthi	r0, [r0], #-3652	; 0xfffff1bc
    1bbc:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1bc0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1bc4:	8a038904 	bhi	e3fdc <__cs3_region_init_size_ram+0xcc384>
    1bc8:	00018e02 	andeq	r8, r1, r2, lsl #28
    1bcc:	0000000c 	andeq	r0, r0, ip
    1bd0:	00001b98 	muleq	r0, r8, fp
    1bd4:	00114380 	andseq	r4, r1, r0, lsl #7
    1bd8:	0000001c 	andeq	r0, r0, ip, lsl r0
    1bdc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1be0:	00001b98 	muleq	r0, r8, fp
    1be4:	0011439c 	mulseq	r1, ip, r3
    1be8:	000014ac 	andeq	r1, r0, ip, lsr #9
    1bec:	84240e44 	strthi	r0, [r4], #-3652	; 0xfffff1bc
    1bf0:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1bf4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1bf8:	8a048905 	bhi	124014 <__cs3_heap_start+0xa974>
    1bfc:	8e028b03 	vmlahi.f64	d8, d2, d3
    1c00:	d80e4201 	stmdale	lr, {r0, r9, lr}
    1c04:	017a0301 	cmneq	sl, r1, lsl #6
    1c08:	42240e0a 	eormi	r0, r4, #10, 28	; 0xa0
    1c0c:	0e0a640b 	cdpeq	4, 0, cr6, cr10, cr11, {0}
    1c10:	030b4224 	movweq	r4, #45604	; 0xb224
    1c14:	0e0a05de 	mcreq	5, 0, r0, cr10, cr14, {6}
    1c18:	000b4224 	andeq	r4, fp, r4, lsr #4
    1c1c:	00000020 	andeq	r0, r0, r0, lsr #32
    1c20:	00001b98 	muleq	r0, r8, fp
    1c24:	00115848 	andseq	r5, r1, r8, asr #16
    1c28:	00000028 	andeq	r0, r0, r8, lsr #32
    1c2c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1c30:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1c34:	50018e02 	andpl	r8, r1, r2, lsl #28
    1c38:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    1c3c:	0000000e 	andeq	r0, r0, lr
    1c40:	00000028 	andeq	r0, r0, r8, lsr #32
    1c44:	00001b98 	muleq	r0, r8, fp
    1c48:	00115870 	andseq	r5, r1, r0, ror r8
    1c4c:	000000cc 	andeq	r0, r0, ip, asr #1
    1c50:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1c54:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1c58:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1c5c:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    1c60:	4408f80e 	strmi	pc, [r8], #-2062	; 0xfffff7f2
    1c64:	0209800e 	andeq	r8, r9, #14
    1c68:	00180e50 	andseq	r0, r8, r0, asr lr
    1c6c:	0000000c 	andeq	r0, r0, ip
    1c70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1c74:	7c020001 	stcvc	0, cr0, [r2], {1}
    1c78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1c7c:	00000018 	andeq	r0, r0, r8, lsl r0
    1c80:	00001c6c 	andeq	r1, r0, ip, ror #24
    1c84:	0011593c 	andseq	r5, r1, ip, lsr r9
    1c88:	00000044 	andeq	r0, r0, r4, asr #32
    1c8c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1c90:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1c94:	00018e02 	andeq	r8, r1, r2, lsl #28
    1c98:	0000000c 	andeq	r0, r0, ip
    1c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ca0:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ca4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1ca8:	00000014 	andeq	r0, r0, r4, lsl r0
    1cac:	00001c98 	muleq	r0, r8, ip
    1cb0:	00115980 	andseq	r5, r1, r0, lsl #19
    1cb4:	00000090 	muleq	r0, r0, r0
    1cb8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1cbc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1cc0:	0000000c 	andeq	r0, r0, ip
    1cc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1cc8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ccc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1cd0:	00000018 	andeq	r0, r0, r8, lsl r0
    1cd4:	00001cc0 	andeq	r1, r0, r0, asr #25
    1cd8:	00115a10 	andseq	r5, r1, r0, lsl sl
    1cdc:	00000038 	andeq	r0, r0, r8, lsr r0
    1ce0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1ce4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1ce8:	00018e02 	andeq	r8, r1, r2, lsl #28
    1cec:	0000000c 	andeq	r0, r0, ip
    1cf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1cf4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1cf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1cfc:	00000028 	andeq	r0, r0, r8, lsr #32
    1d00:	00001cec 	andeq	r1, r0, ip, ror #25
    1d04:	00115a48 	andseq	r5, r1, r8, asr #20
    1d08:	00000124 	andeq	r0, r0, r4, lsr #2
    1d0c:	84180e48 	ldrhi	r0, [r8], #-3656	; 0xfffff1b8
    1d10:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1d14:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1d18:	02018e02 	andeq	r8, r1, #2, 28
    1d1c:	c4000e86 	strgt	r0, [r0], #-3718	; 0xfffff17a
    1d20:	c8c7c6c5 	stmiagt	r7, {r0, r2, r6, r7, r9, sl, lr, pc}^
    1d24:	000000ce 	andeq	r0, r0, lr, asr #1
    1d28:	00000018 	andeq	r0, r0, r8, lsl r0
    1d2c:	00001cec 	andeq	r1, r0, ip, ror #25
    1d30:	00115b6c 	andseq	r5, r1, ip, ror #22
    1d34:	00000018 	andeq	r0, r0, r8, lsl r0
    1d38:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1d3c:	48018e02 	stmdami	r1, {r1, r9, sl, fp, pc}
    1d40:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1d44:	0000000c 	andeq	r0, r0, ip
    1d48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1d4c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1d50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1d54:	00000030 	andeq	r0, r0, r0, lsr r0
    1d58:	00001d44 	andeq	r1, r0, r4, asr #26
    1d5c:	00115b84 	andseq	r5, r1, r4, lsl #23
    1d60:	00000120 	andeq	r0, r0, r0, lsr #2
    1d64:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1d68:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1d6c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1d70:	42018e02 	andmi	r8, r1, #2, 28
    1d74:	6c02200e 	stcvs	0, cr2, [r2], {14}
    1d78:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
    1d7c:	0e0a480b 	cdpeq	8, 0, cr4, cr10, cr11, {0}
    1d80:	520b4218 	andpl	r4, fp, #24, 4	; 0x80000001
    1d84:	0000180e 	andeq	r1, r0, lr, lsl #16
    1d88:	00000024 	andeq	r0, r0, r4, lsr #32
    1d8c:	00001d44 	andeq	r1, r0, r4, asr #26
    1d90:	00115ca4 	andseq	r5, r1, r4, lsr #25
    1d94:	000000a8 	andeq	r0, r0, r8, lsr #1
    1d98:	840c0e44 	strhi	r0, [ip], #-3652	; 0xfffff1bc
    1d9c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1da0:	180e4401 	stmdane	lr, {r0, sl, lr}
    1da4:	0c0e0a72 	stceq	10, cr0, [lr], {114}	; 0x72
    1da8:	0a480b42 	beq	1204ab8 <__cs3_heap_start+0x10eb418>
    1dac:	0b420c0e 	bleq	1084dec <__cs3_heap_start+0xf6b74c>
    1db0:	00000020 	andeq	r0, r0, r0, lsr #32
    1db4:	00001d44 	andeq	r1, r0, r4, asr #26
    1db8:	00115d4c 	andseq	r5, r1, ip, asr #26
    1dbc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1dc0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1dc4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1dc8:	5a018e02 	bpl	655d8 <__cs3_region_init_size_ram+0x4d980>
    1dcc:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    1dd0:	0000000e 	andeq	r0, r0, lr
    1dd4:	0000000c 	andeq	r0, r0, ip
    1dd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ddc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1de0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1de4:	00000018 	andeq	r0, r0, r8, lsl r0
    1de8:	00001dd4 	ldrdeq	r1, [r0], -r4
    1dec:	00115d88 	andseq	r5, r1, r8, lsl #27
    1df0:	00000040 	andeq	r0, r0, r0, asr #32
    1df4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1df8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1dfc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1e00:	0000000c 	andeq	r0, r0, ip
    1e04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1e08:	7c020001 	stcvc	0, cr0, [r2], {1}
    1e0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1e10:	00000018 	andeq	r0, r0, r8, lsl r0
    1e14:	00001e00 	andeq	r1, r0, r0, lsl #28
    1e18:	00115dc8 	andseq	r5, r1, r8, asr #27
    1e1c:	00000038 	andeq	r0, r0, r8, lsr r0
    1e20:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e24:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1e28:	00018e02 	andeq	r8, r1, r2, lsl #28
    1e2c:	0000000c 	andeq	r0, r0, ip
    1e30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1e34:	7c020001 	stcvc	0, cr0, [r2], {1}
    1e38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1e3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1e40:	00001e2c 	andeq	r1, r0, ip, lsr #28
    1e44:	00115e00 	andseq	r5, r1, r0, lsl #28
    1e48:	00000044 	andeq	r0, r0, r4, asr #32
    1e4c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e50:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1e54:	00018e02 	andeq	r8, r1, r2, lsl #28
    1e58:	0000000c 	andeq	r0, r0, ip
    1e5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1e60:	7c020001 	stcvc	0, cr0, [r2], {1}
    1e64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1e68:	00000018 	andeq	r0, r0, r8, lsl r0
    1e6c:	00001e58 	andeq	r1, r0, r8, asr lr
    1e70:	00115e44 	andseq	r5, r1, r4, asr #28
    1e74:	00000044 	andeq	r0, r0, r4, asr #32
    1e78:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1e7c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1e80:	00018e02 	andeq	r8, r1, r2, lsl #28
    1e84:	0000000c 	andeq	r0, r0, ip
    1e88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1e8c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1e90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1e94:	0000001c 	andeq	r0, r0, ip, lsl r0
    1e98:	00001e84 	andeq	r1, r0, r4, lsl #29
    1e9c:	00115e88 	andseq	r5, r1, r8, lsl #29
    1ea0:	00000124 	andeq	r0, r0, r4, lsr #2
    1ea4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1ea8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1eac:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1eb0:	00018e02 	andeq	r8, r1, r2, lsl #28
    1eb4:	00000020 	andeq	r0, r0, r0, lsr #32
    1eb8:	00001e84 	andeq	r1, r0, r4, lsl #29
    1ebc:	00115fac 	andseq	r5, r1, ip, lsr #31
    1ec0:	00000020 	andeq	r0, r0, r0, lsr #32
    1ec4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1ec8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1ecc:	4c018e02 	stcmi	14, cr8, [r1], {2}
    1ed0:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    1ed4:	0000000e 	andeq	r0, r0, lr
    1ed8:	0000000c 	andeq	r0, r0, ip
    1edc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ee0:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ee4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1ee8:	00000024 	andeq	r0, r0, r4, lsr #32
    1eec:	00001ed8 	ldrdeq	r1, [r0], -r8
    1ef0:	00115fcc 	andseq	r5, r1, ip, asr #31
    1ef4:	0000008c 	andeq	r0, r0, ip, lsl #1
    1ef8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1efc:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1f00:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1f04:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    1f08:	0a68300e 	beq	1a0df48 <__cs3_heap_start+0x18f48a8>
    1f0c:	0b42180e 	bleq	1087f4c <__cs3_heap_start+0xf6e8ac>
    1f10:	00000024 	andeq	r0, r0, r4, lsr #32
    1f14:	00001ed8 	ldrdeq	r1, [r0], -r8
    1f18:	00116058 	andseq	r6, r1, r8, asr r0
    1f1c:	0000008c 	andeq	r0, r0, ip, lsl #1
    1f20:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1f24:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1f28:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1f2c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    1f30:	0a6c300e 	beq	1b0df70 <__cs3_heap_start+0x19f48d0>
    1f34:	0b42180e 	bleq	1087f74 <__cs3_heap_start+0xf6e8d4>
    1f38:	0000000c 	andeq	r0, r0, ip
    1f3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1f40:	7c020001 	stcvc	0, cr0, [r2], {1}
    1f44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1f48:	0000000c 	andeq	r0, r0, ip
    1f4c:	00001f38 	andeq	r1, r0, r8, lsr pc
    1f50:	001160e4 	andseq	r6, r1, r4, ror #1
    1f54:	00000028 	andeq	r0, r0, r8, lsr #32
    1f58:	00000024 	andeq	r0, r0, r4, lsr #32
    1f5c:	00001f38 	andeq	r1, r0, r8, lsr pc
    1f60:	0011610c 	andseq	r6, r1, ip, lsl #2
    1f64:	00000048 	andeq	r0, r0, r8, asr #32
    1f68:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1f6c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1f70:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1f74:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    1f78:	0e5a200e 	cdpeq	0, 5, cr2, cr10, cr14, {0}
    1f7c:	00000018 	andeq	r0, r0, r8, lsl r0
    1f80:	0000000c 	andeq	r0, r0, ip
    1f84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1f88:	7c010001 	stcvc	0, cr0, [r1], {1}
    1f8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1f90:	0000000c 	andeq	r0, r0, ip
    1f94:	00001f80 	andeq	r1, r0, r0, lsl #31
    1f98:	00116154 	andseq	r6, r1, r4, asr r1
    1f9c:	00000220 	andeq	r0, r0, r0, lsr #4
    1fa0:	0000000c 	andeq	r0, r0, ip
    1fa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1fa8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1fac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1fb0:	0000000c 	andeq	r0, r0, ip
    1fb4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    1fb8:	00116394 	mulseq	r1, r4, r3
    1fbc:	00000008 	andeq	r0, r0, r8
    1fc0:	0000000c 	andeq	r0, r0, ip
    1fc4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    1fc8:	0011639c 	mulseq	r1, ip, r3
    1fcc:	00000008 	andeq	r0, r0, r8
    1fd0:	0000000c 	andeq	r0, r0, ip
    1fd4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    1fd8:	001163a4 	andseq	r6, r1, r4, lsr #7
    1fdc:	00000004 	andeq	r0, r0, r4
    1fe0:	0000000c 	andeq	r0, r0, ip
    1fe4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    1fe8:	001163a8 	andseq	r6, r1, r8, lsr #7
    1fec:	00000008 	andeq	r0, r0, r8
    1ff0:	0000000c 	andeq	r0, r0, ip
    1ff4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    1ff8:	001163b0 			; <UNDEFINED> instruction: 0x001163b0
    1ffc:	00000008 	andeq	r0, r0, r8
    2000:	0000000c 	andeq	r0, r0, ip
    2004:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2008:	001163b8 			; <UNDEFINED> instruction: 0x001163b8
    200c:	00000008 	andeq	r0, r0, r8
    2010:	0000000c 	andeq	r0, r0, ip
    2014:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2018:	001163c0 	andseq	r6, r1, r0, asr #7
    201c:	00000004 	andeq	r0, r0, r4
    2020:	0000000c 	andeq	r0, r0, ip
    2024:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2028:	001163c4 	andseq	r6, r1, r4, asr #7
    202c:	00000004 	andeq	r0, r0, r4
    2030:	0000000c 	andeq	r0, r0, ip
    2034:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2038:	001163c8 	andseq	r6, r1, r8, asr #7
    203c:	00000008 	andeq	r0, r0, r8
    2040:	0000000c 	andeq	r0, r0, ip
    2044:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2048:	001163d0 			; <UNDEFINED> instruction: 0x001163d0
    204c:	00000004 	andeq	r0, r0, r4
    2050:	0000000c 	andeq	r0, r0, ip
    2054:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2058:	001163d4 			; <UNDEFINED> instruction: 0x001163d4
    205c:	00000004 	andeq	r0, r0, r4
    2060:	0000000c 	andeq	r0, r0, ip
    2064:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2068:	001163d8 			; <UNDEFINED> instruction: 0x001163d8
    206c:	00000004 	andeq	r0, r0, r4
    2070:	0000000c 	andeq	r0, r0, ip
    2074:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2078:	001163dc 			; <UNDEFINED> instruction: 0x001163dc
    207c:	00000004 	andeq	r0, r0, r4
    2080:	0000000c 	andeq	r0, r0, ip
    2084:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2088:	001163e0 	andseq	r6, r1, r0, ror #7
    208c:	00000004 	andeq	r0, r0, r4
    2090:	0000000c 	andeq	r0, r0, ip
    2094:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2098:	001163e4 	andseq	r6, r1, r4, ror #7
    209c:	00000004 	andeq	r0, r0, r4
    20a0:	0000000c 	andeq	r0, r0, ip
    20a4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    20a8:	001163e8 	andseq	r6, r1, r8, ror #7
    20ac:	00000004 	andeq	r0, r0, r4
    20b0:	0000000c 	andeq	r0, r0, ip
    20b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    20b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    20bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    20c0:	00000014 	andeq	r0, r0, r4, lsl r0
    20c4:	000020b0 	strheq	r2, [r0], -r0
    20c8:	001163ec 	andseq	r6, r1, ip, ror #7
    20cc:	00000050 	andeq	r0, r0, r0, asr r0
    20d0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    20d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    20d8:	00000014 	andeq	r0, r0, r4, lsl r0
    20dc:	000020b0 	strheq	r2, [r0], -r0
    20e0:	00100044 	andseq	r0, r0, r4, asr #32
    20e4:	0000008c 	andeq	r0, r0, ip, lsl #1
    20e8:	87080e44 	strhi	r0, [r8, -r4, asr #28]
    20ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    20f0:	0000000c 	andeq	r0, r0, ip
    20f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    20f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    20fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2100:	00000024 	andeq	r0, r0, r4, lsr #32
    2104:	000020f0 	strdeq	r2, [r0], -r0
    2108:	001164a8 	andseq	r6, r1, r8, lsr #9
    210c:	00000090 	muleq	r0, r0, r0
    2110:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2114:	86038504 	strhi	r8, [r3], -r4, lsl #10
    2118:	6a018e02 	bvs	65928 <__cs3_region_init_size_ram+0x4dcd0>
    211c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    2120:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    2124:	0000000b 	andeq	r0, r0, fp
    2128:	0000000c 	andeq	r0, r0, ip
    212c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2130:	7c020001 	stcvc	0, cr0, [r2], {1}
    2134:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2138:	00000014 	andeq	r0, r0, r4, lsl r0
    213c:	00002128 	andeq	r2, r0, r8, lsr #2
    2140:	00116538 	andseq	r6, r1, r8, lsr r5
    2144:	00000018 	andeq	r0, r0, r8, lsl r0
    2148:	8e040e44 	cdphi	14, 0, cr0, cr4, cr4, {2}
    214c:	00000001 	andeq	r0, r0, r1
    2150:	0000000c 	andeq	r0, r0, ip
    2154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2158:	7c020001 	stcvc	0, cr0, [r2], {1}
    215c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2160:	00000024 	andeq	r0, r0, r4, lsr #32
    2164:	00002150 	andeq	r2, r0, r0, asr r1
    2168:	00116550 	andseq	r6, r1, r0, asr r5
    216c:	00000080 	andeq	r0, r0, r0, lsl #1
    2170:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2174:	86038504 	strhi	r8, [r3], -r4, lsl #10
    2178:	74018e02 	strvc	r8, [r1], #-3586	; 0xfffff1fe
    217c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    2180:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    2184:	0000000b 	andeq	r0, r0, fp
    2188:	0000000c 	andeq	r0, r0, ip
    218c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2190:	7c020001 	stcvc	0, cr0, [r2], {1}
    2194:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2198:	00000018 	andeq	r0, r0, r8, lsl r0
    219c:	00002188 	andeq	r2, r0, r8, lsl #3
    21a0:	001165d0 			; <UNDEFINED> instruction: 0x001165d0
    21a4:	00000054 	andeq	r0, r0, r4, asr r0
    21a8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    21ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
    21b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    21b4:	0000000c 	andeq	r0, r0, ip
    21b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    21bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    21c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    21c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    21c8:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    21cc:	00116624 	andseq	r6, r1, r4, lsr #12
    21d0:	0000004c 	andeq	r0, r0, ip, asr #32
    21d4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    21d8:	5a018e02 	bpl	659e8 <__cs3_region_init_size_ram+0x4dd90>
    21dc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
    21e0:	000b4200 	andeq	r4, fp, r0, lsl #4
    21e4:	0000000c 	andeq	r0, r0, ip
    21e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    21ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    21f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    21f4:	00000028 	andeq	r0, r0, r8, lsr #32
    21f8:	000021e4 	andeq	r2, r0, r4, ror #3
    21fc:	00116670 	andseq	r6, r1, r0, ror r6
    2200:	000000e8 	andeq	r0, r0, r8, ror #1
    2204:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2208:	86038504 	strhi	r8, [r3], -r4, lsl #10
    220c:	42018e02 	andmi	r8, r1, #2, 28
    2210:	0a62180e 	beq	1888250 <__cs3_heap_start+0x176ebb0>
    2214:	0b42100e 	bleq	1086254 <__cs3_heap_start+0xf6cbb4>
    2218:	100e0a76 	andne	r0, lr, r6, ror sl
    221c:	00000b42 	andeq	r0, r0, r2, asr #22
    2220:	0000000c 	andeq	r0, r0, ip
    2224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2228:	7c020001 	stcvc	0, cr0, [r2], {1}
    222c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2230:	00000020 	andeq	r0, r0, r0, lsr #32
    2234:	00002220 	andeq	r2, r0, r0, lsr #4
    2238:	00116758 	andseq	r6, r1, r8, asr r7
    223c:	00000060 	andeq	r0, r0, r0, rrx
    2240:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2244:	86038504 	strhi	r8, [r3], -r4, lsl #10
    2248:	42018e02 	andmi	r8, r1, #2, 28
    224c:	0a66200e 	beq	198a28c <__cs3_heap_start+0x1870bec>
    2250:	0b42100e 	bleq	1086290 <__cs3_heap_start+0xf6cbf0>
    2254:	0000000c 	andeq	r0, r0, ip
    2258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    225c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2260:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2264:	00000020 	andeq	r0, r0, r0, lsr #32
    2268:	00002254 	andeq	r2, r0, r4, asr r2
    226c:	001167b8 			; <UNDEFINED> instruction: 0x001167b8
    2270:	00000060 	andeq	r0, r0, r0, rrx
    2274:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2278:	86038504 	strhi	r8, [r3], -r4, lsl #10
    227c:	42018e02 	andmi	r8, r1, #2, 28
    2280:	0a66200e 	beq	198a2c0 <__cs3_heap_start+0x1870c20>
    2284:	0b42100e 	bleq	10862c4 <__cs3_heap_start+0xf6cc24>
    2288:	0000000c 	andeq	r0, r0, ip
    228c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2290:	7c020001 	stcvc	0, cr0, [r2], {1}
    2294:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2298:	00000014 	andeq	r0, r0, r4, lsl r0
    229c:	00002288 	andeq	r2, r0, r8, lsl #5
    22a0:	00116818 	andseq	r6, r1, r8, lsl r8
    22a4:	0000006c 	andeq	r0, r0, ip, rrx
    22a8:	84080e4e 	strhi	r0, [r8], #-3662	; 0xfffff1b2
    22ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    22b0:	0000000c 	andeq	r0, r0, ip
    22b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    22b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    22bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    22c0:	00000028 	andeq	r0, r0, r8, lsr #32
    22c4:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    22c8:	00116884 	andseq	r6, r1, r4, lsl #17
    22cc:	000000ec 	andeq	r0, r0, ip, ror #1
    22d0:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    22d4:	86048505 	strhi	r8, [r4], -r5, lsl #10
    22d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    22dc:	280e4401 	stmdacs	lr, {r0, sl, lr}
    22e0:	140e0a6c 	strne	r0, [lr], #-2668	; 0xfffff594
    22e4:	40020b42 	andmi	r0, r2, r2, asr #22
    22e8:	0000140e 	andeq	r1, r0, lr, lsl #8
    22ec:	00000028 	andeq	r0, r0, r8, lsr #32
    22f0:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    22f4:	00116a7c 	andseq	r6, r1, ip, ror sl
    22f8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    22fc:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    2300:	86068507 	strhi	r8, [r6], -r7, lsl #10
    2304:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    2308:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    230c:	280e4601 	stmdacs	lr, {r0, r9, sl, lr}
    2310:	1c0e0a46 	stcne	10, cr0, [lr], {70}	; 0x46
    2314:	00000b42 	andeq	r0, r0, r2, asr #22
    2318:	00000018 	andeq	r0, r0, r8, lsl r0
    231c:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    2320:	00116970 	andseq	r6, r1, r0, ror r9
    2324:	00000060 	andeq	r0, r0, r0, rrx
    2328:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    232c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    2330:	00018e02 	andeq	r8, r1, r2, lsl #28
    2334:	00000018 	andeq	r0, r0, r8, lsl r0
    2338:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    233c:	001169d0 			; <UNDEFINED> instruction: 0x001169d0
    2340:	00000074 	andeq	r0, r0, r4, ror r0
    2344:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    2348:	86038504 	strhi	r8, [r3], -r4, lsl #10
    234c:	00018e02 	andeq	r8, r1, r2, lsl #28
    2350:	00000018 	andeq	r0, r0, r8, lsl r0
    2354:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    2358:	00116a44 	andseq	r6, r1, r4, asr #20
    235c:	00000038 	andeq	r0, r0, r8, lsr r0
    2360:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
    2364:	86038504 	strhi	r8, [r3], -r4, lsl #10
    2368:	00018e02 	andeq	r8, r1, r2, lsl #28
    236c:	0000000c 	andeq	r0, r0, ip
    2370:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2374:	7c020001 	stcvc	0, cr0, [r2], {1}
    2378:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    237c:	00000014 	andeq	r0, r0, r4, lsl r0
    2380:	0000236c 	andeq	r2, r0, ip, ror #6
    2384:	00116c44 	andseq	r6, r1, r4, asr #24
    2388:	0000000c 	andeq	r0, r0, ip
    238c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    2390:	00018e02 	andeq	r8, r1, r2, lsl #28
    2394:	0000000c 	andeq	r0, r0, ip
    2398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    239c:	7c020001 	stcvc	0, cr0, [r2], {1}
    23a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    23a4:	00000018 	andeq	r0, r0, r8, lsl r0
    23a8:	00002394 	muleq	r0, r4, r3
    23ac:	00116c50 	andseq	r6, r1, r0, asr ip
    23b0:	00000078 	andeq	r0, r0, r8, ror r0
    23b4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    23b8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    23bc:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	44676573 	strbtmi	r6, [r7], #-1395	; 0xfffffa8d
       4:	56707369 	ldrbtpl	r7, [r0], -r9, ror #6
       8:	00336c61 	eorseq	r6, r3, r1, ror #24
       c:	63656863 	cmnvs	r5, #6488064	; 0x630000
      10:	7475426b 	ldrbtvc	r4, [r5], #-619	; 0xfffffd95
      14:	006e6f74 	rsbeq	r6, lr, r4, ror pc
      18:	6564726f 	strbvs	r7, [r4, #-623]!	; 0xfffffd91
      1c:	5f5f0072 	svcpl	0x005f0072
      20:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
      24:	00745f38 	rsbseq	r5, r4, r8, lsr pc
      28:	6d5c3a50 	vldrvs	s7, [ip, #-320]	; 0xfffffec0
      2c:	726f5770 	rsbvc	r5, pc, #112, 14	; 0x1c00000
      30:	6170736b 	cmnvs	r0, fp, ror #6
      34:	545c6563 	ldrbpl	r6, [ip], #-1379	; 0xfffffa9d
      38:	305f4549 	subscc	r4, pc, r9, asr #10
      3c:	30303235 	eorscc	r3, r0, r5, lsr r2
      40:	6178655f 	cmnvs	r8, pc, asr r5
      44:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
      48:	6f72705f 	svcvs	0x0072705f
      4c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      50:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
      54:	70736944 	rsbsvc	r6, r3, r4, asr #18
      58:	346c6156 	strbtcc	r6, [ip], #-342	; 0xfffffeaa
      5c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
      60:	61670076 	smcvs	28678	; 0x7006
      64:	7055656d 	subsvc	r6, r5, sp, ror #10
      68:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
      6c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
      70:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
      74:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
      78:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
      7c:	00414e5f 	subeq	r4, r1, pc, asr lr
      80:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
      84:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
      88:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffec0 <__cs3_region_init_oc_ram+0xfec0>
      8c:	6f637300 	svcvs	0x00637300
      90:	62006572 	andvs	r6, r0, #478150656	; 0x1c800000
      94:	6f747475 	svcvs	0x00747475
      98:	6c65526e 	sfmvs	f5, 2, [r5], #-440	; 0xfffffe48
      9c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
      a0:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      a4:	6f6c2067 	svcvs	0x006c2067
      a8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
      ac:	7500746e 	strvc	r7, [r0, #-1134]	; 0xfffffb92
      b0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      b4:	2064656e 	rsbcs	r6, r4, lr, ror #10
      b8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
      bc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
      c0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
      c4:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
      c8:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
      cc:	464f535f 			; <UNDEFINED> instruction: 0x464f535f
      d0:	52415754 	subpl	r5, r1, #84, 14	; 0x1500000
      d4:	63690045 	cmnvs	r9, #69	; 0x45
      d8:	72616963 	rsbvc	r6, r1, #1622016	; 0x18c000
      dc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
      e0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
      e4:	4952545f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
      e8:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
      ec:	5455415f 	ldrbpl	r4, [r5], #-351	; 0xfffffea1
      f0:	5445444f 	strbpl	r4, [r5], #-1103	; 0xfffffbb1
      f4:	00544345 	subseq	r4, r4, r5, asr #6
      f8:	706d6574 	rsbvc	r6, sp, r4, ror r5
      fc:	6f687300 	svcvs	0x00687300
     100:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     104:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     108:	2064656e 	rsbcs	r6, r4, lr, ror #10
     10c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     110:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     114:	616f4c72 	smcvs	62658	; 0xf4c2
     118:	4c410064 	mcrrmi	0, 6, r0, r1, cr4
     11c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     120:	52545f54 	subspl	r5, r4, #84, 30	; 0x150
     124:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
     128:	44455f52 	strbmi	r5, [r5], #-3922	; 0xfffff0ae
     12c:	5f004547 	svcpl	0x00004547
     130:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     134:	5f323374 	svcpl	0x00323374
     138:	61720074 	cmnvs	r2, r4, ror r0
     13c:	754e646e 	strbvc	r6, [lr, #-1134]	; 0xfffffb92
     140:	7562006d 	strbvc	r0, [r2, #-109]!	; 0xffffff93
     144:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     148:	4c410057 	mcrrmi	0, 5, r0, r1, cr7
     14c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     150:	52545f54 	subspl	r5, r4, #84, 30	; 0x150
     154:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
     158:	00655f52 	rsbeq	r5, r5, r2, asr pc
     15c:	43746e69 	cmnmi	r4, #1680	; 0x690
     160:	6b636568 	blvs	18d9708 <__cs3_heap_start+0x17c0068>
     164:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     168:	6f6c2067 	svcvs	0x006c2067
     16c:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     170:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     174:	2064656e 	rsbcs	r6, r4, lr, ror #10
     178:	00746e69 	rsbseq	r6, r4, r9, ror #28
     17c:	6576696c 	ldrbvs	r6, [r6, #-2412]!	; 0xfffff694
     180:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     184:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
     188:	4e707369 	cdpmi	3, 7, cr7, cr0, cr9, {3}
     18c:	75006d75 	strvc	r6, [r0, #-3445]	; 0xfffff28b
     190:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     194:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
     198:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     19c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     1a0:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1a4:	7a697300 	bvc	1a5cdac <__cs3_heap_start+0x194370c>
     1a8:	70797465 	rsbsvc	r7, r9, r5, ror #8
     1ac:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
     1b0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     1b4:	52545f54 	subspl	r5, r4, #84, 30	; 0x150
     1b8:	45474749 	strbmi	r4, [r7, #-1865]	; 0xfffff8b7
     1bc:	454c5f52 	strbmi	r5, [ip, #-3922]	; 0xfffff0ae
     1c0:	004c4556 	subeq	r4, ip, r6, asr r5
     1c4:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
     1c8:	41424850 	cmpmi	r2, r0, asr r8
     1cc:	6d004553 	cfstr32vs	mvfx4, [r0, #-332]	; 0xfffffeb4
     1d0:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
     1d4:	73690063 	cmnvc	r9, #99	; 0x63
     1d8:	61635f72 	smcvs	13810	; 0x35f2
     1dc:	61626c6c 	cmnvs	r2, ip, ror #24
     1e0:	73006b63 	movwvc	r6, #2915	; 0xb63
     1e4:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     1e8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     1ec:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     1f0:	00747570 	rsbseq	r7, r4, r0, ror r5
     1f4:	20554e47 	subscs	r4, r5, r7, asr #28
     1f8:	20313143 	eorscs	r3, r1, r3, asr #2
     1fc:	2e322e35 	mrccs	14, 1, r2, cr2, cr5, {1}
     200:	6d2d2030 	stcvs	0, cr2, [sp, #-192]!	; 0xffffff40
     204:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     208:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
     20c:	612d7865 			; <UNDEFINED> instruction: 0x612d7865
     210:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
     214:	616f6c66 	cmnvs	pc, r6, ror #24
     218:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     21c:	6f733d69 	svcvs	0x00733d69
     220:	70667466 	rsbvc	r7, r6, r6, ror #8
     224:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     228:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
     22c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
     230:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     234:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     238:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; a8 <__cs3_region_num+0xa6>
     23c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
     240:	61006e6f 	tstvs	r0, pc, ror #28
     244:	00636772 	rsbeq	r6, r3, r2, ror r7
     248:	70736964 	rsbsvc	r6, r3, r4, ror #18
     24c:	536d754e 	cmnpl	sp, #327155712	; 0x13800000
     250:	00707075 	rsbseq	r7, r0, r5, ror r0
     254:	5f656974 	svcpl	0x00656974
     258:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
     25c:	61626870 	smcvs	9856	; 0x2680
     260:	695f6573 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     264:	0074696e 	rsbseq	r6, r4, lr, ror #18
     268:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     26c:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
     270:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     274:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     278:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
     27c:	6f646e61 	svcvs	0x00646e61
     280:	67694c6d 	strbvs	r4, [r9, -sp, ror #24]!
     284:	5f007468 	svcpl	0x00007468
     288:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 188 <__cs3_region_num+0x186>
     28c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     290:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     294:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     298:	00747075 	rsbseq	r7, r4, r5, ror r0
     29c:	44676573 	strbtmi	r6, [r7], #-1395	; 0xfffffa8d
     2a0:	56707369 	ldrbtpl	r7, [r0], -r9, ror #6
     2a4:	00316c61 	eorseq	r6, r1, r1, ror #24
     2a8:	44676573 	strbtmi	r6, [r7], #-1395	; 0xfffffa8d
     2ac:	56707369 	ldrbtpl	r7, [r0], -r9, ror #6
     2b0:	00326c61 	eorseq	r6, r2, r1, ror #24
     2b4:	5f656974 	svcpl	0x00656974
     2b8:	635f6975 	cmpvs	pc, #1916928	; 0x1d4000
     2bc:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
     2c0:	6f697463 	svcvs	0x00697463
     2c4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     2c8:	5f656974 	svcpl	0x00656974
     2cc:	635f6975 	cmpvs	pc, #1916928	; 0x1d4000
     2d0:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
     2d4:	6f697463 	svcvs	0x00697463
     2d8:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
     2dc:	41007469 	tstmi	r0, r9, ror #8
     2e0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     2e4:	455f4b4c 	ldrbmi	r4, [pc, #-2892]	; fffff7a0 <__cs3_region_init_oc_ram+0xf7a0>
     2e8:	3043414d 	subcc	r4, r3, sp, asr #2
     2ec:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     2f0:	4b4c435f 	blmi	1311074 <__cs3_heap_start+0x11f79d4>
     2f4:	414d455f 	cmpmi	sp, pc, asr r5
     2f8:	41003143 	tstmi	r0, r3, asr #2
     2fc:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     300:	445f4b4c 	ldrbmi	r4, [pc], #-2892	; 308 <__cs3_region_num+0x306>
     304:	49414d4f 	stmdbmi	r1, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     308:	45445f4e 	strbmi	r5, [r4, #-3918]	; 0xfffff0b2
     30c:	00475542 	subeq	r5, r7, r2, asr #10
     310:	64676264 	strbtvs	r6, [r7], #-612	; 0xfffffd9c
     314:	41007669 	tstmi	r0, r9, ror #12
     318:	565f544c 	ldrbpl	r5, [pc], -ip, asr #8
     31c:	435f4f43 	cmpmi	pc, #268	; 0x10c
     320:	4e5f4748 	cdpmi	7, 5, cr4, cr15, cr8, {2}
     324:	425f4d55 	subsmi	r4, pc, #5440	; 0x1540
     328:	64005059 	strvs	r5, [r0], #-89	; 0xffffffa7
     32c:	69746762 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, sp, lr}^
     330:	6372656d 	cmnvs	r2, #457179136	; 0x1b400000
     334:	41006b6c 	tstmi	r0, ip, ror #22
     338:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     33c:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
     340:	414d5f52 	cmpmi	sp, r2, asr pc
     344:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
     348:	46435f4c 	strbmi	r5, [r3], -ip, asr #30
     34c:	46325347 	ldrtmi	r5, [r2], -r7, asr #6
     350:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
     354:	4b4c4330 	blmi	131101c <__cs3_heap_start+0x11f797c>
     358:	7600735f 			; <UNDEFINED> instruction: 0x7600735f
     35c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     360:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     364:	6b6c635f 	blvs	1b190e8 <__cs3_heap_start+0x19ffa48>
     368:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
     36c:	6766635f 			; <UNDEFINED> instruction: 0x6766635f
     370:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     374:	72655000 	rsbvc	r5, r5, #0
     378:	50687069 	rsbpl	r7, r8, r9, rrx
     37c:	365f4c4c 	ldrbcc	r4, [pc], -ip, asr #24
     380:	53003030 	movwpl	r3, #48	; 0x30
     384:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
     388:	5f4c4c50 	svcpl	0x004c4c50
     38c:	00303038 	eorseq	r3, r0, r8, lsr r0
     390:	5f544c41 	svcpl	0x00544c41
     394:	5f4b4c43 	svcpl	0x004b4c43
     398:	4e49414d 	dvfmiem	f4, f1, #5.0
     39c:	5053515f 	subspl	r5, r3, pc, asr r1
     3a0:	6f6c0049 	svcvs	0x006c0049
     3a4:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     3a8:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     3ac:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     3b0:	52475f4b 	subpl	r5, r7, #300	; 0x12c
     3b4:	00655f50 	rsbeq	r5, r5, r0, asr pc
     3b8:	77706762 	ldrbvc	r6, [r0, -r2, ror #14]!
     3bc:	006e6472 	rsbeq	r6, lr, r2, ror r4
     3c0:	32726464 	rsbscc	r6, r2, #100, 8	; 0x64000000
     3c4:	73716478 	cmnvc	r1, #120, 8	; 0x78000000
     3c8:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     3cc:	73616870 	cmnvc	r1, #112, 16	; 0x700000
     3d0:	6f660065 	svcvs	0x00660065
     3d4:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
     3d8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     3dc:	4b4c435f 	blmi	1311160 <__cs3_heap_start+0x11f7ac0>
     3e0:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     3e4:	42445f4f 	submi	r5, r4, #316	; 0x13c
     3e8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     3ec:	4b4c435f 	blmi	1311170 <__cs3_heap_start+0x11f7ad0>
     3f0:	5052475f 	subspl	r4, r2, pc, asr r7
     3f4:	4100745f 	tstmi	r0, pc, asr r4
     3f8:	565f544c 	ldrbpl	r5, [pc], -ip, asr #8
     3fc:	435f4f43 	cmpmi	pc, #268	; 0x10c
     400:	4e5f4748 	cdpmi	7, 5, cr4, cr15, cr8, {2}
     404:	445f4d55 	ldrbmi	r4, [pc], #-3413	; 40c <__cs3_region_num+0x40a>
     408:	4d4f4e45 	stclmi	14, cr4, [pc, #-276]	; 2fc <__cs3_region_num+0x2fa>
     40c:	5059425f 	subspl	r4, r9, pc, asr r2
     410:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     414:	4b4c435f 	blmi	1311198 <__cs3_heap_start+0x11f7af8>
     418:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xfffff2a1
     41c:	5f324c5f 	svcpl	0x00324c5f
     420:	004d4152 	subeq	r4, sp, r2, asr r1
     424:	5f544c41 	svcpl	0x00544c41
     428:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     42c:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 318 <__cs3_region_num+0x316>
     430:	504e4941 	subpl	r4, lr, r1, asr #18
     434:	455f4c4c 	ldrbmi	r4, [pc, #-3148]	; fffff7f0 <__cs3_region_init_oc_ram+0xf7f0>
     438:	00745f4e 	rsbseq	r5, r4, lr, asr #30
     43c:	5f544c41 	svcpl	0x00544c41
     440:	5f4b4c43 	svcpl	0x004b4c43
     444:	41524453 	cmpmi	r2, r3, asr r4
     448:	4c505f4d 	mrrcmi	15, 4, r5, r0, cr13
     44c:	4c41004c 	mcrrmi	0, 4, r0, r1, cr12
     450:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     454:	44535f4b 	ldrbmi	r5, [r3], #-3915	; 0xfffff0b5
     458:	5f4d4152 	svcpl	0x004d4152
     45c:	5f4c4c50 	svcpl	0x004c4c50
     460:	41003043 	tstmi	r0, r3, asr #32
     464:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     468:	535f4b4c 	cmppl	pc, #76, 22	; 0x13000
     46c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
     470:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     474:	0031435f 	eorseq	r4, r1, pc, asr r3
     478:	5f746c61 	svcpl	0x00746c61
     47c:	5f6b6c63 	svcpl	0x006b6c63
     480:	5f717269 	svcpl	0x00717269
     484:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     488:	4100656c 	tstmi	r0, ip, ror #10
     48c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     490:	535f4b4c 	cmppl	pc, #76, 22	; 0x13000
     494:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
     498:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     49c:	0035435f 	eorseq	r4, r5, pc, asr r3
     4a0:	5f544c41 	svcpl	0x00544c41
     4a4:	5f4b4c43 	svcpl	0x004b4c43
     4a8:	3143534f 	cmpcc	r3, pc, asr #6
     4ac:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     4b0:	6b6c635f 	blvs	1b19234 <__cs3_heap_start+0x19ffb94>
     4b4:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
     4b8:	6f63765f 	svcvs	0x0063765f
     4bc:	6766635f 			; <UNDEFINED> instruction: 0x6766635f
     4c0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     4c4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     4c8:	4b4c435f 	blmi	131124c <__cs3_heap_start+0x11f7bac>
     4cc:	5f52474d 	svcpl	0x0052474d
     4d0:	50524550 	subspl	r4, r2, r0, asr r5
     4d4:	475f4c4c 	ldrbmi	r4, [pc, -ip, asr #24]
     4d8:	444f4950 	strbmi	r4, [pc], #-2384	; 4e0 <__cs3_region_num+0x4de>
     4dc:	735f5649 	cmpvc	pc, #76546048	; 0x4900000
     4e0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     4e4:	4b4c435f 	blmi	1311268 <__cs3_heap_start+0x11f7bc8>
     4e8:	5f52474d 	svcpl	0x0052474d
     4ec:	50524550 	subspl	r4, r2, r0, asr r5
     4f0:	475f4c4c 	ldrbmi	r4, [pc, -ip, asr #24]
     4f4:	444f4950 	strbmi	r4, [pc], #-2384	; 4fc <__cs3_region_num+0x4fa>
     4f8:	745f5649 	ldrbvc	r5, [pc], #-1609	; 500 <__cs3_region_num+0x4fe>
     4fc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     500:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     504:	4b4c435f 	blmi	1311288 <__cs3_heap_start+0x11f7be8>
     508:	5241505f 	subpl	r5, r1, #95	; 0x5f
     50c:	4c424d41 	mcrrmi	13, 4, r4, r2, cr1
     510:	745f4b4f 	ldrbvc	r4, [pc], #-2895	; 518 <__cs3_region_num+0x516>
     514:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     518:	6b6c635f 	blvs	1b1929c <__cs3_heap_start+0x19ffbfc>
     51c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     520:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xfffff095
     524:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     528:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     52c:	63007261 	movwvs	r7, #609	; 0x261
     530:	675f6b6c 	ldrbvs	r6, [pc, -ip, ror #22]
     534:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     538:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
     53c:	6766635f 			; <UNDEFINED> instruction: 0x6766635f
     540:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     544:	4b4c435f 	blmi	13112c8 <__cs3_heap_start+0x11f7c28>
     548:	5f52474d 	svcpl	0x0052474d
     54c:	50524453 	subspl	r4, r2, r3, asr r4
     550:	725f4c4c 	subsvc	r4, pc, #76, 24	; 0x4c00
     554:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     558:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     55c:	4b4c435f 	blmi	13112e0 <__cs3_heap_start+0x11f7c40>
     560:	4632485f 			; <UNDEFINED> instruction: 0x4632485f
     564:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
     568:	61003052 	qaddvs	r3, r2, r0
     56c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     570:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
     574:	5f716572 	svcpl	0x00716572
     578:	00746567 	rsbseq	r6, r4, r7, ror #10
     57c:	5f544c41 	svcpl	0x00544c41
     580:	5f4b4c43 	svcpl	0x004b4c43
     584:	5f463248 	svcpl	0x00463248
     588:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
     58c:	756e0032 	strbvc	r0, [lr, #-50]!	; 0xffffffce
     590:	0072656d 	rsbseq	r6, r2, sp, ror #10
     594:	5f544c41 	svcpl	0x00544c41
     598:	5f4b4c43 	svcpl	0x004b4c43
     59c:	444e414e 	strbmi	r4, [lr], #-334	; 0xfffffeb2
     5a0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     5a4:	4b4c435f 	blmi	1311328 <__cs3_heap_start+0x11f7c88>
     5a8:	5f52474d 	svcpl	0x0052474d
     5ac:	4e49414d 	dvfmiem	f4, f1, #5.0
     5b0:	5f4c4c50 	svcpl	0x004c4c50
     5b4:	5f776172 	svcpl	0x00776172
     5b8:	5f5f0074 	svcpl	0x005f0074
     5bc:	33746e69 	cmncc	r4, #1680	; 0x690
     5c0:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     5c4:	5f544c41 	svcpl	0x00544c41
     5c8:	5f4b4c43 	svcpl	0x004b4c43
     5cc:	4e49414d 	dvfmiem	f4, f1, #5.0
     5d0:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
     5d4:	44535f44 	ldrbmi	r5, [r3], #-3908	; 0xfffff0bc
     5d8:	00434d4d 	subeq	r4, r3, sp, asr #26
     5dc:	6f6e6564 	svcvs	0x006e6564
     5e0:	6768636d 	strbvs	r6, [r8, -sp, ror #6]!
     5e4:	69614d00 	stmdbvs	r1!, {r8, sl, fp, lr}^
     5e8:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
     5ec:	3030365f 	eorscc	r3, r0, pc, asr r6
     5f0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     5f4:	4b4c435f 	blmi	1311378 <__cs3_heap_start+0x11f7cd8>
     5f8:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
     5fc:	4c505f4e 	mrrcmi	15, 4, r5, r0, cr14
     600:	34435f4c 	strbcc	r5, [r3], #-3916	; 0xfffff0b4
     604:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     608:	4b4c435f 	blmi	131138c <__cs3_heap_start+0x11f7cec>
     60c:	5f52474d 	svcpl	0x0052474d
     610:	50524550 	subspl	r4, r2, r0, asr r5
     614:	455f4c4c 	ldrbmi	r4, [pc, #-3148]	; fffff9d0 <__cs3_region_init_oc_ram+0xf9d0>
     618:	3143414d 	cmpcc	r3, sp, asr #2
     61c:	5f4b4c43 	svcpl	0x004b4c43
     620:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
     624:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     628:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     62c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     630:	5f4c4c50 	svcpl	0x004c4c50
     634:	43414d45 	movtmi	r4, #7493	; 0x1d45
     638:	4b4c4331 	blmi	1311304 <__cs3_heap_start+0x11f7c64>
     63c:	6100745f 	tstvs	r0, pc, asr r4
     640:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     644:	705f6b6c 	subsvc	r6, pc, ip, ror #22
     648:	695f6c6c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     64c:	6f6c5f73 	svcvs	0x006c5f73
     650:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     654:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     658:	4b4c435f 	blmi	13113dc <__cs3_heap_start+0x11f7d3c>
     65c:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
     660:	00504d5f 	subseq	r4, r0, pc, asr sp
     664:	5f544c41 	svcpl	0x00544c41
     668:	5f524453 	svcpl	0x00524453
     66c:	5f4c4c50 	svcpl	0x004c4c50
     670:	4b434f4c 	blmi	10d43a8 <__cs3_heap_start+0xfbad08>
     674:	4843415f 	stmdami	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
     678:	65640056 	strbvs	r0, [r4, #-86]!	; 0xffffffaa
     67c:	736d6f6e 	cmnvc	sp, #440	; 0x1b8
     680:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
     684:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     688:	4b4c435f 	blmi	131140c <__cs3_heap_start+0x11f7d6c>
     68c:	5f344c5f 	svcpl	0x00344c5f
     690:	65005053 	strvs	r5, [r0, #-83]	; 0xffffffad
     694:	3063616d 	rsbcc	r6, r3, sp, ror #2
     698:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     69c:	5f544c41 	svcpl	0x00544c41
     6a0:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     6a4:	505f5247 	subspl	r5, pc, r7, asr #4
     6a8:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
     6ac:	45505f4c 	ldrbmi	r5, [r0, #-3916]	; 0xfffff0b4
     6b0:	50535152 	subspl	r5, r3, r2, asr r1
     6b4:	4b4c4349 	blmi	13113e0 <__cs3_heap_start+0x11f7d40>
     6b8:	4100735f 	tstmi	r0, pc, asr r3
     6bc:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     6c0:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
     6c4:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     6c8:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
     6cc:	5245505f 	subpl	r5, r5, #95	; 0x5f
     6d0:	49505351 	ldmdbmi	r0, {r0, r4, r6, r8, r9, ip, lr}^
     6d4:	5f4b4c43 	svcpl	0x004b4c43
     6d8:	65760074 	ldrbvs	r0, [r6, #-116]!	; 0xffffff8c
     6dc:	00646972 	rsbeq	r6, r4, r2, ror r9
     6e0:	61726473 	cmnvs	r2, r3, ror r4
     6e4:	6c61006d 	stclvs	0, cr0, [r1], #-436	; 0xfffffe4c
     6e8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     6ec:	6c705f6b 	ldclvs	15, cr5, [r0], #-428	; 0xfffffe54
     6f0:	79625f6c 	stmdbvc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     6f4:	73736170 	cmnvc	r3, #112, 2
     6f8:	616e655f 	cmnvs	lr, pc, asr r5
     6fc:	00656c62 	rsbeq	r6, r5, r2, ror #24
     700:	5f544c41 	svcpl	0x00544c41
     704:	5f4b4c43 	svcpl	0x004b4c43
     708:	4d5f334c 	ldclmi	3, cr3, [pc, #-304]	; 5e0 <__cs3_region_num+0x5de>
     70c:	65700050 	ldrbvs	r0, [r0, #-80]!	; 0xffffffb0
     710:	73616272 	cmnvc	r1, #536870919	; 0x20000007
     714:	6b6c6365 	blvs	1b194b0 <__cs3_heap_start+0x19ffe10>
     718:	73346c00 	teqvc	r4, #0, 24
     71c:	705f0070 	subsvc	r0, pc, r0, ror r0	; <UNPREDICTABLE>
     720:	305f6461 	subscc	r6, pc, r1, ror #8
     724:	5f343378 	svcpl	0x00343378
     728:	30347830 	eorscc	r7, r4, r0, lsr r8
     72c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     730:	68737265 	ldmdavs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     734:	00746669 	rsbseq	r6, r4, r9, ror #12
     738:	7274756f 	rsbsvc	r7, r4, #465567744	; 0x1bc00000
     73c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     740:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     744:	4b4c435f 	blmi	13114c8 <__cs3_heap_start+0x11f7e28>
     748:	5f52474d 	svcpl	0x0052474d
     74c:	50524453 	subspl	r4, r2, r3, asr r4
     750:	535f4c4c 	cmppl	pc, #76, 24	; 0x4c00
     754:	53554632 	cmppl	r5, #52428800	; 0x3200000
     758:	43325245 	teqmi	r2, #1342177284	; 0x50000004
     75c:	745f4b4c 	ldrbvc	r4, [pc], #-2892	; 764 <__cs3_region_num+0x762>
     760:	666f6e00 	strbtvs	r6, [pc], -r0, lsl #28
     764:	00696e69 	rsbeq	r6, r9, r9, ror #28
     768:	5f746c61 	svcpl	0x00746c61
     76c:	5f6b6c63 	svcpl	0x006b6c63
     770:	5f717269 	svcpl	0x00717269
     774:	61736964 	cmnvs	r3, r4, ror #18
     778:	00656c62 	rsbeq	r6, r5, r2, ror #24
     77c:	6f697067 	svcvs	0x00697067
     780:	6c636264 	sfmvs	f6, 2, [r3], #-400	; 0xfffffe70
     784:	4c41006b 	mcrrmi	0, 6, r0, r1, cr11
     788:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     78c:	504d5f4b 	subpl	r5, sp, fp, asr #30
     790:	4c410055 	mcrrmi	0, 5, r0, r1, cr5
     794:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     798:	334c5f4b 	movtcc	r5, #53067	; 0xcf4b
     79c:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
     7a0:	6c61004e 	stclvs	0, cr0, [r1], #-312	; 0xfffffec8
     7a4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     7a8:	61735f6b 	cmnvs	r3, fp, ror #30
     7ac:	6d5f6566 	cfldr64vs	mvdx6, [pc, #-408]	; 61c <__cs3_region_num+0x61a>
     7b0:	5f65646f 	svcpl	0x0065646f
     7b4:	61656c63 	cmnvs	r5, r3, ror #24
     7b8:	61630072 	smcvs	12290	; 0x3002
     7bc:	6c63306e 	stclvs	0, cr3, [r3], #-440	; 0xfffffe48
     7c0:	7266006b 	rsbvc	r0, r6, #107	; 0x6b
     7c4:	696d7165 	stmdbvs	sp!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     7c8:	4c41006e 	mcrrmi	0, 6, r0, r1, cr14
     7cc:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     7d0:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     7d4:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
     7d8:	5f4c4c50 	svcpl	0x004c4c50
     7dc:	55463253 	strbpl	r3, [r6, #-595]	; 0xfffffdad
     7e0:	32524553 	subscc	r4, r2, #348127232	; 0x14c00000
     7e4:	5f4b4c43 	svcpl	0x004b4c43
     7e8:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
     7ec:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     7f0:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     7f4:	5245505f 	subpl	r5, r5, #95	; 0x5f
     7f8:	5f4c4c50 	svcpl	0x004c4c50
     7fc:	5f435253 	svcpl	0x00435253
     800:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
     804:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     808:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     80c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     810:	5f4c4c50 	svcpl	0x004c4c50
     814:	5f435253 	svcpl	0x00435253
     818:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     81c:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     820:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     824:	5245505f 	subpl	r5, r5, #95	; 0x5f
     828:	5f4c4c50 	svcpl	0x004c4c50
     82c:	4e524550 	mrcmi	5, 2, r4, cr2, cr0, {2}
     830:	53444e41 	movtpl	r4, #20033	; 0x4e41
     834:	434d4d44 	movtmi	r4, #56644	; 0xdd44
     838:	5f4b4c43 	svcpl	0x004b4c43
     83c:	70730073 	rsbsvc	r0, r3, r3, ror r0
     840:	6c636d69 	stclvs	13, cr6, [r3], #-420	; 0xfffffe5c
     844:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
     848:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     84c:	69645f6b 	stmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     850:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     854:	65675f72 	strbvs	r5, [r7, #-3954]!	; 0xfffff08e
     858:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     85c:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     860:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     864:	5245505f 	subpl	r5, r5, #95	; 0x5f
     868:	5f4c4c50 	svcpl	0x004c4c50
     86c:	55463253 	strbpl	r3, [r6, #-595]	; 0xfffffdad
     870:	31524553 	cmpcc	r2, r3, asr r5
     874:	5f4b4c43 	svcpl	0x004b4c43
     878:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
     87c:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
     880:	00305f65 	eorseq	r5, r0, r5, ror #30
     884:	74736572 	ldrbtvc	r6, [r3], #-1394	; 0xfffffa8e
     888:	5f65726f 	svcpl	0x0065726f
     88c:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
     890:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
     894:	00325f65 	eorseq	r5, r2, r5, ror #30
     898:	5f544c41 	svcpl	0x00544c41
     89c:	5f4b4c43 	svcpl	0x004b4c43
     8a0:	45464153 	strbmi	r4, [r6, #-339]	; 0xfffffead
     8a4:	4d4f445f 	cfstrdmi	mvd4, [pc, #-380]	; 730 <__cs3_region_num+0x72e>
     8a8:	5f4e4941 	svcpl	0x004e4941
     8ac:	73750065 	cmnvc	r5, #101	; 0x65
     8b0:	6b6c6362 	blvs	1b19640 <__cs3_heap_start+0x19fffa0>
     8b4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     8b8:	6b6c635f 	blvs	1b1963c <__cs3_heap_start+0x19fff9c>
     8bc:	5f73695f 	svcpl	0x0073695f
     8c0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     8c4:	0064656c 	rsbeq	r6, r4, ip, ror #10
     8c8:	5f544c41 	svcpl	0x00544c41
     8cc:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     8d0:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
     8d4:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
     8d8:	44445f4c 	strbmi	r5, [r4], #-3916	; 0xfffff0b4
     8dc:	44583252 	ldrbmi	r3, [r8], #-594	; 0xfffffdae
     8e0:	4c435351 	mcrrmi	3, 5, r5, r3, cr1
     8e4:	00735f4b 	rsbseq	r5, r3, fp, asr #30
     8e8:	5f544c41 	svcpl	0x00544c41
     8ec:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     8f0:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
     8f4:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
     8f8:	44445f4c 	strbmi	r5, [r4], #-3916	; 0xfffff0b4
     8fc:	44583252 	ldrbmi	r3, [r8], #-594	; 0xfffffdae
     900:	4c435351 	mcrrmi	3, 5, r5, r3, cr1
     904:	00745f4b 	rsbseq	r5, r4, fp, asr #30
     908:	5f544c41 	svcpl	0x00544c41
     90c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     910:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 7fc <__cs3_region_num+0x7fa>
     914:	504e4941 	subpl	r4, lr, r1, asr #18
     918:	4d5f4c4c 	ldclmi	12, cr4, [pc, #-304]	; 7f0 <__cs3_region_num+0x7ee>
     91c:	434e4941 	movtmi	r4, #59713	; 0xe941
     920:	735f4b4c 	cmpvc	pc, #76, 22	; 0x13000
     924:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     928:	4b4c435f 	blmi	13116ac <__cs3_heap_start+0x11f800c>
     92c:	5f52474d 	svcpl	0x0052474d
     930:	4e49414d 	dvfmiem	f4, f1, #5.0
     934:	5f4c4c50 	svcpl	0x004c4c50
     938:	4e49414d 	dvfmiem	f4, f1, #5.0
     93c:	5f4b4c43 	svcpl	0x004b4c43
     940:	72660074 	rsbvc	r0, r6, #116	; 0x74
     944:	616d7165 	cmnvs	sp, r5, ror #2
     948:	4c410078 	mcrrmi	0, 7, r0, r1, cr8
     94c:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     950:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     954:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
     958:	5f4c4c50 	svcpl	0x004c4c50
     95c:	44524444 	ldrbmi	r4, [r2], #-1092	; 0xfffffbbc
     960:	4b4c4351 	blmi	13116ac <__cs3_heap_start+0x11f800c>
     964:	4100745f 	tstmi	r0, pc, asr r4
     968:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     96c:	445f4b4c 	ldrbmi	r4, [pc], #-2892	; 974 <__cs3_region_num+0x972>
     970:	545f4742 	ldrbpl	r4, [pc], #-1858	; 978 <__cs3_region_num+0x976>
     974:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     978:	6c756d00 	ldclvs	13, cr6, [r5], #-0
     97c:	44530074 	ldrbmi	r0, [r3], #-116	; 0xffffff8c
     980:	504d4152 	subpl	r4, sp, r2, asr r1
     984:	365f4c4c 	ldrbcc	r4, [pc], -ip, asr #24
     988:	41003030 	tstmi	r0, r0, lsr r0
     98c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     990:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
     994:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     998:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
     99c:	53494d5f 	movtpl	r4, #40287	; 0x9d5f
     9a0:	00735f43 	rsbseq	r5, r3, r3, asr #30
     9a4:	5f544c41 	svcpl	0x00544c41
     9a8:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     9ac:	505f5247 	subspl	r5, pc, r7, asr #4
     9b0:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
     9b4:	494d5f4c 	stmdbmi	sp, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     9b8:	745f4353 	ldrbvc	r4, [pc], #-851	; 9c0 <__cs3_region_num+0x9be>
     9bc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     9c0:	4b4c435f 	blmi	1311744 <__cs3_heap_start+0x11f80a4>
     9c4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     9c8:	4f43565f 	svcmi	0x0043565f
     9cc:	4748435f 	smlsldmi	r4, r8, pc, r3	; <UNPREDICTABLE>
     9d0:	54454d5f 	strbpl	r4, [r5], #-3423	; 0xfffff2a1
     9d4:	5f444f48 	svcpl	0x00444f48
     9d8:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     9dc:	43565f54 	cmpmi	r6, #84, 30	; 0x150
     9e0:	48435f4f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     9e4:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xfffff0b9
     9e8:	5f4d4f4e 	svcpl	0x004d4f4e
     9ec:	5f4d554e 	svcpl	0x004d554e
     9f0:	00505942 	subseq	r5, r0, r2, asr #18
     9f4:	5f544c41 	svcpl	0x00544c41
     9f8:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     9fc:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 8e8 <__cs3_region_num+0x8e6>
     a00:	504e4941 	subpl	r4, lr, r1, asr #18
     a04:	4c5f4c4c 	mrrcmi	12, 4, r4, pc, cr12	; <UNPREDICTABLE>
     a08:	43525334 	cmpmi	r2, #52, 6	; 0xd0000000
     a0c:	4100735f 	tstmi	r0, pc, asr r3
     a10:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     a14:	495f4b4c 	ldmdbmi	pc, {r2, r3, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     a18:	49505f4e 	ldmdbmi	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a1c:	4d455f4e 	stclmi	15, cr5, [r5, #-312]	; 0xfffffec8
     a20:	5f304341 	svcpl	0x00304341
     a24:	41005852 	tstmi	r0, r2, asr r8
     a28:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     a2c:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
     a30:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     a34:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
     a38:	4f43565f 	svcmi	0x0043565f
     a3c:	4100735f 	tstmi	r0, pc, asr r3
     a40:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     a44:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
     a48:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
     a4c:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
     a50:	4f43565f 	svcmi	0x0043565f
     a54:	4100745f 	tstmi	r0, pc, asr r4
     a58:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     a5c:	4f5f4b4c 	svcmi	0x005f4b4c
     a60:	505f5455 	subspl	r5, pc, r5, asr r4	; <UNPREDICTABLE>
     a64:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     a68:	5f334332 	svcpl	0x00334332
     a6c:	004c4353 	subeq	r4, ip, r3, asr r3
     a70:	706d336c 	rsbvc	r3, sp, ip, ror #6
     a74:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     a78:	696c6968 	stmdbvs	ip!, {r3, r5, r6, r8, fp, sp, lr}^
     a7c:	0074696d 	rsbseq	r6, r4, sp, ror #18
     a80:	5f544c41 	svcpl	0x00544c41
     a84:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     a88:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 974 <__cs3_region_num+0x972>
     a8c:	504e4941 	subpl	r4, lr, r1, asr #18
     a90:	725f4c4c 	subsvc	r4, pc, #76, 24	; 0x4c00
     a94:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
     a98:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     a9c:	6b6c635f 	blvs	1b19820 <__cs3_heap_start+0x1a00180>
     aa0:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
     aa4:	6766635f 			; <UNDEFINED> instruction: 0x6766635f
     aa8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     aac:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     ab0:	4b4c435f 	blmi	1311834 <__cs3_heap_start+0x11f8194>
     ab4:	5241505f 	subpl	r5, r1, #95	; 0x5f
     ab8:	5f534d41 	svcpl	0x00534d41
     abc:	6c610073 	stclvs	0, cr0, [r1], #-460	; 0xfffffe34
     ac0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     ac4:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
     ac8:	72676d6b 	rsbvc	r6, r7, #6848	; 0x1ac0
     acc:	6965725f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
     ad0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     ad4:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
     ad8:	73616d72 	cmnvc	r1, #7296	; 0x1c80
     adc:	346c006b 	strbtcc	r0, [ip], #-107	; 0xffffff95
     ae0:	6c63706d 	stclvs	0, cr7, [r3], #-436	; 0xfffffe4c
     ae4:	7463006b 	strbtvc	r0, [r3], #-107	; 0xffffff95
     ae8:	74006c72 	strvc	r6, [r0], #-3186	; 0xfffff38e
     aec:	65636172 	strbvs	r6, [r3, #-370]!	; 0xfffffe8e
     af0:	00766964 	rsbseq	r6, r6, r4, ror #18
     af4:	5f544c41 	svcpl	0x00544c41
     af8:	5f4c4c50 	svcpl	0x004c4c50
     afc:	5f4b4c43 	svcpl	0x004b4c43
     b00:	41524150 	cmpmi	r2, r0, asr r1
     b04:	4f4c424d 	svcmi	0x004c424d
     b08:	00735f4b 	rsbseq	r5, r3, fp, asr #30
     b0c:	6b636f6c 	blvs	18dc8c4 <__cs3_heap_start+0x17c3224>
     b10:	6174735f 	cmnvs	r4, pc, asr r3
     b14:	616d5f74 	smcvs	54772	; 0xd5f4
     b18:	41006b73 	tstmi	r0, r3, ror fp
     b1c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     b20:	4f5f4b4c 	svcmi	0x005f4b4c
     b24:	505f5455 	subspl	r5, pc, r5, asr r4	; <UNPREDICTABLE>
     b28:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     b2c:	5f304332 	svcpl	0x00304332
     b30:	004c4353 	subeq	r4, ip, r3, asr r3
     b34:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     b38:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     b3c:	4b4c435f 	blmi	13118c0 <__cs3_heap_start+0x11f8220>
     b40:	5f52474d 	svcpl	0x0052474d
     b44:	50524550 	subspl	r4, r2, r0, asr r5
     b48:	735f4c4c 	cmpvc	pc, #76, 24	; 0x4c00
     b4c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     b50:	4b4c435f 	blmi	13118d4 <__cs3_heap_start+0x11f8234>
     b54:	5f52474d 	svcpl	0x0052474d
     b58:	50524550 	subspl	r4, r2, r0, asr r5
     b5c:	745f4c4c 	ldrbvc	r4, [pc], #-3148	; b64 <__cs3_region_num+0xb62>
     b60:	72657000 	rsbvc	r7, r5, #0
     b64:	676c6c70 			; <UNDEFINED> instruction: 0x676c6c70
     b68:	61007072 	tstvs	r0, r2, ror r0
     b6c:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     b70:	675f6b6c 	ldrbvs	r6, [pc, -ip, ror #22]
     b74:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     b78:	6766635f 			; <UNDEFINED> instruction: 0x6766635f
     b7c:	7761725f 			; <UNDEFINED> instruction: 0x7761725f
     b80:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     b84:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
     b88:	706e695f 	rsbvc	r6, lr, pc, asr r9
     b8c:	6d5f7475 	cfldrdvs	mvd7, [pc, #-468]	; 9c0 <__cs3_region_num+0x9be>
     b90:	41007875 	tstmi	r0, r5, ror r8
     b94:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     b98:	745f4b4c 	ldrbvc	r4, [pc], #-2892	; ba0 <__cs3_region_num+0xb9e>
     b9c:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
     ba0:	73747865 	cmnvc	r4, #6619136	; 0x650000
     ba4:	74006c65 	strvc	r6, [r0], #-3173	; 0xfffff39b
     ba8:	31706d65 	cmncc	r0, r5, ror #26
     bac:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     bb0:	6b6c635f 	blvs	1b19934 <__cs3_heap_start+0x1a00294>
     bb4:	7469775f 	strbtvc	r7, [r9], #-1887	; 0xfffff8a1
     bb8:	5f6e6968 	svcpl	0x006e6968
     bbc:	71657266 	cmnvc	r5, r6, ror #4
     bc0:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
     bc4:	00737469 	rsbseq	r7, r3, r9, ror #8
     bc8:	5f544c41 	svcpl	0x00544c41
     bcc:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     bd0:	435f5355 	cmpmi	pc, #1409286145	; 0x54000001
     bd4:	0045444f 	subeq	r4, r5, pc, asr #8
     bd8:	61676264 	cmnvs	r7, r4, ror #4
     bdc:	6b6c6374 	blvs	1b199b4 <__cs3_heap_start+0x1a00314>
     be0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     be4:	6c6c706e 	stclvs	0, cr7, [ip], #-440	; 0xfffffe48
     be8:	00707267 	rsbseq	r7, r0, r7, ror #4
     bec:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     bf0:	675f6e69 	ldrbvs	r6, [pc, -r9, ror #28]
     bf4:	4c410062 	mcrrmi	0, 6, r0, r1, cr2
     bf8:	43565f54 	cmpmi	r6, #84, 30	; 0x150
     bfc:	48435f4f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     c00:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xfffff0b9
     c04:	5f4d4f4e 	svcpl	0x004d4f4e
     c08:	004d554e 	subeq	r5, sp, lr, asr #10
     c0c:	5f746c61 	svcpl	0x00746c61
     c10:	5f6b6c63 	svcpl	0x006b6c63
     c14:	5f6c6c70 	svcpl	0x006c6c70
     c18:	625f7369 	subsvs	r7, pc, #-1543503871	; 0xa4000001
     c1c:	73617079 	cmnvc	r1, #121	; 0x79
     c20:	00646573 	rsbeq	r6, r4, r3, ror r5
     c24:	5f746c61 	svcpl	0x00746c61
     c28:	5f6b6c63 	svcpl	0x006b6c63
     c2c:	5f6c6c70 	svcpl	0x006c6c70
     c30:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
     c34:	675f6563 	ldrbvs	r6, [pc, -r3, ror #10]
     c38:	41007465 	tstmi	r0, r5, ror #8
     c3c:	565f544c 	ldrbpl	r5, [pc], -ip, asr #8
     c40:	435f4f43 	cmpmi	pc, #268	; 0x10c
     c44:	4e5f4748 	cdpmi	7, 5, cr4, cr15, cr8, {2}
     c48:	41004d55 	tstmi	r0, r5, asr sp
     c4c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     c50:	495f4b4c 	ldmdbmi	pc, {r2, r3, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     c54:	49505f4e 	ldmdbmi	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     c58:	4c555f4e 	mrrcmi	15, 4, r5, r5, cr14	; <UNPREDICTABLE>
     c5c:	00304950 	eorseq	r4, r0, r0, asr r9
     c60:	5f544c41 	svcpl	0x00544c41
     c64:	5f4b4c43 	svcpl	0x004b4c43
     c68:	505f4e49 	subspl	r4, pc, r9, asr #28
     c6c:	555f4e49 	ldrbpl	r4, [pc, #-3657]	; fffffe2b <__cs3_region_init_oc_ram+0xfe2b>
     c70:	3149504c 	cmpcc	r9, ip, asr #32
     c74:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     c78:	4b4c435f 	blmi	13119fc <__cs3_heap_start+0x11f835c>
     c7c:	4d44535f 	stclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     c80:	4100434d 	tstmi	r0, sp, asr #6
     c84:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     c88:	535f4b4c 	cmppl	pc, #76, 22	; 0x13000
     c8c:	5f454641 	svcpl	0x00454641
     c90:	414d4f44 	cmpmi	sp, r4, asr #30
     c94:	745f4e49 	ldrbvc	r4, [pc], #-3657	; c9c <__cs3_region_num+0xc9a>
     c98:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     c9c:	4b4c435f 	blmi	1311a20 <__cs3_heap_start+0x11f8380>
     ca0:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
     ca4:	505f4d41 	subspl	r4, pc, r1, asr #26
     ca8:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
     cac:	73700032 	cmnvc	r0, #50	; 0x32
     cb0:	61006372 	tstvs	r0, r2, ror r3
     cb4:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
     cb8:	705f6b6c 	subsvc	r6, pc, ip, ror #22
     cbc:	625f6c6c 	subsvs	r6, pc, #108, 24	; 0x6c00
     cc0:	73617079 	cmnvc	r1, #121	; 0x79
     cc4:	69645f73 	stmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cc8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     ccc:	616d0065 	cmnvs	sp, r5, rrx
     cd0:	616e6e69 	cmnvs	lr, r9, ror #28
     cd4:	6473646e 	ldrbtvs	r6, [r3], #-1134	; 0xfffffb92
     cd8:	63636d6d 	cmnvs	r3, #6976	; 0x1b40
     cdc:	6f006b6c 	svcvs	0x00006b6c
     ce0:	65727475 	ldrbvs	r7, [r2, #-1141]!	; 0xfffffb8b
     ce4:	61746573 	cmnvs	r4, r3, ror r5
     ce8:	41006c6c 	tstmi	r0, ip, ror #24
     cec:	4d5f544c 	cfldrdmi	mvd5, [pc, #-304]	; bc4 <__cs3_region_num+0xbc2>
     cf0:	5f4e4941 	svcpl	0x004e4941
     cf4:	5f4c4c50 	svcpl	0x004c4c50
     cf8:	4b434f4c 	blmi	10d4a30 <__cs3_heap_start+0xfbb390>
     cfc:	534f4c5f 	movtpl	r4, #64607	; 0xfc5f
     d00:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
     d04:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     d08:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     d0c:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
     d10:	5f4c4c50 	svcpl	0x004c4c50
     d14:	44524444 	ldrbmi	r4, [r2], #-1092	; 0xfffffbbc
     d18:	4c435351 	mcrrmi	3, 5, r5, r3, cr1
     d1c:	00735f4b 	rsbseq	r5, r3, fp, asr #30
     d20:	5f544c41 	svcpl	0x00544c41
     d24:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     d28:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
     d2c:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
     d30:	44445f4c 	strbmi	r5, [r4], #-3916	; 0xfffff0b4
     d34:	53514452 	cmppl	r1, #1375731712	; 0x52000000
     d38:	5f4b4c43 	svcpl	0x004b4c43
     d3c:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
     d40:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
     d44:	676d5f6b 	strbvs	r5, [sp, -fp, ror #30]!
     d48:	61775f72 	cmnvs	r7, r2, ror pc
     d4c:	41007469 	tstmi	r0, r9, ror #8
     d50:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     d54:	505f4b4c 	subspl	r4, pc, ip, asr #22
     d58:	50495245 	subpl	r5, r9, r5, asr #4
     d5c:	41524548 	cmpmi	r2, r8, asr #10
     d60:	4c505f4c 	mrrcmi	15, 4, r5, r0, cr12
     d64:	6464004c 	strbtvs	r0, [r4], #-76	; 0xffffffb4
     d68:	63716472 	cmnvs	r1, #1912602624	; 0x72000000
     d6c:	61006b6c 	tstvs	r0, ip, ror #22
     d70:	655f746c 	ldrbvs	r7, [pc, #-1132]	; 90c <__cs3_region_num+0x90a>
     d74:	635f7478 	cmpvs	pc, #120, 8	; 0x78000000
     d78:	705f6b6c 	subsvc	r6, pc, ip, ror #22
     d7c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     d80:	6b6f6c62 	blvs	1bdbf10 <__cs3_heap_start+0x1ac2870>
     d84:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     d88:	68637265 	stmdavs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     d8c:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
     d90:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
     d94:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d98:	636f6c00 	cmnvs	pc, #0, 24
     d9c:	5f64656b 	svcpl	0x0064656b
     da0:	6b73616d 	blvs	1cd935c <__cs3_heap_start+0x1bbfcbc>
     da4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     da8:	6b6c635f 	blvs	1b19b2c <__cs3_heap_start+0x1a0048c>
     dac:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     db0:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xfffff095
     db4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     db8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     dbc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     dc0:	4b4c435f 	blmi	1311b44 <__cs3_heap_start+0x11f84a4>
     dc4:	5f52474d 	svcpl	0x0052474d
     dc8:	50524453 	subspl	r4, r2, r3, asr r4
     dcc:	535f4c4c 	cmppl	pc, #76, 24	; 0x4c00
     dd0:	5f544154 	svcpl	0x00544154
     dd4:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
     dd8:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     ddc:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
     de0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     de4:	5f4c4c50 	svcpl	0x004c4c50
     de8:	55463253 	strbpl	r3, [r6, #-595]	; 0xfffffdad
     dec:	31524553 	cmpcc	r2, r3, asr r5
     df0:	5f4b4c43 	svcpl	0x004b4c43
     df4:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
     df8:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     dfc:	554f5f4b 	strbpl	r5, [pc, #-3915]	; fffffeb9 <__cs3_region_init_oc_ram+0xfeb9>
     e00:	49505f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     e04:	4d455f4e 	stclmi	15, cr5, [r5, #-312]	; 0xfffffec8
     e08:	5f314341 	svcpl	0x00314341
     e0c:	6c005854 	stcvs	8, cr5, [r0], {84}	; 0x54
     e10:	63727334 	cmnvs	r2, #52, 6	; 0xd0000000
     e14:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
     e18:	6b6c635f 	blvs	1b19b9c <__cs3_heap_start+0x1a004fc>
     e1c:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
     e20:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     e24:	5f726574 	svcpl	0x00726574
     e28:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     e2c:	72770065 	rsbsvc	r0, r7, #101	; 0x65
     e30:	006c6176 	rsbeq	r6, ip, r6, ror r1
     e34:	5f746c61 	svcpl	0x00746c61
     e38:	5f6b6c63 	svcpl	0x006b6c63
     e3c:	5f6c6c70 	svcpl	0x006c6c70
     e40:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
     e44:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     e48:	71657266 	cmnvc	r5, r6, ror #4
     e4c:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     e50:	00636c61 	rsbeq	r6, r3, r1, ror #24
     e54:	75663273 	strbvc	r3, [r6, #-627]!	; 0xfffffd8d
     e58:	32726573 	rsbscc	r6, r2, #482344960	; 0x1cc00000
     e5c:	006b6c63 	rsbeq	r6, fp, r3, ror #24
     e60:	5f544c41 	svcpl	0x00544c41
     e64:	4e49414d 	dvfmiem	f4, f1, #5.0
     e68:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     e6c:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
     e70:	43415f4b 	movtmi	r5, #8011	; 0x1f4b
     e74:	6d005648 	stcvs	6, cr5, [r0, #-288]	; 0xfffffee0
     e78:	6c637570 	cfstr64vs	mvdx7, [r3], #-448	; 0xfffffe40
     e7c:	7266006b 	rsbvc	r0, r6, #107	; 0x6b
     e80:	75637165 	strbvc	r7, [r3, #-357]!	; 0xfffffe9b
     e84:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
     e88:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     e8c:	42445f4b 	submi	r5, r4, #300	; 0x12c
     e90:	5f5f0047 	svcpl	0x005f0047
     e94:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     e98:	745f3436 	ldrbvc	r3, [pc], #-1078	; ea0 <__cs3_region_num+0xe9e>
     e9c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     ea0:	4b4c435f 	blmi	1311c24 <__cs3_heap_start+0x11f8584>
     ea4:	5f52474d 	svcpl	0x0052474d
     ea8:	4e49414d 	dvfmiem	f4, f1, #5.0
     eac:	5f4c4c50 	svcpl	0x004c4c50
     eb0:	4353494d 	cmpmi	r3, #1261568	; 0x134000
     eb4:	4100735f 	tstmi	r0, pc, asr r3
     eb8:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     ebc:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
     ec0:	414d5f52 	cmpmi	sp, r2, asr pc
     ec4:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
     ec8:	494d5f4c 	stmdbmi	sp, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     ecc:	745f4353 	ldrbvc	r4, [pc], #-851	; ed4 <__cs3_region_num+0xed2>
     ed0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     ed4:	4b4c435f 	blmi	1311c58 <__cs3_heap_start+0x11f85b8>
     ed8:	4d4f445f 	cfstrdmi	mvd4, [pc, #-380]	; d64 <__cs3_region_num+0xd62>
     edc:	5f4e4941 	svcpl	0x004e4941
     ee0:	4d524f4e 	ldclmi	15, cr4, [r2, #-312]	; 0xfffffec8
     ee4:	41004c41 	tstmi	r0, r1, asr #24
     ee8:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
     eec:	445f4b4c 	ldrbmi	r4, [pc], #-2892	; ef4 <__cs3_region_num+0xef2>
     ef0:	425f4742 	subsmi	r4, pc, #17301504	; 0x1080000
     ef4:	00455341 	subeq	r5, r5, r1, asr #6
     ef8:	5f544c41 	svcpl	0x00544c41
     efc:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     f00:	505f5247 	subspl	r5, pc, r7, asr #4
     f04:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
     f08:	4d455f4c 	stclmi	15, cr5, [r5, #-304]	; 0xfffffed0
     f0c:	43304341 	teqmi	r0, #67108865	; 0x4000001
     f10:	745f4b4c 	ldrbvc	r4, [pc], #-2892	; f18 <__cs3_region_num+0xf16>
     f14:	52445300 	subpl	r5, r4, #0, 6
     f18:	4c504d41 	mrrcmi	13, 4, r4, r0, cr1
     f1c:	35435f4c 	strbcc	r5, [r3, #-3916]	; 0xfffff0b4
     f20:	61747300 	cmnvs	r4, r0, lsl #6
     f24:	64646174 	strbtvs	r6, [r4], #-372	; 0xfffffe8c
     f28:	61730072 	cmnvs	r3, r2, ror r0
     f2c:	006e6574 	rsbeq	r6, lr, r4, ror r5
     f30:	5f544c41 	svcpl	0x00544c41
     f34:	5f4b4c43 	svcpl	0x004b4c43
     f38:	5f54554f 	svcpl	0x0054554f
     f3c:	5f4e4950 	svcpl	0x004e4950
     f40:	4d495053 	stclmi	0, cr5, [r9, #-332]	; 0xfffffeb4
     f44:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
     f48:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
     f4c:	554f5f4b 	strbpl	r5, [pc, #-3915]	; 9 <__cs3_region_num+0x7>
     f50:	49505f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     f54:	50535f4e 	subspl	r5, r3, lr, asr #30
     f58:	00314d49 	eorseq	r4, r1, r9, asr #26
     f5c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
     f60:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
     f64:	0066746e 	rsbeq	r7, r6, lr, ror #8
     f68:	5f544c41 	svcpl	0x00544c41
     f6c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     f70:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
     f74:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
     f78:	43565f4c 	cmpmi	r6, #76, 30	; 0x130
     f7c:	00735f4f 	rsbseq	r5, r3, pc, asr #30
     f80:	5f544c41 	svcpl	0x00544c41
     f84:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     f88:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
     f8c:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
     f90:	43565f4c 	cmpmi	r6, #76, 30	; 0x130
     f94:	00745f4f 	rsbseq	r5, r4, pc, asr #30
     f98:	5f544c41 	svcpl	0x00544c41
     f9c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     fa0:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; e8c <__cs3_region_num+0xe8a>
     fa4:	504e4941 	subpl	r4, lr, r1, asr #18
     fa8:	445f4c4c 	ldrbmi	r4, [pc], #-3148	; fb0 <__cs3_region_num+0xfae>
     fac:	49444742 	stmdbmi	r4, {r1, r6, r8, r9, sl, lr}^
     fb0:	00735f56 	rsbseq	r5, r3, r6, asr pc
     fb4:	5f544c41 	svcpl	0x00544c41
     fb8:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     fbc:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; ea8 <__cs3_region_num+0xea6>
     fc0:	504e4941 	subpl	r4, lr, r1, asr #18
     fc4:	445f4c4c 	ldrbmi	r4, [pc], #-3148	; fcc <__cs3_region_num+0xfca>
     fc8:	49444742 	stmdbmi	r4, {r1, r6, r8, r9, sl, lr}^
     fcc:	00745f56 	rsbseq	r5, r4, r6, asr pc
     fd0:	5f544c41 	svcpl	0x00544c41
     fd4:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     fd8:	505f5247 	subspl	r5, pc, r7, asr #4
     fdc:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
     fe0:	54535f4c 	ldrbpl	r5, [r3], #-3916	; 0xfffff0b4
     fe4:	735f5441 	cmpvc	pc, #1090519040	; 0x41000000
     fe8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
     fec:	4b4c435f 	blmi	1311d70 <__cs3_heap_start+0x11f86d0>
     ff0:	5f52474d 	svcpl	0x0052474d
     ff4:	50524550 	subspl	r4, r2, r0, asr r5
     ff8:	535f4c4c 	cmppl	pc, #76, 24	; 0x4c00
     ffc:	5f544154 	svcpl	0x00544154
    1000:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1004:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1008:	554f5f4b 	strbpl	r5, [pc, #-3915]	; c5 <__cs3_region_num+0xc3>
    100c:	49505f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1010:	53515f4e 	cmppl	r1, #312	; 0x138
    1014:	41004950 	tstmi	r0, r0, asr r9
    1018:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    101c:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; ef4 <__cs3_region_num+0xef2>
    1020:	5f4e4941 	svcpl	0x004e4941
    1024:	004c4c50 	subeq	r4, ip, r0, asr ip
    1028:	5f544c41 	svcpl	0x00544c41
    102c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1030:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; f1c <__cs3_region_num+0xf1a>
    1034:	504e4941 	subpl	r4, lr, r1, asr #18
    1038:	4d5f4c4c 	ldclmi	12, cr4, [pc, #-304]	; f10 <__cs3_region_num+0xf0e>
    103c:	444e4941 	strbmi	r4, [lr], #-2369	; 0xfffff6bf
    1040:	735f5649 	cmpvc	pc, #76546048	; 0x4900000
    1044:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1048:	4b4c435f 	blmi	1311dcc <__cs3_heap_start+0x11f872c>
    104c:	5f52474d 	svcpl	0x0052474d
    1050:	4e49414d 	dvfmiem	f4, f1, #5.0
    1054:	5f4c4c50 	svcpl	0x004c4c50
    1058:	4e49414d 	dvfmiem	f4, f1, #5.0
    105c:	5f564944 	svcpl	0x00564944
    1060:	705f0074 	subsvc	r0, pc, r4, ror r0	; <UNPREDICTABLE>
    1064:	305f6461 	subscc	r6, pc, r1, ror #8
    1068:	5f383378 	svcpl	0x00383378
    106c:	30347830 	eorscc	r7, r4, r0, lsr r8
    1070:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1074:	4b4c435f 	blmi	1311df8 <__cs3_heap_start+0x11f8758>
    1078:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
    107c:	4152545f 	cmpmi	r2, pc, asr r4
    1080:	63004543 	movwvs	r4, #1347	; 0x543
    1084:	6172746e 	cmnvs	r2, lr, ror #8
    1088:	00726464 	rsbseq	r6, r2, r4, ror #8
    108c:	5f746c61 	svcpl	0x00746c61
    1090:	5f6b6c63 	svcpl	0x006b6c63
    1094:	5f6c6c70 	svcpl	0x006c6c70
    1098:	6b636f6c 	blvs	18dce50 <__cs3_heap_start+0x17c37b0>
    109c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    10a0:	6e630074 	mcrvs	0, 3, r0, cr3, cr4, {3}
    10a4:	00737274 	rsbseq	r7, r3, r4, ror r2
    10a8:	5f544c41 	svcpl	0x00544c41
    10ac:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    10b0:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; f9c <__cs3_region_num+0xf9a>
    10b4:	504e4941 	subpl	r4, lr, r1, asr #18
    10b8:	445f4c4c 	ldrbmi	r4, [pc], #-3148	; 10c0 <__cs3_region_num+0x10be>
    10bc:	54414742 	strbpl	r4, [r1], #-1858	; 0xfffff8be
    10c0:	5f4b4c43 	svcpl	0x004b4c43
    10c4:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    10c8:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    10cc:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    10d0:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    10d4:	4c4c504e 	mcrrmi	0, 4, r5, ip, cr14
    10d8:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
    10dc:	4c435441 	cfstrdmi	mvd5, [r3], {65}	; 0x41
    10e0:	00745f4b 	rsbseq	r5, r4, fp, asr #30
    10e4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    10e8:	4c506870 	mrrcmi	8, 7, r6, r0, cr0
    10ec:	30435f4c 	subcc	r5, r3, ip, asr #30
    10f0:	72655000 	rsbvc	r5, r5, #0
    10f4:	50687069 	rsbpl	r7, r8, r9, rrx
    10f8:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
    10fc:	65500031 	ldrbvs	r0, [r0, #-49]	; 0xffffffcf
    1100:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1104:	5f4c4c50 	svcpl	0x004c4c50
    1108:	50003243 	andpl	r3, r0, r3, asr #4
    110c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1110:	4c4c5068 	mcrrmi	0, 6, r5, ip, cr8
    1114:	0033435f 	eorseq	r4, r3, pc, asr r3
    1118:	5f544c41 	svcpl	0x00544c41
    111c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1120:	505f5247 	subspl	r5, pc, r7, asr #4
    1124:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
    1128:	45505f4c 	ldrbmi	r5, [r0, #-3916]	; 0xfffff0b4
    112c:	53414252 	movtpl	r4, #4690	; 0x1252
    1130:	4b4c4345 	blmi	1311e4c <__cs3_heap_start+0x11f87ac>
    1134:	7000735f 	andvc	r7, r0, pc, asr r3
    1138:	635f6c6c 	cmpvs	pc, #108, 24	; 0x6c00
    113c:	41006766 	tstmi	r0, r6, ror #14
    1140:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1144:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1148:	44535f52 	ldrbmi	r5, [r3], #-3922	; 0xfffff0ae
    114c:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    1150:	4154535f 	cmpmi	r4, pc, asr r3
    1154:	00745f54 	rsbseq	r5, r4, r4, asr pc
    1158:	5f746c61 	svcpl	0x00746c61
    115c:	5f6b6c63 	svcpl	0x006b6c63
    1160:	636f6c63 	cmnvs	pc, #25344	; 0x6300
    1164:	69645f6b 	stmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1168:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    116c:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    1170:	58455f54 	stmdapl	r5, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1174:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1178:	41505f4b 	cmpmi	r0, fp, asr #30
    117c:	424d4152 	submi	r4, sp, #-2147483628	; 0x80000014
    1180:	5f4b4f4c 	svcpl	0x004b4f4c
    1184:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    1188:	58455f54 	stmdapl	r5, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    118c:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1190:	41505f4b 	cmpmi	r0, fp, asr #30
    1194:	424d4152 	submi	r4, sp, #-2147483628	; 0x80000014
    1198:	5f4b4f4c 	svcpl	0x004b4f4c
    119c:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    11a0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    11a4:	4e495f4b 	cdpmi	15, 4, cr5, cr9, cr11, {2}
    11a8:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    11ac:	43534f5f 	cmpmi	r3, #380	; 0x17c
    11b0:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
    11b4:	44535f54 	ldrbmi	r5, [r3], #-3924	; 0xfffff0ac
    11b8:	5f4d4152 	svcpl	0x004d4152
    11bc:	5f4c4c50 	svcpl	0x004c4c50
    11c0:	5f4b4c43 	svcpl	0x004b4c43
    11c4:	00505247 	subseq	r5, r0, r7, asr #4
    11c8:	7073336c 	rsbsvc	r3, r3, ip, ror #6
    11cc:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    11d0:	7073346c 	rsbsvc	r3, r3, ip, ror #8
    11d4:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    11d8:	6e69616d 	powvsez	f6, f1, #5.0
    11dc:	00766964 	rsbseq	r6, r6, r4, ror #18
    11e0:	5f544c41 	svcpl	0x00544c41
    11e4:	5f4b4c43 	svcpl	0x004b4c43
    11e8:	535f334c 	cmppl	pc, #76, 6	; 0x30000001
    11ec:	6c610050 	stclvs	0, cr0, [r1], #-320	; 0xfffffec0
    11f0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    11f4:	6c705f6b 	ldclvs	15, cr5, [r0], #-428	; 0xfffffe54
    11f8:	63765f6c 	cmnvs	r6, #108, 30	; 0x1b0
    11fc:	72665f6f 	rsbvc	r5, r6, #444	; 0x1bc
    1200:	675f7165 	ldrbvs	r7, [pc, -r5, ror #2]
    1204:	63007465 	movwvs	r7, #1125	; 0x465
    1208:	675f6b6c 	ldrbvs	r6, [pc, -ip, ror #22]
    120c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1210:	72646400 	rsbvc	r6, r4, #0, 8
    1214:	63737164 	cmnvs	r3, #100, 2
    1218:	41006b6c 	tstmi	r0, ip, ror #22
    121c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1220:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1224:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
    1228:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    122c:	414d455f 	cmpmi	sp, pc, asr r5
    1230:	4c433043 	mcrrmi	0, 4, r3, r3, cr3
    1234:	00735f4b 	rsbseq	r5, r3, fp, asr #30
    1238:	5f544c41 	svcpl	0x00544c41
    123c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1240:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 112c <__cs3_region_num+0x112a>
    1244:	504e4941 	subpl	r4, lr, r1, asr #18
    1248:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
    124c:	32534746 	subscc	r4, r3, #18350080	; 0x1180000
    1250:	45535546 	ldrbmi	r5, [r3, #-1350]	; 0xfffffaba
    1254:	4c433052 	mcrrmi	0, 5, r3, r3, cr2
    1258:	00745f4b 	rsbseq	r5, r4, fp, asr #30
    125c:	73676663 	cmnvc	r7, #103809024	; 0x6300000
    1260:	73756632 	cmnvc	r5, #52428800	; 0x3200000
    1264:	63307265 	teqvs	r0, #1342177286	; 0x50000006
    1268:	41006b6c 	tstmi	r0, ip, ror #22
    126c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1270:	495f4b4c 	ldmdbmi	pc, {r2, r3, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
    1274:	49505f4e 	ldmdbmi	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1278:	544a5f4e 	strbpl	r5, [sl], #-3918	; 0xfffff0b2
    127c:	41004741 	tstmi	r0, r1, asr #14
    1280:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1284:	555f4b4c 	ldrbpl	r4, [pc, #-2892]	; 740 <__cs3_region_num+0x73e>
    1288:	4f4e4b4e 	svcmi	0x004e4b4e
    128c:	41004e57 	tstmi	r0, r7, asr lr
    1290:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1294:	475f4b4c 	ldrbmi	r4, [pc, -ip, asr #22]
    1298:	50554f52 	subspl	r4, r5, r2, asr pc
    129c:	5741525f 	smlsldpl	r5, r1, pc, r2	; <UNPREDICTABLE>
    12a0:	4746435f 	smlsldmi	r4, r6, pc, r3	; <UNPREDICTABLE>
    12a4:	4100735f 	tstmi	r0, pc, asr r3
    12a8:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    12ac:	475f4b4c 	ldrbmi	r4, [pc, -ip, asr #22]
    12b0:	50554f52 	subspl	r4, r5, r2, asr pc
    12b4:	5741525f 	smlsldpl	r5, r1, pc, r2	; <UNPREDICTABLE>
    12b8:	4746435f 	smlsldmi	r4, r6, pc, r3	; <UNPREDICTABLE>
    12bc:	4100745f 	tstmi	r0, pc, asr r4
    12c0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    12c4:	475f4b4c 	ldrbmi	r4, [pc, -ip, asr #22]
    12c8:	50554f52 	subspl	r4, r5, r2, asr pc
    12cc:	5741525f 	smlsldpl	r5, r1, pc, r2	; <UNPREDICTABLE>
    12d0:	4746435f 	smlsldmi	r4, r6, pc, r3	; <UNPREDICTABLE>
    12d4:	6300755f 	movwvs	r7, #1375	; 0x55f
    12d8:	70615c3a 	rsbvc	r5, r1, sl, lsr ip
    12dc:	615c7370 	cmpvs	ip, r0, ror r3
    12e0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    12e4:	75715c61 	ldrbvc	r5, [r1, #-3169]!	; 0xfffff39f
    12e8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    12ec:	36315c73 			; <UNDEFINED> instruction: 0x36315c73
    12f0:	715c302e 	cmpvc	ip, lr, lsr #32
    12f4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    12f8:	2e2f7375 	mcrcs	3, 1, r7, cr15, cr5, {3}
    12fc:	6d652f2e 	stclvs	15, cr2, [r5, #-184]!	; 0xffffff48
    1300:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
    1304:	692f6465 	stmdbvs	pc!, {r0, r2, r5, r6, sl, sp, lr}	; <UNPREDICTABLE>
    1308:	6c612f70 	stclvs	15, cr2, [r1], #-448	; 0xfffffe40
    130c:	61726574 	cmnvs	r2, r4, ror r5
    1310:	7370682f 	cmnvc	r0, #3080192	; 0x2f0000
    1314:	746c612f 	strbtvc	r6, [ip], #-303	; 0xfffffed1
    1318:	5f617265 	svcpl	0x00617265
    131c:	2f737068 	svccs	0x00737068
    1320:	696c7768 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1324:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1328:	77682f63 	strbvc	r2, [r8, -r3, ror #30]!
    132c:	2f72676d 	svccs	0x0072676d
    1330:	5f636f73 	svcpl	0x00636f73
    1334:	615f7663 	cmpvs	pc, r3, ror #12
    1338:	6c612f76 	stclvs	15, cr2, [r1], #-472	; 0xfffffe28
    133c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1340:	5f6b636f 	svcpl	0x006b636f
    1344:	616e616d 	cmnvs	lr, sp, ror #2
    1348:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
    134c:	4c410063 	mcrrmi	0, 6, r0, r1, cr3
    1350:	43565f54 	cmpmi	r6, #84, 30	; 0x150
    1354:	48435f4f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1358:	4f4e5f47 	svcmi	0x004e5f47
    135c:	565f454e 	ldrbpl	r4, [pc], -lr, asr #10
    1360:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    1364:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1368:	4b4c435f 	blmi	13120ec <__cs3_heap_start+0x11f8a4c>
    136c:	4832465f 	ldmdami	r2!, {r0, r1, r2, r3, r4, r6, r9, sl, lr}
    1370:	5245505f 	subpl	r5, r5, #95	; 0x5f
    1374:	5f485049 	svcpl	0x00485049
    1378:	00464552 	subeq	r4, r6, r2, asr r5
    137c:	5f544c41 	svcpl	0x00544c41
    1380:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1384:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 1270 <__cs3_region_num+0x126e>
    1388:	504e4941 	subpl	r4, lr, r1, asr #18
    138c:	535f4c4c 	cmppl	pc, #76, 24	; 0x4c00
    1390:	5f544154 	svcpl	0x00544154
    1394:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    1398:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    139c:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    13a0:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    13a4:	4c4c504e 	mcrrmi	0, 4, r5, ip, cr14
    13a8:	4154535f 	cmpmi	r4, pc, asr r3
    13ac:	00745f54 	rsbseq	r5, r4, r4, asr pc
    13b0:	41524453 	cmpmi	r2, r3, asr r4
    13b4:	4c4c504d 	mcrrmi	0, 4, r5, ip, cr13
    13b8:	0030435f 	eorseq	r4, r0, pc, asr r3
    13bc:	41524453 	cmpmi	r2, r3, asr r4
    13c0:	4c4c504d 	mcrrmi	0, 4, r5, ip, cr13
    13c4:	0031435f 	eorseq	r4, r1, pc, asr r3
    13c8:	41524453 	cmpmi	r2, r3, asr r4
    13cc:	4c4c504d 	mcrrmi	0, 4, r5, ip, cr13
    13d0:	0032435f 	eorseq	r4, r2, pc, asr r3
    13d4:	696c6973 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    13d8:	00326469 	eorseq	r6, r2, r9, ror #8
    13dc:	5f544c41 	svcpl	0x00544c41
    13e0:	5f4b4c43 	svcpl	0x004b4c43
    13e4:	5f54554f 	svcpl	0x0054554f
    13e8:	5f4e4950 	svcpl	0x004e4950
    13ec:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    13f0:	4c43535f 	mcrrmi	3, 5, r5, r3, cr15
    13f4:	73616600 	cmnvc	r1, #0, 12
    13f8:	006e6574 	rsbeq	r6, lr, r4, ror r5
    13fc:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
    1400:	41006870 	tstmi	r0, r0, ror r8
    1404:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1408:	655f4b4c 	ldrbvs	r4, [pc, #-2892]	; 8c4 <__cs3_region_num+0x8c2>
    140c:	6e656400 	cdpvs	4, 6, cr6, cr5, cr0, {0}
    1410:	41006d6f 	tstmi	r0, pc, ror #26
    1414:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1418:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    141c:	414d5f52 	cmpmi	sp, r2, asr pc
    1420:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
    1424:	414d5f4c 	cmpmi	sp, ip, asr #30
    1428:	53514e49 	cmppl	r1, #1168	; 0x490
    142c:	4c434950 	mcrrmi	9, 5, r4, r3, cr0
    1430:	00745f4b 	rsbseq	r5, r4, fp, asr #30
    1434:	5f544c41 	svcpl	0x00544c41
    1438:	5f4f4356 	svcpl	0x004f4356
    143c:	5f474843 	svcpl	0x00474843
    1440:	48434f4e 	stmdami	r3, {r1, r2, r3, r6, r8, r9, sl, fp, lr}^
    1444:	45474e41 	strbmi	r4, [r7, #-3649]	; 0xfffff1bf
    1448:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    144c:	7073716e 	rsbsvc	r7, r3, lr, ror #2
    1450:	6b6c6369 	blvs	1b1a1fc <__cs3_heap_start+0x1a00b5c>
    1454:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1458:	4b4c435f 	blmi	13121dc <__cs3_heap_start+0x11f8b3c>
    145c:	5f52474d 	svcpl	0x0052474d
    1460:	4e49414d 	dvfmiem	f4, f1, #5.0
    1464:	5f4c4c50 	svcpl	0x004c4c50
    1468:	5253344c 	subspl	r3, r3, #76, 8	; 0x4c000000
    146c:	00745f43 	rsbseq	r5, r4, r3, asr #30
    1470:	5f544c41 	svcpl	0x00544c41
    1474:	5f4b4c43 	svcpl	0x004b4c43
    1478:	444e414e 	strbmi	r4, [lr], #-334	; 0xfffffeb2
    147c:	6100585f 	tstvs	r0, pc, asr r8
    1480:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
    1484:	705f6b6c 	subsvc	r6, pc, ip, ror #22
    1488:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
    148c:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
    1490:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
    1494:	65735f64 	ldrbvs	r5, [r3, #-3940]!	; 0xfffff09c
    1498:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    149c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    14a0:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
    14a4:	5f6b636f 	svcpl	0x006b636f
    14a8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    14ac:	4100656c 	tstmi	r0, ip, ror #10
    14b0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    14b4:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    14b8:	414d5f52 	cmpmi	sp, r2, asr pc
    14bc:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
    14c0:	52545f4c 	subspl	r5, r4, #76, 30	; 0x130
    14c4:	44454341 	strbmi	r4, [r5], #-833	; 0xfffffcbf
    14c8:	745f5649 	ldrbvc	r5, [pc], #-1609	; 14d0 <__cs3_region_num+0x14ce>
    14cc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    14d0:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    14d4:	4c505f4e 	mrrcmi	15, 4, r5, r0, cr14
    14d8:	4c435f4c 	mcrrmi	15, 4, r5, r3, cr12
    14dc:	52475f4b 	subpl	r5, r7, #300	; 0x12c
    14e0:	4c410050 	mcrrmi	0, 5, r0, r1, cr0
    14e4:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    14e8:	344c5f4b 	strbcc	r5, [ip], #-3915	; 0xfffff0b5
    14ec:	00504d5f 	subseq	r4, r0, pc, asr sp
    14f0:	6f697067 	svcvs	0x00697067
    14f4:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    14f8:	5f544c41 	svcpl	0x00544c41
    14fc:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1500:	505f5247 	subspl	r5, pc, r7, asr #4
    1504:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
    1508:	61725f4c 	cmnvs	r2, ip, asr #30
    150c:	00735f77 	rsbseq	r5, r3, r7, ror pc
    1510:	5f544c41 	svcpl	0x00544c41
    1514:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1518:	505f5247 	subspl	r5, pc, r7, asr #4
    151c:	4c505245 	lfmmi	f5, 2, [r0], {69}	; 0x45
    1520:	61725f4c 	cmnvs	r2, ip, asr #30
    1524:	00745f77 	rsbseq	r5, r4, r7, ror pc
    1528:	5f746c61 	svcpl	0x00746c61
    152c:	6d6b6c63 	stclvs	12, cr6, [fp, #-396]!	; 0xfffffe74
    1530:	695f7267 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1534:	61765f73 	cmnvs	r6, r3, ror pc
    1538:	6f6d5f6c 	svcvs	0x006d5f6c
    153c:	6f6c7564 	svcvs	0x006c7564
    1540:	41006e5f 	tstmi	r0, pc, asr lr
    1544:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1548:	505f4b4c 	subspl	r4, pc, ip, asr #22
    154c:	50495245 	subpl	r5, r9, r5, asr #4
    1550:	41524548 	cmpmi	r2, r8, asr #10
    1554:	4c505f4c 	mrrcmi	15, 4, r5, r0, cr12
    1558:	31435f4c 	cmpcc	r3, ip, asr #30
    155c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1560:	4b4c435f 	blmi	13122e4 <__cs3_heap_start+0x11f8c44>
    1564:	5245505f 	subpl	r5, r5, #95	; 0x5f
    1568:	45485049 	strbmi	r5, [r8, #-73]	; 0xffffffb7
    156c:	5f4c4152 	svcpl	0x004c4152
    1570:	5f4c4c50 	svcpl	0x004c4c50
    1574:	41003243 	tstmi	r0, r3, asr #4
    1578:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    157c:	505f4b4c 	subspl	r4, pc, ip, asr #22
    1580:	50495245 	subpl	r5, r9, r5, asr #4
    1584:	41524548 	cmpmi	r2, r8, asr #10
    1588:	4c505f4c 	mrrcmi	15, 4, r5, r0, cr12
    158c:	33435f4c 	movtcc	r5, #16204	; 0x3f4c
    1590:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1594:	4b4c435f 	blmi	1312318 <__cs3_heap_start+0x11f8c78>
    1598:	5245505f 	subpl	r5, r5, #95	; 0x5f
    159c:	45485049 	strbmi	r5, [r8, #-73]	; 0xffffffb7
    15a0:	5f4c4152 	svcpl	0x004c4152
    15a4:	5f4c4c50 	svcpl	0x004c4c50
    15a8:	41003443 	tstmi	r0, r3, asr #8
    15ac:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    15b0:	505f4b4c 	subspl	r4, pc, ip, asr #22
    15b4:	50495245 	subpl	r5, r9, r5, asr #4
    15b8:	41524548 	cmpmi	r2, r8, asr #10
    15bc:	4c505f4c 	mrrcmi	15, 4, r5, r0, cr12
    15c0:	35435f4c 	strbcc	r5, [r3, #-3916]	; 0xfffff0b4
    15c4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    15c8:	6b6c635f 	blvs	1b1a34c <__cs3_heap_start+0x1a00cac>
    15cc:	756f735f 	strbvc	r7, [pc, #-863]!	; 1275 <__cs3_region_num+0x1273>
    15d0:	5f656372 	svcpl	0x00656372
    15d4:	00746573 	rsbseq	r6, r4, r3, ror r5
    15d8:	72617567 	rsbvc	r7, r1, #432013312	; 0x19c00000
    15dc:	6e616264 	cdpvs	2, 6, cr6, cr1, cr4, {3}
    15e0:	4c410064 	mcrrmi	0, 6, r0, r1, cr4
    15e4:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    15e8:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    15ec:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    15f0:	4c4c504e 	mcrrmi	0, 4, r5, ip, cr14
    15f4:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xfffff2a1
    15f8:	5f4b4c43 	svcpl	0x004b4c43
    15fc:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    1600:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1604:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    1608:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    160c:	4c4c504e 	mcrrmi	0, 4, r5, ip, cr14
    1610:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xfffff2a1
    1614:	5f4b4c43 	svcpl	0x004b4c43
    1618:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    161c:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1620:	41505f4b 	cmpmi	r0, fp, asr #30
    1624:	534d4152 	movtpl	r4, #53586	; 0xd152
    1628:	7000745f 	andvc	r7, r0, pc, asr r4
    162c:	66696873 			; <UNDEFINED> instruction: 0x66696873
    1630:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1634:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1638:	4c505f4b 	mrrcmi	15, 4, r5, r0, cr11
    163c:	46435f4c 	strbmi	r5, [r3], -ip, asr #30
    1640:	00735f47 	rsbseq	r5, r3, r7, asr #30
    1644:	5f544c41 	svcpl	0x00544c41
    1648:	5f4b4c43 	svcpl	0x004b4c43
    164c:	5f4c4c50 	svcpl	0x004c4c50
    1650:	5f474643 	svcpl	0x00474643
    1654:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1658:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    165c:	53515f4b 	cmppl	r1, #300	; 0x12c
    1660:	61004950 	tstvs	r0, r0, asr r9
    1664:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
    1668:	655f6b6c 	ldrbvs	r6, [pc, #-2924]	; b04 <__cs3_region_num+0xb02>
    166c:	635f7478 	cmpvs	pc, #120, 8	; 0x78000000
    1670:	665f6b6c 	ldrbvs	r6, [pc], -ip, ror #22
    1674:	5f716572 	svcpl	0x00716572
    1678:	00746573 	rsbseq	r6, r4, r3, ror r5
    167c:	5f746c61 	svcpl	0x00746c61
    1680:	5f6c6c70 	svcpl	0x006c6c70
    1684:	5f6b6c63 	svcpl	0x006b6c63
    1688:	61726170 	cmnvs	r2, r0, ror r1
    168c:	6f6c626d 	svcvs	0x006c626d
    1690:	4c41006b 	mcrrmi	0, 6, r0, r1, cr11
    1694:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1698:	45505f4b 	ldrbmi	r5, [r0, #-3915]	; 0xfffff0b5
    169c:	48504952 	ldmdami	r0, {r1, r4, r6, r8, fp, lr}^
    16a0:	4c415245 	sfmmi	f5, 2, [r1], {69}	; 0x45
    16a4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    16a8:	0030435f 	eorseq	r4, r0, pc, asr r3
    16ac:	5f544c41 	svcpl	0x00544c41
    16b0:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
    16b4:	505f4850 	subspl	r4, pc, r0, asr r8	; <UNPREDICTABLE>
    16b8:	4c5f4c4c 	mrrcmi	12, 4, r4, pc, cr12	; <UNPREDICTABLE>
    16bc:	5f4b434f 	svcpl	0x004b434f
    16c0:	54534f4c 	ldrbpl	r4, [r3], #-3916	; 0xfffff0b4
    16c4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    16c8:	4b4c435f 	blmi	131244c <__cs3_heap_start+0x11f8dac>
    16cc:	4632485f 			; <UNDEFINED> instruction: 0x4632485f
    16d0:	4553555f 	ldrbmi	r5, [r3, #-1375]	; 0xfffffaa1
    16d4:	70003152 	andvc	r3, r0, r2, asr r1
    16d8:	69646572 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    16dc:	4c410076 	mcrrmi	0, 7, r0, r1, cr6
    16e0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    16e4:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    16e8:	5245505f 	subpl	r5, r5, #95	; 0x5f
    16ec:	5f4c4c50 	svcpl	0x004c4c50
    16f0:	735f4e45 	cmpvc	pc, #1104	; 0x450
    16f4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    16f8:	4b4c435f 	blmi	131247c <__cs3_heap_start+0x11f8ddc>
    16fc:	5f52474d 	svcpl	0x0052474d
    1700:	50524550 	subspl	r4, r2, r0, asr r5
    1704:	455f4c4c 	ldrbmi	r4, [pc, #-3148]	; ac0 <__cs3_region_num+0xabe>
    1708:	00745f4e 	rsbseq	r5, r4, lr, asr #30
    170c:	5f544c41 	svcpl	0x00544c41
    1710:	5f4b4c43 	svcpl	0x004b4c43
    1714:	4d5f344c 	cfldrdmi	mvd3, [pc, #-304]	; 15ec <__cs3_region_num+0x15ea>
    1718:	004e4941 	subeq	r4, lr, r1, asr #18
    171c:	69707371 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, ip, sp, lr}^
    1720:	6b6c6300 	blvs	1b1a328 <__cs3_heap_start+0x1a00c88>
    1724:	6d6f645f 	cfstrdvs	mvd6, [pc, #-380]!	; 15b0 <__cs3_region_num+0x15ae>
    1728:	006e6961 	rsbeq	r6, lr, r1, ror #18
    172c:	5f544c41 	svcpl	0x00544c41
    1730:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1734:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
    1738:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
    173c:	54435f4c 	strbpl	r5, [r3], #-3916	; 0xfffff0b4
    1740:	00735f4c 	rsbseq	r5, r3, ip, asr #30
    1744:	5f544c41 	svcpl	0x00544c41
    1748:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    174c:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
    1750:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
    1754:	54435f4c 	strbpl	r5, [r3], #-3916	; 0xfffff0b4
    1758:	00745f4c 	rsbseq	r5, r4, ip, asr #30
    175c:	5f544c41 	svcpl	0x00544c41
    1760:	5f4b4c43 	svcpl	0x004b4c43
    1764:	304e4143 	subcc	r4, lr, r3, asr #2
    1768:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    176c:	4b4c435f 	blmi	13124f0 <__cs3_heap_start+0x11f8e50>
    1770:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
    1774:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    1778:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    177c:	32465f4b 	subcc	r5, r6, #300	; 0x12c
    1780:	44535f48 	ldrbmi	r5, [r3], #-3912	; 0xfffff0b8
    1784:	5f4d4152 	svcpl	0x004d4152
    1788:	00464552 	subeq	r4, r6, r2, asr r5
    178c:	5f544c41 	svcpl	0x00544c41
    1790:	5f4b4c43 	svcpl	0x004b4c43
    1794:	5f524444 	svcpl	0x00524444
    1798:	00535144 	subseq	r5, r3, r4, asr #2
    179c:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    17a0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    17a4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
    17a8:	00745f71 	rsbseq	r5, r4, r1, ror pc
    17ac:	5f746c61 	svcpl	0x00746c61
    17b0:	5f6c6c70 	svcpl	0x006c6c70
    17b4:	72746e63 	rsbsvc	r6, r4, #1584	; 0x630
    17b8:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    17bc:	71657266 	cmnvc	r5, r6, ror #4
    17c0:	69614d00 	stmdbvs	r1!, {r8, sl, fp, lr}^
    17c4:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
    17c8:	0030435f 	eorseq	r4, r0, pc, asr r3
    17cc:	6e69614d 	powvsem	f6, f1, #5.0
    17d0:	5f4c4c50 	svcpl	0x004c4c50
    17d4:	4d003143 	stfmis	f3, [r0, #-268]	; 0xfffffef4
    17d8:	506e6961 	rsbpl	r6, lr, r1, ror #18
    17dc:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
    17e0:	614d0032 	cmpvs	sp, r2, lsr r0
    17e4:	4c506e69 	mrrcmi	14, 6, r6, r0, cr9
    17e8:	33435f4c 	movtcc	r5, #16204	; 0x3f4c
    17ec:	69614d00 	stmdbvs	r1!, {r8, sl, fp, lr}^
    17f0:	4c4c506e 	mcrrmi	0, 6, r5, ip, cr14
    17f4:	0034435f 	eorseq	r4, r4, pc, asr r3
    17f8:	6e69614d 	powvsem	f6, f1, #5.0
    17fc:	5f4c4c50 	svcpl	0x004c4c50
    1800:	41003543 	tstmi	r0, r3, asr #10
    1804:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1808:	535f4b4c 	cmppl	pc, #76, 22	; 0x13000
    180c:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    1810:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1814:	0033435f 	eorseq	r4, r3, pc, asr r3
    1818:	5f544c41 	svcpl	0x00544c41
    181c:	5f4b4c43 	svcpl	0x004b4c43
    1820:	41524453 	cmpmi	r2, r3, asr r4
    1824:	4c505f4d 	mrrcmi	15, 4, r5, r0, cr13
    1828:	34435f4c 	strbcc	r5, [r3], #-3916	; 0xfffff0b4
    182c:	6d346c00 	ldcvs	12, cr6, [r4, #-0]
    1830:	636e6961 	cmnvs	lr, #1589248	; 0x184000
    1834:	63006b6c 	movwvs	r6, #2924	; 0xb6c
    1838:	63316e61 	teqvs	r1, #1552	; 0x610
    183c:	41006b6c 	tstmi	r0, ip, ror #22
    1840:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1844:	445f4b4c 	ldrbmi	r4, [pc], #-2892	; 184c <__cs3_region_num+0x184a>
    1848:	445f5244 	ldrbmi	r5, [pc], #-580	; 1850 <__cs3_region_num+0x184e>
    184c:	346c0051 	strbtcc	r0, [ip], #-81	; 0xffffffaf
    1850:	4100706d 	tstmi	r0, sp, rrx
    1854:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1858:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    185c:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
    1860:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    1864:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
    1868:	4100735f 	tstmi	r0, pc, asr r3
    186c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1870:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1874:	45505f52 	ldrbmi	r5, [r0, #-3922]	; 0xfffff0ae
    1878:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    187c:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
    1880:	4100745f 	tstmi	r0, pc, asr r4
    1884:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1888:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; 1760 <__cs3_region_num+0x175e>
    188c:	5f4e4941 	svcpl	0x004e4941
    1890:	5f4c4c50 	svcpl	0x004c4c50
    1894:	41003043 	tstmi	r0, r3, asr #32
    1898:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    189c:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; 1774 <__cs3_region_num+0x1772>
    18a0:	5f4e4941 	svcpl	0x004e4941
    18a4:	5f4c4c50 	svcpl	0x004c4c50
    18a8:	41003143 	tstmi	r0, r3, asr #2
    18ac:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    18b0:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; 1788 <__cs3_region_num+0x1786>
    18b4:	5f4e4941 	svcpl	0x004e4941
    18b8:	5f4c4c50 	svcpl	0x004c4c50
    18bc:	41003243 	tstmi	r0, r3, asr #4
    18c0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    18c4:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; 179c <__cs3_region_num+0x179a>
    18c8:	5f4e4941 	svcpl	0x004e4941
    18cc:	5f4c4c50 	svcpl	0x004c4c50
    18d0:	63003343 	movwvs	r3, #835	; 0x343
    18d4:	6c636766 	stclvs	7, cr6, [r3], #-408	; 0xfffffe68
    18d8:	6550006b 	ldrbvs	r0, [r0, #-107]	; 0xffffff95
    18dc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    18e0:	5f4c4c50 	svcpl	0x004c4c50
    18e4:	41003443 	tstmi	r0, r3, asr #8
    18e8:	505f544c 	subspl	r5, pc, ip, asr #8
    18ec:	435f4c4c 	cmpmi	pc, #76, 24	; 0x4c00
    18f0:	5f52544e 	svcpl	0x0052544e
    18f4:	51455246 	cmppl	r5, r6, asr #4
    18f8:	5f58414d 	svcpl	0x0058414d
    18fc:	65500074 	ldrbvs	r0, [r0, #-116]	; 0xffffff8c
    1900:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1904:	5f4c4c50 	svcpl	0x004c4c50
    1908:	41003543 	tstmi	r0, r3, asr #10
    190c:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1910:	435f4b4c 	cmpmi	pc, #76, 22	; 0x13000
    1914:	41004746 	tstmi	r0, r6, asr #14
    1918:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    191c:	4d5f4b4c 	vldrmi	d20, [pc, #-304]	; 17f4 <__cs3_region_num+0x17f2>
    1920:	505f5550 	subspl	r5, pc, r0, asr r5	; <UNPREDICTABLE>
    1924:	50495245 	subpl	r5, r9, r5, asr #4
    1928:	70670048 	rsbvc	r0, r7, r8, asr #32
    192c:	69646f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1930:	6e690076 	mcrvs	0, 3, r0, cr9, cr6, {3}
    1934:	66747570 			; <UNDEFINED> instruction: 0x66747570
    1938:	00716572 	rsbseq	r6, r1, r2, ror r5
    193c:	7274756f 	rsbsvc	r7, r4, #465567744	; 0x1bc00000
    1940:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1944:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1948:	70726473 	rsbsvc	r6, r2, r3, ror r4
    194c:	72676c6c 	rsbvc	r6, r7, #108, 24	; 0x6c00
    1950:	4c410070 	mcrrmi	0, 7, r0, r1, cr0
    1954:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1958:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    195c:	5245505f 	subpl	r5, r5, #95	; 0x5f
    1960:	5f4c4c50 	svcpl	0x004c4c50
    1964:	4e524550 	mrcmi	5, 2, r4, cr2, cr0, {2}
    1968:	53444e41 	movtpl	r4, #20033	; 0x4e41
    196c:	434d4d44 	movtmi	r4, #56644	; 0xdd44
    1970:	5f4b4c43 	svcpl	0x004b4c43
    1974:	65700074 	ldrbvs	r0, [r0, #-116]!	; 0xffffff8c
    1978:	6e616e72 	mcrvs	14, 3, r6, cr1, cr2, {3}
    197c:	6d647364 	stclvs	3, cr7, [r4, #-400]!	; 0xfffffe70
    1980:	6c63636d 	stclvs	3, cr6, [r3], #-436	; 0xfffffe4c
    1984:	6264006b 	rsbvs	r0, r4, #107	; 0x6b
    1988:	6b6c6367 	blvs	1b1a72c <__cs3_heap_start+0x1a0108c>
    198c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1990:	6b6c635f 	blvs	1b1a714 <__cs3_heap_start+0x1a01074>
    1994:	6f72675f 	svcvs	0x0072675f
    1998:	635f7075 	cmpvs	pc, #117	; 0x75
    199c:	725f6766 	subsvc	r6, pc, #26738688	; 0x1980000
    19a0:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
    19a4:	73007465 	movwvc	r7, #1125	; 0x465
    19a8:	636d6d64 	cmnvs	sp, #100, 26	; 0x1900
    19ac:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    19b0:	6b6c635f 	blvs	1b1a734 <__cs3_heap_start+0x1a01094>
    19b4:	5f73695f 	svcpl	0x0073695f
    19b8:	735f6e69 	cmpvc	pc, #1680	; 0x690
    19bc:	5f656661 	svcpl	0x00656661
    19c0:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    19c4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    19c8:	4b4c435f 	blmi	131274c <__cs3_heap_start+0x11f90ac>
    19cc:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    19d0:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    19d4:	4d44535f 	stclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    19d8:	5000434d 	andpl	r4, r0, sp, asr #6
    19dc:	70697265 	rsbvc	r7, r9, r5, ror #4
    19e0:	4c4c5068 	mcrrmi	0, 6, r5, ip, cr8
    19e4:	3030385f 	eorscc	r3, r0, pc, asr r8
    19e8:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    19ec:	4c410064 	mcrrmi	0, 6, r0, r1, cr4
    19f0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    19f4:	4e495f4b 	cdpmi	15, 4, cr5, cr9, cr11, {2}
    19f8:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    19fc:	414d455f 	cmpmi	sp, pc, asr r5
    1a00:	525f3143 	subspl	r3, pc, #-1073741808	; 0xc0000010
    1a04:	4c410058 	mcrrmi	0, 5, r0, r1, cr8
    1a08:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1a0c:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    1a10:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    1a14:	4c4c504e 	mcrrmi	0, 4, r5, ip, cr14
    1a18:	5f4e455f 	svcpl	0x004e455f
    1a1c:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
    1a20:	70737172 	rsbsvc	r7, r3, r2, ror r1
    1a24:	6b6c6369 	blvs	1b1a7d0 <__cs3_heap_start+0x1a01130>
    1a28:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1a2c:	6b6c635f 	blvs	1b1a7b0 <__cs3_heap_start+0x1a01110>
    1a30:	6c6c705f 	stclvs	0, cr7, [ip], #-380	; 0xfffffe84
    1a34:	6f63765f 	svcvs	0x0063765f
    1a38:	6766635f 			; <UNDEFINED> instruction: 0x6766635f
    1a3c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1a40:	61776200 	cmnvs	r7, r0, lsl #4
    1a44:	67006a64 	strvs	r6, [r0, -r4, ror #20]
    1a48:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
    1a4c:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
    1a50:	6d650064 	stclvs	0, cr0, [r5, #-400]!	; 0xfffffe70
    1a54:	63316361 	teqvs	r1, #-2080374783	; 0x84000001
    1a58:	73006b6c 	movwvc	r6, #2924	; 0xb6c
    1a5c:	73756632 	cmnvc	r5, #52428800	; 0x3200000
    1a60:	63317265 	teqvs	r1, #1342177286	; 0x50000006
    1a64:	74006b6c 	strvc	r6, [r0], #-2924	; 0xfffff494
    1a68:	6f656d69 	svcvs	0x00656d69
    1a6c:	41007475 	tstmi	r0, r5, ror r4
    1a70:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1a74:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1a78:	44535f52 	ldrbmi	r5, [r3], #-3922	; 0xfffff0ae
    1a7c:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    1a80:	5244445f 	subpl	r4, r4, #1593835520	; 0x5f000000
    1a84:	4c435144 	stfmie	f5, [r3], {68}	; 0x44
    1a88:	00735f4b 	rsbseq	r5, r3, fp, asr #30
    1a8c:	5f544c41 	svcpl	0x00544c41
    1a90:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1a94:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 1980 <__cs3_region_num+0x197e>
    1a98:	504e4941 	subpl	r4, lr, r1, asr #18
    1a9c:	565f4c4c 	ldrbpl	r4, [pc], -ip, asr #24
    1aa0:	735f4f43 	cmpvc	pc, #268	; 0x10c
    1aa4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1aa8:	4b4c435f 	blmi	131282c <__cs3_heap_start+0x11f918c>
    1aac:	5f52474d 	svcpl	0x0052474d
    1ab0:	4e49414d 	dvfmiem	f4, f1, #5.0
    1ab4:	5f4c4c50 	svcpl	0x004c4c50
    1ab8:	5f4f4356 	svcpl	0x004f4356
    1abc:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    1ac0:	43565f54 	cmpmi	r6, #84, 30	; 0x150
    1ac4:	48435f4f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1ac8:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xfffff0b9
    1acc:	5f4d4f4e 	svcpl	0x004d4f4e
    1ad0:	00505942 	subseq	r5, r0, r2, asr #18
    1ad4:	6874656d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    1ad8:	4100646f 	tstmi	r0, pc, ror #8
    1adc:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1ae0:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1ae4:	44535f52 	ldrbmi	r5, [r3], #-3922	; 0xfffff0ae
    1ae8:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    1aec:	4100735f 	tstmi	r0, pc, asr r3
    1af0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1af4:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1af8:	44535f52 	ldrbmi	r5, [r3], #-3922	; 0xfffff0ae
    1afc:	4c4c5052 	mcrrmi	0, 5, r5, ip, cr2
    1b00:	7600745f 			; <UNDEFINED> instruction: 0x7600745f
    1b04:	64616f63 	strbtvs	r6, [r1], #-3939	; 0xfffff09d
    1b08:	41007264 	tstmi	r0, r4, ror #4
    1b0c:	505f544c 	subspl	r5, pc, ip, asr #8
    1b10:	50495245 	subpl	r5, r9, r5, asr #4
    1b14:	4c505f48 	mrrcmi	15, 4, r5, r0, cr8
    1b18:	4f4c5f4c 	svcmi	0x004c5f4c
    1b1c:	415f4b43 	cmpmi	pc, r3, asr #22
    1b20:	00564843 	subseq	r4, r6, r3, asr #16
    1b24:	5f544c41 	svcpl	0x00544c41
    1b28:	5f4f4356 	svcpl	0x004f4356
    1b2c:	5f474843 	svcpl	0x00474843
    1b30:	5f4d554e 	svcpl	0x004d554e
    1b34:	4f4e4544 	svcmi	0x004e4544
    1b38:	614d004d 	cmpvs	sp, sp, asr #32
    1b3c:	4c506e69 	mrrcmi	14, 6, r6, r0, cr9
    1b40:	30385f4c 	eorscc	r5, r8, ip, asr #30
    1b44:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    1b48:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1b4c:	6c705f6b 	ldclvs	15, cr5, [r0], #-428	; 0xfffffe54
    1b50:	75675f6c 	strbvc	r5, [r7, #-3948]!	; 0xfffff094
    1b54:	5f647261 	svcpl	0x00647261
    1b58:	646e6162 	strbtvs	r6, [lr], #-354	; 0xfffffe9e
    1b5c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1b60:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1b64:	4b4c435f 	blmi	13128e8 <__cs3_heap_start+0x11f9248>
    1b68:	5f52474d 	svcpl	0x0052474d
    1b6c:	50524550 	subspl	r4, r2, r0, asr r5
    1b70:	505f4c4c 	subspl	r4, pc, ip, asr #24
    1b74:	41425245 	cmpmi	r2, r5, asr #4
    1b78:	4c434553 	cfstr64mi	mvdx4, [r3], {83}	; 0x53
    1b7c:	00745f4b 	rsbseq	r5, r4, fp, asr #30
    1b80:	64617762 	strbtvs	r7, [r1], #-1890	; 0xfffff89e
    1b84:	006e656a 	rsbeq	r6, lr, sl, ror #10
    1b88:	5f666572 	svcpl	0x00666572
    1b8c:	006b6c63 	rsbeq	r6, fp, r3, ror #24
    1b90:	5f544c41 	svcpl	0x00544c41
    1b94:	5f4b4c43 	svcpl	0x004b4c43
    1b98:	5f495053 	svcpl	0x00495053
    1b9c:	4c41004d 	mcrrmi	0, 4, r0, r1, cr13
    1ba0:	4c435f54 	mcrrmi	15, 5, r5, r3, cr4
    1ba4:	52474d4b 	subpl	r4, r7, #4800	; 0x12c0
    1ba8:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    1bac:	4c4c504e 	mcrrmi	0, 4, r5, ip, cr14
    1bb0:	4100735f 	tstmi	r0, pc, asr r3
    1bb4:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1bb8:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1bbc:	414d5f52 	cmpmi	sp, r2, asr pc
    1bc0:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
    1bc4:	00745f4c 	rsbseq	r5, r4, ip, asr #30
    1bc8:	5f544c41 	svcpl	0x00544c41
    1bcc:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1bd0:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
    1bd4:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
    1bd8:	61725f4c 	cmnvs	r2, ip, asr #30
    1bdc:	00745f77 	rsbseq	r5, r4, r7, ror pc
    1be0:	5f544c41 	svcpl	0x00544c41
    1be4:	5f4b4c43 	svcpl	0x004b4c43
    1be8:	5f54554f 	svcpl	0x0054554f
    1bec:	5f4e4950 	svcpl	0x004e4950
    1bf0:	43414d45 	movtmi	r4, #7493	; 0x1d45
    1bf4:	58545f30 	ldmdapl	r4, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1bf8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1bfc:	6b6c635f 	blvs	1b1a980 <__cs3_heap_start+0x1a012e0>
    1c00:	756f735f 	strbvc	r7, [pc, #-863]!	; 18a9 <__cs3_region_num+0x18a7>
    1c04:	5f656372 	svcpl	0x00656372
    1c08:	00746567 	rsbseq	r6, r4, r7, ror #10
    1c0c:	5f544c41 	svcpl	0x00544c41
    1c10:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1c14:	4d5f5247 	lfmmi	f5, 2, [pc, #-284]	; 1b00 <__cs3_region_zero_size_ram+0xb8>
    1c18:	504e4941 	subpl	r4, lr, r1, asr #18
    1c1c:	4d5f4c4c 	ldclmi	12, cr4, [pc, #-304]	; 1af4 <__cs3_region_zero_size_ram+0xac>
    1c20:	514e4941 	cmppl	lr, r1, asr #18
    1c24:	43495053 	movtmi	r5, #36947	; 0x9053
    1c28:	735f4b4c 	cmpvc	pc, #76, 22	; 0x13000
    1c2c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1c30:	4b4c435f 	blmi	13129b4 <__cs3_heap_start+0x11f9314>
    1c34:	4742445f 	smlsldmi	r4, r2, pc, r4	; <UNPREDICTABLE>
    1c38:	0054415f 	subseq	r4, r4, pc, asr r1
    1c3c:	5f544c41 	svcpl	0x00544c41
    1c40:	5f4b4c43 	svcpl	0x004b4c43
    1c44:	5f4c4c50 	svcpl	0x004c4c50
    1c48:	5f4f4356 	svcpl	0x004f4356
    1c4c:	5f474843 	svcpl	0x00474843
    1c50:	4854454d 	ldmdami	r4, {r0, r2, r3, r6, r8, sl, lr}^
    1c54:	655f444f 	ldrbvs	r4, [pc, #-1103]	; 180d <__cs3_region_num+0x180b>
    1c58:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1c5c:	4b4c435f 	blmi	13129e0 <__cs3_heap_start+0x11f9340>
    1c60:	5244445f 	subpl	r4, r4, #1593835520	; 0x5f000000
    1c64:	5f58325f 	svcpl	0x0058325f
    1c68:	00535144 	subseq	r5, r3, r4, asr #2
    1c6c:	5f746c61 	svcpl	0x00746c61
    1c70:	5f6b6c63 	svcpl	0x006b6c63
    1c74:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
    1c78:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1c7c:	5f656c74 	svcpl	0x00656c74
    1c80:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    1c84:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    1c88:	6c637864 	stclvs	8, cr7, [r3], #-400	; 0xfffffe70
    1c8c:	6c61006b 	stclvs	0, cr0, [r1], #-428	; 0xfffffe54
    1c90:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1c94:	6c635f6b 	stclvs	15, cr5, [r3], #-428	; 0xfffffe54
    1c98:	72676d6b 	rsbvc	r6, r7, #6848	; 0x1ac0
    1c9c:	696e755f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    1ca0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1ca4:	5f746c61 	svcpl	0x00746c61
    1ca8:	5f6b6c63 	svcpl	0x006b6c63
    1cac:	5f747865 	svcpl	0x00747865
    1cb0:	5f6b6c63 	svcpl	0x006b6c63
    1cb4:	71657266 	cmnvc	r5, r6, ror #4
    1cb8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1cbc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1cc0:	4b4c435f 	blmi	1312a44 <__cs3_heap_start+0x11f93a4>
    1cc4:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    1cc8:	4c505f4e 	mrrcmi	15, 4, r5, r0, cr14
    1ccc:	35435f4c 	strbcc	r5, [r3, #-3916]	; 0xfffff0b4
    1cd0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1cd4:	4b4c435f 	blmi	1312a58 <__cs3_heap_start+0x11f93b8>
    1cd8:	5f4e495f 	svcpl	0x004e495f
    1cdc:	5f4e4950 	svcpl	0x004e4950
    1ce0:	3143534f 	cmpcc	r3, pc, asr #6
    1ce4:	6b6c6300 	blvs	1b1a8ec <__cs3_heap_start+0x1a0124c>
    1ce8:	73707267 	cmnvc	r0, #1879048198	; 0x70000006
    1cec:	61006c65 	tstvs	r0, r5, ror #24
    1cf0:	635f746c 	cmpvs	pc, #108, 8	; 0x6c000000
    1cf4:	705f6b6c 	subsvc	r6, pc, ip, ror #22
    1cf8:	765f6c6c 	ldrbvc	r6, [pc], -ip, ror #24
    1cfc:	635f6f63 	cmpvs	pc, #396	; 0x18c
    1d00:	6d5f6768 	ldclvs	7, cr6, [pc, #-416]	; 1b68 <__cs3_region_zero_size_ram+0x120>
    1d04:	6f687465 	svcvs	0x00687465
    1d08:	675f7364 	ldrbvs	r7, [pc, -r4, ror #6]
    1d0c:	41007465 	tstmi	r0, r5, ror #8
    1d10:	535f544c 	cmppl	pc, #76, 8	; 0x4c000000
    1d14:	505f5244 	subspl	r5, pc, r4, asr #4
    1d18:	4c5f4c4c 	mrrcmi	12, 4, r4, pc, cr12	; <UNPREDICTABLE>
    1d1c:	5f4b434f 	svcpl	0x004b434f
    1d20:	54534f4c 	ldrbpl	r4, [r3], #-3916	; 0xfffff0b4
    1d24:	67626400 	strbvs	r6, [r2, -r0, lsl #8]!
    1d28:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
    1d2c:	6b6c6365 	blvs	1b1aac8 <__cs3_heap_start+0x1a01428>
    1d30:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d34:	4b4c435f 	blmi	1312ab8 <__cs3_heap_start+0x11f9418>
    1d38:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    1d3c:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    1d40:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    1d44:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
    1d48:	4c41004c 	mcrrmi	0, 4, r0, r1, cr12
    1d4c:	45505f54 	ldrbmi	r5, [r0, #-3924]	; 0xfffff0ac
    1d50:	48504952 	ldmdami	r0, {r1, r4, r6, r8, fp, lr}^
    1d54:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1d58:	4b4c435f 	blmi	1312adc <__cs3_heap_start+0x11f943c>
    1d5c:	5052475f 	subspl	r4, r2, pc, asr r7
    1d60:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1d64:	6b6c635f 	blvs	1b1aae8 <__cs3_heap_start+0x1a01448>
    1d68:	7669645f 			; <UNDEFINED> instruction: 0x7669645f
    1d6c:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1d70:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1d74:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1d78:	4b4c435f 	blmi	1312afc <__cs3_heap_start+0x11f945c>
    1d7c:	5f52474d 	svcpl	0x0052474d
    1d80:	50524453 	subspl	r4, r2, r3, asr r4
    1d84:	455f4c4c 	ldrbmi	r4, [pc, #-3148]	; 1140 <__cs3_region_num+0x113e>
    1d88:	00735f4e 	rsbseq	r5, r3, lr, asr #30
    1d8c:	5f544c41 	svcpl	0x00544c41
    1d90:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    1d94:	535f5247 	cmppl	pc, #1879048196	; 0x70000004
    1d98:	4c505244 	lfmmi	f5, 2, [r0], {68}	; 0x44
    1d9c:	4e455f4c 	cdpmi	15, 4, cr5, cr5, cr12, {2}
    1da0:	6e00745f 	cfmvsrvs	mvf0, r7
    1da4:	63646e61 	cmnvs	r4, #1552	; 0x610
    1da8:	41006b6c 	tstmi	r0, ip, ror #22
    1dac:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1db0:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1db4:	414d5f52 	cmpmi	sp, r2, asr pc
    1db8:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
    1dbc:	52545f4c 	subspl	r5, r4, #76, 30	; 0x130
    1dc0:	44454341 	strbmi	r4, [r5], #-833	; 0xfffffcbf
    1dc4:	735f5649 	cmpvc	pc, #76546048	; 0x4900000
    1dc8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1dcc:	4b4c435f 	blmi	1312b50 <__cs3_heap_start+0x11f94b0>
    1dd0:	5f52474d 	svcpl	0x0052474d
    1dd4:	4e49414d 	dvfmiem	f4, f1, #5.0
    1dd8:	5f4c4c50 	svcpl	0x004c4c50
    1ddc:	4e49414d 	dvfmiem	f4, f1, #5.0
    1de0:	444e414e 	strbmi	r4, [lr], #-334	; 0xfffffeb2
    1de4:	4d4d4453 	cfstrdmi	mvd4, [sp, #-332]	; 0xfffffeb4
    1de8:	4b4c4343 	blmi	1312afc <__cs3_heap_start+0x11f945c>
    1dec:	4100735f 	tstmi	r0, pc, asr r3
    1df0:	435f544c 	cmpmi	pc, #76, 8	; 0x4c000000
    1df4:	474d4b4c 	strbmi	r4, [sp, -ip, asr #22]
    1df8:	414d5f52 	cmpmi	sp, r2, asr pc
    1dfc:	4c504e49 	mrrcmi	14, 4, r4, r0, cr9
    1e00:	414d5f4c 	cmpmi	sp, ip, asr #30
    1e04:	414e4e49 	cmpmi	lr, r9, asr #28
    1e08:	4453444e 	ldrbmi	r4, [r3], #-1102	; 0xfffffbb2
    1e0c:	43434d4d 	movtmi	r4, #15693	; 0x3d4d
    1e10:	745f4b4c 	ldrbvc	r4, [pc], #-2892	; 1e18 <__cs3_region_zero_size_ram+0x3d0>
    1e14:	6b6c6300 	blvs	1b1aa1c <__cs3_heap_start+0x1a0137c>
    1e18:	00707267 	rsbseq	r7, r0, r7, ror #4
    1e1c:	6f6b6c63 	svcvs	0x006b6c63
    1e20:	00316373 	eorseq	r6, r1, r3, ror r3
    1e24:	6f6b6c63 	svcvs	0x006b6c63
    1e28:	00326373 	eorseq	r6, r2, r3, ror r3
    1e2c:	5f544c41 	svcpl	0x00544c41
    1e30:	5f4b4c43 	svcpl	0x004b4c43
    1e34:	5f4c4c50 	svcpl	0x004c4c50
    1e38:	4b434f4c 	blmi	10d5b70 <__cs3_heap_start+0xfbc4d0>
    1e3c:	4154535f 	cmpmi	r4, pc, asr r3
    1e40:	5f535554 	svcpl	0x00535554
    1e44:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
    1e48:	6d6d6f6e 	stclvs	15, cr6, [sp, #-440]!	; 0xfffffe48
    1e4c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1e50:	5f544c41 	svcpl	0x00544c41
    1e54:	5f4c4c50 	svcpl	0x004c4c50
    1e58:	52544e43 	subspl	r4, r4, #1072	; 0x430
    1e5c:	4552465f 	ldrbmi	r4, [r2, #-1631]	; 0xfffff9a1
    1e60:	58414d51 	stmdapl	r1, {r0, r4, r6, r8, sl, fp, lr}^
    1e64:	4100735f 	tstmi	r0, pc, asr r3
    1e68:	565f544c 	ldrbpl	r5, [pc], -ip, asr #8
    1e6c:	435f4f43 	cmpmi	pc, #268	; 0x10c
    1e70:	445f4748 	ldrbmi	r4, [pc], #-1864	; 1e78 <__cs3_region_zero_size_ram+0x430>
    1e74:	4d4f4e45 	stclmi	14, cr4, [pc, #-276]	; 1d68 <__cs3_region_zero_size_ram+0x320>
    1e78:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1e7c:	4b4c435f 	blmi	1312c00 <__cs3_heap_start+0x11f9560>
    1e80:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1e84:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    1e88:	54535f4b 	ldrbpl	r5, [r3], #-3915	; 0xfffff0b5
    1e8c:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    1e90:	7300745f 	movwvc	r7, #1119	; 0x45f
    1e94:	00637273 	rsbeq	r7, r3, r3, ror r2
    1e98:	5f544c41 	svcpl	0x00544c41
    1e9c:	5f544e49 	svcpl	0x00544e49
    1ea0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1ea4:	50555252 	subspl	r5, r5, r2, asr r2
    1ea8:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    1eac:	50465f53 	subpl	r5, r6, r3, asr pc
    1eb0:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    1eb4:	38345152 	ldmdacc	r4!, {r1, r4, r6, r8, ip, lr}
    1eb8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ebc:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1ec0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1ec4:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    1ec8:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    1ecc:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    1ed0:	5f414750 	svcpl	0x00414750
    1ed4:	34515249 	ldrbcc	r5, [r1], #-585	; 0xfffffdb7
    1ed8:	4c410039 	mcrrmi	0, 3, r0, r1, cr9
    1edc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1ee0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1ee4:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    1ee8:	5f545055 	svcpl	0x00545055
    1eec:	30495053 	subcc	r5, r9, r3, asr r0
    1ef0:	5152495f 	cmppl	r2, pc, asr r9
    1ef4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ef8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1efc:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1f00:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    1f04:	535f5450 	cmppl	pc, #80, 8	; 0x50000000
    1f08:	434d4d44 	movtmi	r4, #56644	; 0xdd44
    1f0c:	524f505f 	subpl	r5, pc, #95	; 0x5f
    1f10:	455f4254 	ldrbmi	r4, [pc, #-596]	; 1cc4 <__cs3_region_zero_size_ram+0x27c>
    1f14:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1f18:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    1f1c:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    1f20:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1f24:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1f28:	4947535f 	stmdbmi	r7, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1f2c:	5241545f 	subpl	r5, r1, #1593835520	; 0x5f000000
    1f30:	5f544547 	svcpl	0x00544547
    1f34:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
    1f38:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1f3c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1f40:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1f44:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    1f48:	535f5450 	cmppl	pc, #80, 8	; 0x50000000
    1f4c:	5f324950 	svcpl	0x00324950
    1f50:	00515249 	subseq	r5, r1, r9, asr #4
    1f54:	5f544c41 	svcpl	0x00544c41
    1f58:	5f544e49 	svcpl	0x00544e49
    1f5c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1f60:	50555252 	subspl	r5, r5, r2, asr r2
    1f64:	41555f54 	cmpmi	r5, r4, asr pc
    1f68:	00305452 	eorseq	r5, r0, r2, asr r4
    1f6c:	5f544c41 	svcpl	0x00544c41
    1f70:	5f544e49 	svcpl	0x00544e49
    1f74:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1f78:	50555252 	subspl	r5, r5, r2, asr r2
    1f7c:	41555f54 	cmpmi	r5, r4, asr pc
    1f80:	00315452 	eorseq	r5, r1, r2, asr r4
    1f84:	5f544c41 	svcpl	0x00544c41
    1f88:	5f544e49 	svcpl	0x00544e49
    1f8c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1f90:	50555252 	subspl	r5, r5, r2, asr r2
    1f94:	44535f54 	ldrbmi	r5, [r3], #-3924	; 0xfffff0ac
    1f98:	5f434d4d 	svcpl	0x00434d4d
    1f9c:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xfffff0b0
    1fa0:	43455f41 	movtmi	r5, #24385	; 0x5f41
    1fa4:	4f435f43 	svcmi	0x00435f43
    1fa8:	43455252 	movtmi	r5, #21074	; 0x5252
    1fac:	00444554 	subeq	r4, r4, r4, asr r5
    1fb0:	5f544c41 	svcpl	0x00544c41
    1fb4:	5f544e49 	svcpl	0x00544e49
    1fb8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1fbc:	50555252 	subspl	r5, r5, r2, asr r2
    1fc0:	47535f54 			; <UNDEFINED> instruction: 0x47535f54
    1fc4:	41003049 	tstmi	r0, r9, asr #32
    1fc8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1fcc:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1fd0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1fd4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    1fd8:	4947535f 	stmdbmi	r7, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1fdc:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    1fe0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1fe4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1fe8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    1fec:	5f545055 	svcpl	0x00545055
    1ff0:	32494753 	subcc	r4, r9, #21757952	; 0x14c0000
    1ff4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    1ff8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1ffc:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2000:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2004:	535f5450 	cmppl	pc, #80, 8	; 0x50000000
    2008:	00334947 	eorseq	r4, r3, r7, asr #18
    200c:	5f544c41 	svcpl	0x00544c41
    2010:	5f544e49 	svcpl	0x00544e49
    2014:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2018:	50555252 	subspl	r5, r5, r2, asr r2
    201c:	47535f54 			; <UNDEFINED> instruction: 0x47535f54
    2020:	41003449 	tstmi	r0, r9, asr #8
    2024:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2028:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    202c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2030:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2034:	4947535f 	stmdbmi	r7, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2038:	4c410035 	mcrrmi	0, 3, r0, r1, cr5
    203c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2040:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2044:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2048:	5f545055 	svcpl	0x00545055
    204c:	36494753 			; <UNDEFINED> instruction: 0x36494753
    2050:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2054:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2058:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    205c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2060:	535f5450 	cmppl	pc, #80, 8	; 0x50000000
    2064:	00374947 	eorseq	r4, r7, r7, asr #18
    2068:	5f544c41 	svcpl	0x00544c41
    206c:	5f544e49 	svcpl	0x00544e49
    2070:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2074:	50555252 	subspl	r5, r5, r2, asr r2
    2078:	47535f54 			; <UNDEFINED> instruction: 0x47535f54
    207c:	41003849 	tstmi	r0, r9, asr #16
    2080:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2084:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2088:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    208c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2090:	4947535f 	stmdbmi	r7, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2094:	63690039 	cmnvs	r9, #57	; 0x39
    2098:	70736964 	rsbsvc	r6, r3, r4, ror #18
    209c:	41006e72 	tstmi	r0, r2, ror lr
    20a0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    20a4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    20a8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    20ac:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    20b0:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    20b4:	43455f31 	movtmi	r5, #24369	; 0x5f31
    20b8:	4e555f43 	cdpmi	15, 5, cr5, cr5, cr3, {2}
    20bc:	52524f43 	subspl	r4, r2, #268	; 0x10c
    20c0:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    20c4:	6c610044 	stclvs	0, cr0, [r1], #-272	; 0xfffffef0
    20c8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    20cc:	6c675f74 	stclvs	15, cr5, [r7], #-464	; 0xfffffe30
    20d0:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    20d4:	616e655f 	cmnvs	lr, pc, asr r5
    20d8:	5f656c62 	svcpl	0x00656c62
    20dc:	4100736e 	tstmi	r0, lr, ror #6
    20e0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    20e4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    20e8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    20ec:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    20f0:	414d455f 	cmpmi	sp, pc, asr r5
    20f4:	545f3043 	ldrbpl	r3, [pc], #-67	; 20fc <__cs3_region_zero_size_ram+0x6b4>
    20f8:	43455f58 	movtmi	r5, #24408	; 0x5f58
    20fc:	4f435f43 	svcmi	0x00435f43
    2100:	43455252 	movtmi	r5, #21074	; 0x5252
    2104:	5f444554 	svcpl	0x00444554
    2108:	00515249 	subseq	r5, r1, r9, asr #4
    210c:	5f544c41 	svcpl	0x00544c41
    2110:	5f544e49 	svcpl	0x00544e49
    2114:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2118:	50555252 	subspl	r5, r5, r2, asr r2
    211c:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    2120:	50465f53 	subpl	r5, r6, r3, asr pc
    2124:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    2128:	30355152 	eorscc	r5, r5, r2, asr r1
    212c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2130:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2134:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2138:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    213c:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    2140:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    2144:	5f414750 	svcpl	0x00414750
    2148:	35515249 	ldrbcc	r5, [r1, #-585]	; 0xfffffdb7
    214c:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    2150:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2154:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2158:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    215c:	5f545055 	svcpl	0x00545055
    2160:	5f533246 	svcpl	0x00533246
    2164:	41475046 	cmpmi	r7, r6, asr #32
    2168:	5152495f 	cmppl	r2, pc, asr r9
    216c:	41003235 	tstmi	r0, r5, lsr r2
    2170:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2174:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2178:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    217c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2180:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    2184:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    2188:	52495f41 	subpl	r5, r9, #260	; 0x104
    218c:	00333551 	eorseq	r3, r3, r1, asr r5
    2190:	5f544c41 	svcpl	0x00544c41
    2194:	5f544e49 	svcpl	0x00544e49
    2198:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    219c:	50555252 	subspl	r5, r5, r2, asr r2
    21a0:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    21a4:	50465f53 	subpl	r5, r6, r3, asr pc
    21a8:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    21ac:	34355152 	ldrtcc	r5, [r5], #-338	; 0xfffffeae
    21b0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    21b4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    21b8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    21bc:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    21c0:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    21c4:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    21c8:	5f414750 	svcpl	0x00414750
    21cc:	35515249 	ldrbcc	r5, [r1, #-585]	; 0xfffffdb7
    21d0:	4c410035 	mcrrmi	0, 3, r0, r1, cr5
    21d4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    21d8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    21dc:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    21e0:	5f545055 	svcpl	0x00545055
    21e4:	5f533246 	svcpl	0x00533246
    21e8:	41475046 	cmpmi	r7, r6, asr #32
    21ec:	5152495f 	cmppl	r2, pc, asr r9
    21f0:	41003635 	tstmi	r0, r5, lsr r6
    21f4:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    21f8:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    21fc:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2200:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2204:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    2208:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    220c:	52495f41 	subpl	r5, r9, #260	; 0x104
    2210:	00373551 	eorseq	r3, r7, r1, asr r5
    2214:	5f544c41 	svcpl	0x00544c41
    2218:	5f544e49 	svcpl	0x00544e49
    221c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2220:	50555252 	subspl	r5, r5, r2, asr r2
    2224:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    2228:	50465f53 	subpl	r5, r6, r3, asr pc
    222c:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    2230:	38355152 	ldmdacc	r5!, {r1, r4, r6, r8, ip, lr}
    2234:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2238:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    223c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2240:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2244:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    2248:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    224c:	5f414750 	svcpl	0x00414750
    2250:	35515249 	ldrbcc	r5, [r1, #-585]	; 0xfffffdb7
    2254:	4c410039 	mcrrmi	0, 3, r0, r1, cr9
    2258:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    225c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2260:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2264:	5f545055 	svcpl	0x00545055
    2268:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
    226c:	31515249 	cmpcc	r1, r9, asr #4
    2270:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2274:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2278:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    227c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2280:	455f5450 	ldrbmi	r5, [pc, #-1104]	; 1e38 <__cs3_region_zero_size_ram+0x3f0>
    2284:	3043414d 	subcc	r4, r3, sp, asr #2
    2288:	5f58525f 	svcpl	0x0058525f
    228c:	5f434345 	svcpl	0x00434345
    2290:	52524f43 	subspl	r4, r2, #268	; 0x10c
    2294:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    2298:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    229c:	63730051 	cmnvs	r3, #81	; 0x51
    22a0:	00726c74 	rsbseq	r6, r2, r4, ror ip
    22a4:	5f544c41 	svcpl	0x00544c41
    22a8:	5f544e49 	svcpl	0x00544e49
    22ac:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    22b0:	50555252 	subspl	r5, r5, r2, asr r2
    22b4:	49545f54 	ldmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    22b8:	5f52454d 	svcpl	0x0052454d
    22bc:	3143534f 	cmpcc	r3, pc, asr #6
    22c0:	495f305f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    22c4:	41005152 	tstmi	r0, r2, asr r1
    22c8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    22cc:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    22d0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    22d4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    22d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    22dc:	41505f31 	cmpmi	r0, r1, lsr pc
    22e0:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    22e4:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
    22e8:	545f445f 	ldrbpl	r4, [pc], #-1119	; 22f0 <__cs3_region_zero_size_ram+0x8a8>
    22ec:	61004741 	tstvs	r0, r1, asr #14
    22f0:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    22f4:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    22f8:	625f7570 	subsvs	r7, pc, #112, 10	; 0x1c000000
    22fc:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    2300:	6f705f79 	svcvs	0x00705f79
    2304:	5f746e69 	svcpl	0x00746e69
    2308:	5f746573 	svcpl	0x00746573
    230c:	6100736e 	tstvs	r0, lr, ror #6
    2310:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2314:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    2318:	61626f6c 	cmnvs	r2, ip, ror #30
    231c:	6e755f6c 	cdpvs	15, 7, cr5, cr5, cr12, {3}
    2320:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2324:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2328:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    232c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2330:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2334:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    2338:	5f315550 	svcpl	0x00315550
    233c:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    2340:	41465954 	cmpmi	r6, r4, asr r9
    2344:	425f4c49 	subsmi	r4, pc, #18688	; 0x4900
    2348:	00434154 	subeq	r4, r3, r4, asr r1
    234c:	5f544c41 	svcpl	0x00544c41
    2350:	5f544e49 	svcpl	0x00544e49
    2354:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2358:	50555252 	subspl	r5, r5, r2, asr r2
    235c:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    2360:	50465f53 	subpl	r5, r6, r3, asr pc
    2364:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    2368:	30365152 	eorscc	r5, r6, r2, asr r1
    236c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2370:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2374:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2378:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    237c:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    2380:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    2384:	5f414750 	svcpl	0x00414750
    2388:	36515249 	ldrbcc	r5, [r1], -r9, asr #4
    238c:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    2390:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2394:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2398:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    239c:	5f545055 	svcpl	0x00545055
    23a0:	5f533246 	svcpl	0x00533246
    23a4:	41475046 	cmpmi	r7, r6, asr #32
    23a8:	5152495f 	cmppl	r2, pc, asr r9
    23ac:	41003236 	tstmi	r0, r6, lsr r2
    23b0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    23b4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    23b8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    23bc:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    23c0:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    23c4:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    23c8:	52495f41 	subpl	r5, r9, #260	; 0x104
    23cc:	00333651 	eorseq	r3, r3, r1, asr r6
    23d0:	5f544c41 	svcpl	0x00544c41
    23d4:	5f544e49 	svcpl	0x00544e49
    23d8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    23dc:	50555252 	subspl	r5, r5, r2, asr r2
    23e0:	4d455f54 	stclmi	15, cr5, [r5, #-336]	; 0xfffffeb0
    23e4:	5f314341 	svcpl	0x00314341
    23e8:	455f5854 	ldrbmi	r5, [pc, #-2132]	; 1b9c <__cs3_region_zero_size_ram+0x154>
    23ec:	555f4343 	ldrbpl	r4, [pc, #-835]	; 20b1 <__cs3_region_zero_size_ram+0x669>
    23f0:	524f434e 	subpl	r4, pc, #939524097	; 0x38000001
    23f4:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    23f8:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    23fc:	67005152 	smlsdvs	r0, r2, r1, r5
    2400:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
    2404:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2408:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    240c:	6e5f7570 	mrcvs	5, 2, r7, cr15, cr0, {3}
    2410:	41006d75 	tstmi	r0, r5, ror sp
    2414:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2418:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    241c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2420:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2424:	4d44535f 	stclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2428:	505f434d 	subspl	r4, pc, sp, asr #6
    242c:	4254524f 	subsmi	r5, r4, #-268435452	; 0xf0000004
    2430:	4343455f 	movtmi	r4, #13663	; 0x355f
    2434:	434e555f 	movtmi	r5, #58719	; 0xe55f
    2438:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    243c:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    2440:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    2444:	73707061 	cmnvc	r0, #97	; 0x61
    2448:	746c615c 	strbtvc	r6, [ip], #-348	; 0xfffffea4
    244c:	5c617265 	sfmpl	f7, 2, [r1], #-404	; 0xfffffe6c
    2450:	72617571 	rsbvc	r7, r1, #473956352	; 0x1c400000
    2454:	5c737574 	cfldr64pl	mvdx7, [r3], #-464	; 0xfffffe30
    2458:	302e3631 	eorcc	r3, lr, r1, lsr r6
    245c:	6175715c 	cmnvs	r5, ip, asr r1
    2460:	73757472 	cmnvc	r5, #1912602624	; 0x72000000
    2464:	2f2e2e2f 	svccs	0x002e2e2f
    2468:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
    246c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
    2470:	2f70692f 	svccs	0x0070692f
    2474:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    2478:	682f6172 	stmdavs	pc!, {r1, r4, r5, r6, r8, sp, lr}	; <UNPREDICTABLE>
    247c:	612f7370 			; <UNDEFINED> instruction: 0x612f7370
    2480:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2484:	70685f61 	rsbvc	r5, r8, r1, ror #30
    2488:	77682f73 			; <UNDEFINED> instruction: 0x77682f73
    248c:	2f62696c 	svccs	0x0062696c
    2490:	2f637273 	svccs	0x00637273
    2494:	676d7768 	strbvs	r7, [sp, -r8, ror #14]!
    2498:	6c612f72 	stclvs	15, cr2, [r1], #-456	; 0xfffffe38
    249c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    24a0:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    24a4:	2e747075 	mrccs	0, 3, r7, cr4, cr5, {3}
    24a8:	4c410063 	mcrrmi	0, 6, r0, r1, cr3
    24ac:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    24b0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    24b4:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    24b8:	5f545055 	svcpl	0x00545055
    24bc:	31555043 	cmpcc	r5, r3, asr #32
    24c0:	4645445f 			; <UNDEFINED> instruction: 0x4645445f
    24c4:	5347414c 	movtpl	r4, #29004	; 0x714c
    24c8:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    24cc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    24d0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    24d4:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    24d8:	5f545055 	svcpl	0x00545055
    24dc:	31555043 	cmpcc	r5, r3, asr #32
    24e0:	4645445f 			; <UNDEFINED> instruction: 0x4645445f
    24e4:	5347414c 	movtpl	r4, #29004	; 0x714c
    24e8:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
    24ec:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    24f0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    24f4:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    24f8:	5f545055 	svcpl	0x00545055
    24fc:	31555043 	cmpcc	r5, r3, asr #32
    2500:	4645445f 			; <UNDEFINED> instruction: 0x4645445f
    2504:	5347414c 	movtpl	r4, #29004	; 0x714c
    2508:	4c410033 	mcrrmi	0, 3, r0, r1, cr3
    250c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2510:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2514:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2518:	5f545055 	svcpl	0x00545055
    251c:	31555043 	cmpcc	r5, r3, asr #32
    2520:	4645445f 			; <UNDEFINED> instruction: 0x4645445f
    2524:	5347414c 	movtpl	r4, #29004	; 0x714c
    2528:	4c410034 	mcrrmi	0, 3, r0, r1, cr4
    252c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2530:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2534:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2538:	5f545055 	svcpl	0x00545055
    253c:	31555043 	cmpcc	r5, r3, asr #32
    2540:	4645445f 			; <UNDEFINED> instruction: 0x4645445f
    2544:	5347414c 	movtpl	r4, #29004	; 0x714c
    2548:	4c410035 	mcrrmi	0, 3, r0, r1, cr5
    254c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2550:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2554:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2558:	5f545055 	svcpl	0x00545055
    255c:	31555043 	cmpcc	r5, r3, asr #32
    2560:	4645445f 			; <UNDEFINED> instruction: 0x4645445f
    2564:	5347414c 	movtpl	r4, #29004	; 0x714c
    2568:	4c410036 	mcrrmi	0, 3, r0, r1, cr6
    256c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2570:	47535f54 			; <UNDEFINED> instruction: 0x47535f54
    2574:	41545f49 	cmpmi	r4, r9, asr #30
    2578:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    257c:	4100655f 	tstmi	r0, pc, asr r5
    2580:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2584:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2588:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    258c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2590:	414d455f 	cmpmi	sp, pc, asr r5
    2594:	525f3143 	subspl	r3, pc, #-1073741808	; 0xc0000010
    2598:	43455f58 	movtmi	r5, #24408	; 0x5f58
    259c:	4e555f43 	cdpmi	15, 5, cr5, cr5, cr3, {2}
    25a0:	52524f43 	subspl	r4, r2, #268	; 0x10c
    25a4:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    25a8:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    25ac:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    25b0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    25b4:	47535f54 			; <UNDEFINED> instruction: 0x47535f54
    25b8:	41545f49 	cmpmi	r4, r9, asr #30
    25bc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    25c0:	4100745f 	tstmi	r0, pc, asr r4
    25c4:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    25c8:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    25cc:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    25d0:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    25d4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    25d8:	41505f31 	cmpmi	r0, r1, lsr pc
    25dc:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    25e0:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
    25e4:	4248475f 	submi	r4, r8, #24903680	; 0x17c0000
    25e8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    25ec:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    25f0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    25f4:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    25f8:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    25fc:	5f314e41 	svcpl	0x00314e41
    2600:	495f4f4d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    2604:	41005152 	tstmi	r0, r2, asr r1
    2608:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    260c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2610:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2614:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2618:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    261c:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    2620:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    2624:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2628:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    262c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2630:	5f545055 	svcpl	0x00545055
    2634:	444e414e 	strbmi	r4, [lr], #-334	; 0xfffffeb2
    2638:	43455f52 	movtmi	r5, #24402	; 0x5f52
    263c:	4f435f43 	svcmi	0x00435f43
    2640:	43455252 	movtmi	r5, #21074	; 0x5252
    2644:	5f444554 	svcpl	0x00444554
    2648:	00515249 	subseq	r5, r1, r9, asr #4
    264c:	75636573 	strbvc	r6, [r3, #-1395]!	; 0xfffffa8d
    2650:	6f5f6572 	svcvs	0x005f6572
    2654:	00796c6e 	rsbseq	r6, r9, lr, ror #24
    2658:	5f544c41 	svcpl	0x00544c41
    265c:	5f544e49 	svcpl	0x00544e49
    2660:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2664:	50555252 	subspl	r5, r5, r2, asr r2
    2668:	00655f54 	rsbeq	r5, r5, r4, asr pc
    266c:	5f544c41 	svcpl	0x00544c41
    2670:	5f544e49 	svcpl	0x00544e49
    2674:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2678:	50555252 	subspl	r5, r5, r2, asr r2
    267c:	414e5f54 	cmpmi	lr, r4, asr pc
    2680:	5f52444e 	svcpl	0x0052444e
    2684:	5f434345 	svcpl	0x00434345
    2688:	4f434e55 	svcmi	0x00434e55
    268c:	43455252 	movtmi	r5, #21074	; 0x5252
    2690:	5f444554 	svcpl	0x00444554
    2694:	00515249 	subseq	r5, r1, r9, asr #4
    2698:	5f657375 	svcpl	0x00657375
    269c:	5f514946 	svcpl	0x00514946
    26a0:	5f726f66 	svcpl	0x00726f66
    26a4:	75636573 	strbvc	r6, [r3, #-1395]!	; 0xfffffa8d
    26a8:	695f6572 	ldmdbvs	pc, {r1, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    26ac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    26b0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    26b4:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    26b8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    26bc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    26c0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    26c4:	5f545055 	svcpl	0x00545055
    26c8:	31425355 	cmpcc	r2, r5, asr r3
    26cc:	4343455f 	movtmi	r4, #13663	; 0x355f
    26d0:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
    26d4:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    26d8:	41004445 	tstmi	r0, r5, asr #8
    26dc:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    26e0:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    26e4:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    26e8:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    26ec:	4100745f 	tstmi	r0, pc, asr r4
    26f0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    26f4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    26f8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    26fc:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2700:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2704:	41505f30 	cmpmi	r0, r0, lsr pc
    2708:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    270c:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
    2710:	4f5f445f 	svcmi	0x005f445f
    2714:	52455455 	subpl	r5, r5, #1426063360	; 0x55000000
    2718:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    271c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2720:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2724:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2728:	445f5450 	ldrbmi	r5, [pc], #-1104	; 2730 <__cs3_region_zero_size_ram+0xce8>
    272c:	455f414d 	ldrbmi	r4, [pc, #-333]	; 25e7 <__cs3_region_zero_size_ram+0xb9f>
    2730:	555f4343 	ldrbpl	r4, [pc, #-835]	; 23f5 <__cs3_region_zero_size_ram+0x9ad>
    2734:	524f434e 	subpl	r4, pc, #939524097	; 0x38000001
    2738:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    273c:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    2740:	61005152 	tstvs	r0, r2, asr r1
    2744:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2748:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    274c:	645f7570 	ldrbvs	r7, [pc], #-1392	; 2754 <__cs3_region_zero_size_ram+0xd0c>
    2750:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    2754:	6e5f656c 	cdpvs	5, 5, cr6, cr15, cr12, {3}
    2758:	6c610073 	stclvs	0, cr0, [r1], #-460	; 0xfffffe34
    275c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    2760:	73695f74 	cmnvc	r9, #116, 30	; 0x1d0
    2764:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
    2768:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    276c:	61007265 	tstvs	r0, r5, ror #4
    2770:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2774:	645f746e 	ldrbvs	r7, [pc], #-1134	; 277c <__cs3_region_zero_size_ram+0xd34>
    2778:	61707369 	cmnvs	r0, r9, ror #6
    277c:	00686374 	rsbeq	r6, r8, r4, ror r3
    2780:	5f544c41 	svcpl	0x00544c41
    2784:	5f544e49 	svcpl	0x00544e49
    2788:	47495254 	smlsldmi	r5, r9, r4, r2
    278c:	5f524547 	svcpl	0x00524547
    2790:	63690074 	cmnvs	r9, #116	; 0x74
    2794:	726d7063 	rsbvc	r7, sp, #99	; 0x63
    2798:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    279c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    27a0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    27a4:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    27a8:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    27ac:	5f414750 	svcpl	0x00414750
    27b0:	5f4e414d 	svcpl	0x004e414d
    27b4:	00515249 	subseq	r5, r1, r9, asr #4
    27b8:	62676572 	rsbvs	r6, r7, #478150656	; 0x1c800000
    27bc:	68737469 	ldmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    27c0:	00746669 	rsbseq	r6, r4, r9, ror #12
    27c4:	5f746c61 	svcpl	0x00746c61
    27c8:	5f746e69 	svcpl	0x00746e69
    27cc:	5f757063 	svcpl	0x00757063
    27d0:	616e6962 	cmnvs	lr, r2, ror #18
    27d4:	705f7972 	subsvc	r7, pc, r2, ror r9	; <UNPREDICTABLE>
    27d8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    27dc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    27e0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    27e4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    27e8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    27ec:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    27f0:	455f5450 	ldrbmi	r5, [pc, #-1104]	; 23a8 <__cs3_region_zero_size_ram+0x960>
    27f4:	3143414d 	cmpcc	r3, sp, asr #2
    27f8:	5f58545f 	svcpl	0x0058545f
    27fc:	5f434345 	svcpl	0x00434345
    2800:	52524f43 	subspl	r4, r2, #268	; 0x10c
    2804:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    2808:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    280c:	4e490051 	mcrmi	0, 2, r0, cr9, cr1, {2}
    2810:	49445f54 	stmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2814:	54415053 	strbpl	r5, [r1], #-83	; 0xffffffad
    2818:	735f4843 	cmpvc	pc, #4390912	; 0x430000
    281c:	544e4900 	strbpl	r4, [lr], #-2304	; 0xfffff700
    2820:	5349445f 	movtpl	r4, #37983	; 0x945f
    2824:	43544150 	cmpmi	r4, #80, 2
    2828:	00745f48 	rsbseq	r5, r4, r8, asr #30
    282c:	5f746c61 	svcpl	0x00746c61
    2830:	5f746e69 	svcpl	0x00746e69
    2834:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    2838:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    283c:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    2840:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xfffff087
    2844:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2848:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    284c:	47535f54 			; <UNDEFINED> instruction: 0x47535f54
    2850:	41545f49 	cmpmi	r4, r9, asr #30
    2854:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    2858:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
    285c:	4358455f 	cmpmi	r8, #398458880	; 0x17c00000
    2860:	45535f4c 	ldrbmi	r5, [r3, #-3916]	; 0xfffff0b4
    2864:	5245444e 	subpl	r4, r5, #1308622848	; 0x4e000000
    2868:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    286c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2870:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2874:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2878:	455f5450 	ldrbmi	r5, [pc, #-1104]	; 2430 <__cs3_region_zero_size_ram+0x9e8>
    287c:	3143414d 	cmpcc	r3, sp, asr #2
    2880:	5152495f 	cmppl	r2, pc, asr r9
    2884:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2888:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    288c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2890:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2894:	535f5450 	cmppl	pc, #80, 8	; 0x50000000
    2898:	505f5543 	subspl	r5, pc, r3, asr #10
    289c:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    28a0:	49414659 	stmdbmi	r1, {r0, r3, r4, r6, r9, sl, lr}^
    28a4:	4100304c 	tstmi	r0, ip, asr #32
    28a8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28ac:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28b0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    28b4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    28b8:	5543535f 	strbpl	r5, [r3, #-863]	; 0xfffffca1
    28bc:	5241505f 	subpl	r5, r1, #95	; 0x5f
    28c0:	46595449 	ldrbmi	r5, [r9], -r9, asr #8
    28c4:	314c4941 	cmpcc	ip, r1, asr #18
    28c8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    28cc:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    28d0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    28d4:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    28d8:	575f5450 			; <UNDEFINED> instruction: 0x575f5450
    28dc:	30474f44 	subcc	r4, r7, r4, asr #30
    28e0:	5152495f 	cmppl	r2, pc, asr r9
    28e4:	6c617600 	stclvs	6, cr7, [r1], #-0
    28e8:	41006575 	tstmi	r0, r5, ror r5
    28ec:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28f0:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    28f4:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    28f8:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    28fc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2900:	41505f30 	cmpmi	r0, r0, lsr pc
    2904:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    2908:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
    290c:	424c545f 	submi	r5, ip, #1593835520	; 0x5f000000
    2910:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2914:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2918:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    291c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2920:	4c5f5450 	cfldrdmi	mvd5, [pc], {80}	; 0x50
    2924:	43455f32 	movtmi	r5, #24370	; 0x5f32
    2928:	59425f43 	stmdbpl	r2, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    292c:	575f4554 			; <UNDEFINED> instruction: 0x575f4554
    2930:	52495f52 	subpl	r5, r9, #328	; 0x148
    2934:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    2938:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    293c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2940:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2944:	5f545055 	svcpl	0x00545055
    2948:	31494753 	cmpcc	r9, r3, asr r7
    294c:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    2950:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2954:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2958:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    295c:	5f545055 	svcpl	0x00545055
    2960:	31494753 	cmpcc	r9, r3, asr r7
    2964:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    2968:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    296c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2970:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2974:	5f545055 	svcpl	0x00545055
    2978:	31494753 	cmpcc	r9, r3, asr r7
    297c:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
    2980:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2984:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2988:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    298c:	5f545055 	svcpl	0x00545055
    2990:	31494753 	cmpcc	r9, r3, asr r7
    2994:	4c410033 	mcrrmi	0, 3, r0, r1, cr3
    2998:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    299c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    29a0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    29a4:	5f545055 	svcpl	0x00545055
    29a8:	31494753 	cmpcc	r9, r3, asr r7
    29ac:	4c410034 	mcrrmi	0, 3, r0, r1, cr4
    29b0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    29b4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    29b8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    29bc:	5f545055 	svcpl	0x00545055
    29c0:	31494753 	cmpcc	r9, r3, asr r7
    29c4:	4e490035 	mcrmi	0, 2, r0, cr9, cr5, {1}
    29c8:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    29cc:	655f4741 	ldrbvs	r4, [pc, #-1857]	; 2293 <__cs3_region_zero_size_ram+0x84b>
    29d0:	72617400 	rsbvc	r7, r1, #0, 8
    29d4:	00746567 	rsbseq	r6, r4, r7, ror #10
    29d8:	5f746c61 	svcpl	0x00746c61
    29dc:	5f746e69 	svcpl	0x00746e69
    29e0:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    29e4:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    29e8:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    29ec:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    29f0:	63636900 	cmnvs	r3, #0, 18
    29f4:	00726369 	rsbseq	r6, r2, r9, ror #6
    29f8:	5f746573 	svcpl	0x00746573
    29fc:	6c746373 	ldclvs	3, cr6, [r4], #-460	; 0xfffffe34
    2a00:	62765f72 	rsbsvs	r5, r6, #456	; 0x1c8
    2a04:	61007469 	tstvs	r0, r9, ror #8
    2a08:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2a0c:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    2a10:	61626f6c 	cmnvs	r2, ip, ror #30
    2a14:	6e655f6c 	cdpvs	15, 6, cr5, cr5, cr12, {3}
    2a18:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2a1c:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    2a20:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2a24:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2a28:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2a2c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2a30:	495f5450 	ldmdbmi	pc, {r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2a34:	5f324332 	svcpl	0x00324332
    2a38:	00515249 	subseq	r5, r1, r9, asr #4
    2a3c:	73635f5f 	cmnvc	r3, #380	; 0x17c
    2a40:	6e695f33 	mcrvs	15, 3, r5, cr9, cr3, {1}
    2a44:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    2a48:	5f747075 	svcpl	0x00747075
    2a4c:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
    2a50:	4900726f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
    2a54:	465f544e 	ldrbmi	r5, [pc], -lr, asr #8
    2a58:	5f47414c 	svcpl	0x0047414c
    2a5c:	4c504d49 	mrrcmi	13, 4, r4, r0, cr9
    2a60:	4e454d45 	cdpmi	13, 4, cr4, cr5, cr5, {2}
    2a64:	00444554 	subeq	r4, r4, r4, asr r5
    2a68:	5f746c61 	svcpl	0x00746c61
    2a6c:	5f746e69 	svcpl	0x00746e69
    2a70:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
    2a74:	655f6c61 	ldrbvs	r6, [pc, #-3169]	; 1e1b <__cs3_region_zero_size_ram+0x3d3>
    2a78:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    2a7c:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    2a80:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2a84:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2a88:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2a8c:	5f545055 	svcpl	0x00545055
    2a90:	30425355 	subcc	r5, r2, r5, asr r3
    2a94:	4343455f 	movtmi	r4, #13663	; 0x355f
    2a98:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
    2a9c:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    2aa0:	41004445 	tstmi	r0, r5, asr #8
    2aa4:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2aa8:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2aac:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2ab0:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2ab4:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
    2ab8:	43455f30 	movtmi	r5, #24368	; 0x5f30
    2abc:	4e555f43 	cdpmi	15, 5, cr5, cr5, cr3, {2}
    2ac0:	52524f43 	subspl	r4, r2, #268	; 0x10c
    2ac4:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    2ac8:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    2acc:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    2ad0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2ad4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2ad8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2adc:	5f545055 	svcpl	0x00545055
    2ae0:	30555043 	subscc	r5, r5, r3, asr #32
    2ae4:	5241505f 	subpl	r5, r1, #95	; 0x5f
    2ae8:	46595449 	ldrbmi	r5, [r9], -r9, asr #8
    2aec:	5f4c4941 	svcpl	0x004c4941
    2af0:	41545f44 	cmpmi	r4, r4, asr #30
    2af4:	72700047 	rsbsvc	r0, r0, #71	; 0x47
    2af8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2afc:	61007974 	tstvs	r0, r4, ror r9
    2b00:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2b04:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
    2b08:	745f6967 	ldrbvc	r6, [pc], #-2407	; 2b10 <__cs3_region_zero_size_ram+0x10c8>
    2b0c:	67676972 			; <UNDEFINED> instruction: 0x67676972
    2b10:	41007265 	tstmi	r0, r5, ror #4
    2b14:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2b18:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2b1c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2b20:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2b24:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2b28:	41505f31 	cmpmi	r0, r1, lsr pc
    2b2c:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    2b30:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
    2b34:	545f495f 	ldrbpl	r4, [pc], #-2399	; 2b3c <__cs3_region_zero_size_ram+0x10f4>
    2b38:	41004741 	tstmi	r0, r1, asr #14
    2b3c:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2b40:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2b44:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2b48:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2b4c:	5244445f 	subpl	r4, r4, #1593835520	; 0x5f000000
    2b50:	4343455f 	movtmi	r4, #13663	; 0x355f
    2b54:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    2b58:	495f524f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    2b5c:	61005152 	tstvs	r0, r2, asr r1
    2b60:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2b64:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    2b68:	625f7570 	subsvs	r7, pc, #112, 10	; 0x1c000000
    2b6c:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    2b70:	6f705f79 	svcvs	0x00705f79
    2b74:	5f746e69 	svcpl	0x00746e69
    2b78:	5f746567 	svcpl	0x00746567
    2b7c:	4100736e 	tstmi	r0, lr, ror #6
    2b80:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2b84:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2b88:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2b8c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2b90:	5053515f 	subspl	r5, r3, pc, asr r1
    2b94:	52495f49 	subpl	r5, r9, #292	; 0x124
    2b98:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    2b9c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2ba0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2ba4:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2ba8:	5f545055 	svcpl	0x00545055
    2bac:	5f414d44 	svcpl	0x00414d44
    2bb0:	30515249 	subscc	r5, r1, r9, asr #4
    2bb4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2bb8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2bbc:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2bc0:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2bc4:	445f5450 	ldrbmi	r5, [pc], #-1104	; 2bcc <__cs3_region_zero_size_ram+0x1184>
    2bc8:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    2bcc:	00315152 	eorseq	r5, r1, r2, asr r1
    2bd0:	5f544c41 	svcpl	0x00544c41
    2bd4:	5f544e49 	svcpl	0x00544e49
    2bd8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2bdc:	50555252 	subspl	r5, r5, r2, asr r2
    2be0:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    2be4:	52495f41 	subpl	r5, r9, #260	; 0x104
    2be8:	41003251 	tstmi	r0, r1, asr r2
    2bec:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2bf0:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2bf4:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2bf8:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2bfc:	414d445f 	cmpmi	sp, pc, asr r4
    2c00:	5152495f 	cmppl	r2, pc, asr r9
    2c04:	4c410033 	mcrrmi	0, 3, r0, r1, cr3
    2c08:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2c0c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2c10:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2c14:	5f545055 	svcpl	0x00545055
    2c18:	5f414d44 	svcpl	0x00414d44
    2c1c:	34515249 	ldrbcc	r5, [r1], #-585	; 0xfffffdb7
    2c20:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2c24:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2c28:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2c2c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2c30:	445f5450 	ldrbmi	r5, [pc], #-1104	; 2c38 <__cs3_region_zero_size_ram+0x11f0>
    2c34:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    2c38:	00355152 	eorseq	r5, r5, r2, asr r1
    2c3c:	5f544c41 	svcpl	0x00544c41
    2c40:	5f544e49 	svcpl	0x00544e49
    2c44:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2c48:	50555252 	subspl	r5, r5, r2, asr r2
    2c4c:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    2c50:	52495f41 	subpl	r5, r9, #260	; 0x104
    2c54:	41003651 	tstmi	r0, r1, asr r6
    2c58:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2c5c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2c60:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2c64:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2c68:	414d445f 	cmpmi	sp, pc, asr r4
    2c6c:	5152495f 	cmppl	r2, pc, asr r9
    2c70:	5f5f0037 	svcpl	0x005f0037
    2c74:	5f337363 	svcpl	0x00337363
    2c78:	5f727369 	svcpl	0x00727369
    2c7c:	00717269 	rsbseq	r7, r1, r9, ror #4
    2c80:	5f746567 	svcpl	0x00746567
    2c84:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
    2c88:	61626870 	smcvs	9856	; 0x2680
    2c8c:	61006573 	tstvs	r0, r3, ror r5
    2c90:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2c94:	645f746e 	ldrbvs	r7, [pc], #-1134	; 2c9c <__cs3_region_zero_size_ram+0x1254>
    2c98:	5f747369 	svcpl	0x00747369
    2c9c:	67726174 			; <UNDEFINED> instruction: 0x67726174
    2ca0:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
    2ca4:	41007465 	tstmi	r0, r5, ror #8
    2ca8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2cac:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2cb0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2cb4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2cb8:	4950505f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, ip, lr}^
    2cbc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    2cc0:	575f5245 	ldrbpl	r5, [pc, -r5, asr #4]
    2cc4:	48435441 	stmdami	r3, {r0, r6, sl, ip, lr}^
    2cc8:	00474f44 	subeq	r4, r7, r4, asr #30
    2ccc:	5f746c61 	svcpl	0x00746c61
    2cd0:	5f746e69 	svcpl	0x00746e69
    2cd4:	5f757063 	svcpl	0x00757063
    2cd8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2cdc:	63636900 	cmnvs	r3, #0, 18
    2ce0:	00727062 	rsbseq	r7, r2, r2, rrx
    2ce4:	5f544c41 	svcpl	0x00544c41
    2ce8:	5f544e49 	svcpl	0x00544e49
    2cec:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2cf0:	50555252 	subspl	r5, r5, r2, asr r2
    2cf4:	44575f54 	ldrbmi	r5, [r7], #-3924	; 0xfffff0ac
    2cf8:	5f31474f 	svcpl	0x0031474f
    2cfc:	00515249 	subseq	r5, r1, r9, asr #4
    2d00:	5f544c41 	svcpl	0x00544c41
    2d04:	5f544e49 	svcpl	0x00544e49
    2d08:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2d0c:	50555252 	subspl	r5, r5, r2, asr r2
    2d10:	4d445f54 	stclmi	15, cr5, [r4, #-336]	; 0xfffffeb0
    2d14:	43455f41 	movtmi	r5, #24385	; 0x5f41
    2d18:	4f435f43 	svcmi	0x00435f43
    2d1c:	43455252 	movtmi	r5, #21074	; 0x5252
    2d20:	5f444554 	svcpl	0x00444554
    2d24:	00515249 	subseq	r5, r1, r9, asr #4
    2d28:	5f544c41 	svcpl	0x00544c41
    2d2c:	5f544e49 	svcpl	0x00544e49
    2d30:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2d34:	50555252 	subspl	r5, r5, r2, asr r2
    2d38:	50505f54 	subspl	r5, r0, r4, asr pc
    2d3c:	49545f49 	ldmdbmi	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    2d40:	5f52454d 	svcpl	0x0052454d
    2d44:	424f4c47 	submi	r4, pc, #18176	; 0x4700
    2d48:	61004c41 	tstvs	r0, r1, asr #24
    2d4c:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2d50:	645f746e 	ldrbvs	r7, [pc], #-1134	; 2d58 <__cs3_region_zero_size_ram+0x1310>
    2d54:	5f747369 	svcpl	0x00747369
    2d58:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    2d5c:	5f676e69 	svcpl	0x00676e69
    2d60:	61656c63 	cmnvs	r5, r3, ror #24
    2d64:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    2d68:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2d6c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2d70:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2d74:	5f545055 	svcpl	0x00545055
    2d78:	5f495050 	svcpl	0x00495050
    2d7c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
    2d80:	52505f52 	subspl	r5, r0, #328	; 0x148
    2d84:	54415649 	strbpl	r5, [r1], #-1609	; 0xfffff9b7
    2d88:	6c610045 	stclvs	0, cr0, [r1], #-276	; 0xfffffeec
    2d8c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    2d90:	70635f74 	rsbvc	r5, r3, r4, ror pc
    2d94:	69645f75 	stmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2d98:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    2d9c:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
    2da0:	6c61006c 	stclvs	0, cr0, [r1], #-432	; 0xfffffe50
    2da4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    2da8:	70635f74 	rsbvc	r5, r3, r4, ror pc
    2dac:	6e755f75 	mrcvs	15, 3, r5, cr5, cr5, {3}
    2db0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2db4:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2db8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2dbc:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2dc0:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2dc4:	4e5f5450 	mrcmi	4, 2, r5, cr15, cr0, {2}
    2dc8:	45444e41 	strbmi	r4, [r4, #-3649]	; 0xfffff1bf
    2dcc:	4343455f 	movtmi	r4, #13663	; 0x355f
    2dd0:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
    2dd4:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    2dd8:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    2ddc:	69005152 	stmdbvs	r0, {r1, r4, r6, r8, ip, lr}
    2de0:	62616463 	rsbvs	r6, r1, #1660944384	; 0x63000000
    2de4:	41006e72 	tstmi	r0, r2, ror lr
    2de8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2dec:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2df0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2df4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2df8:	4d44535f 	stclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2dfc:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2e00:	61005152 	tstvs	r0, r2, asr r1
    2e04:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2e08:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 29a2 <__cs3_region_zero_size_ram+0xf5a>
    2e0c:	5f6c6974 	svcpl	0x006c6974
    2e10:	5f757063 	svcpl	0x00757063
    2e14:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    2e18:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2e1c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2e20:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2e24:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2e28:	5f545055 	svcpl	0x00545055
    2e2c:	444e414e 	strbmi	r4, [lr], #-334	; 0xfffffeb2
    2e30:	43455f57 	movtmi	r5, #24407	; 0x5f57
    2e34:	4e555f43 	cdpmi	15, 5, cr5, cr5, cr3, {2}
    2e38:	52524f43 	subspl	r4, r2, #268	; 0x10c
    2e3c:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    2e40:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    2e44:	6c610051 	stclvs	0, cr0, [r1], #-324	; 0xfffffebc
    2e48:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    2e4c:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2e50:	705f7473 	subsvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2e54:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2e58:	735f676e 	cmpvc	pc, #28835840	; 0x1b80000
    2e5c:	61007465 	tstvs	r0, r5, ror #8
    2e60:	6e696b63 	vnmulvs.f64	d22, d9, d19
    2e64:	00646974 	rsbeq	r6, r4, r4, ror r9
    2e68:	5f544c41 	svcpl	0x00544c41
    2e6c:	5f544e49 	svcpl	0x00544e49
    2e70:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2e74:	50555252 	subspl	r5, r5, r2, asr r2
    2e78:	49545f54 	ldmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2e7c:	5f52454d 	svcpl	0x0052454d
    2e80:	5053344c 	subspl	r3, r3, ip, asr #8
    2e84:	495f315f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    2e88:	41005152 	tstmi	r0, r2, asr r1
    2e8c:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2e90:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2e94:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2e98:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2e9c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2ea0:	41505f31 	cmpmi	r0, r1, lsr pc
    2ea4:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    2ea8:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
    2eac:	445f445f 	ldrbmi	r4, [pc], #-1119	; 2eb4 <__cs3_region_zero_size_ram+0x146c>
    2eb0:	00415441 	subeq	r5, r1, r1, asr #8
    2eb4:	5f544c41 	svcpl	0x00544c41
    2eb8:	5f544e49 	svcpl	0x00544e49
    2ebc:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    2ec0:	50555252 	subspl	r5, r5, r2, asr r2
    2ec4:	41525f54 	cmpmi	r2, r4, asr pc
    2ec8:	43455f4d 	movtmi	r5, #24397	; 0x5f4d
    2ecc:	4f435f43 	svcmi	0x00435f43
    2ed0:	43455252 	movtmi	r5, #21074	; 0x5252
    2ed4:	5f444554 	svcpl	0x00444554
    2ed8:	00515249 	subseq	r5, r1, r9, asr #4
    2edc:	5f746c61 	svcpl	0x00746c61
    2ee0:	5f746e69 	svcpl	0x00746e69
    2ee4:	5f757063 	svcpl	0x00757063
    2ee8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2eec:	6e5f656c 	cdpvs	5, 5, cr6, cr15, cr12, {3}
    2ef0:	6c610073 	stclvs	0, cr0, [r1], #-460	; 0xfffffe34
    2ef4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    2ef8:	61635f74 	smcvs	13812	; 0x35f4
    2efc:	61626c6c 	cmnvs	r2, ip, ror #24
    2f00:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 2f08 <__cs3_region_zero_size_ram+0x14c0>
    2f04:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2f08:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2f0c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    2f10:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
    2f14:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2f18:	675f7974 			; <UNDEFINED> instruction: 0x675f7974
    2f1c:	41007465 	tstmi	r0, r5, ror #8
    2f20:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2f24:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2f28:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2f2c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2f30:	4d41525f 	sfmmi	f5, 2, [r1, #-380]	; 0xfffffe84
    2f34:	4343455f 	movtmi	r4, #13663	; 0x355f
    2f38:	434e555f 	movtmi	r5, #58719	; 0xe55f
    2f3c:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    2f40:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    2f44:	5152495f 	cmppl	r2, pc, asr r9
    2f48:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2f4c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2f50:	7869665f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, r9, sl, sp, lr}^
    2f54:	695f7075 	ldmdbvs	pc, {r0, r2, r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    2f58:	735f7172 	cmpvc	pc, #-2147483620	; 0x8000001c
    2f5c:	6b636174 	blvs	18db534 <__cs3_heap_start+0x17c1e94>
    2f60:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2f64:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2f68:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2f6c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2f70:	4c5f5450 	cfldrdmi	mvd5, [pc], {80}	; 0x50
    2f74:	4f435f32 	svcmi	0x00435f32
    2f78:	4e49424d 	cdpmi	2, 4, cr4, cr9, cr13, {2}
    2f7c:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    2f80:	41005152 	tstmi	r0, r2, asr r1
    2f84:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2f88:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2f8c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2f90:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    2f94:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    2f98:	455f5744 	ldrbmi	r5, [pc, #-1860]	; 285c <__cs3_region_zero_size_ram+0xe14>
    2f9c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2fa0:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    2fa4:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    2fa8:	5152495f 	cmppl	r2, pc, asr r9
    2fac:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    2fb0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2fb4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    2fb8:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    2fbc:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    2fc0:	5f315550 	svcpl	0x00315550
    2fc4:	4c464544 	cfstr64mi	mvdx4, [r6], {68}	; 0x44
    2fc8:	30534741 	subscc	r4, r3, r1, asr #14
    2fcc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    2fd0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2fd4:	6974755f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    2fd8:	70635f6c 	rsbvc	r5, r3, ip, ror #30
    2fdc:	75635f75 	strbvc	r5, [r3, #-3957]!	; 0xfffff08b
    2fe0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2fe4:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    2fe8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2fec:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2ff0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    2ff4:	5f545055 	svcpl	0x00545055
    2ff8:	5f533246 	svcpl	0x00533246
    2ffc:	41475046 	cmpmi	r7, r6, asr #32
    3000:	5152495f 	cmppl	r2, pc, asr r9
    3004:	61003631 	tstvs	r0, r1, lsr r6
    3008:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    300c:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    3010:	635f7570 	cmpvs	pc, #112, 10	; 0x1c000000
    3014:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3018:	65735f67 	ldrbvs	r5, [r3, #-3943]!	; 0xfffff099
    301c:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    3020:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3024:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3028:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    302c:	5f545055 	svcpl	0x00545055
    3030:	43414d45 	movtmi	r4, #7493	; 0x1d45
    3034:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    3038:	4343455f 	movtmi	r4, #13663	; 0x355f
    303c:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
    3040:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    3044:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    3048:	41005152 	tstmi	r0, r2, asr r1
    304c:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3050:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3054:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3058:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    305c:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3060:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3064:	52495f41 	subpl	r5, r9, #260	; 0x104
    3068:	00393151 	eorseq	r3, r9, r1, asr r1
    306c:	5f746c61 	svcpl	0x00746c61
    3070:	5f746e69 	svcpl	0x00746e69
    3074:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    3078:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    307c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    3080:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    3084:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3088:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    308c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3090:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3094:	495f5450 	ldmdbmi	pc, {r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3098:	5f304332 	svcpl	0x00304332
    309c:	00515249 	subseq	r5, r1, r9, asr #4
    30a0:	5f746c61 	svcpl	0x00746c61
    30a4:	5f746e69 	svcpl	0x00746e69
    30a8:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    30ac:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    30b0:	5f657275 	svcpl	0x00657275
    30b4:	61736964 	cmnvs	r3, r4, ror #18
    30b8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    30bc:	5f544c41 	svcpl	0x00544c41
    30c0:	5f544e49 	svcpl	0x00544e49
    30c4:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    30c8:	50555252 	subspl	r5, r5, r2, asr r2
    30cc:	49545f54 	ldmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    30d0:	5f52454d 	svcpl	0x0052454d
    30d4:	5053344c 	subspl	r3, r3, ip, asr #8
    30d8:	495f305f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    30dc:	41005152 	tstmi	r0, r2, asr r1
    30e0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    30e4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    30e8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    30ec:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    30f0:	5053515f 	subspl	r5, r3, pc, asr r1
    30f4:	43455f49 	movtmi	r5, #24393	; 0x5f49
    30f8:	4f435f43 	svcmi	0x00435f43
    30fc:	43455252 	movtmi	r5, #21074	; 0x5252
    3100:	5f444554 	svcpl	0x00444554
    3104:	00515249 	subseq	r5, r1, r9, asr #4
    3108:	5f544c41 	svcpl	0x00544c41
    310c:	5f544e49 	svcpl	0x00544e49
    3110:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3114:	50555252 	subspl	r5, r5, r2, asr r2
    3118:	50435f54 	subpl	r5, r3, r4, asr pc
    311c:	505f3155 	subspl	r3, pc, r5, asr r1	; <UNPREDICTABLE>
    3120:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    3124:	49414659 	stmdbmi	r1, {r0, r3, r4, r6, r9, sl, lr}^
    3128:	5f445f4c 	svcpl	0x00445f4c
    312c:	4554554f 	ldrbmi	r5, [r4, #-1359]	; 0xfffffab1
    3130:	72740052 	rsbsvc	r0, r4, #82	; 0x52
    3134:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    3138:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    313c:	61006570 	tstvs	r0, r0, ror r5
    3140:	6e696666 	cdpvs	6, 6, cr6, cr9, cr6, {3}
    3144:	00797469 	rsbseq	r7, r9, r9, ror #8
    3148:	5f544c41 	svcpl	0x00544c41
    314c:	5f544e49 	svcpl	0x00544e49
    3150:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3154:	50555252 	subspl	r5, r5, r2, asr r2
    3158:	50435f54 	subpl	r5, r3, r4, asr pc
    315c:	505f3155 	subspl	r3, pc, r5, asr r1	; <UNPREDICTABLE>
    3160:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    3164:	49414659 	stmdbmi	r1, {r0, r3, r4, r6, r9, sl, lr}^
    3168:	5f495f4c 	svcpl	0x00495f4c
    316c:	41544144 	cmpmi	r4, r4, asr #2
    3170:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3174:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3178:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    317c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3180:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    3184:	5f315550 	svcpl	0x00315550
    3188:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    318c:	41465954 	cmpmi	r6, r4, asr r9
    3190:	545f4c49 	ldrbpl	r4, [pc], #-3145	; 3198 <__cs3_region_zero_size_ram+0x1750>
    3194:	6100424c 	tstvs	r0, ip, asr #4
    3198:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    319c:	645f746e 	ldrbvs	r7, [pc], #-1134	; 31a4 <__cs3_region_zero_size_ram+0x175c>
    31a0:	5f747369 	svcpl	0x00747369
    31a4:	61736964 	cmnvs	r3, r4, ror #18
    31a8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    31ac:	5f544c41 	svcpl	0x00544c41
    31b0:	5f544e49 	svcpl	0x00544e49
    31b4:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    31b8:	50555252 	subspl	r5, r5, r2, asr r2
    31bc:	50435f54 	subpl	r5, r3, r4, asr pc
    31c0:	505f3055 	subspl	r3, pc, r5, asr r0	; <UNPREDICTABLE>
    31c4:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    31c8:	49414659 	stmdbmi	r1, {r0, r3, r4, r6, r9, sl, lr}^
    31cc:	5f495f4c 	svcpl	0x00495f4c
    31d0:	00474154 	subeq	r4, r7, r4, asr r1
    31d4:	5f746c61 	svcpl	0x00746c61
    31d8:	5f746e69 	svcpl	0x00746e69
    31dc:	5f757063 	svcpl	0x00757063
    31e0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    31e4:	6100656c 	tstvs	r0, ip, ror #10
    31e8:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    31ec:	645f746e 	ldrbvs	r7, [pc], #-1134	; 31f4 <__cs3_region_zero_size_ram+0x17ac>
    31f0:	5f747369 	svcpl	0x00747369
    31f4:	705f7369 	subsvc	r7, pc, r9, ror #6
    31f8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    31fc:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
    3200:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3204:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3208:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    320c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3210:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3214:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3218:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    321c:	4c5f5450 	cfldrdmi	mvd5, [pc], {80}	; 0x50
    3220:	43455f32 	movtmi	r5, #24370	; 0x5f32
    3224:	4e555f43 	cdpmi	15, 5, cr5, cr5, cr3, {2}
    3228:	52524f43 	subspl	r4, r2, #268	; 0x10c
    322c:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    3230:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    3234:	6c610051 	stclvs	0, cr0, [r1], #-324	; 0xfffffebc
    3238:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    323c:	70635f74 	rsbvc	r5, r3, r4, ror pc
    3240:	6e655f75 	mcrvs	15, 3, r5, cr5, cr5, {3}
    3244:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3248:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    324c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3250:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    3254:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    3258:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    325c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3260:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3264:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3268:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    326c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3270:	455f5450 	ldrbmi	r5, [pc, #-1104]	; 2e28 <__cs3_region_zero_size_ram+0x13e0>
    3274:	3043414d 	subcc	r4, r3, sp, asr #2
    3278:	5152495f 	cmppl	r2, pc, asr r9
    327c:	64636900 	strbtvs	r6, [r3], #-2304	; 0xfffff700
    3280:	72746369 	rsbsvc	r6, r4, #-1543503871	; 0xa4000001
    3284:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3288:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    328c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3290:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3294:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    3298:	5f305550 	svcpl	0x00305550
    329c:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    32a0:	41465954 	cmpmi	r6, r4, asr r9
    32a4:	61004c49 	tstvs	r0, r9, asr #24
    32a8:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    32ac:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    32b0:	625f7570 	subsvs	r7, pc, #112, 10	; 0x1c000000
    32b4:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    32b8:	6f705f79 	svcvs	0x00705f79
    32bc:	5f746e69 	svcpl	0x00746e69
    32c0:	00746567 	rsbseq	r6, r4, r7, ror #10
    32c4:	5f746c61 	svcpl	0x00746c61
    32c8:	5f746e69 	svcpl	0x00746e69
    32cc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    32d0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    32d4:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    32d8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    32dc:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    32e0:	745f7473 	ldrbvc	r7, [pc], #-1139	; 32e8 <__cs3_region_zero_size_ram+0x18a0>
    32e4:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    32e8:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
    32ec:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    32f0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    32f4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    32f8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    32fc:	5f545055 	svcpl	0x00545055
    3300:	4f495047 	svcmi	0x00495047
    3304:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    3308:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    330c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3310:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3314:	5f545055 	svcpl	0x00545055
    3318:	4f495047 	svcmi	0x00495047
    331c:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    3320:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3324:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3328:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    332c:	5f545055 	svcpl	0x00545055
    3330:	4f495047 	svcmi	0x00495047
    3334:	4c410032 	mcrrmi	0, 3, r0, r1, cr2
    3338:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    333c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3340:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3344:	5f545055 	svcpl	0x00545055
    3348:	304e4143 	subcc	r4, lr, r3, asr #2
    334c:	5354535f 	cmppl	r4, #2080374785	; 0x7c000001
    3350:	5152495f 	cmppl	r2, pc, asr r9
    3354:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3358:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    335c:	6f6c675f 	svcvs	0x006c675f
    3360:	5f6c6162 	svcpl	0x006c6162
    3364:	61736964 	cmnvs	r3, r4, ror #18
    3368:	5f656c62 	svcpl	0x00656c62
    336c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    3370:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    3374:	006e7270 	rsbeq	r7, lr, r0, ror r2
    3378:	5f544c41 	svcpl	0x00544c41
    337c:	5f544e49 	svcpl	0x00544e49
    3380:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3384:	50555252 	subspl	r5, r5, r2, asr r2
    3388:	4d455f54 	stclmi	15, cr5, [r5, #-336]	; 0xfffffeb0
    338c:	5f304341 	svcpl	0x00304341
    3390:	455f5854 	ldrbmi	r5, [pc, #-2132]	; 2b44 <__cs3_region_zero_size_ram+0x10fc>
    3394:	555f4343 	ldrbpl	r4, [pc, #-835]	; 3059 <__cs3_region_zero_size_ram+0x1611>
    3398:	524f434e 	subpl	r4, pc, #939524097	; 0x38000001
    339c:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    33a0:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    33a4:	61005152 	tstvs	r0, r2, asr r1
    33a8:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    33ac:	645f746e 	ldrbvs	r7, [pc], #-1134	; 33b4 <__cs3_region_zero_size_ram+0x196c>
    33b0:	5f747369 	svcpl	0x00747369
    33b4:	735f7369 	cmpvc	pc, #-1543503871	; 0xa4000001
    33b8:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    33bc:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    33c0:	5f776f6c 	svcpl	0x00776f6c
    33c4:	75636573 	strbvc	r6, [r3, #-1395]!	; 0xfffffa8d
    33c8:	615f6572 	cmpvs	pc, r2, ror r5	; <UNPREDICTABLE>
    33cc:	615f6b63 	cmpvs	pc, r3, ror #22
    33d0:	695f6c6c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    33d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    33d8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    33dc:	4c410073 	mcrrmi	0, 7, r0, r1, cr3
    33e0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    33e4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    33e8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    33ec:	5f545055 	svcpl	0x00545055
    33f0:	30555043 	subscc	r5, r5, r3, asr #32
    33f4:	5241505f 	subpl	r5, r1, #95	; 0x5f
    33f8:	46595449 	ldrbmi	r5, [r9], -r9, asr #8
    33fc:	5f4c4941 	svcpl	0x004c4941
    3400:	41445f44 	cmpmi	r4, r4, asr #30
    3404:	73004154 	movwvc	r4, #340	; 0x154
    3408:	6d747461 	cfldrdvs	mvd7, [r4, #-388]!	; 0xfffffe7c
    340c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    3410:	5f746c61 	svcpl	0x00746c61
    3414:	5f746e69 	svcpl	0x00746e69
    3418:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    341c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    3420:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    3424:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3428:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    342c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3430:	5f545055 	svcpl	0x00545055
    3434:	4954434e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, r9, lr}^
    3438:	30515249 	subscc	r5, r1, r9, asr #4
    343c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3440:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3444:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3448:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    344c:	495f5450 	ldmdbmi	pc, {r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3450:	5f314332 	svcpl	0x00314332
    3454:	00515249 	subseq	r5, r1, r9, asr #4
    3458:	5f544c41 	svcpl	0x00544c41
    345c:	5f544e49 	svcpl	0x00544e49
    3460:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3464:	50555252 	subspl	r5, r5, r2, asr r2
    3468:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    346c:	50465f53 	subpl	r5, r6, r3, asr pc
    3470:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    3474:	30335152 	eorscc	r5, r3, r2, asr r1
    3478:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
    347c:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
    3480:	61007465 	tstvs	r0, r5, ror #8
    3484:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3488:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    348c:	745f7570 	ldrbvc	r7, [pc], #-1392	; 3494 <__cs3_region_zero_size_ram+0x1a4c>
    3490:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3494:	00745f74 	rsbseq	r5, r4, r4, ror pc
    3498:	5f746c61 	svcpl	0x00746c61
    349c:	5f746e69 	svcpl	0x00746e69
    34a0:	5f757063 	svcpl	0x00757063
    34a4:	6f697270 	svcvs	0x00697270
    34a8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    34ac:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
    34b0:	65735f6b 	ldrbvs	r5, [r3, #-3947]!	; 0xfffff095
    34b4:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    34b8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    34bc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    34c0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    34c4:	5f545055 	svcpl	0x00545055
    34c8:	314e4143 	cmpcc	lr, r3, asr #2
    34cc:	4343455f 	movtmi	r4, #13663	; 0x355f
    34d0:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
    34d4:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    34d8:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    34dc:	61005152 	tstvs	r0, r2, asr r1
    34e0:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    34e4:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    34e8:	61626f6c 	cmnvs	r2, ip, ror #30
    34ec:	69645f6c 	stmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    34f0:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    34f4:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    34f8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    34fc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3500:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3504:	5f545055 	svcpl	0x00545055
    3508:	455f324c 	ldrbmi	r3, [pc, #-588]	; 32c4 <__cs3_region_zero_size_ram+0x187c>
    350c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    3510:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    3514:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    3518:	5152495f 	cmppl	r2, pc, asr r9
    351c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3520:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3524:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3528:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    352c:	455f5450 	ldrbmi	r5, [pc, #-1104]	; 30e4 <__cs3_region_zero_size_ram+0x169c>
    3530:	3043414d 	subcc	r4, r3, sp, asr #2
    3534:	5f58525f 	svcpl	0x0058525f
    3538:	5f434345 	svcpl	0x00434345
    353c:	4f434e55 	svcmi	0x00434e55
    3540:	43455252 	movtmi	r5, #21074	; 0x5252
    3544:	5f444554 	svcpl	0x00444554
    3548:	00515249 	subseq	r5, r1, r9, asr #4
    354c:	67726174 			; <UNDEFINED> instruction: 0x67726174
    3550:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    3554:	00747369 	rsbseq	r7, r4, r9, ror #6
    3558:	5f544c41 	svcpl	0x00544c41
    355c:	5f544e49 	svcpl	0x00544e49
    3560:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3564:	50555252 	subspl	r5, r5, r2, asr r2
    3568:	504d5f54 	subpl	r5, sp, r4, asr pc
    356c:	4b415755 	blmi	10592c8 <__cs3_heap_start+0xf3fc28>
    3570:	5f505545 	svcpl	0x00505545
    3574:	00515249 	subseq	r5, r1, r9, asr #4
    3578:	5f746c61 	svcpl	0x00746c61
    357c:	5f746e69 	svcpl	0x00746e69
    3580:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    3584:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    3588:	5f657275 	svcpl	0x00657275
    358c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    3590:	6100656c 	tstvs	r0, ip, ror #10
    3594:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3598:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
    359c:	6b636174 	blvs	18dbb74 <__cs3_heap_start+0x17c24d4>
    35a0:	7172695f 	cmnvc	r2, pc, asr r9
    35a4:	6f6c625f 	svcvs	0x006c625f
    35a8:	41006b63 	tstmi	r0, r3, ror #22
    35ac:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    35b0:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    35b4:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    35b8:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    35bc:	5053515f 	subspl	r5, r3, pc, asr r1
    35c0:	43455f49 	movtmi	r5, #24393	; 0x5f49
    35c4:	4e555f43 	cdpmi	15, 5, cr5, cr5, cr3, {2}
    35c8:	52524f43 	subspl	r4, r2, #268	; 0x10c
    35cc:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    35d0:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    35d4:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    35d8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    35dc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    35e0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    35e4:	5f545055 	svcpl	0x00545055
    35e8:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
    35ec:	534f5f52 	movtpl	r5, #65362	; 0xff52
    35f0:	315f3143 	cmpcc	pc, r3, asr #2
    35f4:	5152495f 	cmppl	r2, pc, asr r9
    35f8:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
    35fc:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    3600:	616d5f79 	smcvs	54777	; 0xd5f9
    3604:	61006b73 	tstvs	r0, r3, ror fp
    3608:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    360c:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    3610:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3614:	7570635f 	ldrbvc	r6, [r0, #-863]!	; 0xfffffca1
    3618:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    361c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3620:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3624:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3628:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    362c:	5f305550 	svcpl	0x00305550
    3630:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    3634:	41465954 	cmpmi	r6, r4, asr r9
    3638:	495f4c49 	ldmdbmi	pc, {r0, r3, r6, sl, fp, lr}^	; <UNPREDICTABLE>
    363c:	5441445f 	strbpl	r4, [r1], #-1119	; 0xfffffba1
    3640:	63690041 	cmnvs	r9, #65	; 0x41
    3644:	65736964 	ldrbvs	r6, [r3, #-2404]!	; 0xfffff69c
    3648:	41006e72 	tstmi	r0, r2, ror lr
    364c:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3650:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3654:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3658:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    365c:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    3660:	455f4544 	ldrbmi	r4, [pc, #-1348]	; 3124 <__cs3_region_zero_size_ram+0x16dc>
    3664:	555f4343 	ldrbpl	r4, [pc, #-835]	; 3329 <__cs3_region_zero_size_ram+0x18e1>
    3668:	524f434e 	subpl	r4, pc, #939524097	; 0x38000001
    366c:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    3670:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    3674:	41005152 	tstmi	r0, r2, asr r1
    3678:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    367c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3680:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3684:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3688:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    368c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3690:	52495f41 	subpl	r5, r9, #260	; 0x104
    3694:	41003051 	qaddmi	r3, r1, r0
    3698:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    369c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    36a0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    36a4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    36a8:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    36ac:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    36b0:	52495f41 	subpl	r5, r9, #260	; 0x104
    36b4:	41003151 	tstmi	r0, r1, asr r1
    36b8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    36bc:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    36c0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    36c4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    36c8:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    36cc:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    36d0:	52495f41 	subpl	r5, r9, #260	; 0x104
    36d4:	41003251 	tstmi	r0, r1, asr r2
    36d8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    36dc:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    36e0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    36e4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    36e8:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    36ec:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    36f0:	52495f41 	subpl	r5, r9, #260	; 0x104
    36f4:	41003351 	tstmi	r0, r1, asr r3
    36f8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    36fc:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3700:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3704:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3708:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    370c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3710:	52495f41 	subpl	r5, r9, #260	; 0x104
    3714:	41003451 	tstmi	r0, r1, asr r4
    3718:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    371c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3720:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3724:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3728:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    372c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3730:	52495f41 	subpl	r5, r9, #260	; 0x104
    3734:	41003551 	tstmi	r0, r1, asr r5
    3738:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    373c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3740:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3744:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3748:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    374c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3750:	52495f41 	subpl	r5, r9, #260	; 0x104
    3754:	41003651 	tstmi	r0, r1, asr r6
    3758:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    375c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3760:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3764:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3768:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    376c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3770:	52495f41 	subpl	r5, r9, #260	; 0x104
    3774:	41003751 	tstmi	r0, r1, asr r7
    3778:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    377c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3780:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3784:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3788:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    378c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3790:	52495f41 	subpl	r5, r9, #260	; 0x104
    3794:	41003851 	tstmi	r0, r1, asr r8
    3798:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    379c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    37a0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    37a4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    37a8:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    37ac:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    37b0:	52495f41 	subpl	r5, r9, #260	; 0x104
    37b4:	61003951 	tstvs	r0, r1, asr r9
    37b8:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    37bc:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 3356 <__cs3_region_zero_size_ram+0x190e>
    37c0:	5f6c6974 	svcpl	0x006c6974
    37c4:	5f746e69 	svcpl	0x00746e69
    37c8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    37cc:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    37d0:	5f6b6361 	svcpl	0x006b6361
    37d4:	00717269 	rsbseq	r7, r1, r9, ror #4
    37d8:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    37dc:	00727470 	rsbseq	r7, r2, r0, ror r4
    37e0:	5f544c41 	svcpl	0x00544c41
    37e4:	5f544e49 	svcpl	0x00544e49
    37e8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    37ec:	50555252 	subspl	r5, r5, r2, asr r2
    37f0:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    37f4:	50465f53 	subpl	r5, r6, r3, asr pc
    37f8:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    37fc:	30315152 	eorscc	r5, r1, r2, asr r1
    3800:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3804:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3808:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    380c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3810:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    3814:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3818:	5f414750 	svcpl	0x00414750
    381c:	31515249 	cmpcc	r1, r9, asr #4
    3820:	4c410031 	mcrrmi	0, 3, r0, r1, cr1
    3824:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3828:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    382c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3830:	5f545055 	svcpl	0x00545055
    3834:	5f533246 	svcpl	0x00533246
    3838:	41475046 	cmpmi	r7, r6, asr #32
    383c:	5152495f 	cmppl	r2, pc, asr r9
    3840:	41003231 	tstmi	r0, r1, lsr r2
    3844:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3848:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    384c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3850:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3854:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3858:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    385c:	52495f41 	subpl	r5, r9, #260	; 0x104
    3860:	00333151 	eorseq	r3, r3, r1, asr r1
    3864:	5f544c41 	svcpl	0x00544c41
    3868:	5f544e49 	svcpl	0x00544e49
    386c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3870:	50555252 	subspl	r5, r5, r2, asr r2
    3874:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    3878:	50465f53 	subpl	r5, r6, r3, asr pc
    387c:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    3880:	34315152 	ldrtcc	r5, [r1], #-338	; 0xfffffeae
    3884:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3888:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    388c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3890:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3894:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    3898:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    389c:	5f414750 	svcpl	0x00414750
    38a0:	31515249 	cmpcc	r1, r9, asr #4
    38a4:	4c410035 	mcrrmi	0, 3, r0, r1, cr5
    38a8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    38ac:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    38b0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    38b4:	5f545055 	svcpl	0x00545055
    38b8:	5f533246 	svcpl	0x00533246
    38bc:	41475046 	cmpmi	r7, r6, asr #32
    38c0:	5152495f 	cmppl	r2, pc, asr r9
    38c4:	41003731 	tstmi	r0, r1, lsr r7
    38c8:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    38cc:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    38d0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    38d4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    38d8:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    38dc:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    38e0:	52495f41 	subpl	r5, r9, #260	; 0x104
    38e4:	00383151 	eorseq	r3, r8, r1, asr r1
    38e8:	5f544c41 	svcpl	0x00544c41
    38ec:	5f544e49 	svcpl	0x00544e49
    38f0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    38f4:	50555252 	subspl	r5, r5, r2, asr r2
    38f8:	50435f54 	subpl	r5, r3, r4, asr pc
    38fc:	505f3055 	subspl	r3, pc, r5, asr r0	; <UNPREDICTABLE>
    3900:	54495241 	strbpl	r5, [r9], #-577	; 0xfffffdbf
    3904:	49414659 	stmdbmi	r1, {r0, r3, r4, r6, r9, sl, lr}^
    3908:	54425f4c 	strbpl	r5, [r2], #-3916	; 0xfffff0b4
    390c:	41004341 	tstmi	r0, r1, asr #6
    3910:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3914:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3918:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    391c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3920:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3924:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3928:	52495f41 	subpl	r5, r9, #260	; 0x104
    392c:	00313351 	eorseq	r3, r1, r1, asr r3
    3930:	5f746c61 	svcpl	0x00746c61
    3934:	5f746e69 	svcpl	0x00746e69
    3938:	5f757063 	svcpl	0x00757063
    393c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    3940:	675f6769 	ldrbvs	r6, [pc, -r9, ror #14]
    3944:	41007465 	tstmi	r0, r5, ror #8
    3948:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    394c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3950:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3954:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3958:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    395c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3960:	52495f41 	subpl	r5, r9, #260	; 0x104
    3964:	00323351 	eorseq	r3, r2, r1, asr r3
    3968:	5f746c61 	svcpl	0x00746c61
    396c:	5f746e69 	svcpl	0x00746e69
    3970:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
    3974:	5f73695f 	svcpl	0x0073695f
    3978:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    397c:	41006576 	tstmi	r0, r6, ror r5
    3980:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3984:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3988:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    398c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3990:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
    3994:	4f4d5f30 	svcmi	0x004d5f30
    3998:	5152495f 	cmppl	r2, pc, asr r9
    399c:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
    39a0:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    39a4:	5f657275 	svcpl	0x00657275
    39a8:	616e6962 	cmnvs	lr, r2, ror #18
    39ac:	705f7972 	subsvc	r7, pc, r2, ror r9	; <UNPREDICTABLE>
    39b0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    39b4:	63657600 	cmnvs	r5, #0, 12
    39b8:	5f726f74 	svcpl	0x00726f74
    39bc:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    39c0:	4c410065 	mcrrmi	0, 6, r0, r1, cr5
    39c4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    39c8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    39cc:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    39d0:	5f545055 	svcpl	0x00545055
    39d4:	31425355 	cmpcc	r2, r5, asr r3
    39d8:	5152495f 	cmppl	r2, pc, asr r9
    39dc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    39e0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    39e4:	7273695f 	rsbsvc	r6, r3, #1556480	; 0x17c000
    39e8:	726e755f 	rsbvc	r7, lr, #398458880	; 0x17c00000
    39ec:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    39f0:	00726574 	rsbseq	r6, r2, r4, ror r5
    39f4:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    39f8:	6e726663 	cdpvs	6, 7, cr6, cr2, cr3, {3}
    39fc:	64636900 	strbtvs	r6, [r3], #-2304	; 0xfffff700
    3a00:	6e727369 	cdpvs	3, 7, cr7, cr2, cr9, {3}
    3a04:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3a08:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3a0c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3a10:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3a14:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    3a18:	5f304e41 	svcpl	0x00304e41
    3a1c:	5f434345 	svcpl	0x00434345
    3a20:	52524f43 	subspl	r4, r2, #268	; 0x10c
    3a24:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
    3a28:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    3a2c:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    3a30:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3a34:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3a38:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3a3c:	5f545055 	svcpl	0x00545055
    3a40:	5f533246 	svcpl	0x00533246
    3a44:	41475046 	cmpmi	r7, r6, asr #32
    3a48:	5152495f 	cmppl	r2, pc, asr r9
    3a4c:	41003032 	tstmi	r0, r2, lsr r0
    3a50:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3a54:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3a58:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3a5c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3a60:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3a64:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3a68:	52495f41 	subpl	r5, r9, #260	; 0x104
    3a6c:	00313251 	eorseq	r3, r1, r1, asr r2
    3a70:	5f544c41 	svcpl	0x00544c41
    3a74:	5f544e49 	svcpl	0x00544e49
    3a78:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3a7c:	50555252 	subspl	r5, r5, r2, asr r2
    3a80:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    3a84:	50465f53 	subpl	r5, r6, r3, asr pc
    3a88:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    3a8c:	32325152 	eorscc	r5, r2, #-2147483628	; 0x80000014
    3a90:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3a94:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3a98:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3a9c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3aa0:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    3aa4:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3aa8:	5f414750 	svcpl	0x00414750
    3aac:	32515249 	subscc	r5, r1, #-1879048188	; 0x90000004
    3ab0:	4c410033 	mcrrmi	0, 3, r0, r1, cr3
    3ab4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3ab8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3abc:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3ac0:	5f545055 	svcpl	0x00545055
    3ac4:	5f533246 	svcpl	0x00533246
    3ac8:	41475046 	cmpmi	r7, r6, asr #32
    3acc:	5152495f 	cmppl	r2, pc, asr r9
    3ad0:	41003432 	tstmi	r0, r2, lsr r4
    3ad4:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3ad8:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3adc:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3ae0:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3ae4:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3ae8:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3aec:	52495f41 	subpl	r5, r9, #260	; 0x104
    3af0:	00353251 	eorseq	r3, r5, r1, asr r2
    3af4:	5f544c41 	svcpl	0x00544c41
    3af8:	5f544e49 	svcpl	0x00544e49
    3afc:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3b00:	50555252 	subspl	r5, r5, r2, asr r2
    3b04:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    3b08:	50465f53 	subpl	r5, r6, r3, asr pc
    3b0c:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    3b10:	36325152 			; <UNDEFINED> instruction: 0x36325152
    3b14:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3b18:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3b1c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3b20:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3b24:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    3b28:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3b2c:	5f414750 	svcpl	0x00414750
    3b30:	32515249 	subscc	r5, r1, #-1879048188	; 0x90000004
    3b34:	4c410037 	mcrrmi	0, 3, r0, r1, cr7
    3b38:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3b3c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3b40:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3b44:	5f545055 	svcpl	0x00545055
    3b48:	5f533246 	svcpl	0x00533246
    3b4c:	41475046 	cmpmi	r7, r6, asr #32
    3b50:	5152495f 	cmppl	r2, pc, asr r9
    3b54:	41003832 	tstmi	r0, r2, lsr r8
    3b58:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3b5c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3b60:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3b64:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3b68:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3b6c:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3b70:	52495f41 	subpl	r5, r9, #260	; 0x104
    3b74:	00393251 	eorseq	r3, r9, r1, asr r2
    3b78:	5f746c61 	svcpl	0x00746c61
    3b7c:	5f746e69 	svcpl	0x00746e69
    3b80:	5f757063 	svcpl	0x00757063
    3b84:	6f697270 	svcvs	0x00697270
    3b88:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3b8c:	73616d5f 	cmnvc	r1, #6080	; 0x17c0
    3b90:	65675f6b 	strbvs	r5, [r7, #-3947]!	; 0xfffff095
    3b94:	4c410074 	mcrrmi	0, 7, r0, r1, cr4
    3b98:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3b9c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3ba0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3ba4:	5f545055 	svcpl	0x00545055
    3ba8:	30425355 	subcc	r5, r2, r5, asr r3
    3bac:	4343455f 	movtmi	r4, #13663	; 0x355f
    3bb0:	434e555f 	movtmi	r5, #58719	; 0xe55f
    3bb4:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    3bb8:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    3bbc:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3bc0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    3bc4:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    3bc8:	70635f65 	rsbvc	r5, r3, r5, ror #30
    3bcc:	4c410075 	mcrrmi	0, 7, r0, r1, cr5
    3bd0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3bd4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3bd8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3bdc:	5f545055 	svcpl	0x00545055
    3be0:	444e414e 	strbmi	r4, [lr], #-334	; 0xfffffeb2
    3be4:	5152495f 	cmppl	r2, pc, asr r9
    3be8:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3bec:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3bf0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3bf4:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3bf8:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    3bfc:	5f305550 	svcpl	0x00305550
    3c00:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    3c04:	41465954 	cmpmi	r6, r4, asr r9
    3c08:	475f4c49 	ldrbmi	r4, [pc, -r9, asr #24]
    3c0c:	61004248 	tstvs	r0, r8, asr #4
    3c10:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3c14:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    3c18:	645f7570 	ldrbvs	r7, [pc], #-1392	; 3c20 <__cs3_region_zero_size_ram+0x21d8>
    3c1c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    3c20:	6100656c 	tstvs	r0, ip, ror #10
    3c24:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3c28:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    3c2c:	61626f6c 	cmnvs	r2, ip, ror #30
    3c30:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
    3c34:	61007469 	tstvs	r0, r9, ror #8
    3c38:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3c3c:	645f746e 	ldrbvs	r7, [pc], #-1134	; 3c44 <__cs3_region_zero_size_ram+0x21fc>
    3c40:	5f747369 	svcpl	0x00747369
    3c44:	655f7369 	ldrbvs	r7, [pc, #-873]	; 38e3 <__cs3_region_zero_size_ram+0x1e9b>
    3c48:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3c4c:	41006465 	tstmi	r0, r5, ror #8
    3c50:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3c54:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3c58:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3c5c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3c60:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3c64:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3c68:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3c6c:	41003053 	qaddmi	r3, r3, r0
    3c70:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3c74:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3c78:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3c7c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3c80:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3c84:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3c88:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3c8c:	41003153 	tstmi	r0, r3, asr r1
    3c90:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3c94:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3c98:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3c9c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3ca0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3ca4:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3ca8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3cac:	41003253 	tstmi	r0, r3, asr r2
    3cb0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3cb4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3cb8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3cbc:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3cc0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3cc4:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3cc8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3ccc:	41003353 	tstmi	r0, r3, asr r3
    3cd0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3cd4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3cd8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3cdc:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3ce0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3ce4:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3ce8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3cec:	41003453 	tstmi	r0, r3, asr r4
    3cf0:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3cf4:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3cf8:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3cfc:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3d00:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3d04:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3d08:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3d0c:	41003553 	tstmi	r0, r3, asr r5
    3d10:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d14:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d18:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3d1c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3d20:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    3d24:	45445f30 	strbmi	r5, [r4, #-3888]	; 0xfffff0d0
    3d28:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3d2c:	41003653 	tstmi	r0, r3, asr r6
    3d30:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d34:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d38:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3d3c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3d40:	5543535f 	strbpl	r5, [r3, #-863]	; 0xfffffca1
    3d44:	5f56455f 	svcpl	0x0056455f
    3d48:	524f4241 	subpl	r4, pc, #268435460	; 0x10000004
    3d4c:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    3d50:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3d54:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3d58:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3d5c:	5f545055 	svcpl	0x00545055
    3d60:	5f533246 	svcpl	0x00533246
    3d64:	41475046 	cmpmi	r7, r6, asr #32
    3d68:	5152495f 	cmppl	r2, pc, asr r9
    3d6c:	41003333 	tstmi	r0, r3, lsr r3
    3d70:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d74:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d78:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3d7c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3d80:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3d84:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3d88:	52495f41 	subpl	r5, r9, #260	; 0x104
    3d8c:	00343351 	eorseq	r3, r4, r1, asr r3
    3d90:	5f544c41 	svcpl	0x00544c41
    3d94:	5f544e49 	svcpl	0x00544e49
    3d98:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3d9c:	50555252 	subspl	r5, r5, r2, asr r2
    3da0:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    3da4:	50465f53 	subpl	r5, r6, r3, asr pc
    3da8:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    3dac:	35335152 	ldrcc	r5, [r3, #-338]!	; 0xfffffeae
    3db0:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3db4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3db8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3dbc:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3dc0:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    3dc4:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3dc8:	5f414750 	svcpl	0x00414750
    3dcc:	33515249 	cmpcc	r1, #-1879048188	; 0x90000004
    3dd0:	4c410036 	mcrrmi	0, 3, r0, r1, cr6
    3dd4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3dd8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3ddc:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3de0:	5f545055 	svcpl	0x00545055
    3de4:	5f533246 	svcpl	0x00533246
    3de8:	41475046 	cmpmi	r7, r6, asr #32
    3dec:	5152495f 	cmppl	r2, pc, asr r9
    3df0:	41003733 	tstmi	r0, r3, lsr r7
    3df4:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3df8:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3dfc:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3e00:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3e04:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    3e08:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    3e0c:	52495f41 	subpl	r5, r9, #260	; 0x104
    3e10:	00383351 	eorseq	r3, r8, r1, asr r3
    3e14:	5f544c41 	svcpl	0x00544c41
    3e18:	5f544e49 	svcpl	0x00544e49
    3e1c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    3e20:	50555252 	subspl	r5, r5, r2, asr r2
    3e24:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    3e28:	50465f53 	subpl	r5, r6, r3, asr pc
    3e2c:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    3e30:	39335152 	ldmdbcc	r3!, {r1, r4, r6, r8, ip, lr}
    3e34:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3e38:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3e3c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3e40:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3e44:	535f5450 	cmppl	pc, #80, 8	; 0x50000000
    3e48:	434d4d44 	movtmi	r4, #56644	; 0xdd44
    3e4c:	524f505f 	subpl	r5, pc, #95	; 0x5f
    3e50:	455f4154 	ldrbmi	r4, [pc, #-340]	; 3d04 <__cs3_region_zero_size_ram+0x22bc>
    3e54:	555f4343 	ldrbpl	r4, [pc, #-835]	; 3b19 <__cs3_region_zero_size_ram+0x20d1>
    3e58:	524f434e 	subpl	r4, pc, #939524097	; 0x38000001
    3e5c:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
    3e60:	61004445 	tstvs	r0, r5, asr #8
    3e64:	695f746c 	ldmdbvs	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3e68:	675f746e 	ldrbvs	r7, [pc, -lr, ror #8]
    3e6c:	61626f6c 	cmnvs	r2, ip, ror #30
    3e70:	69645f6c 	stmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e74:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    3e78:	736e5f65 	cmnvc	lr, #404	; 0x194
    3e7c:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3e80:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3e84:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3e88:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3e8c:	435f5450 	cmpmi	pc, #80, 8	; 0x50000000
    3e90:	5f314e41 	svcpl	0x00314e41
    3e94:	5f535453 	svcpl	0x00535453
    3e98:	00515249 	subseq	r5, r1, r9, asr #4
    3e9c:	5f746e69 	svcpl	0x00746e69
    3ea0:	41006469 	tstmi	r0, r9, ror #8
    3ea4:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3ea8:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    3eac:	545f4947 	ldrbpl	r4, [pc], #-2375	; 3eb4 <__cs3_region_zero_size_ram+0x246c>
    3eb0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    3eb4:	45535f54 	ldrbmi	r5, [r3, #-3924]	; 0xfffff0ac
    3eb8:	5245444e 	subpl	r4, r5, #1308622848	; 0x4e000000
    3ebc:	4c4e4f5f 	mcrrmi	15, 5, r4, lr, cr15
    3ec0:	63690059 	cmnvs	r9, #89	; 0x59
    3ec4:	70626163 	rsbvc	r6, r2, r3, ror #2
    3ec8:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    3ecc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3ed0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3ed4:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3ed8:	5f545055 	svcpl	0x00545055
    3edc:	33495053 	movtcc	r5, #36947	; 0x9053
    3ee0:	5152495f 	cmppl	r2, pc, asr r9
    3ee4:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3ee8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    3eec:	616c665f 	cmnvs	ip, pc, asr r6
    3ef0:	4c410067 	mcrrmi	0, 6, r0, r1, cr7
    3ef4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3ef8:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3efc:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3f00:	5f545055 	svcpl	0x00545055
    3f04:	31555043 	cmpcc	r5, r3, asr #32
    3f08:	5241505f 	subpl	r5, r1, #95	; 0x5f
    3f0c:	46595449 	ldrbmi	r5, [r9], -r9, asr #8
    3f10:	004c4941 	subeq	r4, ip, r1, asr #18
    3f14:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
    3f18:	69627265 	stmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3f1c:	41007374 	tstmi	r0, r4, ror r3
    3f20:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3f24:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3f28:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3f2c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3f30:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    3f34:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    3f38:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    3f3c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3f40:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3f44:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3f48:	5f545055 	svcpl	0x00545055
    3f4c:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
    3f50:	495f5247 	ldmdbmi	pc, {r0, r1, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    3f54:	41005152 	tstmi	r0, r2, asr r1
    3f58:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3f5c:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3f60:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    3f64:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    3f68:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    3f6c:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    3f70:	4c410051 	mcrrmi	0, 5, r0, r1, cr1
    3f74:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3f78:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3f7c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3f80:	5f545055 	svcpl	0x00545055
    3f84:	5f414d44 	svcpl	0x00414d44
    3f88:	5f515249 	svcpl	0x00515249
    3f8c:	524f4241 	subpl	r4, pc, #268435460	; 0x10000004
    3f90:	4c410054 	mcrrmi	0, 5, r0, r1, cr4
    3f94:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3f98:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3f9c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3fa0:	5f545055 	svcpl	0x00545055
    3fa4:	314e4143 	cmpcc	lr, r3, asr #2
    3fa8:	4343455f 	movtmi	r4, #13663	; 0x355f
    3fac:	434e555f 	movtmi	r5, #58719	; 0xe55f
    3fb0:	4552524f 	ldrbmi	r5, [r2, #-591]	; 0xfffffdb1
    3fb4:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    3fb8:	5152495f 	cmppl	r2, pc, asr r9
    3fbc:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    3fc0:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3fc4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    3fc8:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    3fcc:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    3fd0:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3fd4:	5f414750 	svcpl	0x00414750
    3fd8:	34515249 	ldrbcc	r5, [r1], #-585	; 0xfffffdb7
    3fdc:	4c410030 	mcrrmi	0, 3, r0, r1, cr0
    3fe0:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3fe4:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    3fe8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    3fec:	5f545055 	svcpl	0x00545055
    3ff0:	5f533246 	svcpl	0x00533246
    3ff4:	41475046 	cmpmi	r7, r6, asr #32
    3ff8:	5152495f 	cmppl	r2, pc, asr r9
    3ffc:	41003134 	tstmi	r0, r4, lsr r1
    4000:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    4004:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    4008:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    400c:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    4010:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    4014:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    4018:	52495f41 	subpl	r5, r9, #260	; 0x104
    401c:	00323451 	eorseq	r3, r2, r1, asr r4
    4020:	5f544c41 	svcpl	0x00544c41
    4024:	5f544e49 	svcpl	0x00544e49
    4028:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    402c:	50555252 	subspl	r5, r5, r2, asr r2
    4030:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    4034:	50465f53 	subpl	r5, r6, r3, asr pc
    4038:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    403c:	33345152 	teqcc	r4, #-2147483628	; 0x80000014
    4040:	544c4100 	strbpl	r4, [ip], #-256	; 0xffffff00
    4044:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    4048:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    404c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    4050:	465f5450 			; <UNDEFINED> instruction: 0x465f5450
    4054:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    4058:	5f414750 	svcpl	0x00414750
    405c:	34515249 	ldrbcc	r5, [r1], #-585	; 0xfffffdb7
    4060:	4c410034 	mcrrmi	0, 3, r0, r1, cr4
    4064:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    4068:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    406c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    4070:	5f545055 	svcpl	0x00545055
    4074:	5f533246 	svcpl	0x00533246
    4078:	41475046 	cmpmi	r7, r6, asr #32
    407c:	5152495f 	cmppl	r2, pc, asr r9
    4080:	41003534 	tstmi	r0, r4, lsr r5
    4084:	495f544c 	ldmdbmi	pc, {r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    4088:	495f544e 	ldmdbmi	pc, {r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    408c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    4090:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    4094:	5332465f 	teqpl	r2, #99614720	; 0x5f00000
    4098:	4750465f 			; <UNDEFINED> instruction: 0x4750465f
    409c:	52495f41 	subpl	r5, r9, #260	; 0x104
    40a0:	00363451 	eorseq	r3, r6, r1, asr r4
    40a4:	5f544c41 	svcpl	0x00544c41
    40a8:	5f544e49 	svcpl	0x00544e49
    40ac:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    40b0:	50555252 	subspl	r5, r5, r2, asr r2
    40b4:	32465f54 	subcc	r5, r6, #84, 30	; 0x150
    40b8:	50465f53 	subpl	r5, r6, r3, asr pc
    40bc:	495f4147 	ldmdbmi	pc, {r0, r1, r2, r6, r8, lr}^	; <UNPREDICTABLE>
    40c0:	37345152 			; <UNDEFINED> instruction: 0x37345152
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0000592c 	andeq	r5, r0, ip, lsr #18
   4:	000059b8 			; <UNDEFINED> instruction: 0x000059b8
   8:	000059bc 			; <UNDEFINED> instruction: 0x000059bc
   c:	000059c4 	andeq	r5, r0, r4, asr #19
	...
  18:	000059c8 	andeq	r5, r0, r8, asr #19
  1c:	00005b5c 	andeq	r5, r0, ip, asr fp
  20:	00005b60 	andeq	r5, r0, r0, ror #22
  24:	00005b68 	andeq	r5, r0, r8, ror #22
	...
  30:	00005b6c 	andeq	r5, r0, ip, ror #22
  34:	00005bf8 	strdeq	r5, [r0], -r8
  38:	00005bfc 	strdeq	r5, [r0], -ip
  3c:	00005c04 	andeq	r5, r0, r4, lsl #24
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__cs3_heap_start+0xfb7684>
   4:	6f532820 	svcvs	0x00532820
   8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
   c:	43207972 			; <UNDEFINED> instruction: 0x43207972
  10:	4265646f 	rsbmi	r6, r5, #1862270976	; 0x6f000000
  14:	68636e65 	stmdavs	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
  18:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
  1c:	30322065 	eorscc	r2, r2, r5, rrx
  20:	312e3531 			; <UNDEFINED> instruction: 0x312e3531
  24:	35342d31 	ldrcc	r2, [r4, #-3377]!	; 0xfffff2cf
  28:	2e352029 	cdpcs	0, 3, cr2, cr5, cr9, {1}
  2c:	00302e32 	eorseq	r2, r0, r2, lsr lr

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003841 	andeq	r3, r0, r1, asr #16
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000002e 	andeq	r0, r0, lr, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	06003941 	streq	r3, [r0], -r1, asr #18
  1c:	0841070a 	stmdaeq	r1, {r1, r3, r8, r9, sl}^
  20:	0a020901 	beq	8242c <__cs3_region_init_size_ram+0x6a7d4>
  24:	12010c03 	andne	r0, r1, #768	; 0x300
  28:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  2c:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  30:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  34:	44012a01 	strmi	r2, [r1], #-2561	; 0xfffff5ff
  38:	Address 0x00000038 is out of bounds.

